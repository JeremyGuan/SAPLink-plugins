<?xml version="1.0" encoding="utf-8"?>
<nugget name="ZXLWB_V.4.10">
 <FUGR AREA="ZXLWB" SPRAS="E" AREAT="XLSX Workbench">
  <functionGroupDocumentation/>
  <mainprogram NAME="SAPLZXLWB" VARCL="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" RMAND="001" RLOAD="E" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
   <textPool>
    <language SPRAS="D">
     <textElement ID="I" KEY="114" ENTRY="Edit" LENGTH="132 "/>
    </language>
    <language SPRAS="E">
     <textElement ID="I" KEY="001" ENTRY="Common messages" LENGTH="132 "/>
     <textElement ID="I" KEY="002" ENTRY="Messages" LENGTH="132 "/>
     <textElement ID="I" KEY="003" ENTRY="Components of the form" LENGTH="132 "/>
     <textElement ID="I" KEY="004" ENTRY="Specify valid name of the context" LENGTH="132 "/>
     <textElement ID="I" KEY="005" ENTRY="Requested node was not found in the structure" LENGTH="132 "/>
     <textElement ID="I" KEY="006" ENTRY="Relevant nodes of the context are not found" LENGTH="132 "/>
     <textElement ID="I" KEY="007" ENTRY="Sheets" LENGTH="132 "/>
     <textElement ID="I" KEY="008" ENTRY="Sheet" LENGTH="132 "/>
     <textElement ID="I" KEY="009" ENTRY="Loop" LENGTH="132 "/>
     <textElement ID="I" KEY="010" ENTRY="Pattern" LENGTH="132 "/>
     <textElement ID="I" KEY="011" ENTRY="Value" LENGTH="132 "/>
     <textElement ID="I" KEY="012" ENTRY="Folder" LENGTH="132 "/>
     <textElement ID="I" KEY="013" ENTRY="Specify a name of the form" LENGTH="132 "/>
     <textElement ID="I" KEY="014" ENTRY="A form already exists with the name" LENGTH="132 "/>
     <textElement ID="I" KEY="015" ENTRY="Form data is interupted" LENGTH="132 "/>
     <textElement ID="I" KEY="016" ENTRY="Form is not found" LENGTH="132 "/>
     <textElement ID="I" KEY="017" ENTRY="Form" LENGTH="132 "/>
     <textElement ID="I" KEY="018" ENTRY="is locked by the user" LENGTH="132 "/>
     <textElement ID="I" KEY="019" ENTRY="A name of the component is not unique" LENGTH="132 "/>
     <textElement ID="I" KEY="020" ENTRY="Context binding is incorrect" LENGTH="132 "/>
     <textElement ID="I" KEY="021" ENTRY="on the upper levels" LENGTH="132 "/>
     <textElement ID="I" KEY="022" ENTRY="Context binding is missing" LENGTH="132 "/>
     <textElement ID="I" KEY="023" ENTRY="Workbook must have at least one visible Worksheet" LENGTH="132 "/>
     <textElement ID="I" KEY="024" ENTRY="Chars number" LENGTH="132 "/>
     <textElement ID="I" KEY="025" ENTRY="overlap the field length" LENGTH="132 "/>
     <textElement ID="I" KEY="026" ENTRY="problem occurs with component" LENGTH="132 "/>
     <textElement ID="I" KEY="027" ENTRY="A component" LENGTH="132 "/>
     <textElement ID="I" KEY="028" ENTRY="already presents" LENGTH="132 "/>
     <textElement ID="I" KEY="029" ENTRY="Binding with Sheet of the template missing" LENGTH="132 "/>
     <textElement ID="I" KEY="030" ENTRY="Template does not contain a Sheet" LENGTH="132 "/>
     <textElement ID="I" KEY="031" ENTRY="is missing" LENGTH="132 "/>
     <textElement ID="I" KEY="032" ENTRY="An area is not specified in the template" LENGTH="132 "/>
     <textElement ID="I" KEY="033" ENTRY="A problem with area determination occurs" LENGTH="132 "/>
     <textElement ID="I" KEY="034" ENTRY="An area is beyond the scope of upper-level areas" LENGTH="132 "/>
     <textElement ID="I" KEY="035" ENTRY="is inappropriate under the component" LENGTH="132 "/>
     <textElement ID="I" KEY="036" ENTRY="Form is inactive (not activated)" LENGTH="132 "/>
     <textElement ID="I" KEY="037" ENTRY="Development class is not specified" LENGTH="132 "/>
     <textElement ID="I" KEY="038" ENTRY="Firstly, save the form" LENGTH="132 "/>
     <textElement ID="I" KEY="039" ENTRY="Component name is incorrect" LENGTH="132 "/>
     <textElement ID="I" KEY="040" ENTRY="Component with same name already exists" LENGTH="132 "/>
     <textElement ID="I" KEY="041" ENTRY="Moving of the component is impossible" LENGTH="132 "/>
     <textElement ID="I" KEY="042" ENTRY="Window mode" LENGTH="132 "/>
     <textElement ID="I" KEY="043" ENTRY="Actualize" LENGTH="132 "/>
     <textElement ID="I" KEY="044" ENTRY="Save" LENGTH="132 "/>
     <textElement ID="I" KEY="045" ENTRY="Save as..." LENGTH="132 "/>
     <textElement ID="I" KEY="046" ENTRY="Activate" LENGTH="132 "/>
     <textElement ID="I" KEY="047" ENTRY="Send mail" LENGTH="132 "/>
     <textElement ID="I" KEY="050" ENTRY="The working directory is not determined" LENGTH="132 "/>
     <textElement ID="I" KEY="051" ENTRY="Select an area on the actual template sheet" LENGTH="132 "/>
     <textElement ID="I" KEY="052" ENTRY="Only single area selection is required" LENGTH="132 "/>
     <textElement ID="I" KEY="053" ENTRY="Positioning on the sheet is impossible" LENGTH="132 "/>
     <textElement ID="I" KEY="054" ENTRY="Excel is not responding. |Perhaps a cell is being edited now" LENGTH="132 "/>
     <textElement ID="I" KEY="055" ENTRY="Form structure" LENGTH="132 "/>
     <textElement ID="I" KEY="056" ENTRY="Status" LENGTH="132 "/>
     <textElement ID="I" KEY="057" ENTRY="Direction" LENGTH="132 "/>
     <textElement ID="I" KEY="058" ENTRY="Description" LENGTH="132 "/>
     <textElement ID="I" KEY="061" ENTRY="Delete component" LENGTH="132 "/>
     <textElement ID="I" KEY="062" ENTRY="Create component" LENGTH="132 "/>
     <textElement ID="I" KEY="063" ENTRY="Move component UP" LENGTH="132 "/>
     <textElement ID="I" KEY="064" ENTRY="Move component DOWN" LENGTH="132 "/>
     <textElement ID="I" KEY="066" ENTRY="Select a node" LENGTH="132 "/>
     <textElement ID="I" KEY="067" ENTRY="Form properties" LENGTH="132 "/>
     <textElement ID="I" KEY="068" ENTRY="Component" LENGTH="132 "/>
     <textElement ID="I" KEY="069" ENTRY="Properties of the component" LENGTH="132 "/>
     <textElement ID="I" KEY="070" ENTRY="Messages" LENGTH="132 "/>
     <textElement ID="I" KEY="072" ENTRY="Error Creating Control" LENGTH="132 "/>
     <textElement ID="I" KEY="073" ENTRY="Name of the context" LENGTH="132 "/>
     <textElement ID="I" KEY="074" ENTRY="&lt;...not assigned...&gt;" LENGTH="132 "/>
     <textElement ID="I" KEY="075" ENTRY="Form description" LENGTH="132 "/>
     <textElement ID="I" KEY="076" ENTRY="Name/ description" LENGTH="132 "/>
     <textElement ID="I" KEY="077" ENTRY="Binding with context" LENGTH="132 "/>
     <textElement ID="I" KEY="078" ENTRY="(optional)" LENGTH="132 "/>
     <textElement ID="I" KEY="079" ENTRY="Appearance at runtime:" LENGTH="132 "/>
     <textElement ID="I" KEY="080" ENTRY="Always" LENGTH="132 "/>
     <textElement ID="I" KEY="081" ENTRY="Only when field contains value" LENGTH="132 "/>
     <textElement ID="I" KEY="082" ENTRY="Sheet name at runtime:" LENGTH="132 "/>
     <textElement ID="I" KEY="083" ENTRY="Auto" LENGTH="132 "/>
     <textElement ID="I" KEY="084" ENTRY="get Value from field" LENGTH="132 "/>
     <textElement ID="I" KEY="085" ENTRY="convert value to ext.format" LENGTH="132 "/>
     <textElement ID="I" KEY="086" ENTRY="Binding with sheet of the template" LENGTH="132 "/>
     <textElement ID="I" KEY="087" ENTRY="Area in the template" LENGTH="132 "/>
     <textElement ID="I" KEY="088" ENTRY="Output direction at runtime" LENGTH="132 "/>
     <textElement ID="I" KEY="089" ENTRY="Right" LENGTH="132 "/>
     <textElement ID="I" KEY="090" ENTRY="Down" LENGTH="132 "/>
     <textElement ID="I" KEY="091" ENTRY="Copy properties" LENGTH="132 "/>
     <textElement ID="I" KEY="092" ENTRY="Rows" LENGTH="132 "/>
     <textElement ID="I" KEY="093" ENTRY="Columns" LENGTH="132 "/>
     <textElement ID="I" KEY="094" ENTRY="Group" LENGTH="132 "/>
     <textElement ID="I" KEY="095" ENTRY="The entire value" LENGTH="132 "/>
     <textElement ID="I" KEY="096" ENTRY="first" LENGTH="132 "/>
     <textElement ID="I" KEY="097" ENTRY="characters" LENGTH="132 "/>
     <textElement ID="I" KEY="098" ENTRY="from position" LENGTH="132 "/>
     <textElement ID="I" KEY="099" ENTRY="all subsequent" LENGTH="132 "/>
     <textElement ID="I" KEY="100" ENTRY="Operation was terminated by the user" LENGTH="132 "/>
     <textElement ID="I" KEY="101" ENTRY="Delete form" LENGTH="132 "/>
     <textElement ID="I" KEY="102" ENTRY="was deleted" LENGTH="132 "/>
     <textElement ID="I" KEY="103" ENTRY="Allow to upload an initial XLSX-template from frontend" LENGTH="132 "/>
     <textElement ID="I" KEY="104" ENTRY="Function has not been processed" LENGTH="132 "/>
     <textElement ID="I" KEY="105" ENTRY="Notice!" LENGTH="132 "/>
     <textElement ID="I" KEY="106" ENTRY="Continue" LENGTH="132 "/>
     <textElement ID="I" KEY="107" ENTRY="Cancel" LENGTH="132 "/>
     <textElement ID="I" KEY="108" ENTRY="Specify a unique name of the component" LENGTH="132 "/>
     <textElement ID="I" KEY="109" ENTRY="Relevant nodes were not found in the context" LENGTH="132 "/>
     <textElement ID="I" KEY="110" ENTRY="Component is not allowed for choice" LENGTH="132 "/>
     <textElement ID="I" KEY="111" ENTRY="Field length" LENGTH="132 "/>
     <textElement ID="I" KEY="112" ENTRY="Error while searching sheets in the template" LENGTH="132 "/>
     <textElement ID="I" KEY="113" ENTRY="Select a sheet of the template" LENGTH="132 "/>
     <textElement ID="I" KEY="114" ENTRY="Edit" LENGTH="132 "/>
     <textElement ID="I" KEY="115" ENTRY="Create" LENGTH="132 "/>
     <textElement ID="I" KEY="116" ENTRY="Tmpl." LENGTH="132 "/>
     <textElement ID="I" KEY="117" ENTRY="Copy" LENGTH="132 "/>
     <textElement ID="I" KEY="118" ENTRY="Delete" LENGTH="132 "/>
     <textElement ID="I" KEY="119" ENTRY="Moving of the component" LENGTH="132 "/>
     <textElement ID="I" KEY="120" ENTRY="Relevant components are missing" LENGTH="132 "/>
     <textElement ID="I" KEY="121" ENTRY="Choose a component" LENGTH="132 "/>
     <textElement ID="I" KEY="122" ENTRY="RemovÐµ the component from the form" LENGTH="132 "/>
     <textElement ID="I" KEY="123" ENTRY="context" LENGTH="132 "/>
     <textElement ID="I" KEY="124" ENTRY="Specify a name of the context (data dictionary type)" LENGTH="132 "/>
     <textElement ID="I" KEY="125" ENTRY="Process is flowing in OFF-line mode" LENGTH="132 "/>
     <textElement ID="I" KEY="126" ENTRY="Specify new value" LENGTH="132 "/>
     <textElement ID="I" KEY="127" ENTRY="Firstly, eliminate problems due context binding" LENGTH="132 "/>
     <textElement ID="I" KEY="128" ENTRY="Removing of the binding" LENGTH="132 "/>
     <textElement ID="I" KEY="129" ENTRY="Delete connection with field ?" LENGTH="132 "/>
     <textElement ID="I" KEY="130" ENTRY="The property is irrelevant for component type" LENGTH="132 "/>
     <textElement ID="I" KEY="131" ENTRY="Delete connection with a sheet ?" LENGTH="132 "/>
     <textElement ID="I" KEY="132" ENTRY="Specify an area on the sheet:" LENGTH="132 "/>
     <textElement ID="I" KEY="133" ENTRY="Connection with selected area in the template will be created" LENGTH="132 "/>
     <textElement ID="I" KEY="134" ENTRY="END of the list is reached" LENGTH="132 "/>
     <textElement ID="I" KEY="135" ENTRY="TOP of the list is reached" LENGTH="132 "/>
     <textElement ID="I" KEY="136" ENTRY="Search the XLSX-form" LENGTH="132 "/>
     <textElement ID="I" KEY="137" ENTRY="Data was not found" LENGTH="132 "/>
     <textElement ID="I" KEY="138" ENTRY="Leave the workbench ?" LENGTH="132 "/>
     <textElement ID="I" KEY="139" ENTRY="Drawing" LENGTH="132 "/>
     <textElement ID="I" KEY="140" ENTRY="Source" LENGTH="132 "/>
     <textElement ID="I" KEY="141" ENTRY="Rawdata from context field" LENGTH="132 "/>
     <textElement ID="I" KEY="142" ENTRY="Drawing from template" LENGTH="132 "/>
     <textElement ID="I" KEY="143" ENTRY="Select a drawing on the worksheet" LENGTH="132 "/>
     <textElement ID="I" KEY="144" ENTRY="There are no drawings on the worksheet" LENGTH="132 "/>
     <textElement ID="I" KEY="145" ENTRY="Name of the drawing is not specified" LENGTH="132 "/>
     <textElement ID="I" KEY="146" ENTRY="does not contain any drawings" LENGTH="132 "/>
     <textElement ID="I" KEY="147" ENTRY="Technical information" LENGTH="132 "/>
     <textElement ID="I" KEY="148" ENTRY="Created by" LENGTH="132 "/>
     <textElement ID="I" KEY="149" ENTRY="Changed by" LENGTH="132 "/>
     <textElement ID="I" KEY="150" ENTRY="Package" LENGTH="132 "/>
     <textElement ID="I" KEY="151" ENTRY="Form must contain at less one sheet" LENGTH="132 "/>
     <textElement ID="I" KEY="152" ENTRY="Print titles" LENGTH="132 "/>
     <textElement ID="I" KEY="153" ENTRY="Preventing of automatic page breaks (inside)" LENGTH="132 "/>
     <textElement ID="I" KEY="154" ENTRY="Horizn." LENGTH="132 "/>
     <textElement ID="I" KEY="155" ENTRY="Vertic." LENGTH="132 "/>
     <textElement ID="I" KEY="156" ENTRY="Extend unbroken area" LENGTH="132 "/>
     <textElement ID="I" KEY="157" ENTRY="This option will be implemented via OLE on FrontEnd" LENGTH="132 "/>
     <textElement ID="I" KEY="158" ENTRY="shift pagebreak to the left-side border" LENGTH="132 "/>
     <textElement ID="I" KEY="159" ENTRY="shift pagebreak: &amp; column(s) outside the left border" LENGTH="132 "/>
     <textElement ID="I" KEY="160" ENTRY="shift pagebreak to the top border" LENGTH="132 "/>
     <textElement ID="I" KEY="161" ENTRY="shift pagebreak: &amp; row(s) higher than top border" LENGTH="132 "/>
     <textElement ID="I" KEY="162" ENTRY="column(s)" LENGTH="132 "/>
     <textElement ID="I" KEY="163" ENTRY="row(s)" LENGTH="132 "/>
     <textElement ID="I" KEY="164" ENTRY="Patterns are not found" LENGTH="132 "/>
     <textElement ID="I" KEY="165" ENTRY="Select a pattern" LENGTH="132 "/>
     <textElement ID="I" KEY="166" ENTRY="Save as..." LENGTH="132 "/>
     <textElement ID="I" KEY="167" ENTRY="New form name" LENGTH="132 "/>
     <textElement ID="I" KEY="168" ENTRY="Specify another form name" LENGTH="132 "/>
     <textElement ID="I" KEY="169" ENTRY="Form with same name already exists. Overwrite it ?" LENGTH="132 "/>
     <textElement ID="I" KEY="170" ENTRY="Form has been saved" LENGTH="132 "/>
     <textElement ID="I" KEY="171" ENTRY="Form has been activated" LENGTH="132 "/>
     <textElement ID="I" KEY="172" ENTRY="Clone component" LENGTH="132 "/>
     <textElement ID="I" KEY="173" ENTRY="an actual data were not obtained from Excel !" LENGTH="132 "/>
     <textElement ID="I" KEY="174" ENTRY="Tree" LENGTH="132 "/>
     <textElement ID="I" KEY="175" ENTRY="Pattern (resizable)" LENGTH="132 "/>
     <textElement ID="I" KEY="176" ENTRY="Merge cells" LENGTH="132 "/>
     <textElement ID="I" KEY="177" ENTRY="Span rows" LENGTH="132 "/>
     <textElement ID="I" KEY="178" ENTRY="Span columns" LENGTH="132 "/>
     <textElement ID="I" KEY="179" ENTRY="Specify area inside single row" LENGTH="132 "/>
     <textElement ID="I" KEY="180" ENTRY="Specify area inside single column" LENGTH="132 "/>
     <textElement ID="I" KEY="181" ENTRY="Select components to be added" LENGTH="132 "/>
     <textElement ID="I" KEY="182" ENTRY="Follow to Excel menu: DATA-&gt;OUTLINE" LENGTH="132 "/>
     <textElement ID="I" KEY="183" ENTRY="and uncheck SUMMARY ROWS BELOW DETAIL" LENGTH="132 "/>
     <textElement ID="I" KEY="184" ENTRY="Preparing of form data. Step:" LENGTH="132 "/>
     <textElement ID="I" KEY="185" ENTRY="Layout options" LENGTH="132 "/>
     <textElement ID="I" KEY="186" ENTRY="rotate 90 CCW" LENGTH="132 "/>
     <textElement ID="I" KEY="187" ENTRY="standard orientation" LENGTH="132 "/>
     <textElement ID="I" KEY="188" ENTRY="structure" LENGTH="132 "/>
     <textElement ID="I" KEY="189" ENTRY="header" LENGTH="132 "/>
     <textElement ID="I" KEY="190" ENTRY="hierarchy column" LENGTH="132 "/>
     <textElement ID="I" KEY="191" ENTRY="shift" LENGTH="132 "/>
     <textElement ID="I" KEY="192" ENTRY="other columns" LENGTH="132 "/>
     <textElement ID="I" KEY="193" ENTRY="All Expanded" LENGTH="132 "/>
     <textElement ID="I" KEY="194" ENTRY="All Collapsed" LENGTH="132 "/>
     <textElement ID="I" KEY="195" ENTRY="Draft" LENGTH="132 "/>
     <textElement ID="I" KEY="196" ENTRY="As area specify 2x2(or more) |cell range (see documentation)" LENGTH="132 "/>
     <textElement ID="I" KEY="197" ENTRY="Writing of data to XLSX-file" LENGTH="132 "/>
     <textElement ID="I" KEY="198" ENTRY="Building of tree, node:" LENGTH="132 "/>
     <textElement ID="I" KEY="199" ENTRY="Before" LENGTH="132 "/>
     <textElement ID="I" KEY="200" ENTRY="After" LENGTH="132 "/>
     <textElement ID="I" KEY="201" ENTRY="width from f.cat." LENGTH="132 "/>
     <textElement ID="I" KEY="202" ENTRY="multiplier" LENGTH="132 "/>
     <textElement ID="I" KEY="203" ENTRY="Nothing to output (Structure/ Hier.col/ Other cols)" LENGTH="132 "/>
     <textElement ID="I" KEY="204" ENTRY="Actual (from TreeControl)" LENGTH="132 "/>
     <textElement ID="I" KEY="205" ENTRY=". Initial state of nodes:" LENGTH="132 "/>
     <textElement ID="I" KEY="206" ENTRY="Presets" LENGTH="132 "/>
     <textElement ID="I" KEY="207" ENTRY="User guide" LENGTH="132 "/>
     <textElement ID="I" KEY="208" ENTRY="Requesting of user confirmation due template binding change" LENGTH="132 "/>
     <textElement ID="I" KEY="209" ENTRY="Upload XLSX-template from frontend" LENGTH="132 "/>
     <textElement ID="I" KEY="210" ENTRY="Import" LENGTH="132 "/>
     <textElement ID="I" KEY="211" ENTRY="Export" LENGTH="132 "/>
     <textElement ID="I" KEY="212" ENTRY="Help" LENGTH="132 "/>
     <textElement ID="I" KEY="213" ENTRY="Create the form structure automatically ?" LENGTH="132 "/>
     <textElement ID="I" KEY="214" ENTRY="Mass processing" LENGTH="132 "/>
     <textElement ID="I" KEY="215" ENTRY="Select all components" LENGTH="132 "/>
     <textElement ID="I" KEY="216" ENTRY="Matrix (one char per cell)" LENGTH="132 "/>
     <textElement ID="I" KEY="217" ENTRY="Interval:" LENGTH="132 "/>
     <textElement ID="I" KEY="218" ENTRY="Do not create" LENGTH="132 "/>
     <textElement ID="I" KEY="219" ENTRY="Form name" LENGTH="132 "/>
     <textElement ID="I" KEY="220" ENTRY="Shift template binding coordinates" LENGTH="132 "/>
     <textElement ID="I" KEY="221" ENTRY="Nothing to change" LENGTH="132 "/>
     <textElement ID="I" KEY="222" ENTRY="Sheet is being prepared" LENGTH="132 "/>
     <textElement ID="I" KEY="223" ENTRY="Insert page break (at the beginning)" LENGTH="132 "/>
     <textElement ID="I" KEY="224" ENTRY="Print out" LENGTH="132 "/>
     <textElement ID="I" KEY="225" ENTRY="Grid" LENGTH="132 "/>
     <textElement ID="I" KEY="226" ENTRY="columns" LENGTH="132 "/>
     <textElement ID="I" KEY="227" ENTRY="available columns set" LENGTH="132 "/>
     <textElement ID="I" KEY="228" ENTRY="Setting up columns in the output table" LENGTH="132 "/>
     <textElement ID="I" KEY="229" ENTRY="Tech.names" LENGTH="132 "/>
     <textElement ID="I" KEY="230" ENTRY="Descriptions" LENGTH="132 "/>
     <textElement ID="I" KEY="231" ENTRY="No column list is specified" LENGTH="132 "/>
     <textElement ID="I" KEY="232" ENTRY="Chart" LENGTH="132 "/>
     <textElement ID="I" KEY="233" ENTRY="Model" LENGTH="132 "/>
     <textElement ID="I" KEY="234" ENTRY="Dataset" LENGTH="132 "/>
     <textElement ID="I" KEY="235" ENTRY="Series" LENGTH="132 "/>
     <textElement ID="I" KEY="236" ENTRY="Table row" LENGTH="132 "/>
     <textElement ID="I" KEY="237" ENTRY="Column" LENGTH="132 "/>
     <textElement ID="I" KEY="238" ENTRY="On the sheet" LENGTH="132 "/>
     <textElement ID="I" KEY="239" ENTRY="Select a Chart model on the worksheet" LENGTH="132 "/>
     <textElement ID="I" KEY="240" ENTRY="There are no Chart models on the worksheet" LENGTH="132 "/>
     <textElement ID="I" KEY="241" ENTRY="Name of the Chart model is not specified" LENGTH="132 "/>
     <textElement ID="I" KEY="242" ENTRY="does not contain any Charts" LENGTH="132 "/>
     <textElement ID="I" KEY="243" ENTRY="Dataset is not specified" LENGTH="132 "/>
     <textElement ID="I" KEY="244" ENTRY="Incorrect Dataset is specified" LENGTH="132 "/>
     <textElement ID="I" KEY="245" ENTRY="Link between Chart series and Dataset columns" LENGTH="132 "/>
     <textElement ID="I" KEY="246" ENTRY="from" LENGTH="132 "/>
     <textElement ID="I" KEY="247" ENTRY="assignment" LENGTH="132 "/>
     <textElement ID="I" KEY="248" ENTRY="has problems" LENGTH="132 "/>
     <textElement ID="I" KEY="249" ENTRY="Dataset: Grid has hidden column" LENGTH="132 "/>
     <textElement ID="I" KEY="250" ENTRY="Category Axis labels" LENGTH="132 "/>
     <textElement ID="I" KEY="251" ENTRY="Chart title" LENGTH="132 "/>
     <textElement ID="I" KEY="252" ENTRY="Series name" LENGTH="132 "/>
     <textElement ID="I" KEY="253" ENTRY="from Model (statically)" LENGTH="132 "/>
     <textElement ID="I" KEY="254" ENTRY="from Context" LENGTH="132 "/>
     <textElement ID="I" KEY="255" ENTRY="from Dataset grid column captions" LENGTH="132 "/>
     <textElement ID="I" KEY="256" ENTRY="File" LENGTH="132 "/>
     <textElement ID="I" KEY="257" ENTRY="is saved in the directory" LENGTH="132 "/>
     <textElement ID="I" KEY="258" ENTRY="Runtime state" LENGTH="132 "/>
     <textElement ID="I" KEY="259" ENTRY="Visible" LENGTH="132 "/>
     <textElement ID="I" KEY="260" ENTRY="Hidden" LENGTH="132 "/>
     <textElement ID="I" KEY="261" ENTRY="Row processing" LENGTH="132 "/>
     <textElement ID="I" KEY="262" ENTRY="All rows" LENGTH="132 "/>
     <textElement ID="I" KEY="263" ENTRY="Row" LENGTH="132 "/>
     <textElement ID="I" KEY="264" ENTRY="from" LENGTH="132 "/>
     <textElement ID="I" KEY="265" ENTRY="to" LENGTH="132 "/>
     <textElement ID="I" KEY="266" ENTRY="(0 = no limit)" LENGTH="132 "/>
     <textElement ID="I" KEY="267" ENTRY="Interval is incorrect" LENGTH="132 "/>
     <textElement ID="I" KEY="268" ENTRY="Formula" LENGTH="132 "/>
     <textElement ID="I" KEY="269" ENTRY="allow formulas" LENGTH="132 "/>
     <textElement ID="I" KEY="270" ENTRY="Activate messages tab when error occurs" LENGTH="132 "/>
     <textElement ID="I" KEY="271" ENTRY="Losing cell range selection when the component has no template binding" LENGTH="132 "/>
     <textElement ID="I" KEY="272" ENTRY="Mark in the text" LENGTH="132 "/>
     <textElement ID="I" KEY="273" ENTRY="Char.sequence, which has to be replaced by the Value" LENGTH="132 "/>
     <textElement ID="I" KEY="274" ENTRY="Chart Sheet can contain the Charts only" LENGTH="132 "/>
     <textElement ID="I" KEY="275" ENTRY="AutoFit for merged cells" LENGTH="132 "/>
     <textElement ID="I" KEY="276" ENTRY="Off" LENGTH="132 "/>
     <textElement ID="I" KEY="277" ENTRY="Row height" LENGTH="132 "/>
     <textElement ID="I" KEY="278" ENTRY="Col.width" LENGTH="132 "/>
     <textElement ID="I" KEY="279" ENTRY="Properties of the Grid columns" LENGTH="132 "/>
     <textElement ID="I" KEY="280" ENTRY="Problem while OLE/VBScript post-processing" LENGTH="132 "/>
     <textElement ID="I" KEY="281" ENTRY="AutoFit merged cells" LENGTH="132 "/>
     <textElement ID="I" KEY="282" ENTRY="Macros initialization error" LENGTH="132 "/>
     <textElement ID="I" KEY="283" ENTRY="Macros execution error" LENGTH="132 "/>
     <textElement ID="I" KEY="284" ENTRY="Design-time presets" LENGTH="132 "/>
     <textElement ID="I" KEY="285" ENTRY="Run-time presets" LENGTH="132 "/>
     <textElement ID="I" KEY="286" ENTRY="Method for post-processing" LENGTH="132 "/>
     <textElement ID="I" KEY="287" ENTRY="Final post-processing" LENGTH="132 "/>
     <textElement ID="I" KEY="288" ENTRY="Provide tables" LENGTH="132 "/>
     <textElement ID="I" KEY="289" ENTRY="There are no changes" LENGTH="132 "/>
     <textElement ID="I" KEY="290" ENTRY='Sub procedure &quot;Entry&quot; is not found or incorrect |in the final post-processing VBScript' LENGTH="132 "/>
     <textElement ID="I" KEY="291" ENTRY="Tables for transferring data to Final VBScript post-processing" LENGTH="132 "/>
     <textElement ID="I" KEY="292" ENTRY="Specify Table name" LENGTH="132 "/>
     <textElement ID="I" KEY="293" ENTRY="Table name is not unique" LENGTH="132 "/>
     <textElement ID="I" KEY="294" ENTRY="Table name" LENGTH="132 "/>
     <textElement ID="I" KEY="295" ENTRY="Error accessing MS Excel application" LENGTH="132 "/>
     <textElement ID="I" KEY="296" ENTRY="as Child" LENGTH="132 "/>
     <textElement ID="I" KEY="297" ENTRY="as Sibling" LENGTH="132 "/>
     <textElement ID="I" KEY="298" ENTRY="Sheet protection" LENGTH="132 "/>
     <textElement ID="I" KEY="299" ENTRY="From template" LENGTH="132 "/>
     <textElement ID="I" KEY="300" ENTRY="From context" LENGTH="132 "/>
     <textElement ID="I" KEY="301" ENTRY="Static" LENGTH="132 "/>
     <textElement ID="I" KEY="302" ENTRY="Select Locked Cells" LENGTH="132 "/>
     <textElement ID="I" KEY="303" ENTRY="Select Unlocked Cells" LENGTH="132 "/>
     <textElement ID="I" KEY="304" ENTRY="Format Cells" LENGTH="132 "/>
     <textElement ID="I" KEY="305" ENTRY="Format Columns" LENGTH="132 "/>
     <textElement ID="I" KEY="306" ENTRY="Format Rows" LENGTH="132 "/>
     <textElement ID="I" KEY="307" ENTRY="Insert Columns" LENGTH="132 "/>
     <textElement ID="I" KEY="308" ENTRY="Insert Rows" LENGTH="132 "/>
     <textElement ID="I" KEY="309" ENTRY="Insert Hyperlinks" LENGTH="132 "/>
     <textElement ID="I" KEY="310" ENTRY="Delete Columns" LENGTH="132 "/>
     <textElement ID="I" KEY="311" ENTRY="Delete Rows" LENGTH="132 "/>
     <textElement ID="I" KEY="312" ENTRY="Sort" LENGTH="132 "/>
     <textElement ID="I" KEY="313" ENTRY="Auto Filter" LENGTH="132 "/>
     <textElement ID="I" KEY="314" ENTRY="Pivot Tables" LENGTH="132 "/>
     <textElement ID="I" KEY="315" ENTRY="Objects" LENGTH="132 "/>
     <textElement ID="I" KEY="316" ENTRY="Scenarios" LENGTH="132 "/>
     <textElement ID="I" KEY="317" ENTRY="Allow all users of this worksheet to:" LENGTH="132 "/>
     <textElement ID="I" KEY="318" ENTRY="Password to unprotect sheet:" LENGTH="132 "/>
     <textElement ID="I" KEY="319" ENTRY="Other" LENGTH="132 "/>
     <textElement ID="I" KEY="320" ENTRY="Components must have same type" LENGTH="132 "/>
     <textElement ID="I" KEY="321" ENTRY="Specify target parent component" LENGTH="132 "/>
     <textElement ID="I" KEY="322" ENTRY="Renaming features" LENGTH="132 "/>
     <textElement ID="I" KEY="323" ENTRY="add Prefix" LENGTH="132 "/>
     <textElement ID="I" KEY="324" ENTRY="add Postfix" LENGTH="132 "/>
     <textElement ID="I" KEY="325" ENTRY="Find text..." LENGTH="132 "/>
     <textElement ID="I" KEY="326" ENTRY="... and replace with" LENGTH="132 "/>
     <textElement ID="I" KEY="327" ENTRY="File format" LENGTH="132 "/>
     <textElement ID="I" KEY="328" ENTRY="Without VBA-macro  .XLSX" LENGTH="132 "/>
     <textElement ID="I" KEY="329" ENTRY="VBA-macro-enabled  .XLSM" LENGTH="132 "/>
     <textElement ID="I" KEY="330" ENTRY="Name of Cell range" LENGTH="132 "/>
     <textElement ID="I" KEY="331" ENTRY="Incorrect name of cell range" LENGTH="132 "/>
     <textElement ID="I" KEY="332" ENTRY="The most probable reason is" LENGTH="50 "/>
     <textElement ID="I" KEY="333" ENTRY="Your current SAP GUI version" LENGTH="50 "/>
     <textElement ID="I" KEY="334" ENTRY="does not work properly with MS Excel." LENGTH="50 "/>
     <textElement ID="I" KEY="335" ENTRY="Try to update SAP GUI to latest version." LENGTH="50 "/>
     <textElement ID="I" KEY="336" ENTRY="Error while reading template file" LENGTH="50 "/>
     <textElement ID="I" KEY="337" ENTRY="Size" LENGTH="50 "/>
     <textElement ID="I" KEY="338" ENTRY="Fit within area" LENGTH="50 "/>
     <textElement ID="I" KEY="339" ENTRY="From context field" LENGTH="50 "/>
     <textElement ID="I" KEY="340" ENTRY="Height" LENGTH="50 "/>
     <textElement ID="I" KEY="341" ENTRY="Width" LENGTH="50 "/>
     <textElement ID="I" KEY="342" ENTRY="Root node cannot be removed" LENGTH="132 "/>
     <textElement ID="I" KEY="343" ENTRY="Value Axis title" LENGTH="50 "/>
     <textElement ID="I" KEY="344" ENTRY="Category Axis title" LENGTH="50 "/>
     <textElement ID="I" KEY="345" ENTRY="Changing of this option can cause file error" LENGTH="132 "/>
     <textElement ID="I" KEY="346" ENTRY="Other options" LENGTH="50 "/>
     <textElement ID="I" KEY="347" ENTRY="Keep named ranges of template" LENGTH="132 "/>
     <textElement ID="I" KEY="348" ENTRY="Data validation" LENGTH="132 "/>
     <textElement ID="I" KEY="349" ENTRY="Attributes (from template)" LENGTH="132 "/>
     <textElement ID="I" KEY="350" ENTRY="Table for dynamic substitution (attribute/value)" LENGTH="132 "/>
     <textElement ID="I" KEY="351" ENTRY="Value (Formula)" LENGTH="132 "/>
     <textElement ID="I" KEY="352" ENTRY="From Dataset (Grid)" LENGTH="132 "/>
     <textElement ID="I" KEY="353" ENTRY="Field of Dataset is missing" LENGTH="132 "/>
     <textElement ID="I" KEY="354" ENTRY="Field of Dataset is incorrect" LENGTH="132 "/>
     <textElement ID="I" KEY="355" ENTRY="Place relative to Subarea" LENGTH="132 "/>
     <textElement ID="I" KEY="356" ENTRY="Before" LENGTH="132 "/>
     <textElement ID="I" KEY="357" ENTRY="After" LENGTH="132 "/>
    </language>
    <language SPRAS="R">
     <textElement ID="I" KEY="001" ENTRY="ÐÐ±ÑÐ¸Ðµ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="002" ENTRY="Ð¡Ð¾Ð¾Ð±ÑÐµÐ½Ð¸Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="003" ENTRY="ÐÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÑ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="004" ENTRY="Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾Ðµ Ð¸Ð¼Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="005" ENTRY="Ð² ÑÑÑÑÐºÑÑÑÐµ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½ Ð·Ð°Ð¿ÑÐ°ÑÐ¸Ð²Ð°ÐµÐ¼ÑÐ¹ ÑÐ·ÐµÐ»" LENGTH="132 "/>
     <textElement ID="I" KEY="006" ENTRY="ÐÐ¾Ð´ÑÐ¾Ð´ÑÑÐ¸Ñ ÑÐ·Ð»Ð¾Ð² ÐºÐ¾Ð½ÑÐµÐºÑÑÐ° Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾" LENGTH="132 "/>
     <textElement ID="I" KEY="007" ENTRY="ÐÐ¸ÑÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="008" ENTRY="ÐÐ¸ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="009" ENTRY="Ð¦Ð¸ÐºÐ»" LENGTH="132 "/>
     <textElement ID="I" KEY="010" ENTRY="ÐÐ°ÑÑÐµÑÐ½" LENGTH="132 "/>
     <textElement ID="I" KEY="011" ENTRY="ÐÐ½Ð°ÑÐµÐ½Ð¸Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="012" ENTRY="ÐÐ°Ð¿ÐºÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="013" ENTRY="Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¸Ð¼Ñ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="014" ENTRY="Ð£Ð¶Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ ÑÐ¾ÑÐ¼ÑÐ»ÑÑ Ñ Ð¸Ð¼ÐµÐ½ÐµÐ¼" LENGTH="132 "/>
     <textElement ID="I" KEY="015" ENTRY="ÐÐ°Ð½Ð½ÑÐµ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ° Ð¿Ð¾Ð²ÑÐµÐ¶Ð´ÐµÐ½Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="016" ENTRY="ÑÐ¾ÑÑÐ»ÑÑ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½" LENGTH="132 "/>
     <textElement ID="I" KEY="017" ENTRY="Ð¤Ð¾ÑÐ¼ÑÐ»ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="018" ENTRY="Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð°Ð½ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÐµÐ¼" LENGTH="132 "/>
     <textElement ID="I" KEY="019" ENTRY="ÐÐ¼Ñ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ° Ð½Ðµ ÑÐ½Ð¸ÐºÐ°Ð»ÑÐ½Ð¾:" LENGTH="132 "/>
     <textElement ID="I" KEY="020" ENTRY="ÐÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð°Ñ ÑÐ²ÑÐ·Ñ Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ¾Ð¼" LENGTH="132 "/>
     <textElement ID="I" KEY="021" ENTRY="Ð½Ð° Ð¿ÑÐµÐ´.ÑÑÐ¾Ð²Ð½ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="022" ENTRY="ÐÑÑÑÑÑÑÐ²ÑÐµÑ ÑÐ²ÑÐ·Ñ Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ¾Ð¼" LENGTH="132 "/>
     <textElement ID="I" KEY="023" ENTRY="ÐÐ½Ð¸Ð³Ð° Ð´Ð¾Ð»Ð¶Ð½Ð° Ð¸Ð¼ÐµÑÑ Ð½Ðµ Ð¼ÐµÐ½ÐµÐµ Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ð²Ð¸Ð´Ð¸Ð¼Ð¾Ð³Ð¾ Ð»Ð¸ÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="024" ENTRY="ÐÐ¾Ð»-Ð²Ð¾ ÑÐ¸Ð¼Ð²." LENGTH="132 "/>
     <textElement ID="I" KEY="025" ENTRY="Ð¿ÑÐµÐ²ÑÑÐ°ÐµÑ Ð´Ð»Ð¸Ð½Ñ Ð¿Ð¾Ð»Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="026" ENTRY="Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ Ñ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ¾Ð¼" LENGTH="132 "/>
     <textElement ID="I" KEY="027" ENTRY="ÐÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="028" ENTRY="ÑÐ¶Ðµ Ð¿ÑÐ¸ÑÑÑÑÑÐ²ÑÐµÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="029" ENTRY="ÐÑÑÑÑÑÑÐ²ÑÐµÑ ÑÐ²ÑÐ·Ñ Ñ Ð»Ð¸ÑÑÐ¾Ð¼ ÑÐ°Ð±Ð»Ð¾Ð½Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="030" ENTRY="Ð ÑÐ°Ð±Ð»Ð¾Ð½Ðµ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½ ÐÐ¸ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="031" ENTRY="Ð¾ÑÑÑÑÑÑÐ²ÑÐµÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="032" ENTRY="ÐÐ±Ð»Ð°ÑÑÑ Ð² ÑÐ°Ð±Ð»Ð¾Ð½Ðµ Ð½Ðµ Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÐµÐ½Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="033" ENTRY="ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÐµÐ½Ð¸Ñ Ð¾Ð±Ð»Ð°ÑÑÐ¸ ÑÐ°Ð±Ð»Ð¾Ð½Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="034" ENTRY="ÐÐ±Ð»Ð°ÑÑÑ Ð² ÑÐ°Ð±Ð»Ð¾Ð½Ðµ Ð²ÑÑÐ¾Ð´Ð¸Ñ Ð·Ð° ÑÐ°Ð¼ÐºÐ¸ Ð²ÑÑÐµÑÑ.Ð¾Ð±Ð»Ð°ÑÑÐµÐ¹" LENGTH="132 "/>
     <textElement ID="I" KEY="035" ENTRY="Ð½ÐµÐ´Ð¾Ð¿ÑÑÑÐ¸Ð¼ Ð¿Ð¾Ð´ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ¾Ð¼" LENGTH="132 "/>
     <textElement ID="I" KEY="036" ENTRY="Ð¤Ð¾ÑÐ¼ÑÐ»ÑÑ Ð½Ðµ Ð°ÐºÑÐ¸Ð²ÐµÐ½ (Ð½Ðµ Ð°ÐºÑÐ¸Ð²Ð¸ÑÐ¾Ð²Ð°Ð½)" LENGTH="132 "/>
     <textElement ID="I" KEY="037" ENTRY="ÐÐµ ÑÐºÐ°Ð·Ð°Ð½ ÐºÐ»Ð°ÑÑ ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÐºÐ¸" LENGTH="132 "/>
     <textElement ID="I" KEY="038" ENTRY="Ð¡Ð½Ð°ÑÐ°Ð»Ð° ÑÐ¾ÑÑÐ°Ð½Ð¸ÑÐµ ÑÐ¾ÑÐ¼ÑÐ»ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="039" ENTRY="ÐÐ¼Ñ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ° Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð¾" LENGTH="132 "/>
     <textElement ID="I" KEY="040" ENTRY="ÐÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ Ñ ÑÐ°ÐºÐ¸Ð¼ Ð¸Ð¼ÐµÐ½ÐµÐ¼ ÑÐ¶Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="041" ENTRY="ÐÐµÑÐµÐ¼ÐµÑÐµÐ½Ð¸Ðµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ° Ð½ÐµÐ²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾" LENGTH="132 "/>
     <textElement ID="I" KEY="042" ENTRY="Ð ÐµÐ¶Ð¸Ð¼ Ð¾ÐºÐ½Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="043" ENTRY="ÐÐºÑÑÐ°Ð»Ð¸Ð·Ð¸ÑÐ¾Ð²Ð°ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="044" ENTRY="Ð¡Ð¾ÑÑÐ°Ð½Ð¸ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="045" ENTRY="Ð¡Ð¾ÑÑÐ°Ð½Ð¸ÑÑ ÐºÐ°Ðº..." LENGTH="132 "/>
     <textElement ID="I" KEY="046" ENTRY="ÐÐºÑÐ¸Ð²Ð¸ÑÐ¾Ð²Ð°ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="047" ENTRY="ÐÑÐ¿ÑÐ°Ð²Ð¸ÑÑ Ð¿Ð¾ Ð¿Ð¾ÑÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="050" ENTRY="Ð Ð°Ð±Ð¾ÑÐ°Ñ Ð´Ð¸ÑÐµÐºÑÐ¾ÑÐ¸Ñ Ð½Ðµ Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÐµÐ½Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="051" ENTRY="ÐÑÐ´ÐµÐ»Ð¸ÑÐµ Ð¾Ð±Ð»Ð°ÑÑÑ Ð½Ð° Ð°ÐºÑÑÐ°Ð»ÑÐ½Ð¾Ð¼ Ð»Ð¸ÑÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="052" ENTRY="Ð¢ÑÐµÐ±ÑÐµÑÑÑ Ð²ÑÐ´ÐµÐ»ÐµÐ½Ð¸Ðµ ÑÐ¾Ð»ÑÐºÐ¾ Ð¾Ð´Ð½Ð¾Ð¹ Ð¾Ð±Ð»Ð°ÑÑÐ¸" LENGTH="132 "/>
     <textElement ID="I" KEY="053" ENTRY="ÐÐµÐ²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ Ð¿Ð¾Ð·Ð¸ÑÐ¸Ð¾Ð½Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ Ð½Ð° Ð»Ð¸ÑÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="054" ENTRY="Excel Ð½Ðµ Ð¾ÑÐ²ÐµÑÐ°ÐµÑ. |ÐÐ¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, Ð² Ð´Ð°Ð½Ð½ÑÐ¹ Ð¼Ð¾Ð¼ÐµÐ½Ñ ÑÐµÐ´Ð°ÐºÑÐ¸ÑÑÐµÑÑÑ ÑÑÐµÐ¹ÐºÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="055" ENTRY="Ð¡ÑÑÑÐºÑÑÑÐ° ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="056" ENTRY="Ð¡ÑÐ°ÑÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="057" ENTRY="ÐÐ°Ð¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="058" ENTRY="ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="061" ENTRY="Ð£Ð´Ð°Ð»Ð¸ÑÑ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="062" ENTRY="Ð¡Ð¾Ð·Ð´Ð°ÑÑ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="063" ENTRY="ÐÐµÑÐµÐ´Ð².ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ Ð²Ð²ÐµÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="064" ENTRY="ÐÐµÑÐµÐ´Ð².ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ Ð²Ð½Ð¸Ð·" LENGTH="132 "/>
     <textElement ID="I" KEY="066" ENTRY="ÐÑÐ´ÐµÐ»Ð¸ÑÐµ ÑÐ·ÐµÐ» ÑÑÑÑÐºÑÑÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="067" ENTRY="Ð¡Ð²Ð¾Ð¹ÑÑÐ²Ð° ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="068" ENTRY="ÐÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="069" ENTRY="Ð¡Ð²Ð¾Ð¹ÑÑÐ²Ð° ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="070" ENTRY="Ð¡Ð¾Ð¾Ð±ÑÐµÐ½Ð¸Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="072" ENTRY="ÐÑÐ¸Ð±ÐºÐ° ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ñ ÐºÐ¾Ð½ÑÑÐ¾Ð»Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="073" ENTRY="ÐÐ°Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ðµ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="074" ENTRY="&lt;...Ð½Ðµ Ð¿ÑÐ¸ÑÐ²Ð¾ÐµÐ½Ð¾...&gt;" LENGTH="132 "/>
     <textElement ID="I" KEY="075" ENTRY="ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="076" ENTRY="ÐÐ¼Ñ/ ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="077" ENTRY="Ð¡Ð²ÑÐ·Ñ Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ¾Ð¼" LENGTH="132 "/>
     <textElement ID="I" KEY="078" ENTRY="(Ð¾Ð¿ÑÐ¸Ð¾Ð½Ð°Ð»ÑÐ½Ð¾)" LENGTH="132 "/>
     <textElement ID="I" KEY="079" ENTRY="ÐÐ¾ÑÐ²Ð»ÐµÐ½Ð¸Ðµ Ð¿ÑÐ¸ Ð²ÑÐ²Ð¾Ð´Ðµ:" LENGTH="132 "/>
     <textElement ID="I" KEY="080" ENTRY="ÐÑÐµÐ³Ð´Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="081" ENTRY="ÐÑÐ¸ Ð½Ð°Ð»Ð¸ÑÐ¸Ð¸ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ñ Ð² Ð¿Ð¾Ð»Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="082" ENTRY="ÐÐ°Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð¿ÑÐ¸ Ð²ÑÐ²Ð¾Ð´Ðµ:" LENGTH="132 "/>
     <textElement ID="I" KEY="083" ENTRY="ÐÐ²ÑÐ¾" LENGTH="132 "/>
     <textElement ID="I" KEY="084" ENTRY="ÐÐ½Ð°ÑÐµÐ½Ð¸Ðµ Ð¸Ð· Ð¿Ð¾Ð»Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="085" ENTRY="Ð¿ÑÐµÐ¾Ð±Ñ.Ð²Ð¾ Ð²Ð½ÐµÑÐ½Ð¸Ð¹ ÑÐ¾ÑÐ¼Ð°Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="086" ENTRY="Ð¡Ð²ÑÐ·Ñ Ñ Ð»Ð¸ÑÑÐ¾Ð¼ ÑÐ°Ð±Ð»Ð¾Ð½Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="087" ENTRY="ÐÐ±Ð»Ð°ÑÑÑ Ð² ÑÐ°Ð±Ð»Ð¾Ð½Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="088" ENTRY="ÐÐ°Ð¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð²ÑÐ²Ð¾Ð´Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="089" ENTRY="ÐÐ¿ÑÐ°Ð²Ð¾" LENGTH="132 "/>
     <textElement ID="I" KEY="090" ENTRY="ÐÐ½Ð¸Ð·" LENGTH="132 "/>
     <textElement ID="I" KEY="091" ENTRY="ÐÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°ÑÑ ÑÐ²Ð¾Ð¹ÑÑÐ²Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="092" ENTRY="Ð¡ÑÑÐ¾Ðº" LENGTH="132 "/>
     <textElement ID="I" KEY="093" ENTRY="Ð¡ÑÐ¾Ð»Ð±ÑÐ¾Ð²" LENGTH="132 "/>
     <textElement ID="I" KEY="094" ENTRY="ÐÑÑÐ¿Ð¿Ð¸ÑÐ¾Ð²ÐºÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="095" ENTRY="ÐÐ½Ð°ÑÐµÐ½Ð¸Ðµ Ð¿Ð¾Ð»Ð½Ð¾ÑÑÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="096" ENTRY="Ð¿ÐµÑÐ²ÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="097" ENTRY="ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð²" LENGTH="132 "/>
     <textElement ID="I" KEY="098" ENTRY="Ñ Ð¿Ð¾Ð·Ð¸ÑÐ¸Ð¸" LENGTH="132 "/>
     <textElement ID="I" KEY="099" ENTRY="Ð²ÑÐµ Ð¿Ð¾ÑÐ»ÐµÐ´ÑÑÑÐ¸Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="100" ENTRY="ÐÐ¿ÐµÑÐ°ÑÐ¸Ñ Ð¾ÑÐ¼ÐµÐ½ÐµÐ½Ð° Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÐµÐ¼" LENGTH="132 "/>
     <textElement ID="I" KEY="101" ENTRY="Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÐ¾ÑÐ¼ÑÐ»ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="102" ENTRY="ÑÐ´Ð°Ð»ÐµÐ½" LENGTH="132 "/>
     <textElement ID="I" KEY="103" ENTRY="ÐÐºÐ»ÑÑÐ¸ÑÑ ÑÑÐ½ÐºÑÐ¸Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ Ð½Ð°Ñ.XLSX-ÑÐ°Ð±Ð»Ð¾Ð½Ð° Ñ frontend" LENGTH="132 "/>
     <textElement ID="I" KEY="104" ENTRY="ÐÐ¾Ð¼Ð°Ð½Ð´Ð° Ð½Ðµ Ð¾Ð±ÑÐ°Ð±Ð°ÑÑÐ²Ð°ÐµÑÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="105" ENTRY="ÐÐ½Ð¸Ð¼Ð°Ð½Ð¸Ðµ!" LENGTH="132 "/>
     <textElement ID="I" KEY="106" ENTRY="ÐÑÐ¾Ð´Ð¾Ð»Ð¶Ð¸ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="107" ENTRY="ÐÑÐ¼ÐµÐ½Ð¸ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="108" ENTRY="Ð£ÐºÐ°Ð¶Ð¸ÑÐµ ÑÐ½Ð¸ÐºÐ°Ð»ÑÐ½Ð¾Ðµ Ð½Ð°Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ðµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="109" ENTRY="ÐÐ¾Ð´ÑÐ¾Ð´ÑÑÐ¸Ñ ÑÐ·Ð»Ð¾Ð² ÐºÐ¾Ð½ÑÐµÐºÑÑÐ° Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾" LENGTH="132 "/>
     <textElement ID="I" KEY="110" ENTRY="ÐÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ Ð½ÐµÐ´Ð¾ÑÑÑÐ¿ÐµÐ½ Ð´Ð»Ñ Ð²ÑÐ±Ð¾ÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="111" ENTRY="ÐÐ±ÑÐ°Ñ Ð´Ð»Ð¸Ð½Ð° Ð¿Ð¾Ð»Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="112" ENTRY="ÐÑÐ¸Ð±ÐºÐ° Ð¿Ð¾Ð¸ÑÐºÐ° ÐÐ¸ÑÑÐ¾Ð² Ð² ÑÐ°Ð±Ð»Ð¾Ð½Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="113" ENTRY="ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð»Ð¸ÑÑ ÑÐ°Ð±Ð»Ð¾Ð½Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="114" ENTRY="ÐÐ·Ð¼ÐµÐ½Ð¸ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="115" ENTRY="Ð¡Ð¾Ð·Ð´Ð°ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="116" ENTRY="Ð¨Ð°Ð±Ð»." LENGTH="132 "/>
     <textElement ID="I" KEY="117" ENTRY="Ð¡ÐºÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="118" ENTRY="Ð£Ð´Ð°Ð»Ð¸ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="119" ENTRY="ÐÐµÑÐµÐ¼ÐµÑÐµÐ½Ð¸Ðµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="120" ENTRY="ÐÐµÑ Ð¿Ð¾Ð´ÑÐ¾Ð´ÑÑÐ¸Ñ ÑÐ¸Ð¿Ð¾Ð² ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ¾Ð²" LENGTH="132 "/>
     <textElement ID="I" KEY="121" ENTRY="ÐÑÐ±ÐµÑÐ¸ÑÐµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="122" ENTRY="Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ° ÑÐ¾ÑÐ¼Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="123" ENTRY="ÐºÐ¾Ð½ÑÐµÐºÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="124" ENTRY="Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¸Ð¼Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ° (ÑÐ¸Ð¿ Ð´Ð°Ð½Ð½ÑÑ Ð² ÑÐ»Ð¾Ð²Ð°ÑÐµ)" LENGTH="132 "/>
     <textElement ID="I" KEY="125" ENTRY="ÐÑÐ¾ÑÐµÑÑ Ð¿ÑÐ¾ÑÐµÐºÐ°ÐµÑ Ð² OFF-line ÑÐµÐ¶Ð¸Ð¼Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="126" ENTRY="Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð½Ð¾Ð²Ð¾Ðµ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="127" ENTRY="Ð¡Ð½Ð°ÑÐ°Ð»Ð° ÑÑÑÑÐ°Ð½Ð¸ÑÐµ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ ÑÐ²ÑÐ·Ð¸ Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ¾Ð¼" LENGTH="132 "/>
     <textElement ID="I" KEY="128" ENTRY="Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ ÑÐ²ÑÐ·Ð¸" LENGTH="132 "/>
     <textElement ID="I" KEY="129" ENTRY="Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÑÑÐ»ÐºÑ Ð½Ð° Ð¿Ð¾Ð»Ðµ ?" LENGTH="132 "/>
     <textElement ID="I" KEY="130" ENTRY="Ð¡Ð²Ð¾Ð¹ÑÑÐ²Ð¾ Ð½Ðµ ÑÐµÐ»ÐµÐ²Ð°Ð½ÑÐ½Ð¾ Ð´Ð»Ñ Ð´Ð°Ð½Ð½Ð¾Ð³Ð¾ ÑÐ¸Ð¿Ð° ÑÐ·Ð»Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="131" ENTRY="Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÐ²ÑÐ·Ñ Ñ ÐÐ¸ÑÑÐ¾Ð¼ ?" LENGTH="132 "/>
     <textElement ID="I" KEY="132" ENTRY="Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¾Ð±Ð»Ð°ÑÑÑ Ð½Ð° Ð»Ð¸ÑÑÐµ:" LENGTH="132 "/>
     <textElement ID="I" KEY="133" ENTRY="ÐÑÐ´ÐµÑ ÑÐ¾Ð·Ð´Ð°Ð½Ð° ÑÐ²ÑÐ·Ñ Ñ Ð²ÑÐ´ÐµÐ»ÐµÐ½Ð½Ð¾Ð¹ Ð¾Ð±Ð»Ð°ÑÑÑÑ Ð² ÑÐ°Ð±Ð»Ð¾Ð½Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="134" ENTRY="ÐÐ¾ÑÑÐ¸Ð³Ð½ÑÑ ÐºÐ¾Ð½ÐµÑ ÑÐ¿Ð¸ÑÐºÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="135" ENTRY="ÐÐ¾ÑÑÐ¸Ð³Ð½ÑÑÐ¾ Ð½Ð°ÑÐ°Ð»Ð¾ ÑÐ¿Ð¸ÑÐºÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="136" ENTRY="ÐÐ¾Ð¸ÑÐº XLSX-ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="137" ENTRY="ÐÐ°Ð½Ð½ÑÐµ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="138" ENTRY="ÐÑÐ¹ÑÐ¸ Ð¸Ð· ÑÐµÐ´Ð°ÐºÑÐ¾ÑÐ°?" LENGTH="132 "/>
     <textElement ID="I" KEY="139" ENTRY="Ð Ð¸ÑÑÐ½Ð¾Ðº" LENGTH="132 "/>
     <textElement ID="I" KEY="140" ENTRY="ÐÑÑÐ¾ÑÐ½Ð¸Ðº" LENGTH="132 "/>
     <textElement ID="I" KEY="141" ENTRY="ÐÐ°Ð½Ð½ÑÐµ Ð¸Ð· Ð¿Ð¾Ð»Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="142" ENTRY="Ð Ð¸ÑÑÐ½Ð¾Ðº Ð¸Ð· ÑÐ°Ð±Ð»Ð¾Ð½Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="143" ENTRY="ÐÑÐ±ÐµÑÐ¸ÑÐµ ÑÐ¸ÑÑÐ½Ð¾Ðº Ð½Ð° Ð»Ð¸ÑÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="144" ENTRY="ÐÐµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾ ÑÐ¸ÑÑÐ½ÐºÐ¾Ð² Ð½Ð° Ð»Ð¸ÑÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="145" ENTRY="ÐÐ°Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ðµ ÑÐ¸ÑÑÐ½ÐºÐ° Ð½Ðµ Ð·Ð°Ð´Ð°Ð½Ð¾" LENGTH="132 "/>
     <textElement ID="I" KEY="146" ENTRY="Ð½Ðµ ÑÐ¾Ð´ÐµÑÐ¶Ð¸Ñ ÑÐ¸ÑÑÐ½ÐºÐ¾Ð²" LENGTH="132 "/>
     <textElement ID="I" KEY="147" ENTRY="Ð¢ÐµÑÐ½Ð¸ÑÐµÑÐºÐ°Ñ Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="148" ENTRY="Ð¡Ð¾Ð·Ð´Ð°Ð½Ð¾" LENGTH="132 "/>
     <textElement ID="I" KEY="149" ENTRY="ÐÐ·Ð¼ÐµÐ½ÐµÐ½Ð¾" LENGTH="132 "/>
     <textElement ID="I" KEY="150" ENTRY="ÐÐ°ÐºÐµÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="151" ENTRY="Ð ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐµ Ð´Ð¾Ð»Ð¶ÐµÐ½ Ð±ÑÑÑ Ð¼Ð¸Ð½Ð¸Ð¼ÑÐ¼ Ð¾Ð´Ð¸Ð½ Ð»Ð¸ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="152" ENTRY="ÐÐµÑÐ°ÑÑ Ð½Ð° ÐºÐ°Ð¶Ð´Ð¾Ð¹ ÑÑÑÐ°Ð½Ð¸ÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="153" ENTRY="ÐÑÐµÐ´Ð¾ÑÐ²Ñ.Ð°Ð²ÑÐ¾Ð¼Ð°ÑÐ¸Ñ.ÑÐ°Ð·ÑÑÐ²Ð° ÑÑÑÐ°Ð½Ð¸Ñ (Ð²Ð½ÑÑÑÐ¸)" LENGTH="132 "/>
     <textElement ID="I" KEY="154" ENTRY="ÐÐ¾ÑÐ¸Ð·Ñ." LENGTH="132 "/>
     <textElement ID="I" KEY="155" ENTRY="ÐÐµÑÑÐ¸Ðº." LENGTH="132 "/>
     <textElement ID="I" KEY="156" ENTRY="ÐÑÐ¾Ð´Ð»Ð¸ÑÑ Ð½ÐµÑÐ°Ð·ÑÑÐ²Ð½ÑÑ Ð¾Ð±Ð»Ð°ÑÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="157" ENTRY="ÐÐ¿ÑÐ¸Ñ Ð±ÑÐ´ÐµÑ ÑÐµÐ°Ð»Ð¸Ð·Ð¾Ð²Ð°Ð½Ð° Ð½Ð° FrontEnd ÑÐµÑÐµÐ· OLE" LENGTH="132 "/>
     <textElement ID="I" KEY="158" ENTRY="ÐÐµÑÐµÐ½Ð¾Ñ ÑÐ°Ð·ÑÑÐ²Ð° Ðº Ð»ÐµÐ²Ð¾Ð¹ Ð³ÑÐ°Ð½Ð¸ÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="159" ENTRY="ÐÐµÑÐµÐ½Ð¾Ñ ÑÐ°Ð·ÑÑÐ²Ð° Ð½Ð° &amp; ÑÑÐ»Ð± Ð·Ð° Ð¿ÑÐµÐ´ÐµÐ»Ñ Ð»ÐµÐ²Ð¾Ð¹ Ð³ÑÐ°Ð½Ð¸ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="160" ENTRY="ÐÐµÑÐµÐ½Ð¾Ñ ÑÐ°Ð·ÑÑÐ²Ð° Ðº Ð²ÐµÑÑÐ½ÐµÐ¹ Ð³ÑÐ°Ð½Ð¸ÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="161" ENTRY="ÐÐµÑÐµÐ½Ð¾Ñ ÑÐ°Ð·ÑÑÐ²Ð° Ð½Ð° &amp; ÑÑÑÐº Ð²ÑÑÐµ, ÑÐµÐ¼ Ð²ÐµÑÑÐ½ÑÑ Ð³ÑÐ°Ð½Ð¸ÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="162" ENTRY="ÑÑÐ»Ð±." LENGTH="132 "/>
     <textElement ID="I" KEY="163" ENTRY="ÑÑÑÐº." LENGTH="132 "/>
     <textElement ID="I" KEY="164" ENTRY="ÐÐ°ÑÑÐµÑÐ½Ñ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="165" ENTRY="ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð¿Ð°ÑÑÐµÑÐ½" LENGTH="132 "/>
     <textElement ID="I" KEY="166" ENTRY="Ð¡Ð¾ÑÑÐ°Ð½Ð¸ÑÑ ÐºÐ°Ðº..." LENGTH="132 "/>
     <textElement ID="I" KEY="167" ENTRY="ÐÐ¾Ð²Ð¾Ðµ Ð¸Ð¼Ñ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="168" ENTRY="Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð´ÑÑÐ³Ð¾Ðµ Ð¸Ð¼Ñ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="169" ENTRY="Ð¤Ð¾ÑÐ¼ÑÐ»ÑÑ Ñ ÑÐ°ÐºÐ¸Ð¼ Ð¸Ð¼ÐµÐ½ÐµÐ¼ ÑÐ¶Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ. ÐÐ°Ð¼ÐµÐ½Ð¸ÑÑ ?" LENGTH="132 "/>
     <textElement ID="I" KEY="170" ENTRY="Ð¤Ð¾ÑÐ¼ÑÐ»ÑÑ ÑÐ¾ÑÑÐ°Ð½ÐµÐ½" LENGTH="132 "/>
     <textElement ID="I" KEY="171" ENTRY="Ð¤Ð¾ÑÐ¼ÑÐ»ÑÑ Ð°ÐºÑÐ¸Ð²Ð¸ÑÐ¾Ð²Ð°Ð½" LENGTH="132 "/>
     <textElement ID="I" KEY="172" ENTRY="ÐÑÐ±Ð»Ð¸ÑÐ¾Ð²Ð°ÑÑ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="173" ENTRY="ÐÐºÑÑÐ°Ð»ÑÐ½ÑÐµ Ð´Ð°Ð½Ð½ÑÐµ Ð½Ðµ Ð±ÑÐ»Ð¸ Ð¿Ð¾Ð»ÑÑÐµÐ½Ñ Ð¸Ð· Excel !" LENGTH="132 "/>
     <textElement ID="I" KEY="174" ENTRY="ÐÐµÑÐµÐ²Ð¾" LENGTH="132 "/>
     <textElement ID="I" KEY="175" ENTRY="ÐÐ°ÑÑÐµÑÐ½ (Ð¼Ð°ÑÑÑÐ°Ð±Ð¸Ñ.)" LENGTH="132 "/>
     <textElement ID="I" KEY="176" ENTRY="ÐÐ±ÑÐµÐ´Ð¸Ð½ÐµÐ½Ð¸Ðµ ÑÑÐµÐµÐº" LENGTH="132 "/>
     <textElement ID="I" KEY="177" ENTRY="ÐÑÐ²Ð°Ñ ÑÑÑÐ¾Ðº" LENGTH="132 "/>
     <textElement ID="I" KEY="178" ENTRY="ÐÑÐ²Ð°Ñ ÑÑÐ¾Ð»Ð±ÑÐ¾Ð²" LENGTH="132 "/>
     <textElement ID="I" KEY="179" ENTRY="Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¾Ð±Ð»Ð°ÑÑÑ Ð²ÑÑÐ¾ÑÐ¾Ð¹ Ð² Ð¾Ð´Ð½Ñ ÑÑÑÐ¾ÐºÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="180" ENTRY="Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¾Ð±Ð»Ð°ÑÑÑ ÑÐ¸ÑÐ¸Ð½Ð¾Ð¹ Ð² Ð¾Ð´Ð¸Ð½ ÑÑÐ¾Ð»Ð±ÐµÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="181" ENTRY="ÐÑÐ±ÐµÑÐ¸ÑÐµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÑ Ð´Ð»Ñ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="182" ENTRY="Ð Ð¼ÐµÐ½Ñ Excel: ÐÐ°Ð½Ð½ÑÐµ &gt; Ð¡ÑÑÑÐºÑÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="183" ENTRY="ÑÐ±ÐµÑÐ¸ÑÐµ Ð³Ð°Ð»Ð¾ÑÐºÑ ÐÐ¢ÐÐÐÐÐ«Ð Ð¡Ð¢Ð ÐÐÐ ÐÐÐ ÐÐÐÐÐ«ÐÐ" LENGTH="132 "/>
     <textElement ID="I" KEY="184" ENTRY="ÐÐ¾Ð´Ð³Ð¾ÑÐ¾Ð²ÐºÐ° Ð´Ð°Ð½Ð½ÑÑ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°. Ð¨Ð°Ð³:" LENGTH="132 "/>
     <textElement ID="I" KEY="185" ENTRY="ÐÐ¿ÑÐ¸Ð¸ Ð²ÑÐ²Ð¾Ð´Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="186" ENTRY="ÑÐ°Ð·Ð²ÐµÑÐ½ÑÑÑ Ð½Ð° 90 Ð³ÑÐ°Ð´ÑÑÐ¾Ð²" LENGTH="132 "/>
     <textElement ID="I" KEY="187" ENTRY="ÑÑÐ°Ð½Ð´Ð°ÑÑÐ½Ð°Ñ Ð¾ÑÐ¸ÐµÐ½ÑÐ°ÑÐ¸Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="188" ENTRY="ÑÑÑÑÐºÑÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="189" ENTRY="Ð·Ð°Ð³Ð¾Ð»Ð¾Ð²Ð¾Ðº" LENGTH="132 "/>
     <textElement ID="I" KEY="190" ENTRY="ÑÑÐ¾Ð»Ð±ÐµÑ Ð¸ÐµÑÐ°ÑÑÐ¸Ð¸" LENGTH="132 "/>
     <textElement ID="I" KEY="191" ENTRY="Ð¾ÑÑÑÑÐ¿" LENGTH="132 "/>
     <textElement ID="I" KEY="192" ENTRY="Ð¾ÑÑÐ°Ð»ÑÐ½ÑÐµ ÑÑÐ¾Ð»Ð±ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="193" ENTRY="ÐÑÐµ ÑÐ°Ð·Ð²ÐµÑÐ½ÑÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="194" ENTRY="ÐÑÐµ ÑÐ²ÐµÑÐ½ÑÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="195" ENTRY="Ð§ÐµÑÐ½Ð¾Ð²Ð¸Ðº" LENGTH="132 "/>
     <textElement ID="I" KEY="196" ENTRY="Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¾Ð±Ð»Ð°ÑÑÑ Ð¼Ð¸Ð½Ð¸Ð¼ÑÐ¼ |2x2 ÑÑÐµÐ¹ÐºÐ¸ (ÑÐ¼.Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÐ°ÑÐ¸Ñ)" LENGTH="132 "/>
     <textElement ID="I" KEY="197" ENTRY="ÐÐ°Ð¿Ð¸ÑÑ Ð´Ð°Ð½Ð½ÑÑ Ð² XLSX-ÑÐ°Ð¹Ð»" LENGTH="132 "/>
     <textElement ID="I" KEY="198" ENTRY="ÐÐ¾ÑÑÑÐ¾ÐµÐ½Ð¸Ðµ Ð´ÐµÑÐµÐ²Ð°, ÑÐ·ÐµÐ»:" LENGTH="132 "/>
     <textElement ID="I" KEY="199" ENTRY="Ð Ð½Ð°ÑÐ°Ð»Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="200" ENTRY="Ð ÐºÐ¾Ð½ÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="201" ENTRY="ÑÐ¸ÑÐ¸Ð½Ð° Ð¿Ð¾Ð»Ñ Ð¸Ð· Ñ.ÐºÐ°Ñ." LENGTH="132 "/>
     <textElement ID="I" KEY="202" ENTRY="Ð¼Ð½Ð¾Ð¶Ð¸ÑÐµÐ»Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="203" ENTRY="ÐÐµÑÐµÐ³Ð¾ Ð²ÑÐ²Ð¾Ð´Ð¸ÑÑ (Ð¡ÑÑÑÐºÑÑÑÐ°/ Ð¡ÑÐ¾Ð»Ð±.Ð¸ÐµÑÐ°ÑÑÐ¸Ð¸/ ÐÑ.ÑÑÐ¾Ð»Ð±ÑÑ)" LENGTH="132 "/>
     <textElement ID="I" KEY="204" ENTRY="ÐÐºÑÑÐ°Ð»Ñ.(Ð¸Ð· TreeControl)" LENGTH="132 "/>
     <textElement ID="I" KEY="205" ENTRY=". ÐÐ°ÑÐ°Ð»Ñ.ÑÐ¾ÑÑÐ¾ÑÐ½Ð¸Ðµ ÑÐ·Ð»Ð¾Ð²:" LENGTH="132 "/>
     <textElement ID="I" KEY="206" ENTRY="ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸" LENGTH="132 "/>
     <textElement ID="I" KEY="207" ENTRY="Ð ÑÐºÐ¾Ð²Ð¾Ð´ÑÑÐ²Ð¾ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="208" ENTRY="ÐÐ°Ð¿ÑÐ¾Ñ Ð¿Ð¾Ð´ÑÐ²ÐµÑÐ¶Ð´.Ð´ÐµÐ¹ÑÑÐ²Ð¸Ñ Ð¿ÑÐ¸ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ð¸ ÑÐ²ÑÐ·Ð¸ Ñ ÑÐ°Ð±Ð»Ð¾Ð½Ð¾Ð¼" LENGTH="132 "/>
     <textElement ID="I" KEY="209" ENTRY="ÐÐ°Ð³ÑÑÐ·Ð¸ÑÑ XLSX-ÑÐ°Ð±Ð»Ð¾Ð½ Ñ Ð»Ð¾ÐºÐ°Ð»ÑÐ½Ð¾Ð³Ð¾ ÐºÐ¾Ð¼Ð¿ÑÑÑÐµÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="210" ENTRY="ÐÐ¼Ð¿Ð¾ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="211" ENTRY="Ð­ÐºÑÐ¿Ð¾ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="212" ENTRY="Ð¡Ð¿ÑÐ°Ð²ÐºÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="213" ENTRY="Ð¡Ð¾Ð·Ð´Ð°ÑÑ ÑÑÑÑÐºÑÑÑÑ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ° Ð°Ð²ÑÐ¾Ð¼Ð°ÑÐ¸ÑÐµÑÐºÐ¸ ?" LENGTH="132 "/>
     <textElement ID="I" KEY="214" ENTRY="ÐÐ°ÑÑÐ¾Ð²ÑÐµ Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ð¸" LENGTH="132 "/>
     <textElement ID="I" KEY="215" ENTRY="ÐÑÐ´ÐµÐ»Ð¸ÑÑ Ð²ÑÐµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="216" ENTRY="ÐÐ°ÑÑÐ¸ÑÐ° (ÐºÐ°Ð¶Ð´Ð°Ñ Ð±ÑÐºÐ²Ð° - Ð² Ð¾ÑÐ´ÐµÐ»ÑÐ½Ð¾Ð¹ ÑÑÐµÐ¹ÐºÐµ)" LENGTH="132 "/>
     <textElement ID="I" KEY="217" ENTRY="ÐÐ½ÑÐµÑÐ²Ð°Ð»:" LENGTH="132 "/>
     <textElement ID="I" KEY="218" ENTRY="ÐÐµ ÑÐ¾Ð·Ð´Ð°Ð²Ð°ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="219" ENTRY="ÐÐ°Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ðµ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="220" ENTRY="Ð¡Ð´Ð²Ð¸Ð³ ÐºÐ¾Ð¾ÑÐ´Ð¸Ð½Ð°Ñ ÑÐ²ÑÐ·Ð¸ Ñ ÑÐ°Ð±Ð»Ð¾Ð½Ð¾Ð¼" LENGTH="132 "/>
     <textElement ID="I" KEY="221" ENTRY="ÐÐµÑ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ð¹" LENGTH="132 "/>
     <textElement ID="I" KEY="222" ENTRY="ÐÐ¸ÑÑ Ð¿Ð¾Ð´Ð³Ð¾ÑÐ°Ð²Ð»Ð¸Ð²Ð°ÐµÑÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="223" ENTRY="ÐÑÑÐ°Ð²Ð¸ÑÑ ÑÐ°Ð·ÑÑÐ² ÑÑÑÐ°Ð½Ð¸ÑÑ (Ð² Ð½Ð°ÑÐ°Ð»Ðµ)" LENGTH="132 "/>
     <textElement ID="I" KEY="224" ENTRY="ÐÐµÑÐ°ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="225" ENTRY="ÐÑÐ¸Ð´" LENGTH="132 "/>
     <textElement ID="I" KEY="226" ENTRY="Ð²ÑÐ±Ð¾Ñ ÑÑÐ¾Ð»Ð±ÑÐ¾Ð²" LENGTH="132 "/>
     <textElement ID="I" KEY="227" ENTRY="Ð´Ð¾ÑÑÑÐ¿Ð½ÑÐµ ÑÑÐ¾Ð»Ð±ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="228" ENTRY="ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ° ÑÑÐ¾Ð»Ð±ÑÐ¾Ð² Ð² Ð²ÑÑÐ¾Ð´Ð½Ð¾Ð¹ ÑÐ°Ð±Ð»Ð¸ÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="229" ENTRY="Ð¢ÐµÑ.Ð¸Ð¼ÐµÐ½Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="230" ENTRY="ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="231" ENTRY="Ð¡Ð¿Ð¸ÑÐ¾Ðº Ð²ÑÐ²Ð¾Ð´Ð¸Ð¼ÑÑ ÑÑÐ¾Ð»Ð±ÑÐ¾Ð² Ð½Ðµ Ð·Ð°Ð´Ð°Ð½" LENGTH="132 "/>
     <textElement ID="I" KEY="232" ENTRY="ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="233" ENTRY="ÐÐ°ÐºÐµÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="234" ENTRY="ÐÐ°Ð±Ð¾Ñ Ð´Ð°Ð½Ð½ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="235" ENTRY="Ð ÑÐ´Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="236" ENTRY="Ð¡ÑÑÐ¾ÐºÐ° ÑÐ°Ð±Ð»Ð¸ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="237" ENTRY="Ð¡ÑÐ¾Ð»Ð±ÐµÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="238" ENTRY="ÐÐ° Ð»Ð¸ÑÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="239" ENTRY="ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð¼Ð°ÐºÐµÑ ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼Ñ Ð½Ð° Ð»Ð¸ÑÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="240" ENTRY="ÐÐµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾ ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼ Ð½Ð° Ð»Ð¸ÑÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="241" ENTRY="ÐÐ°Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð¼Ð°ÐºÐµÑÐ° ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼Ñ Ð½Ðµ Ð·Ð°Ð´Ð°Ð½Ð¾" LENGTH="132 "/>
     <textElement ID="I" KEY="242" ENTRY="Ð½Ðµ ÑÐ¾Ð´ÐµÑÐ¶Ð¸Ñ ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="243" ENTRY="ÐÐ°Ð±Ð¾Ñ Ð´Ð°Ð½Ð½ÑÑ Ð½Ðµ ÑÐºÐ°Ð·Ð°Ð½" LENGTH="132 "/>
     <textElement ID="I" KEY="244" ENTRY="Ð£ÐºÐ°Ð·Ð°Ð½ Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½ÑÐ¹ ÐÐ°Ð±Ð¾Ñ Ð´Ð°Ð½Ð½ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="245" ENTRY="Ð¡Ð²ÑÐ·Ñ Ð¼ÐµÐ¶Ð´Ñ Ð ÑÐ´Ð°Ð¼Ð¸ Ð´Ð¸Ð°Ð³ÑÐ°Ð¼Ð¼Ñ Ð¸ Ð¡ÑÐ¾Ð»Ð±ÑÐ°Ð¼Ð¸ Ð¸ÑÑ.Ð´Ð°Ð½Ð½ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="246" ENTRY="Ð¸Ð·" LENGTH="132 "/>
     <textElement ID="I" KEY="247" ENTRY="Ð¿ÑÐ¸ÑÐ²Ð¾ÐµÐ½Ð¸Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="248" ENTRY="Ð¸Ð¼ÐµÐµÑ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="249" ENTRY="ÐÐ°Ð±Ð¾Ñ Ð´Ð°Ð½Ð½ÑÑ: Ð² ÐÑÐ¸Ð´Ðµ ÑÐºÑÑÑ ÑÑÐ¾Ð»Ð±ÐµÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="250" ENTRY="ÐÐ¾Ð´Ð¿Ð¸ÑÐ¸ ÐÑÐ¸ ÐÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¹" LENGTH="132 "/>
     <textElement ID="I" KEY="251" ENTRY="ÐÐ°Ð·Ð²Ð°Ð½Ð¸Ðµ Ð´Ð¸Ð°Ð³ÑÐ°Ð¼Ð¼Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="252" ENTRY="ÐÐ¼ÐµÐ½Ð° ÑÑÐ´Ð¾Ð²" LENGTH="132 "/>
     <textElement ID="I" KEY="253" ENTRY="Ð¸Ð· ÐÐ°ÐºÐµÑÐ° (ÑÑÐ°ÑÐ¸ÑÐ½Ð¾)" LENGTH="132 "/>
     <textElement ID="I" KEY="254" ENTRY="Ð¸Ð· ÐÐ¾Ð½ÑÐµÐºÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="255" ENTRY="Ð¸Ð· Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ð¹ ÑÑÐ¾Ð»Ð±ÑÐ¾Ð² ÐÑÐ¸Ð´Ð° Ð½Ð°Ð±Ð¾ÑÐ° Ð´Ð°Ð½Ð½ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="256" ENTRY="Ð¤Ð°Ð¹Ð»" LENGTH="132 "/>
     <textElement ID="I" KEY="257" ENTRY="Ð²ÑÐ³ÑÑÐ¶ÐµÐ½ Ð² Ð´Ð¸ÑÐµÐºÑÐ¾ÑÐ¸Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="258" ENTRY="ÐÑÐ¸ Ð²ÑÐ²Ð¾Ð´Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="259" ENTRY="ÐÐ¸Ð´Ð¸Ð¼ÑÐ¹" LENGTH="132 "/>
     <textElement ID="I" KEY="260" ENTRY="Ð¡ÐºÑÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="261" ENTRY="ÐÐ±ÑÐ°Ð±Ð¾ÑÐºÐ° ÑÑÑÐ¾Ðº" LENGTH="132 "/>
     <textElement ID="I" KEY="262" ENTRY="ÐÑÐµ ÑÑÑÐ¾ÐºÐ¸" LENGTH="132 "/>
     <textElement ID="I" KEY="263" ENTRY="Ð¡ÑÑÐ¾ÐºÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="264" ENTRY="Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="265" ENTRY="Ð¿Ð¾" LENGTH="132 "/>
     <textElement ID="I" KEY="266" ENTRY="(0 = ÐÐµÐÐ³ÑÐ°Ð½Ð¸Ñ.)" LENGTH="132 "/>
     <textElement ID="I" KEY="267" ENTRY="ÐÐ½ÑÐµÑÐ²Ð°Ð» Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐµÐ½" LENGTH="132 "/>
     <textElement ID="I" KEY="268" ENTRY="Ð¤Ð¾ÑÐ¼ÑÐ»Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="269" ENTRY="ÑÐ°Ð·ÑÐµÑÐ¸ÑÑ ÑÐ¾ÑÐ¼ÑÐ»Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="270" ENTRY="ÐÐºÑÐ¸Ð²Ð¸ÑÐ¾Ð²Ð°ÑÑ Ð²ÐºÐ»Ð°Ð´ÐºÑ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸Ð¹ Ð¿ÑÐ¸ Ð½Ð°Ð»Ð¸ÑÐ¸Ð¸ Ð¾ÑÐ¸Ð±Ð¾Ðº" LENGTH="132 "/>
     <textElement ID="I" KEY="271" ENTRY="ÐÐ¾ÑÐµÑÑ Ð²ÑÐ´ÐµÐ»ÐµÐ½Ð¸Ñ ÑÑÐµÐµÐº Ð´Ð»Ñ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ°, Ð½Ðµ Ð¸Ð¼ÐµÑÑÐµÐ³Ð¾ ÑÐ²ÑÐ·Ð¸ Ñ ÑÐ°Ð±Ð»Ð¾Ð½Ð¾Ð¼" LENGTH="132 "/>
     <textElement ID="I" KEY="272" ENTRY="ÐÐµÑÐºÐ° Ð² ÑÐµÐºÑÑÐµ" LENGTH="132 "/>
     <textElement ID="I" KEY="273" ENTRY="ÐÐ¾ÑÐ»ÐµÐ´Ð¾Ð²Ð°Ñ-ÑÑÑ ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð², ÐºÐ¾ÑÐ¾ÑÑÑ ÑÐ»ÐµÐ´ÑÐµÑ Ð·Ð°Ð¼ÐµÐ½Ð¸ÑÑ ÐÐ½Ð°ÑÐµÐ½Ð¸ÐµÐ¼" LENGTH="132 "/>
     <textElement ID="I" KEY="274" ENTRY="ÐÐ¸ÑÑ ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼ Ð¼Ð¾Ð¶ÐµÑ ÑÐ¾Ð´ÐµÑÐ¶Ð°ÑÑ ÑÐ¾Ð»ÑÐºÐ¾ ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="275" ENTRY="ÐÐ²ÑÐ¾Ð¿Ð¾Ð´Ð±Ð¾Ñ ÑÐ°Ð·Ð¼ÐµÑÐ¾Ð² Ð¾Ð±ÑÐµÐ´Ð¸Ð½ÐµÐ½Ð½ÑÑ ÑÑÐµÐµÐº" LENGTH="132 "/>
     <textElement ID="I" KEY="276" ENTRY="ÐÑÐºÐ»." LENGTH="132 "/>
     <textElement ID="I" KEY="277" ENTRY="ÐÑÑÐ¾ÑÑ ÑÑÑÐ¾Ðº" LENGTH="132 "/>
     <textElement ID="I" KEY="278" ENTRY="Ð¨Ð¸ÑÐ¸Ð½Ñ ÑÑÐ»Ð±Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="279" ENTRY="Ð¡Ð²Ð¾Ð¹ÑÑÐ²Ð° ÑÑÐ¾Ð»Ð±ÑÐ¾Ð² Ð³ÑÐ¸Ð´Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="280" ENTRY="ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ð¿ÑÐ¸ Ð¿Ð¾ÑÑ-Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐµ OLE/VBScript" LENGTH="132 "/>
     <textElement ID="I" KEY="281" ENTRY="ÐÐ²ÑÐ¾Ð¿Ð¾Ð´Ð±Ð¾Ñ ÑÐ°Ð·Ð¼ÐµÑÐ¾Ð² Ð¾Ð±ÑÐµÐ´Ð¸Ð½ÐµÐ½ÑÑ ÑÑÐµÐµÐº" LENGTH="132 "/>
     <textElement ID="I" KEY="282" ENTRY="ÐÑÐ¸Ð±ÐºÐ° Ð¸Ð½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ð¸ Ð¼Ð°ÐºÑÐ¾ÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="283" ENTRY="ÐÑÐ¸Ð±ÐºÐ° Ð¿ÑÐ¸ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ð¸ Ð¼Ð°ÐºÑÐ¾ÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="284" ENTRY="ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸ Design-time" LENGTH="132 "/>
     <textElement ID="I" KEY="285" ENTRY="ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸ Run-time" LENGTH="132 "/>
     <textElement ID="I" KEY="286" ENTRY="Ð¡Ð¿Ð¾ÑÐ¾Ð± Ð¿Ð¾ÑÑ-Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ¸" LENGTH="132 "/>
     <textElement ID="I" KEY="287" ENTRY="ÐÐ°ÐºÐ»ÑÑÐ¸ÑÐµÐ»ÑÐ½Ð°Ñ Ð¿Ð¾ÑÑ-Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="288" ENTRY="ÐÐµÑÐµÐ´Ð°ÑÑ ÑÐ°Ð±Ð»Ð¸ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="289" ENTRY="ÐÐµÑ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ð¹" LENGTH="132 "/>
     <textElement ID="I" KEY="290" ENTRY='Sub-Ð¿ÑÐ¾ÑÐµÐ´ÑÑÐ° &quot;Entry&quot; Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð° Ð¸Ð»Ð¸ Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð° |Ð² VBScript-ÐºÐ¾Ð´Ðµ Ð·Ð°ÐºÐ»ÑÑÐ¸ÑÐµÐ»ÑÐ½Ð¾Ð¹ Ð¿Ð¾ÑÑ-Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ¸' LENGTH="132 "/>
     <textElement ID="I" KEY="291" ENTRY="Ð¢Ð°Ð±Ð»Ð¸ÑÑ Ð´Ð»Ñ Ð¿ÐµÑÐµÐ´Ð°ÑÐ¸ Ð´Ð°Ð½Ð½ÑÑ Ð² ÐÐ°ÐºÐ»ÑÑÐ¸Ñ.Ð¿Ð¾ÑÑ-Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÑ VBScript" LENGTH="132 "/>
     <textElement ID="I" KEY="292" ENTRY="Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¸Ð¼Ñ ÑÐ°Ð±Ð»Ð¸ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="293" ENTRY="ÐÐ¼Ñ ÑÐ°Ð±Ð»Ð¸ÑÑ Ð½Ðµ ÑÐ½Ð¸ÐºÐ°Ð»ÑÐ½Ð¾" LENGTH="132 "/>
     <textElement ID="I" KEY="294" ENTRY="ÐÐ¼Ñ ÑÐ°Ð±Ð»Ð¸ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="295" ENTRY="ÐÑÐ¸Ð±ÐºÐ° Ð´Ð¾ÑÑÑÐ¿Ð° Ðº Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ MS Excel" LENGTH="132 "/>
     <textElement ID="I" KEY="296" ENTRY="ÐºÐ°Ðº ÐÐ¾ÑÐµÑÐ½Ð¸Ð¹" LENGTH="132 "/>
     <textElement ID="I" KEY="297" ENTRY="Ð½Ð° Ð­ÑÐ¾Ð¼ Ð¶Ðµ ÑÑÐ¾Ð²Ð½Ðµ" LENGTH="132 "/>
     <textElement ID="I" KEY="298" ENTRY="ÐÐ°ÑÐ¸ÑÐ° Ð»Ð¸ÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="299" ENTRY="ÐÐ· ÑÐ°Ð±Ð»Ð¾Ð½Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="300" ENTRY="ÐÐ· ÐºÐ¾Ð½ÑÐµÐºÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="301" ENTRY="Ð¡ÑÐ°ÑÐ¸ÑÐµÑÐºÐ¸" LENGTH="132 "/>
     <textElement ID="I" KEY="302" ENTRY="ÐÑÐ´ÐµÐ»ÐµÐ½Ð¸Ðµ Ð·Ð°Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð°Ð½Ð½ÑÑ ÑÑÐµÐµÐº" LENGTH="132 "/>
     <textElement ID="I" KEY="303" ENTRY="ÐÑÐ´ÐµÐ»ÐµÐ½Ð¸Ðµ ÐÐµÐ·Ð°Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð°Ð½Ð½ÑÑ ÑÑÐµÐµÐº" LENGTH="132 "/>
     <textElement ID="I" KEY="304" ENTRY="Ð¤Ð¾ÑÐ¼Ð°ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ Ð¯ÑÐµÐµÐº" LENGTH="132 "/>
     <textElement ID="I" KEY="305" ENTRY="Ð¤Ð¾ÑÐ¼Ð°ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ Ð¡ÑÐ¾Ð»Ð±ÑÐ¾Ð²" LENGTH="132 "/>
     <textElement ID="I" KEY="306" ENTRY="Ð¤Ð¾ÑÐ¼Ð°ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ Ð¡ÑÑÐ¾Ðº" LENGTH="132 "/>
     <textElement ID="I" KEY="307" ENTRY="ÐÑÑÐ°Ð²ÐºÑ Ð¡ÑÐ¾Ð»Ð±ÑÐ¾Ð²" LENGTH="132 "/>
     <textElement ID="I" KEY="308" ENTRY="ÐÑÑÐ°Ð²ÐºÑ Ð¡ÑÑÐ¾Ðº" LENGTH="132 "/>
     <textElement ID="I" KEY="309" ENTRY="ÐÑÑÐ°Ð²ÐºÑ ÐÐ¸Ð¿ÐµÑÑÑÑÐ»Ð¾Ðº" LENGTH="132 "/>
     <textElement ID="I" KEY="310" ENTRY="Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¡ÑÐ¾Ð»Ð±ÑÐ¾Ð²" LENGTH="132 "/>
     <textElement ID="I" KEY="311" ENTRY="Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¡ÑÑÐ¾Ðº" LENGTH="132 "/>
     <textElement ID="I" KEY="312" ENTRY="Ð¡Ð¾ÑÑÐ¸ÑÐ¾Ð²ÐºÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="313" ENTRY="ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ ÐÐ²ÑÐ¾ÑÐ¸Ð»ÑÑÐ°" LENGTH="132 "/>
     <textElement ID="I" KEY="314" ENTRY="ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð¾ÑÑÐµÑÐ¾Ð² ÑÐ²Ð¾Ð´Ð½Ð¾Ð¹ ÑÐ°Ð±Ð»Ð¸ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="315" ENTRY="ÐÐ·Ð¼ÐµÐ½ÐµÐ½Ð¸Ðµ ÐÐ±ÑÐµÐºÑÐ¾Ð²" LENGTH="132 "/>
     <textElement ID="I" KEY="316" ENTRY="ÐÐ·Ð¼ÐµÐ½ÐµÐ½Ð¸Ðµ Ð¡ÑÐµÐ½Ð°ÑÐ¸ÐµÐ²" LENGTH="132 "/>
     <textElement ID="I" KEY="317" ENTRY="Ð Ð°Ð·ÑÐµÑÐ¸ÑÑ Ð²ÑÐµÐ¼ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÑÐ¼ ÑÑÐ¾Ð³Ð¾ Ð»Ð¸ÑÑÐ°:" LENGTH="132 "/>
     <textElement ID="I" KEY="318" ENTRY="ÐÐ°ÑÐ¾Ð»Ñ Ð´Ð»Ñ Ð¾ÑÐºÐ»ÑÑÐµÐ½Ð¸Ñ Ð·Ð°ÑÐ¸ÑÑ Ð»Ð¸ÑÑÐ°:" LENGTH="132 "/>
     <textElement ID="I" KEY="319" ENTRY="ÐÑÑÐ³Ð¾Ð¹" LENGTH="132 "/>
     <textElement ID="I" KEY="320" ENTRY="ÐÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÑ Ð´Ð¾Ð»Ð¶Ð½Ñ Ð±ÑÑÑ Ð¾Ð´Ð½Ð¾Ð³Ð¾ ÑÐ¸Ð¿Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="321" ENTRY="Ð£ÐºÐ°Ð¶Ð¸ÑÐµ ÑÐµÐ»ÐµÐ²Ð¾Ð¹ ÑÐ¾Ð´Ð¸ÑÐµÐ»ÑÑÐºÐ¸Ð¹ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="322" ENTRY="ÐÐ¿ÑÐ¸Ð¸ Ð¿ÐµÑÐµÐ¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ñ" LENGTH="132 "/>
     <textElement ID="I" KEY="323" ENTRY="Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ ÐÑÐµÑÐ¸ÐºÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="324" ENTRY="Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ ÐÐ¾ÑÑÑÐ¸ÐºÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="325" ENTRY="ÐÐ°Ð¹ÑÐ¸ ÑÐµÐºÑÑ..." LENGTH="132 "/>
     <textElement ID="I" KEY="326" ENTRY="...Ð¸ Ð·Ð°Ð¼ÐµÐ½Ð¸ÑÑ ÐµÐ³Ð¾ ÑÐµÐºÑÑÐ¾Ð¼" LENGTH="132 "/>
     <textElement ID="I" KEY="327" ENTRY="Ð¤Ð¾ÑÐ¼Ð°Ñ ÑÐ°Ð¹Ð»Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="328" ENTRY="ÐÐµÐ· VBA-Ð¼Ð°ÐºÑÐ¾ÑÐ¾Ð²  .XLSX" LENGTH="132 "/>
     <textElement ID="I" KEY="329" ENTRY="Ð¡ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶ÐºÐ¾Ð¹ VBA-Ð¼Ð°ÐºÑÐ¾ÑÐ¾Ð²  .XLSM" LENGTH="132 "/>
     <textElement ID="I" KEY="330" ENTRY="ÐÐ¼Ñ Ð´Ð¸Ð°Ð¿Ð°Ð·Ð¾Ð½Ð° ÑÑÐµÐµÐº" LENGTH="132 "/>
     <textElement ID="I" KEY="331" ENTRY="ÐÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð¾Ðµ Ð¸Ð¼Ñ Ð´Ð¸Ð°Ð¿Ð°Ð·Ð¾Ð½Ð° ÑÑÐµÐµÐº" LENGTH="132 "/>
     <textElement ID="I" KEY="332" ENTRY="ÐÐµÑÐ¾ÑÑÐ½Ð°Ñ Ð¿ÑÐ¸ÑÐ¸Ð½Ð° Ð² ÑÐ¾Ð¼, ÑÑÐ¾" LENGTH="50 "/>
     <textElement ID="I" KEY="333" ENTRY="ÐÐ°ÑÐ° Ð²ÐµÑÑÐ¸Ñ SAP GUI" LENGTH="50 "/>
     <textElement ID="I" KEY="334" ENTRY="Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð¾ ÑÐ°Ð±Ð¾ÑÐ°ÐµÑ Ñ MS Excel." LENGTH="50 "/>
     <textElement ID="I" KEY="335" ENTRY="ÐÐ¾Ð¿ÑÐ¾Ð±ÑÐ¹ÑÐµ Ð¾Ð±Ð½Ð¾Ð²Ð¸ÑÑ SAP GUI Ð´Ð¾ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½ÐµÐ¹ Ð²ÐµÑÑÐ¸Ð¸." LENGTH="50 "/>
     <textElement ID="I" KEY="336" ENTRY="ÐÑÐ¸Ð±ÐºÐ° ÑÑÐµÐ½Ð¸Ñ ÑÐ°Ð¹Ð»Ð° ÑÐ°Ð±Ð»Ð¾Ð½Ð°" LENGTH="50 "/>
     <textElement ID="I" KEY="337" ENTRY="Ð Ð°Ð·Ð¼ÐµÑ" LENGTH="50 "/>
     <textElement ID="I" KEY="338" ENTRY="ÐÐ¿Ð¸ÑÐ°ÑÑ Ð² Ð¾Ð±Ð»Ð°ÑÑÑ" LENGTH="50 "/>
     <textElement ID="I" KEY="339" ENTRY="ÐÐ· Ð¿Ð¾Ð»Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ°" LENGTH="50 "/>
     <textElement ID="I" KEY="340" ENTRY="ÐÑÑÐ¾ÑÐ°" LENGTH="50 "/>
     <textElement ID="I" KEY="341" ENTRY="Ð¨Ð¸ÑÐ¸Ð½Ð°" LENGTH="50 "/>
     <textElement ID="I" KEY="342" ENTRY="ÐÐ¾ÑÐ½ÐµÐ²Ð¾Ð¹ ÑÐ·ÐµÐ» Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ ÑÐ´Ð°Ð»ÑÐ½" LENGTH="132 "/>
     <textElement ID="I" KEY="343" ENTRY="ÐÐ°Ð³Ð¾Ð»Ð¾Ð²Ð¾Ðº ÐÑÐ¸ ÐÐ½Ð°ÑÐµÐ½Ð¸Ð¹" LENGTH="50 "/>
     <textElement ID="I" KEY="344" ENTRY="ÐÐ°Ð³Ð¾Ð»Ð¾Ð²Ð¾Ðº ÐÑÐ¸ ÐÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¹" LENGTH="50 "/>
     <textElement ID="I" KEY="345" ENTRY="ÐÐ·Ð¼ÐµÐ½ÐµÐ½Ð¸Ðµ ÑÑÐ¾Ð³Ð¾ Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÐ° Ð¼Ð¾Ð¶ÐµÑ Ð¿ÑÐ¸Ð²ÐµÑÑÐ¸ Ðº Ð¾ÑÐ¸Ð±ÐºÐµ ÑÐ°Ð¹Ð»Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="346" ENTRY="ÐÑÐ¾ÑÐ¸Ðµ Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÑ" LENGTH="50 "/>
     <textElement ID="I" KEY="347" ENTRY="Ð¡Ð¾ÑÑÐ°Ð½ÑÑÑ Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð½ÑÐµ Ð´Ð¸Ð°Ð¿Ð°Ð·Ð¾Ð½Ñ ÑÐ°Ð±Ð»Ð¾Ð½Ð°" LENGTH="132 "/>
     <textElement ID="I" KEY="348" ENTRY="ÐÑÐ¾Ð²ÐµÑÐºÐ° Ð´Ð°Ð½Ð½ÑÑ" LENGTH="132 "/>
     <textElement ID="I" KEY="349" ENTRY="ÐÑÑÐ¸Ð±ÑÑÑ (Ð¸Ð· ÑÐ°Ð±Ð»Ð¾Ð½Ð°)" LENGTH="132 "/>
     <textElement ID="I" KEY="350" ENTRY="Ð¢Ð°Ð±Ð»Ð¸ÑÐ° Ð´Ð»Ñ Ð´Ð¸Ð½Ð°Ð¼Ð¸Ñ.Ð·Ð°Ð¼ÐµÐ½Ñ (Ð°ÑÑÐ¸Ð±ÑÑ/Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ)" LENGTH="132 "/>
     <textElement ID="I" KEY="351" ENTRY="ÐÐ½Ð°ÑÐµÐ½Ð¸Ðµ (Ð¤Ð¾ÑÐ¼ÑÐ»Ð°)" LENGTH="132 "/>
     <textElement ID="I" KEY="352" ENTRY="ÐÐ· ÐÐ°Ð±.Ð´Ð°Ð½Ð½ÑÑ (ÐÑÐ¸Ð´Ð°)" LENGTH="132 "/>
     <textElement ID="I" KEY="353" ENTRY="ÐÐ¾Ð»Ðµ ÐÐ°Ð±.Ð´Ð°Ð½Ð½ÑÑ Ð½Ðµ ÑÐºÐ°Ð·Ð°Ð½Ð¾" LENGTH="132 "/>
     <textElement ID="I" KEY="354" ENTRY="ÐÐ¾Ð»Ðµ ÐÐ°Ð±.Ð´Ð°Ð½Ð½ÑÑ Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð¾" LENGTH="132 "/>
     <textElement ID="I" KEY="355" ENTRY="Ð Ð°ÑÐ¿Ð¾Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ Ð¾ÑÐ½Ð¾ÑÐ¸ÑÐµÐ»ÑÐ½Ð¾ Ð²Ð»Ð¾Ð¶ÐµÐ½Ð½Ð¾Ð¹ Ð¾Ð±Ð»Ð°ÑÑÐ¸" LENGTH="132 "/>
     <textElement ID="I" KEY="356" ENTRY="ÐÐ¾" LENGTH="132 "/>
     <textElement ID="I" KEY="357" ENTRY="ÐÐ¾ÑÐ»Ðµ" LENGTH="132 "/>
    </language>
   </textPool>
   <dynpros>
    <dynpro PROG="SAPLZXLWB" DNUM="0100" FNUM="0100" BZMX="0 " BZBR="0 " MILI="196 " MICO="37 " MALI="0 " MACO="0 " NOLI="200 " NOCO="255 " VALP="0 " CUAN="G" SPRA="E" DTEXT="screen100">
     <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
     <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE 0100_pbo.
*
PROCESS AFTER INPUT.
  MODULE 0100_pai.</dynproflowsource>
    </dynpro>
   </dynpros>
   <pfstatus>
    <pfstatus_sta CODE="0100_PF" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="common"/>
    <pfstatus_fun CODE="BACK" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="ÐÐ°Ð·Ð°Ð´"/>
    <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
    <pfstatus_set STATUS="0100_PF" FUNCTION="BACK"/>
    <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="common"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="common"/>
    <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="common"/>
    <pfstatus_tit CODE="0100_TB" TEXT="&amp;"/>
   </pfstatus>
   <source>*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZXLWBTOP.                         &quot; Global Data
  INCLUDE LZXLWBUXX.                         &quot; Function Modules

*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
  INCLUDE LZXLWBF01.                         &quot; Subprograms
* INCLUDE LZXLWBO...                         &quot; PBO-Modules
* INCLUDE LZXLWBI...                         &quot; PAI-Modules</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZXLWBF01" VARCL="X" SUBC="I" APPL="S" LEVL="700" RMAND="001" RLOAD="E" UCCHECK="X">
    <include_source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           LZXLWBF01            D y n P r o   r o u t i n e s
*&amp;---------------------------------------------------------------------*

*=======================================================================
*=======================================================================
* Copyright 2016 Igor Borodin
* Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*     http://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*=======================================================================
*=======================================================================
*
* XLSX-Workbench(XLWB) components                         [Version 3.09]
* Documentation is available at:
*                             https://sites.google.com/site/sapxlwb/home
*=======================================================================
* DynPro routines
*=======================================================================


*&amp;---------------------------------------------------------------------*
*&amp;      Module  0100_PBO  OUTPUT
*&amp;---------------------------------------------------------------------*
MODULE 0100_pbo OUTPUT .
  PERFORM 0100_pbo .
ENDMODULE .                 &quot; 0100_PBO  OUTPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  0100_PAI INPUT
*&amp;---------------------------------------------------------------------*
MODULE 0100_pai INPUT .
  PERFORM 0100_pai .
ENDMODULE .                 &quot; 0100_PAI  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Form  0100_pbo
*&amp;---------------------------------------------------------------------*
FORM 0100_pbo .

  SET PF-STATUS &apos;0100_PF&apos; .

  CASE gv_mode .
    WHEN c_mode-workbench .
      gr_workbench-&gt;pbo( ) .
      SET TITLEBAR &apos;0100_TB&apos; WITH gr_workbench-&gt;v_title .

    WHEN c_mode-viewer .
      gr_viewer-&gt;pbo( ) .
      SET TITLEBAR &apos;0100_TB&apos; WITH gr_viewer-&gt;v_title .

    WHEN OTHERS .

  ENDCASE .

ENDFORM .                                                   &quot;0100_pbo
*&amp;---------------------------------------------------------------------*
*&amp;      Form  0100_pai
*&amp;---------------------------------------------------------------------*
FORM 0100_pai .

  CASE gv_mode .
    WHEN c_mode-workbench .
      CHECK sy-ucomm EQ &apos;BACK&apos; .

      CHECK abap_on
         EQ lcl_workbench=&gt;popup_to_confirm( iv_text = lcl_workbench=&gt;v_text-t138 ) .  &quot; text: Leave the workbench ?

      IF gr_workbench IS BOUND .
        gr_workbench-&gt;free( ) .
        FREE gr_workbench .
      ENDIF .
      LEAVE TO SCREEN 0 .

    WHEN c_mode-viewer .
      CHECK sy-ucomm EQ &apos;BACK&apos; .

      DATA lv_fcode TYPE ui_func .
      lv_fcode = sy-ucomm .

      IF gr_viewer IS BOUND .
        IF  gr_viewer-&gt;s_docbuffer-callback_form IS NOT INITIAL
        AND gr_viewer-&gt;s_docbuffer-callback_prog IS NOT INITIAL .
          PERFORM (gr_viewer-&gt;s_docbuffer-callback_form)
          IN PROGRAM (gr_viewer-&gt;s_docbuffer-callback_prog) IF FOUND
               USING gr_viewer-&gt;c_event-function_code
            CHANGING lv_fcode                              &quot; TYPE ui_func
                     gr_viewer-&gt;r_appltoolbar-&gt;r_toolbar   &quot; TYPE REF TO cl_gui_toolbar
                     gr_viewer-&gt;s_docbuffer-rawdata .      &quot; TYPE xstring
        ENDIF .
      ENDIF .

      CHECK lv_fcode EQ &apos;BACK&apos; .

      IF gr_viewer IS BOUND .
        gr_viewer-&gt;free( ) .
        FREE gr_viewer .
      ENDIF .
      LEAVE TO SCREEN 0 .
  ENDCASE .

ENDFORM .                                                   &quot;0100_pai
*&amp;---------------------------------------------------------------------*
*&amp;      Form  viewer_bundle_refresh
*&amp;---------------------------------------------------------------------*
FORM viewer_bundle_refresh .

  IF gr_viewer IS BOUND .
    gr_viewer-&gt;free( ) .
    FREE gr_viewer .
  ENDIF .

  CREATE OBJECT gr_viewer
    EXPORTING
      ir_container = cl_gui_container=&gt;default_screen
      iv_viewmode  = lcl_vr_ole=&gt;c_viewmode-inplace
    EXCEPTIONS
      OTHERS       = 1.

ENDFORM .                    &quot;viewer_bundle_refresh
*&amp;---------------------------------------------------------------------*
*&amp;      Form  viewer_queue_begin
*&amp;---------------------------------------------------------------------*
FORM viewer_bundle_open .

  PERFORM viewer_bundle_refresh .

  gv_viewer_bundle_collect = abap_on .

ENDFORM .                    &quot;viewer_bundle_open
*&amp;---------------------------------------------------------------------*
*&amp;      Form  viewer_bundle_close
*&amp;---------------------------------------------------------------------*
FORM viewer_bundle_close .

  DO 1 TIMES .
    CHECK gr_viewer IS BOUND .
*   call Excel-form in floating mode
    gr_viewer-&gt;call_floating( ) .

*   call Excel-form inplace
    CHECK gr_viewer-&gt;t_docbuffer[] IS NOT INITIAL .
    gv_mode = c_mode-viewer .
    CALL SCREEN 0100 .
  ENDDO .

  gv_viewer_bundle_collect = abap_off .

ENDFORM .                    &quot;viewer_bundle_close
*&amp;---------------------------------------------------------------------*
*&amp;      Form  viewer_get_doi_object
*&amp;---------------------------------------------------------------------*
FORM viewer_get_doi_object
  CHANGING  cr_container_control    TYPE REF TO i_oi_container_control
            cr_document_proxy       TYPE REF TO i_oi_document_proxy
            cr_spreadsheet          TYPE REF TO i_oi_spreadsheet       .

  FREE:  cr_container_control,  cr_document_proxy,  cr_spreadsheet.
  CLEAR: cr_container_control,  cr_document_proxy,  cr_spreadsheet.

  CHECK gr_viewer IS BOUND .
  CHECK gr_viewer-&gt;r_excelole IS BOUND .
  cr_container_control = gr_viewer-&gt;r_excelole-&gt;r_control .
  cr_document_proxy    = gr_viewer-&gt;r_excelole-&gt;r_docproxy .
  cr_spreadsheet       = gr_viewer-&gt;r_excelole-&gt;r_spreadsheet .

ENDFORM .                    &quot;viewer_get_doi_object
*&amp;---------------------------------------------------------------------*
*&amp;      Form  viewer_get_actual_document
*&amp;---------------------------------------------------------------------*
FORM viewer_get_actual_document
  CHANGING  cv_document_size    TYPE i
            ct_document_table   TYPE solix_tab .

  FREE:  cv_document_size ,  ct_document_table .
  CLEAR: cv_document_size ,  ct_document_table .

  CHECK gr_viewer IS BOUND .
  CHECK gr_viewer-&gt;r_excelole IS BOUND .

  gr_viewer-&gt;r_excelole-&gt;r_docproxy-&gt;save_document_to_table(
      CHANGING document_size  = cv_document_size
               document_table = ct_document_table ) .

ENDFORM .                    &quot;viewer_get_actual_document</include_source>
   </include>
   <include NAME="LZXLWBTOP" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="001" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source>FUNCTION-POOL ZXLWB.                        &quot;MESSAGE-ID ..

*=======================================================================
*=======================================================================
* Copyright 2016 Igor Borodin
* Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*     http://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*=======================================================================
*=======================================================================
*
* XLSX-Workbench(XLWB) components                         [Version 3.03]
* Documentation is available at:
*                             https://sites.google.com/site/sapxlwb/home
*=======================================================================
* DynPro declares
*=======================================================================


INCLUDE zxlwb_include .

TYPES:
  ty_mode             TYPE char2 .
CONSTANTS:
  BEGIN OF c_mode ,
    workbench         TYPE ty_mode VALUE &apos;WB&apos; ,
    viewer            TYPE ty_mode VALUE &apos;VR&apos; ,
  END   OF c_mode .
DATA:
  gr_workbench        TYPE REF TO lcl_workbench ,
  gr_viewer           TYPE REF TO lcl_viewer ,
  gv_mode             TYPE ty_mode ,
  gv_viewer_bundle_collect
                      TYPE flag .</include_source>
   </include>
   <include NAME="ZXLWB_INCLUDE" VARCL="X" SUBC="I" APPL="S" RMAND="001" RLOAD="E" UCCHECK="X">
    <include_source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZXLWB_INCLUDE                             C o r e
*&amp;---------------------------------------------------------------------*

*=======================================================================
*=======================================================================
* Copyright 2016 Igor Borodin
* Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*     http://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*=======================================================================
*=======================================================================
*
* XLSX-Workbench(XLWB) components                         [Version 4.10]
* Documentation is available at:
*                             https://sites.google.com/site/sapxlwb/home
*=======================================================================
* C o r e
*=======================================================================

DATA:
  gv_guidcounter      TYPE n LENGTH 10 .

*----------------------------------------------------------------------*
*       CLASS lcl_root
*----------------------------------------------------------------------*
CLASS lcl_root DEFINITION .

  TYPE-POOLS:
    icon ,
    abap ,
    stree ,
    soi ,
    rs .

  PUBLIC SECTION.
    TYPES:
      ty_r_tree             TYPE REF TO cl_hrpayna_gui_alv_tree ,
      ty_r_tree_s           TYPE REF TO cl_salv_tree .
    CONSTANTS:
      c_typename_tree       TYPE abap_abstypename VALUE &apos;CL_HRPAYNA_GUI_ALV_TREE&apos; ,
      c_typename_tree_s     TYPE abap_abstypename VALUE &apos;CL_SALV_TREE&apos; .
    TYPES:
      ty_numc3              TYPE n LENGTH 3 ,
      ty_char1              TYPE c LENGTH 1 ,
      ty_char8              TYPE c LENGTH 8 ,
      ty_char10             TYPE c LENGTH 10 ,
      ty_char15             TYPE c LENGTH 15 ,
      ty_char30             TYPE c LENGTH 30 ,
      ty_char31             TYPE c LENGTH 31 ,
      ty_char50             TYPE c LENGTH 50 ,
      ty_char100            TYPE c LENGTH 100 ,
      ty_char255            TYPE c LENGTH 255 ,
      ty_char1024           TYPE c LENGTH 1024 ,
      ty_charmax            TYPE c LENGTH 60000 .
    TYPES:
      ty_comp_type          TYPE ty_char1 ,
      ty_comp_name          TYPE massd_component ,
      ty_comp_path          TYPE string .
    TYPES:
      BEGIN OF ty_s_comp_types ,
        comp_type           TYPE ty_comp_type ,
        icon                TYPE icon_d ,
        description         TYPE ty_char100 ,
      END   OF ty_s_comp_types ,
      ty_t_comp_types       TYPE SORTED TABLE OF ty_s_comp_types
                                 WITH NON-UNIQUE KEY comp_type .
    TYPES:
      BEGIN OF ty_s_nodetab ,
        id                  TYPE snodetext-id ,
      END   OF ty_s_nodetab ,
      ty_t_nodetab          TYPE STANDARD TABLE OF ty_s_nodetab
                                 WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_patternarea ,
        sheetname           TYPE ty_char31 ,
        areaid              TYPE snode-id ,
        areaname            TYPE ty_comp_name .
    INCLUDE                 TYPE soi_area_item .
    TYPES:
        colprop             TYPE flag ,
        rowprop             TYPE flag ,
      END   OF ty_s_patternarea ,
      ty_t_patternarea      TYPE STANDARD TABLE OF ty_s_patternarea .
    TYPES:
      BEGIN OF ty_s_ctxtmulti ,
        comp_type           TYPE ty_comp_type ,
        comp_name           TYPE ty_comp_name ,
        comp_shortdescr     TYPE ddtext ,
        cb_relpath          TYPE ty_comp_path ,
      END   OF ty_s_ctxtmulti ,
      ty_t_ctxtmulti        TYPE STANDARD TABLE OF ty_s_ctxtmulti .
    TYPES:
      BEGIN OF ty_s_tree_layout ,
        rotate              TYPE flag ,   &quot; --&gt;&gt; rotate tree 90 degree CCW
        stru                TYPE flag ,   &quot; --&gt;&gt; output structure
        stru_exp_coll       TYPE flag ,   &quot; --&gt;&gt; initial state: expanded/collapsed/...
        head                TYPE flag ,   &quot; --&gt;&gt; output header
        col_hier            TYPE flag ,   &quot; --&gt;&gt; output hierarchy column
        col_hier_shift      TYPE ty_numc3,&quot; --&gt;&gt; shift text of hierarchy column
        col_hier_after      TYPE flag ,   &quot; --&gt;&gt; hierarchy column placed before/after other columns
        col_othr            TYPE flag ,   &quot; --&gt;&gt; output other columns (outtab)
        col_othr_width      TYPE ty_numc3,&quot; --&gt;&gt; width of other columns (outtab)
        allow_formulas      TYPE flag ,   &quot; --&gt;&gt; interpret value as formula if it starting with &apos;=&apos;
      END   OF ty_s_tree_layout ,
      ty_t_tree_layout      TYPE STANDARD TABLE OF ty_s_tree_layout .
    TYPES:
      BEGIN OF ty_s_grid_layout ,
        rotate              TYPE flag ,   &quot; --&gt;&gt; rotate tree 90 degree CCW
        head                TYPE flag ,   &quot; --&gt;&gt; output header
        head_titles         TYPE ty_char1,&quot; --&gt;&gt; header titles: technical/ description/ both
        allow_formulas      TYPE flag ,   &quot; --&gt;&gt; interpret value as formula if it starting with &apos;=&apos;
      END   OF ty_s_grid_layout ,
      ty_t_grid_layout      TYPE STANDARD TABLE OF ty_s_grid_layout .
    TYPES:
      ty_t_string_tab       TYPE STANDARD TABLE OF string .
    TYPES:
      ty_t_int_tab          TYPE HASHED TABLE OF i WITH UNIQUE KEY table_line .
    TYPES:
      BEGIN OF ty_s_fldval ,
        field               TYPE string ,
        value               TYPE string ,
      END   OF ty_s_fldval ,
      ty_t_fldval           TYPE STANDARD TABLE OF ty_s_fldval .
    TYPES:
      BEGIN OF ty_s_dataset_series_tab ,
        seridx              TYPE string ,
        sercap              TYPE string ,
        dtsfld              TYPE string ,
      END   OF ty_s_dataset_series_tab ,
      ty_t_dataset_series_tab TYPE STANDARD TABLE OF ty_s_dataset_series_tab
                              WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_mergecells_rel .
    INCLUDE                 TYPE soi_area_item .
    TYPES:
        autofit_rows        TYPE flag ,
        autofit_cols        TYPE flag ,
      END   OF ty_s_mergecells_rel ,
      ty_t_mergecells_rel   TYPE STANDARD TABLE OF ty_s_mergecells_rel
                                 WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_vbs_tables_tab ,
        cb_relpath          TYPE ty_comp_path , &quot; --&gt;&gt; alias path (binding with context)
        cb_shortdescr       TYPE ty_comp_path ,
        table_name          TYPE ty_char1024 ,
        table_data          TYPE REF TO data ,
      END   OF ty_s_vbs_tables_tab ,
      ty_t_vbs_tables_tab   TYPE STANDARD TABLE OF ty_s_vbs_tables_tab
                                 WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_sheetprotection_flags ,
        selectlockedcells   TYPE flag ,
        selectunlockedcells TYPE flag ,
        formatcells         TYPE flag ,
        formatcolumns       TYPE flag ,
        formatrows          TYPE flag ,
        insertcolumns       TYPE flag ,
        insertrows          TYPE flag ,
        inserthyperlinks    TYPE flag ,
        deletecolumns       TYPE flag ,
        deleterows          TYPE flag ,
        sort                TYPE flag ,
        autofilter          TYPE flag ,
        pivottables         TYPE flag ,
        objects             TYPE flag ,
        scenarios           TYPE flag ,
      END   OF ty_s_sheetprotection_flags .
    TYPES:
      BEGIN OF ty_s_sheetprotection ,  &quot; sheet protection options
        mode                TYPE ty_char1 ,
        password            TYPE string ,
        cb_val_relpath      TYPE ty_comp_path .
    INCLUDE                 TYPE ty_s_sheetprotection_flags .
    TYPES:
      END   OF ty_s_sheetprotection .
    DATA:
      v_retcode             TYPE sysubrc ,
      t_retmess             TYPE bapiret2_t .
    CONSTANTS:
      BEGIN OF c_retcode ,
        okey                TYPE sysubrc  VALUE &apos;0&apos; ,
        warning             TYPE sysubrc  VALUE &apos;1&apos; ,
        error               TYPE sysubrc  VALUE &apos;2&apos; ,
        legacy              TYPE sysubrc  VALUE &apos;3&apos; , &quot; --&gt;&gt; legacy error
      END   OF c_retcode ,
      BEGIN OF c_sheetprotection_mode ,
        off                 TYPE ty_char1 VALUE space ,
        from_template       TYPE ty_char1 VALUE &apos;1&apos; ,
        from_context        TYPE ty_char1 VALUE &apos;2&apos; ,
        static              TYPE ty_char1 VALUE &apos;3&apos; ,
      END   OF c_sheetprotection_mode ,
      c_fldseq_separator    TYPE ty_char1   VALUE &apos;:&apos; ,
      c_chart_category_idx  TYPE string     VALUE &apos;9999&apos; ,
      c_extension_xlsx      TYPE ty_char10  VALUE &apos;.xlsx&apos; ,
      c_extension_xlsm      TYPE ty_char10  VALUE &apos;.xlsm&apos; .
    METHODS:
      msg_init ,
      msg_syst_catch      IMPORTING is_syst           TYPE syst DEFAULT sy
                                    iv_toplist        TYPE flag DEFAULT space
                                    iv_subj           TYPE any  OPTIONAL ,
      msg_syst_catch2     IMPORTING is_syst           TYPE syst DEFAULT sy
                          CHANGING  ct_retmess        TYPE bapiret2_t ,
      msg_syst_convert    IMPORTING is_syst           TYPE syst DEFAULT sy
                          RETURNING value(rs_retmess) TYPE bapiret2 ,
      msg_io_catch        IMPORTING ir_error          TYPE REF TO i_oi_error
                                    iv_subj           TYPE any  OPTIONAL ,
      msg_add             IMPORTING iv_any            TYPE REF TO lcl_root ,

      msg_show            IMPORTING value(it_retmess) TYPE bapiret2_t OPTIONAL ,
      msg_show_hier       IMPORTING value(it_retmess) TYPE bapiret2_t OPTIONAL ,
      msg_check_errors_and_show
                          IMPORTING iv_any            TYPE REF TO lcl_root
                          RETURNING value(rv_error_occurs) TYPE flag .
    CLASS-DATA:
      BEGIN OF s_presets_dt ,    &quot; workbench Design-time presets
        leftframe_width       TYPE i ,    &quot; --&gt;&gt; Screen splitter left column width
        popup_tb              TYPE flag , &quot; --&gt;&gt; Request user confirmation of template binding change
        popup_im              TYPE flag , &quot; --&gt;&gt; Allow to upload an initial XLSX-template from frontend
        mesgtab_when_error    TYPE flag , &quot; --&gt;&gt; Activate messages tab when error occurs
        deselect_cells_no_tb  TYPE flag , &quot; --&gt;&gt; Losing cell range selection when the component has no template binding
      END   OF s_presets_dt ,
      BEGIN OF s_presets_rt ,    &quot; Run-time environment settings
        postprocessing_method TYPE ty_char1 ,    &quot; --&gt;&gt; Postprocessing via MS Excel application
      END   OF s_presets_rt .
    CONSTANTS:
      BEGIN OF c_postprocessing_method ,
        ole                   TYPE ty_char1 VALUE abap_on  , &quot;OLE
        vbs                   TYPE ty_char1 VALUE abap_off , &quot;VBScript
      END   OF c_postprocessing_method .
    CLASS-DATA:
      v_msg_init              TYPE flag VALUE abap_on ,
      v_gui_available         TYPE flag ,
      v_dummy                 TYPE dummy ,
      v_title                 TYPE sytitle  VALUE &apos;XLSX Workbench Ver.4.10&apos; ,
      BEGIN OF v_text ,
        url0 TYPE string ,  url1 TYPE string ,  url2 TYPE string ,  url3 TYPE string ,
        t001 TYPE string ,  t002 TYPE string ,  t003 TYPE string ,  t004 TYPE string ,  t005 TYPE string ,
        t006 TYPE string ,  t007 TYPE string ,  t008 TYPE string ,  t009 TYPE string ,  t010 TYPE string ,
        t011 TYPE string ,  t012 TYPE string ,  t013 TYPE string ,  t014 TYPE string ,  t015 TYPE string ,
        t016 TYPE string ,  t017 TYPE string ,  t018 TYPE string ,  t019 TYPE string ,  t020 TYPE string ,
        t021 TYPE string ,  t022 TYPE string ,  t023 TYPE string ,  t024 TYPE string ,  t025 TYPE string ,
        t026 TYPE string ,  t027 TYPE string ,  t028 TYPE string ,  t029 TYPE string ,  t030 TYPE string ,
        t031 TYPE string ,  t032 TYPE string ,  t033 TYPE string ,  t034 TYPE string ,  t035 TYPE string ,
        t036 TYPE string ,  t037 TYPE string ,  t038 TYPE string ,  t039 TYPE string ,  t040 TYPE string ,
        t041 TYPE string ,  t042 TYPE string ,  t043 TYPE string ,  t044 TYPE string ,  t045 TYPE string ,
        t046 TYPE string ,  t047 TYPE string ,  t048 TYPE string ,  t049 TYPE string ,  t050 TYPE string ,
        t051 TYPE string ,  t052 TYPE string ,  t053 TYPE string ,  t054 TYPE string ,  t055 TYPE string ,
        t056 TYPE string ,  t057 TYPE string ,  t058 TYPE string ,  t059 TYPE string ,  t060 TYPE string ,
        t061 TYPE string ,  t062 TYPE string ,  t063 TYPE string ,  t064 TYPE string ,  t065 TYPE string ,
        t066 TYPE string ,  t067 TYPE string ,  t068 TYPE string ,  t069 TYPE string ,  t070 TYPE string ,
        t071 TYPE string ,  t072 TYPE string ,  t073 TYPE string ,  t074 TYPE string ,  t075 TYPE string ,
        t076 TYPE string ,  t077 TYPE string ,  t078 TYPE string ,  t079 TYPE string ,  t080 TYPE string ,
        t081 TYPE string ,  t082 TYPE string ,  t083 TYPE string ,  t084 TYPE string ,  t085 TYPE string ,
        t086 TYPE string ,  t087 TYPE string ,  t088 TYPE string ,  t089 TYPE string ,  t090 TYPE string ,
        t091 TYPE string ,  t092 TYPE string ,  t093 TYPE string ,  t094 TYPE string ,  t095 TYPE string ,
        t096 TYPE string ,  t097 TYPE string ,  t098 TYPE string ,  t099 TYPE string ,  t100 TYPE string ,
        t101 TYPE string ,  t102 TYPE string ,  t103 TYPE string ,  t104 TYPE string ,  t105 TYPE string ,
        t106 TYPE string ,  t107 TYPE string ,  t108 TYPE string ,  t109 TYPE string ,  t110 TYPE string ,
        t111 TYPE string ,  t112 TYPE string ,  t113 TYPE string ,  t114 TYPE string ,  t115 TYPE string ,
        t116 TYPE string ,  t117 TYPE string ,  t118 TYPE string ,  t119 TYPE string ,  t120 TYPE string ,
        t121 TYPE string ,  t122 TYPE string ,  t123 TYPE string ,  t124 TYPE string ,  t125 TYPE string ,
        t126 TYPE string ,  t127 TYPE string ,  t128 TYPE string ,  t129 TYPE string ,  t130 TYPE string ,
        t131 TYPE string ,  t132 TYPE string ,  t133 TYPE string ,  t134 TYPE string ,  t135 TYPE string ,
        t136 TYPE string ,  t137 TYPE string ,  t138 TYPE string ,  t139 TYPE string ,  t140 TYPE string ,
        t141 TYPE string ,  t142 TYPE string ,  t143 TYPE string ,  t144 TYPE string ,  t145 TYPE string ,
        t146 TYPE string ,  t147 TYPE string ,  t148 TYPE string ,  t149 TYPE string ,  t150 TYPE string ,
        t151 TYPE string ,  t152 TYPE string ,  t153 TYPE string ,  t154 TYPE string ,  t155 TYPE string ,
        t156 TYPE string ,  t157 TYPE string ,  t158 TYPE string ,  t159 TYPE string ,  t160 TYPE string ,
        t161 TYPE string ,  t162 TYPE string ,  t163 TYPE string ,  t164 TYPE string ,  t165 TYPE string ,
        t166 TYPE string ,  t167 TYPE string ,  t168 TYPE string ,  t169 TYPE string ,  t170 TYPE string ,
        t171 TYPE string ,  t172 TYPE string ,  t173 TYPE string ,  t174 TYPE string ,  t175 TYPE string ,
        t176 TYPE string ,  t177 TYPE string ,  t178 TYPE string ,  t179 TYPE string ,  t180 TYPE string ,
        t181 TYPE string ,  t182 TYPE string ,  t183 TYPE string ,  t184 TYPE string ,  t185 TYPE string ,
        t186 TYPE string ,  t187 TYPE string ,  t188 TYPE string ,  t189 TYPE string ,  t190 TYPE string ,
        t191 TYPE string ,  t192 TYPE string ,  t193 TYPE string ,  t194 TYPE string ,  t195 TYPE string ,
        t196 TYPE string ,  t197 TYPE string ,  t198 TYPE string ,  t199 TYPE string ,  t200 TYPE string ,
        t201 TYPE string ,  t202 TYPE string ,  t203 TYPE string ,  t204 TYPE string ,  t205 TYPE string ,
        t206 TYPE string ,  t207 TYPE string ,  t208 TYPE string ,  t209 TYPE string ,  t210 TYPE string ,
        t211 TYPE string ,  t212 TYPE string ,  t213 TYPE string ,  t214 TYPE string ,  t215 TYPE string ,
        t216 TYPE string ,  t217 TYPE string ,  t218 TYPE string ,  t219 TYPE string ,  t220 TYPE string ,
        t221 TYPE string ,  t222 TYPE string ,  t223 TYPE string ,  t224 TYPE string ,  t225 TYPE string ,
        t226 TYPE string ,  t227 TYPE string ,  t228 TYPE string ,  t229 TYPE string ,  t230 TYPE string ,
        t231 TYPE string ,  t232 TYPE string ,  t233 TYPE string ,  t234 TYPE string ,  t235 TYPE string ,
        t236 TYPE string ,  t237 TYPE string ,  t238 TYPE string ,  t239 TYPE string ,  t240 TYPE string ,
        t241 TYPE string ,  t242 TYPE string ,  t243 TYPE string ,  t244 TYPE string ,  t245 TYPE string ,
        t246 TYPE string ,  t247 TYPE string ,  t248 TYPE string ,  t249 TYPE string ,  t250 TYPE string ,
        t251 TYPE string ,  t252 TYPE string ,  t253 TYPE string ,  t254 TYPE string ,  t255 TYPE string ,
        t256 TYPE string ,  t257 TYPE string ,  t258 TYPE string ,  t259 TYPE string ,  t260 TYPE string ,
        t261 TYPE string ,  t262 TYPE string ,  t263 TYPE string ,  t264 TYPE string ,  t265 TYPE string ,
        t266 TYPE string ,  t267 TYPE string ,  t268 TYPE string ,  t269 TYPE string ,  t270 TYPE string ,
        t271 TYPE string ,  t272 TYPE string ,  t273 TYPE string ,  t274 TYPE string ,  t275 TYPE string ,
        t276 TYPE string ,  t277 TYPE string ,  t278 TYPE string ,  t279 TYPE string ,  t280 TYPE string ,
        t281 TYPE string ,  t282 TYPE string ,  t283 TYPE string ,  t284 TYPE string ,  t285 TYPE string ,
        t286 TYPE string ,  t287 TYPE string ,  t288 TYPE string ,  t289 TYPE string ,  t290 TYPE string ,
        t291 TYPE string ,  t292 TYPE string ,  t293 TYPE string ,  t294 TYPE string ,  t295 TYPE string ,
        t296 TYPE string ,  t297 TYPE string ,  t298 TYPE string ,  t299 TYPE string ,  t300 TYPE string ,
        t301 TYPE string ,  t302 TYPE string ,  t303 TYPE string ,  t304 TYPE string ,  t305 TYPE string ,
        t306 TYPE string ,  t307 TYPE string ,  t308 TYPE string ,  t309 TYPE string ,  t310 TYPE string ,
        t311 TYPE string ,  t312 TYPE string ,  t313 TYPE string ,  t314 TYPE string ,  t315 TYPE string ,
        t316 TYPE string ,  t317 TYPE string ,  t318 TYPE string ,  t319 TYPE string ,  t320 TYPE string ,
        t321 TYPE string ,  t322 TYPE string ,  t323 TYPE string ,  t324 TYPE string ,  t325 TYPE string ,
        t326 TYPE string ,  t327 TYPE string ,  t328 TYPE string ,  t329 TYPE string ,  t330 TYPE string ,
        t331 TYPE string ,  t332 TYPE string ,  t333 TYPE string ,  t334 TYPE string ,  t335 TYPE string ,
        t336 TYPE string ,  t337 TYPE string ,  t338 TYPE string ,  t339 TYPE string ,  t340 TYPE string ,
        t341 TYPE string ,  t342 TYPE string ,  t343 TYPE string ,  t344 TYPE string ,  t345 TYPE string ,
        t346 TYPE string ,  t347 TYPE string ,  t348 TYPE string ,  t349 TYPE string ,  t350 TYPE string ,
        t351 TYPE string ,  t352 TYPE string ,  t353 TYPE string ,  t354 TYPE string ,  t355 TYPE string ,
        t356 TYPE string ,  t357 TYPE string ,  t358 TYPE string ,  t359 TYPE string ,  t360 TYPE string ,
      END   OF v_text ,
      BEGIN OF s_progressbar_loop ,
        text              TYPE ty_char100 ,
        step              TYPE i ,
        step_tmp          TYPE i ,
        row_count         TYPE sytabix ,
        row_current       TYPE sytabix ,
        percent_start     TYPE i ,
        percent_end       TYPE i ,
      END OF s_progressbar_loop .
    CLASS-METHODS:
      class_constructor ,
      init_texts ,
      is_gui_available    RETURNING value(rv_available) TYPE flag ,
      guid_create         RETURNING value(rv_guid)    TYPE string ,
      format_path         IMPORTING iv_source         TYPE any
                          CHANGING  cv_formatted      TYPE any ,
      path_file_split     IMPORTING iv_fullpath       TYPE any
                          EXPORTING ev_path           TYPE any
                                    ev_file           TYPE any ,
      progressbar         IMPORTING iv_percentage     TYPE any DEFAULT 50
                                    iv_text           TYPE any OPTIONAL ,
      progressbar_loop_init
                          IMPORTING it_tab            TYPE ANY TABLE OPTIONAL &quot; --&gt;&gt; the filled table (on which apply LOOP)
                                    iv_step           TYPE any DEFAULT 1      &quot; --&gt;&gt; step (records count) for refreshing the progress bar
                                    iv_percent_start  TYPE any DEFAULT 0      &quot; --&gt;&gt; begin percent
                                    iv_percent_end    TYPE any DEFAULT 99     &quot; --&gt;&gt; end percent
                                    iv_text           TYPE any OPTIONAL ,     &quot; --&gt;&gt; message text
      progressbar_loop_actualize ,
      get_fullpath        IMPORTING iv_parent_fullpath   TYPE any
                                    iv_relpath           TYPE any
                          RETURNING value(rv_fullpath)   TYPE ty_comp_path ,
      tech_presets_dt_load ,
      tech_presets_dt_init RETURNING value(rs_disextract) TYPE disextract ,
      tech_presets_rt_load ,
      tech_presets_rt_init RETURNING value(rs_disextract) TYPE disextract .

ENDCLASS .                    &quot;lcl_root DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_root IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_root IMPLEMENTATION .
  METHOD class_constructor .
    init_texts( ) .
    v_gui_available = is_gui_available( ) .
  ENDMETHOD .                    &quot;class_constructor
  METHOD format_path .
    DATA:
      lv_length_source    TYPE i ,
      lv_length_formatted TYPE i ,
      lv_offset           TYPE i .

    CHECK iv_source IS NOT INITIAL .

    lv_length_source = STRLEN( iv_source ) .
    DESCRIBE FIELD cv_formatted LENGTH lv_length_formatted
    IN CHARACTER MODE .

    IF lv_length_formatted GE lv_length_source .
      cv_formatted = iv_source .
    ELSE .
      lv_offset = lv_length_source - lv_length_formatted + 3 .
      cv_formatted(3) = &apos;...&apos; .
      cv_formatted+3 = iv_source+lv_offset .
    ENDIF .
  ENDMETHOD .                    &quot;format_path
  METHOD path_file_split .
    DATA:
      lv_last_occurrence  TYPE i ,
      lv_offset           TYPE i ,
      ls_result_tab       TYPE match_result ,
      lt_result_tab       TYPE match_result_tab .

    FIND ALL OCCURRENCES OF &apos;/&apos; IN iv_fullpath
    RESULTS lt_result_tab .

    lv_last_occurrence = LINES( lt_result_tab ) .
    CHECK lv_last_occurrence GT 0 .

    READ TABLE lt_result_tab INTO ls_result_tab INDEX lv_last_occurrence .
    CHECK sy-subrc EQ 0.
    lv_offset = ls_result_tab-offset + ls_result_tab-length .

    ev_path = iv_fullpath(lv_offset) .

    CHECK lv_offset LT STRLEN( iv_fullpath ) .
    ev_file = iv_fullpath+lv_offset .

  ENDMETHOD .                    &quot;PATH_FILE_SPLIT
  METHOD init_texts .

    CASE sy-langu .
      WHEN &apos;R&apos; .
        v_text-url0 = &apos;https://sites.google.com/site/sapxlwb/home&apos; .
        v_text-url1 = &apos;https://sites.google.com/site/sapxlwb/home/rus/use/tutorials&apos; .
        v_text-url2 = &apos;https://sites.google.com/site/sapxlwb/home/rus/use/tutorials/form/user_interface&apos; .
        v_text-url3 = &apos;https://sites.google.com/site/sapxlwb/home/rus/use/tutorials/form/postprocessing&apos; .
      WHEN OTHERS .
        v_text-url0 = &apos;https://sites.google.com/site/sapxlwb/home&apos; .
        v_text-url1 = &apos;https://sites.google.com/site/sapxlwb/home/eng/use/tutorials&apos; .
        v_text-url2 = &apos;https://sites.google.com/site/sapxlwb/home/eng/use/tutorials/form/user_interface&apos; .
        v_text-url3 = &apos;https://sites.google.com/site/sapxlwb/home/eng/use/tutorials/form/postprocessing&apos; .
    ENDCASE .

    v_text-t001 = &apos;Common messages&apos;(001) .
    v_text-t002 = &apos;Messages&apos;(002) .
    v_text-t003 = &apos;Components of the form&apos;(003) .
    v_text-t004 = &apos;Specify valid name of the context&apos;(004) .
    v_text-t005 = &apos;Requested node was not found in the structure&apos;(005) .
    v_text-t006 = &apos;Relevant nodes of the context are not found&apos;(006) .
    v_text-t007 = &apos;Sheets&apos;(007) .
    v_text-t008 = &apos;Sheet&apos;(008) .
    v_text-t009 = &apos;Loop&apos;(009) .
    v_text-t010 = &apos;Pattern&apos;(010) .
    v_text-t011 = &apos;Value&apos;(011) .
    v_text-t012 = &apos;Folder&apos;(012) .
    v_text-t013 = &apos;Specify a name of the form&apos;(013) .
    v_text-t014 = &apos;A form already exists with the name&apos;(014) .
    v_text-t015 = &apos;Form data is interupted&apos;(015) .
    v_text-t016 = &apos;Form is not found&apos;(016) .
    v_text-t017 = &apos;Form&apos;(017) .
    v_text-t018 = &apos;is locked by the user&apos;(018) .
    v_text-t019 = &apos;A name of the component is not unique&apos;(019) .
    v_text-t020 = &apos;Context binding is incorrect&apos;(020) .
    v_text-t021 = &apos;on the upper levels&apos;(021) .
    v_text-t022 = &apos;Context binding is missing&apos;(022) .
    v_text-t023 = &apos;Workbook must have at least one visible Worksheet&apos;(023) .
    v_text-t024 = &apos;Chars number&apos;(024) .
    v_text-t025 = &apos;overlap the field length&apos;(025) .
    v_text-t026 = &apos;problem occurs with component&apos;(026) .
    v_text-t027 = &apos;A component&apos;(027) .
    v_text-t028 = &apos;already presents&apos;(028) .
    v_text-t029 = &apos;Binding with Sheet of the template missing&apos;(029) .
    v_text-t030 = &apos;Template does not contain a Sheet&apos;(030) .
    v_text-t031 = &apos;is missing&apos;(031) .
    v_text-t032 = &apos;An area is not specified in the template&apos;(032) .
    v_text-t033 = &apos;A problem with area determination occurs&apos;(033) .
    v_text-t034 = &apos;An area is beyond the scope of upper-level areas&apos;(034) .
    v_text-t035 = &apos;is inappropriate under the component&apos;(035) .
    v_text-t036 = &apos;Form is inactive (not activated)&apos;(036) .
    v_text-t037 = &apos;Development class is not specified&apos;(037) .
    v_text-t038 = &apos;Firstly, save the form&apos;(038) .
    v_text-t039 = &apos;Component name is incorrect&apos;(039) .
    v_text-t040 = &apos;Component with same name already exists&apos;(040) .
    v_text-t041 = &apos;Moving of the component is impossible&apos;(041) .
    v_text-t042 = &apos;Window mode&apos;(042) .
    v_text-t043 = &apos;Actualize&apos;(043) .
    v_text-t044 = &apos;Save&apos;(044) .
    v_text-t045 = &apos;Save as...&apos;(045) .
    v_text-t046 = &apos;Activate&apos;(046) .
    v_text-t047 = &apos;Send mail&apos;(047) .
    v_text-t050 = &apos;The working directory is not determined&apos;(050) .
    v_text-t051 = &apos;Select an area on the actual template sheet&apos;(051) .
    v_text-t052 = &apos;Only single area selection is required&apos;(052) .
    v_text-t053 = &apos;Positioning on the sheet is impossible&apos;(053) .
    v_text-t054 = &apos;Excel is not responding. |Perhaps a cell is being edited now&apos;(054) .
    v_text-t055 = &apos;Form structure&apos;(055) .
    v_text-t056 = &apos;Status&apos;(056) .
    v_text-t057 = &apos;Direction&apos;(057) .
    v_text-t058 = &apos;Description&apos;(058) .
    v_text-t061 = &apos;Delete component&apos;(061) .
    v_text-t062 = &apos;Create component&apos;(062) .
    v_text-t063 = &apos;Move component UP&apos;(063) .
    v_text-t064 = &apos;Move component DOWN&apos;(064) .
    v_text-t066 = &apos;Select a node&apos;(066) .
    v_text-t067 = &apos;Form properties&apos;(067) .
    v_text-t068 = &apos;Component&apos;(068) .
    v_text-t069 = &apos;Properties of the component&apos;(069) .
    v_text-t070 = &apos;Messages&apos;(070) .
    v_text-t072 = &apos;Error Creating Control&apos;(072) .
    v_text-t073 = &apos;Name of the context&apos;(073) .
    v_text-t074 = &apos;&lt;...not assigned...&gt;&apos;(074) .
    v_text-t075 = &apos;Form description&apos;(075) .
    v_text-t076 = &apos;Name/ description&apos;(076) .
    v_text-t077 = &apos;Binding with context&apos;(077) .
    v_text-t078 = &apos;(optional)&apos;(078) .
    v_text-t079 = &apos;Appearance at runtime:&apos;(079) .
    v_text-t080 = &apos;Always&apos;(080) .
    v_text-t081 = &apos;Only when field contains value&apos;(081) .
    v_text-t082 = &apos;Sheet name at runtime:&apos;(082) .
    v_text-t083 = &apos;Auto&apos;(083) .
    v_text-t084 = &apos;get Value from field&apos;(084) .
    v_text-t085 = &apos;convert value to ext.format&apos;(085) .
    v_text-t086 = &apos;Binding with sheet of the template&apos;(086) .
    v_text-t087 = &apos;Area in the template&apos;(087) .
    v_text-t088 = &apos;Output direction at runtime&apos;(088) .
    v_text-t089 = &apos;Right&apos;(089) .
    v_text-t090 = &apos;Down&apos;(090) .
    v_text-t091 = &apos;Copy properties&apos;(091) .
    v_text-t092 = &apos;Rows&apos;(092) .
    v_text-t093 = &apos;Columns&apos;(093) .
    v_text-t094 = &apos;Group&apos;(094) .
    v_text-t095 = &apos;The entire value&apos;(095) .
    v_text-t096 = &apos;first&apos;(096) .
    v_text-t097 = &apos;characters&apos;(097) .
    v_text-t098 = &apos;from position&apos;(098) .
    v_text-t099 = &apos;all subsequent&apos;(099) .
    v_text-t100 = &apos;Operation was terminated by the user&apos;(100) .
    v_text-t101 = &apos;Delete form&apos;(101) .
    v_text-t102 = &apos;was deleted&apos;(102) .
    v_text-t103 = &apos;Allow to upload an initial XLSX-template from frontend&apos;(103) .
    v_text-t104 = &apos;Function has not been processed&apos;(104) .
    v_text-t105 = &apos;Notice!&apos;(105) .
    v_text-t106 = &apos;Continue&apos;(106) .
    v_text-t107 = &apos;Cancel&apos;(107) .
    v_text-t108 = &apos;Specify a unique name of the component&apos;(108) .
    v_text-t109 = &apos;Relevant nodes were not found in the context&apos;(109) .
    v_text-t110 = &apos;Component is not allowed for choice&apos;(110) .
    v_text-t111 = &apos;Field length&apos;(111) .
    v_text-t112 = &apos;Error while searching sheets in the template&apos;(112) .
    v_text-t113 = &apos;Select a sheet of the template&apos;(113) .
    v_text-t114 = &apos;Edit&apos;(114) .
    v_text-t115 = &apos;Create&apos;(115) .
    v_text-t116 = &apos;Tmpl.&apos;(116) .
    v_text-t117 = &apos;Copy&apos;(117) .
    v_text-t118 = &apos;Delete&apos;(118) .
    v_text-t119 = &apos;Moving of the component&apos;(119) .
    v_text-t120 = &apos;Relevant components are missing&apos;(120) .
    v_text-t121 = &apos;Choose a component&apos;(121) .
    v_text-t122 = &apos;RemovÐµ the component from the form&apos;(122) .
    v_text-t123 = &apos;context&apos;(123) .
    v_text-t124 = &apos;Specify a name of the context (data dictionary type)&apos;(124) .
    v_text-t125 = &apos;Process is flowing in OFF-line mode&apos;(125) .
    v_text-t126 = &apos;Specify new value&apos;(126) .
    v_text-t127 = &apos;Firstly, eliminate problems due context binding&apos;(127) .
    v_text-t128 = &apos;Removing of the binding&apos;(128) .
    v_text-t129 = &apos;Delete connection with field ?&apos;(129) .
    v_text-t130 = &apos;The property is irrelevant for component type&apos;(130) .
    v_text-t131 = &apos;Delete connection with a sheet ?&apos;(131) .
    v_text-t132 = &apos;Specify an area on the sheet:&apos;(132) .
    v_text-t133 = &apos;Connection with selected area in the template will be created&apos;(133) .
    v_text-t134 = &apos;END of the list is reached&apos;(134) .
    v_text-t135 = &apos;TOP of the list is reached&apos;(135) .
    v_text-t136 = &apos;Search the XLSX-form&apos;(136) .
    v_text-t137 = &apos;Data was not found&apos;(137) .
    v_text-t138 = &apos;Leave the workbench ?&apos;(138) .
    v_text-t139 = &apos;Drawing&apos;(139) .
    v_text-t140 = &apos;Source&apos;(140) .
    v_text-t141 = &apos;Rawdata from context field&apos;(141) .
    v_text-t142 = &apos;Drawing from template&apos;(142) .
    v_text-t143 = &apos;Select a drawing on the worksheet&apos;(143) .
    v_text-t144 = &apos;There are no drawings on the worksheet&apos;(144) .
    v_text-t145 = &apos;Name of the drawing is not specified&apos;(145) .
    v_text-t146 = &apos;does not contain any drawings&apos;(146) .
    v_text-t147 = &apos;Technical information&apos;(147) .
    v_text-t148 = &apos;Created by&apos;(148) .
    v_text-t149 = &apos;Changed by&apos;(149) .
    v_text-t150 = &apos;Package&apos;(150) .
    v_text-t151 = &apos;Form must contain at less one sheet&apos;(151) .
    v_text-t152 = &apos;Print titles&apos;(152) .
    v_text-t153 = &apos;Preventing of automatic page breaks (inside)&apos;(153) .
    v_text-t154 = &apos;Horizn.&apos;(154) .
    v_text-t155 = &apos;Vertic.&apos;(155) .
    v_text-t156 = &apos;Extend unbroken area&apos;(156) .
    v_text-t157 = &apos;This option will be implemented via OLE on FrontEnd&apos;(157) .
    v_text-t158 = &apos;shift pagebreak to the left-side border&apos;(158) .
    v_text-t159 = &apos;shift pagebreak: &amp; column(s) outside the left border&apos;(159) .
    v_text-t160 = &apos;shift pagebreak to the top border&apos;(160) .
    v_text-t161 = &apos;shift pagebreak: &amp; row(s) higher than top border&apos;(161) .
    v_text-t162 = &apos;column(s)&apos;(162) .
    v_text-t163 = &apos;row(s)&apos;(163) .
    v_text-t164 = &apos;Patterns are not found&apos;(164) .
    v_text-t165 = &apos;Select a pattern&apos;(165) .
    v_text-t166 = &apos;Save as...&apos;(166) .
    v_text-t167 = &apos;New form name&apos;(167) .
    v_text-t168 = &apos;Specify another form name&apos;(168) .
    v_text-t169 = &apos;Form with same name already exists. Overwrite it ?&apos;(169) .
    v_text-t170 = &apos;Form has been saved&apos;(170) .
    v_text-t171 = &apos;Form has been activated&apos;(171) .
    v_text-t172 = &apos;Clone component&apos;(172) .
    v_text-t173 = &apos;an actual data were not obtained from Excel !&apos;(173) .
    v_text-t174 = &apos;Tree&apos;(174) .
    v_text-t175 = &apos;Pattern (resizable)&apos;(175) .
    v_text-t176 = &apos;Merge cells&apos;(176) .
    v_text-t177 = &apos;Span rows&apos;(177) .
    v_text-t178 = &apos;Span columns&apos;(178) .
    v_text-t179 = &apos;Specify area inside single row&apos;(179) .
    v_text-t180 = &apos;Specify area inside single column&apos;(180) .
    v_text-t181 = &apos;Select components to be added&apos;(181) .
    v_text-t182 = &apos;Follow to Excel menu: DATA-&gt;OUTLINE&apos;(182) .
    v_text-t183 = &apos;and uncheck SUMMARY ROWS BELOW DETAIL&apos;(183) .
    v_text-t184 = &apos;Preparing of form data. Step:&apos;(184) .
    v_text-t185 = &apos;Layout options&apos;(185) .
    v_text-t186 = &apos;rotate 90 CCW&apos;(186) .
    v_text-t187 = &apos;standard orientation&apos;(187) .
    v_text-t188 = &apos;structure&apos;(188) .
    v_text-t189 = &apos;header&apos;(189) .
    v_text-t190 = &apos;hierarchy column&apos;(190) .
    v_text-t191 = &apos;shift&apos;(191) .
    v_text-t192 = &apos;other columns&apos;(192) .
    v_text-t193 = &apos;All Expanded&apos;(193) .
    v_text-t194 = &apos;All Collapsed&apos;(194) .
    v_text-t195 = &apos;Draft&apos;(195) .
    v_text-t196 = &apos;As area specify 2x2(or more) |cell range (see documentation)&apos;(196) .
    v_text-t197 = &apos;Writing of data to XLSX-file&apos;(197) .
    v_text-t198 = &apos;Building of tree, node:&apos;(198) .
    v_text-t199 = &apos;Before&apos;(199) .
    v_text-t200 = &apos;After&apos;(200) .
    v_text-t201 = &apos;width from f.cat.&apos;(201) .
    v_text-t202 = &apos;multiplier&apos;(202) .
    v_text-t203 = &apos;Nothing to output (Structure/ Hier.col/ Other cols)&apos;(203) .
    v_text-t204 = &apos;Actual (from TreeControl)&apos;(204) .
    v_text-t205 = &apos;. Initial state of nodes:&apos;(205) .
    v_text-t206 = &apos;Presets&apos;(206) .
    v_text-t207 = &apos;User guide&apos;(207) .
    v_text-t208 = &apos;Requesting of user confirmation due template binding change&apos;(208) .
    v_text-t209 = &apos;Upload XLSX-template from frontend&apos;(209) .
    v_text-t210 = &apos;Import&apos;(210) .
    v_text-t211 = &apos;Export&apos;(211) .
    v_text-t212 = &apos;Help&apos;(212) .
    v_text-t213 = &apos;Create the form structure automatically ?&apos;(213) .
    v_text-t214 = &apos;Mass processing&apos;(214) .
    v_text-t215 = &apos;Select all components&apos;(215) .
    v_text-t216 = &apos;Matrix (one char per cell)&apos;(216) .
    v_text-t217 = &apos;Interval:&apos;(217) .
    v_text-t218 = &apos;Do not create&apos;(218) .
    v_text-t219 = &apos;Form name&apos;(219) .
    v_text-t220 = &apos;Shift template binding coordinates&apos;(220) .
    v_text-t221 = &apos;Nothing to change&apos;(221) .
    v_text-t222 = &apos;Sheet is being prepared&apos;(222) .
    v_text-t223 = &apos;Insert page break (at the beginning)&apos;(223) .
    v_text-t224 = &apos;Print out&apos;(224) .
    v_text-t225 = &apos;Grid&apos;(225) .
    v_text-t226 = &apos;columns&apos;(226) .
    v_text-t227 = &apos;available columns set&apos;(227) .
    v_text-t228 = &apos;Setting up columns in the output table&apos;(228) .
    v_text-t229 = &apos;Tech.names&apos;(229) .
    v_text-t230 = &apos;Descriptions&apos;(230) .
    v_text-t231 = &apos;No column list is specified&apos;(231) .
    v_text-t232 = &apos;Chart&apos;(232) .
    v_text-t233 = &apos;Model&apos;(233) .
    v_text-t234 = &apos;Dataset&apos;(234) .
    v_text-t235 = &apos;Series&apos;(235) .
    v_text-t236 = &apos;Table row&apos;(236) .
    v_text-t237 = &apos;Column&apos;(237) .
    v_text-t238 = &apos;On the sheet&apos;(238) .
    v_text-t239 = &apos;Select a Chart model on the worksheet&apos;(239) .
    v_text-t240 = &apos;There are no Chart models on the worksheet&apos;(240) .
    v_text-t241 = &apos;Name of the Chart model is not specified&apos;(241) .
    v_text-t242 = &apos;does not contain any Charts&apos;(242) .
    v_text-t243 = &apos;Dataset is not specified&apos;(243) .
    v_text-t244 = &apos;Incorrect Dataset is specified&apos;(244) .
    v_text-t245 = &apos;Link between Chart series and Dataset columns&apos;(245) .
    v_text-t246 = &apos;from&apos;(246) .
    v_text-t247 = &apos;assignment&apos;(247) .
    v_text-t248 = &apos;has problems&apos;(248) .
    v_text-t249 = &apos;Dataset: Grid has hidden column&apos;(249) .
    v_text-t250 = &apos;Category Axis labels&apos;(250) .
    v_text-t251 = &apos;Chart title&apos;(251) .
    v_text-t252 = &apos;Series name&apos;(252) .
    v_text-t253 = &apos;from Model (statically)&apos;(253) .
    v_text-t254 = &apos;from Context&apos;(254) .
    v_text-t255 = &apos;from Dataset grid column captions&apos;(255) .
    v_text-t256 = &apos;File&apos;(256) .
    v_text-t257 = &apos;is saved in the directory&apos;(257) .
    v_text-t258 = &apos;Runtime state&apos;(258) .
    v_text-t259 = &apos;Visible&apos;(259) .
    v_text-t260 = &apos;Hidden&apos;(260) .
    v_text-t261 = &apos;Row processing&apos;(261) .
    v_text-t262 = &apos;All rows&apos;(262) .
    v_text-t263 = &apos;Row&apos;(263) .
    v_text-t264 = &apos;from&apos;(264) .
    v_text-t265 = &apos;to&apos;(265) .
    v_text-t266 = &apos;(0 = no limit)&apos;(266) .
    v_text-t267 = &apos;Interval is incorrect&apos;(267) .
    v_text-t268 = &apos;Formula&apos;(268) .
    v_text-t269 = &apos;allow formulas&apos;(269) .
    v_text-t270 = &apos;Activate messages tab when error occurs&apos;(270) .
    v_text-t271 = &apos;Losing cell range selection when the component has no template binding&apos;(271) .
    v_text-t272 = &apos;Mark in the text&apos;(272) .
    v_text-t273 = &apos;Char.sequence, which has to be replaced by the Value&apos;(273) .
    v_text-t274 = &apos;Chart Sheet can contain the Charts only&apos;(274) .
    v_text-t275 = &apos;AutoFit for merged cells&apos;(275) .
    v_text-t276 = &apos;Off&apos;(276) .
    v_text-t277 = &apos;Row height&apos;(277) .
    v_text-t278 = &apos;Col.width&apos;(278) .
    v_text-t279 = &apos;Properties of the Grid columns&apos;(279) .
    v_text-t280 = &apos;Problem while OLE/VBScript post-processing&apos;(280) .
    v_text-t281 = &apos;AutoFit merged cells&apos;(281) .
    v_text-t282 = &apos;Macros initialization error&apos;(282) .
    v_text-t283 = &apos;Macros execution error&apos;(283) .
    v_text-t284 = &apos;Design-time presets&apos;(284) .
    v_text-t285 = &apos;Run-time presets&apos;(285) .
    v_text-t286 = &apos;Method for post-processing&apos;(286) .
    v_text-t287 = &apos;Final post-processing&apos;(287) .
    v_text-t288 = &apos;Provide tables&apos;(288) .
    v_text-t289 = &apos;There are no changes&apos;(289) .
    v_text-t290 = &apos;Sub procedure &quot;Entry&quot; is not found or incorrect |in the final post-processing VBScript&apos;(290) .
    v_text-t291 = &apos;Tables for transferring data to Final VBScript post-processing&apos;(291) .
    v_text-t292 = &apos;Specify Table name&apos;(292) .
    v_text-t293 = &apos;Table name is not unique&apos;(293) .
    v_text-t294 = &apos;Table name&apos;(294) .
    v_text-t295 = &apos;Error accessing MS Excel application&apos;(295) .
    v_text-t296 = &apos;as Child&apos;(296) .
    v_text-t297 = &apos;as Sibling&apos;(297) .
    v_text-t298 = &apos;Sheet protection&apos;(298) .
    v_text-t299 = &apos;From template&apos;(299) .
    v_text-t300 = &apos;From context&apos;(300) .
    v_text-t301 = &apos;Static&apos;(301) .
    v_text-t302 = &apos;Select Locked Cells&apos;(302) .
    v_text-t303 = &apos;Select Unlocked Cells&apos;(303) .
    v_text-t304 = &apos;Format Cells&apos;(304) .
    v_text-t305 = &apos;Format Columns&apos;(305) .
    v_text-t306 = &apos;Format Rows&apos;(306) .
    v_text-t307 = &apos;Insert Columns&apos;(307) .
    v_text-t308 = &apos;Insert Rows&apos;(308) .
    v_text-t309 = &apos;Insert Hyperlinks&apos;(309) .
    v_text-t310 = &apos;Delete Columns&apos;(310) .
    v_text-t311 = &apos;Delete Rows&apos;(311) .
    v_text-t312 = &apos;Sort&apos;(312) .
    v_text-t313 = &apos;Auto Filter&apos;(313) .
    v_text-t314 = &apos;Pivot Tables&apos;(314) .
    v_text-t315 = &apos;Objects&apos;(315) .
    v_text-t316 = &apos;Scenarios&apos;(316) .
    v_text-t317 = &apos;Allow all users of this worksheet to:&apos;(317) .
    v_text-t318 = &apos;Password to unprotect sheet:&apos;(318) .
    v_text-t319 = &apos;Other&apos;(319) .
    v_text-t320 = &apos;Components must have same type&apos;(320) .
    v_text-t321 = &apos;Specify target parent component&apos;(321) .
    v_text-t322 = &apos;Renaming features&apos;(322) .
    v_text-t323 = &apos;add Prefix&apos;(323) .
    v_text-t324 = &apos;add Postfix&apos;(324) .
    v_text-t325 = &apos;Find text...&apos;(325) .
    v_text-t326 = &apos;... and replace with&apos;(326) .
    v_text-t327 = &apos;File format&apos;(327) .
    v_text-t328 = &apos;Without VBA-macro  .XLSX&apos;(328) .
    v_text-t329 = &apos;VBA-macro-enabled  .XLSM&apos;(329) .
    v_text-t330 = &apos;Name of Cell range&apos;(330) .
    v_text-t331 = &apos;Incorrect name of cell range&apos;(331) .
    v_text-t332 = &apos;The most probable reason is&apos;(332) .
    v_text-t333 = &apos;Your current SAP GUI version&apos;(333) .
    v_text-t334 = &apos;does not work properly with MS Excel.&apos;(334) .
    v_text-t335 = &apos;Try to update SAP GUI to latest version.&apos;(335) .
    v_text-t336 = &apos;Error while reading template file&apos;(336) .
    v_text-t337 = &apos;Size&apos;(337) .
    v_text-t338 = &apos;Fit within area&apos;(338) .
    v_text-t339 = &apos;From context field&apos;(339) .
    v_text-t340 = &apos;Height&apos;(340) .
    v_text-t341 = &apos;Width&apos;(341) .
    v_text-t342 = &apos;Root node cannot be removed&apos;(342) .
    v_text-t343 = &apos;Value Axis title&apos;(343) .
    v_text-t344 = &apos;Category Axis title&apos;(344) .
    v_text-t345 = &apos;Changing of this option can cause file error&apos;(345) .
    v_text-t346 = &apos;Other options&apos;(346) .
    v_text-t347 = &apos;Keep named ranges of template&apos;(347) .
    v_text-t348 = &apos;Data validation&apos;(348) .
    v_text-t349 = &apos;Attributes (from template)&apos;(349) .
    v_text-t350 = &apos;Table for dynamic substitution (attribute/value)&apos;(350) .
    v_text-t351 = &apos;Value (Formula)&apos;(351) .
    v_text-t352 = &apos;From Dataset (Grid)&apos;(352) .
    v_text-t353 = &apos;Field of Dataset is missing&apos;(353) .
    v_text-t354 = &apos;Field of Dataset is incorrect&apos;(354) .
    v_text-t355 = &apos;Place relative to Subarea&apos;(355) .
    v_text-t356 = &apos;Before&apos;(356) .
    v_text-t357 = &apos;After&apos;(357) .

    DEFINE mk_settext .
      if &amp;1 ca &apos;Ð°Ð±Ð²Ð³Ð´ÐµÑÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯&apos; .
      else .
        &amp;1 = &amp;2 .
      endif .
    END-OF-DEFINITION .

    CASE sy-langu .
      WHEN &apos;R&apos; .
*       special case for Russian logon language:
*         set values directly, if text elements (and translations) are not created
        mk_settext:
        v_text-t001  &apos;ÐÐ±ÑÐ¸Ðµ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸Ñ&apos; ,
        v_text-t002  &apos;Ð¡Ð¾Ð¾Ð±ÑÐµÐ½Ð¸Ñ&apos; ,
        v_text-t003  &apos;ÐÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÑ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°&apos; ,
        v_text-t004  &apos;Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾Ðµ Ð¸Ð¼Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ°&apos; ,
        v_text-t005  &apos;Ð² ÑÑÑÑÐºÑÑÑÐµ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½ Ð·Ð°Ð¿ÑÐ°ÑÐ¸Ð²Ð°ÐµÐ¼ÑÐ¹ ÑÐ·ÐµÐ»&apos; ,
        v_text-t006  &apos;ÐÐ¾Ð´ÑÐ¾Ð´ÑÑÐ¸Ñ ÑÐ·Ð»Ð¾Ð² ÐºÐ¾Ð½ÑÐµÐºÑÑÐ° Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾&apos; ,
        v_text-t007  &apos;ÐÐ¸ÑÑÑ&apos; ,
        v_text-t008  &apos;ÐÐ¸ÑÑ&apos; ,
        v_text-t009  &apos;Ð¦Ð¸ÐºÐ»&apos; ,
        v_text-t010  &apos;ÐÐ°ÑÑÐµÑÐ½&apos; ,
        v_text-t011  &apos;ÐÐ½Ð°ÑÐµÐ½Ð¸Ðµ&apos; ,
        v_text-t012  &apos;ÐÐ°Ð¿ÐºÐ°&apos; ,
        v_text-t013  &apos;Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¸Ð¼Ñ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°&apos; ,
        v_text-t014  &apos;Ð£Ð¶Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ ÑÐ¾ÑÐ¼ÑÐ»ÑÑ Ñ Ð¸Ð¼ÐµÐ½ÐµÐ¼&apos; ,
        v_text-t015  &apos;ÐÐ°Ð½Ð½ÑÐµ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ° Ð¿Ð¾Ð²ÑÐµÐ¶Ð´ÐµÐ½Ñ&apos; ,
        v_text-t016  &apos;ÑÐ¾ÑÑÐ»ÑÑ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½&apos; ,
        v_text-t017  &apos;Ð¤Ð¾ÑÐ¼ÑÐ»ÑÑ&apos; ,
        v_text-t018  &apos;Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð°Ð½ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÐµÐ¼&apos; ,
        v_text-t019  &apos;ÐÐ¼Ñ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ° Ð½Ðµ ÑÐ½Ð¸ÐºÐ°Ð»ÑÐ½Ð¾:&apos; ,
        v_text-t020  &apos;ÐÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð°Ñ ÑÐ²ÑÐ·Ñ Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ¾Ð¼&apos; ,
        v_text-t021  &apos;Ð½Ð° Ð¿ÑÐµÐ´.ÑÑÐ¾Ð²Ð½ÑÑ&apos; ,
        v_text-t022  &apos;ÐÑÑÑÑÑÑÐ²ÑÐµÑ ÑÐ²ÑÐ·Ñ Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ¾Ð¼&apos; ,
        v_text-t023  &apos;ÐÐ½Ð¸Ð³Ð° Ð´Ð¾Ð»Ð¶Ð½Ð° Ð¸Ð¼ÐµÑÑ Ð½Ðµ Ð¼ÐµÐ½ÐµÐµ Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ð²Ð¸Ð´Ð¸Ð¼Ð¾Ð³Ð¾ Ð»Ð¸ÑÑÐ°&apos; ,
        v_text-t024  &apos;ÐÐ¾Ð»-Ð²Ð¾ ÑÐ¸Ð¼Ð².&apos; ,
        v_text-t025  &apos;Ð¿ÑÐµÐ²ÑÑÐ°ÐµÑ Ð´Ð»Ð¸Ð½Ñ Ð¿Ð¾Ð»Ñ&apos; ,
        v_text-t026  &apos;Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ Ñ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ¾Ð¼&apos; ,
        v_text-t027  &apos;ÐÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ&apos; ,
        v_text-t028  &apos;ÑÐ¶Ðµ Ð¿ÑÐ¸ÑÑÑÑÑÐ²ÑÐµÑ&apos; ,
        v_text-t029  &apos;ÐÑÑÑÑÑÑÐ²ÑÐµÑ ÑÐ²ÑÐ·Ñ Ñ Ð»Ð¸ÑÑÐ¾Ð¼ ÑÐ°Ð±Ð»Ð¾Ð½Ð°&apos; ,
        v_text-t030  &apos;Ð ÑÐ°Ð±Ð»Ð¾Ð½Ðµ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½ ÐÐ¸ÑÑ&apos; ,
        v_text-t031  &apos;Ð¾ÑÑÑÑÑÑÐ²ÑÐµÑ&apos; ,
        v_text-t032  &apos;ÐÐ±Ð»Ð°ÑÑÑ Ð² ÑÐ°Ð±Ð»Ð¾Ð½Ðµ Ð½Ðµ Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÐµÐ½Ð°&apos; ,
        v_text-t033  &apos;ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÐµÐ½Ð¸Ñ Ð¾Ð±Ð»Ð°ÑÑÐ¸ ÑÐ°Ð±Ð»Ð¾Ð½Ð°&apos; ,
        v_text-t034  &apos;ÐÐ±Ð»Ð°ÑÑÑ Ð² ÑÐ°Ð±Ð»Ð¾Ð½Ðµ Ð²ÑÑÐ¾Ð´Ð¸Ñ Ð·Ð° ÑÐ°Ð¼ÐºÐ¸ Ð²ÑÑÐµÑÑ.Ð¾Ð±Ð»Ð°ÑÑÐµÐ¹&apos; ,
        v_text-t035  &apos;Ð½ÐµÐ´Ð¾Ð¿ÑÑÑÐ¸Ð¼ Ð¿Ð¾Ð´ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ¾Ð¼&apos; ,
        v_text-t036  &apos;Ð¤Ð¾ÑÐ¼ÑÐ»ÑÑ Ð½Ðµ Ð°ÐºÑÐ¸Ð²ÐµÐ½ (Ð½Ðµ Ð°ÐºÑÐ¸Ð²Ð¸ÑÐ¾Ð²Ð°Ð½)&apos; ,
        v_text-t037  &apos;ÐÐµ ÑÐºÐ°Ð·Ð°Ð½ ÐºÐ»Ð°ÑÑ ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÐºÐ¸&apos; ,
        v_text-t038  &apos;Ð¡Ð½Ð°ÑÐ°Ð»Ð° ÑÐ¾ÑÑÐ°Ð½Ð¸ÑÐµ ÑÐ¾ÑÐ¼ÑÐ»ÑÑ&apos; ,
        v_text-t039  &apos;ÐÐ¼Ñ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ° Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð¾&apos; ,
        v_text-t040  &apos;ÐÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ Ñ ÑÐ°ÐºÐ¸Ð¼ Ð¸Ð¼ÐµÐ½ÐµÐ¼ ÑÐ¶Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ&apos; ,
        v_text-t041  &apos;ÐÐµÑÐµÐ¼ÐµÑÐµÐ½Ð¸Ðµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ° Ð½ÐµÐ²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾&apos; ,
        v_text-t042  &apos;Ð ÐµÐ¶Ð¸Ð¼ Ð¾ÐºÐ½Ð°&apos; ,
        v_text-t043  &apos;ÐÐºÑÑÐ°Ð»Ð¸Ð·Ð¸ÑÐ¾Ð²Ð°ÑÑ&apos; ,
        v_text-t044  &apos;Ð¡Ð¾ÑÑÐ°Ð½Ð¸ÑÑ&apos; ,
        v_text-t045  &apos;Ð¡Ð¾ÑÑÐ°Ð½Ð¸ÑÑ ÐºÐ°Ðº...&apos; ,
        v_text-t046  &apos;ÐÐºÑÐ¸Ð²Ð¸ÑÐ¾Ð²Ð°ÑÑ&apos; ,
        v_text-t047  &apos;ÐÑÐ¿ÑÐ°Ð²Ð¸ÑÑ Ð¿Ð¾ Ð¿Ð¾ÑÑÐµ&apos; ,
        v_text-t050  &apos;Ð Ð°Ð±Ð¾ÑÐ°Ñ Ð´Ð¸ÑÐµÐºÑÐ¾ÑÐ¸Ñ Ð½Ðµ Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÐµÐ½Ð°&apos; ,
        v_text-t051  &apos;ÐÑÐ´ÐµÐ»Ð¸ÑÐµ Ð¾Ð±Ð»Ð°ÑÑÑ Ð½Ð° Ð°ÐºÑÑÐ°Ð»ÑÐ½Ð¾Ð¼ Ð»Ð¸ÑÑÐµ&apos; ,
        v_text-t052  &apos;Ð¢ÑÐµÐ±ÑÐµÑÑÑ Ð²ÑÐ´ÐµÐ»ÐµÐ½Ð¸Ðµ ÑÐ¾Ð»ÑÐºÐ¾ Ð¾Ð´Ð½Ð¾Ð¹ Ð¾Ð±Ð»Ð°ÑÑÐ¸&apos; ,
        v_text-t053  &apos;ÐÐµÐ²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ Ð¿Ð¾Ð·Ð¸ÑÐ¸Ð¾Ð½Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ Ð½Ð° Ð»Ð¸ÑÑÐµ&apos; ,
        v_text-t054  &apos;Excel Ð½Ðµ Ð¾ÑÐ²ÐµÑÐ°ÐµÑ. |ÐÐ¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, Ð² Ð´Ð°Ð½Ð½ÑÐ¹ Ð¼Ð¾Ð¼ÐµÐ½Ñ ÑÐµÐ´Ð°ÐºÑÐ¸ÑÑÐµÑÑÑ ÑÑÐµÐ¹ÐºÐ°&apos; ,
        v_text-t055  &apos;Ð¡ÑÑÑÐºÑÑÑÐ° ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°&apos; ,
        v_text-t056  &apos;Ð¡ÑÐ°ÑÑÑ&apos; ,
        v_text-t057  &apos;ÐÐ°Ð¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ&apos; ,
        v_text-t058  &apos;ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ&apos; ,
        v_text-t061  &apos;Ð£Ð´Ð°Ð»Ð¸ÑÑ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ&apos; ,
        v_text-t062  &apos;Ð¡Ð¾Ð·Ð´Ð°ÑÑ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ&apos; ,
        v_text-t063  &apos;ÐÐµÑÐµÐ´Ð².ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ Ð²Ð²ÐµÑÑ&apos; ,
        v_text-t064  &apos;ÐÐµÑÐµÐ´Ð².ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ Ð²Ð½Ð¸Ð·&apos; ,
        v_text-t066  &apos;ÐÑÐ´ÐµÐ»Ð¸ÑÐµ ÑÐ·ÐµÐ» ÑÑÑÑÐºÑÑÑÑ&apos; ,
        v_text-t067  &apos;Ð¡Ð²Ð¾Ð¹ÑÑÐ²Ð° ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°&apos; ,
        v_text-t068  &apos;ÐÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ&apos; ,
        v_text-t069  &apos;Ð¡Ð²Ð¾Ð¹ÑÑÐ²Ð° ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ°&apos; ,
        v_text-t070  &apos;Ð¡Ð¾Ð¾Ð±ÑÐµÐ½Ð¸Ñ&apos; ,
        v_text-t072  &apos;ÐÑÐ¸Ð±ÐºÐ° ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ñ ÐºÐ¾Ð½ÑÑÐ¾Ð»Ð°&apos; ,
        v_text-t073  &apos;ÐÐ°Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ðµ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ°&apos; ,
        v_text-t074  &apos;&lt;...Ð½Ðµ Ð¿ÑÐ¸ÑÐ²Ð¾ÐµÐ½Ð¾...&gt;&apos; ,
        v_text-t075  &apos;ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°&apos; ,
        v_text-t076  &apos;ÐÐ¼Ñ/ ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ&apos; ,
        v_text-t077  &apos;Ð¡Ð²ÑÐ·Ñ Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ¾Ð¼&apos; ,
        v_text-t078  &apos;(Ð¾Ð¿ÑÐ¸Ð¾Ð½Ð°Ð»ÑÐ½Ð¾)&apos; ,
        v_text-t079  &apos;ÐÐ¾ÑÐ²Ð»ÐµÐ½Ð¸Ðµ Ð¿ÑÐ¸ Ð²ÑÐ²Ð¾Ð´Ðµ:&apos; ,
        v_text-t080  &apos;ÐÑÐµÐ³Ð´Ð°&apos; ,
        v_text-t081  &apos;ÐÑÐ¸ Ð½Ð°Ð»Ð¸ÑÐ¸Ð¸ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ñ Ð² Ð¿Ð¾Ð»Ðµ&apos; ,
        v_text-t082  &apos;ÐÐ°Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð¿ÑÐ¸ Ð²ÑÐ²Ð¾Ð´Ðµ:&apos; ,
        v_text-t083  &apos;ÐÐ²ÑÐ¾&apos; ,
        v_text-t084  &apos;ÐÐ½Ð°ÑÐµÐ½Ð¸Ðµ Ð¸Ð· Ð¿Ð¾Ð»Ñ&apos; ,
        v_text-t085  &apos;Ð¿ÑÐµÐ¾Ð±Ñ.Ð²Ð¾ Ð²Ð½ÐµÑÐ½Ð¸Ð¹ ÑÐ¾ÑÐ¼Ð°Ñ&apos; ,
        v_text-t086  &apos;Ð¡Ð²ÑÐ·Ñ Ñ Ð»Ð¸ÑÑÐ¾Ð¼ ÑÐ°Ð±Ð»Ð¾Ð½Ð°&apos; ,
        v_text-t087  &apos;ÐÐ±Ð»Ð°ÑÑÑ Ð² ÑÐ°Ð±Ð»Ð¾Ð½Ðµ&apos; ,
        v_text-t088  &apos;ÐÐ°Ð¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð²ÑÐ²Ð¾Ð´Ð°&apos; ,
        v_text-t089  &apos;ÐÐ¿ÑÐ°Ð²Ð¾&apos; ,
        v_text-t090  &apos;ÐÐ½Ð¸Ð·&apos; ,
        v_text-t091  &apos;ÐÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°ÑÑ ÑÐ²Ð¾Ð¹ÑÑÐ²Ð°&apos; ,
        v_text-t092  &apos;Ð¡ÑÑÐ¾Ðº&apos; ,
        v_text-t093  &apos;Ð¡ÑÐ¾Ð»Ð±ÑÐ¾Ð²&apos; ,
        v_text-t094  &apos;ÐÑÑÐ¿Ð¿Ð¸ÑÐ¾Ð²ÐºÐ°&apos; ,
        v_text-t095  &apos;ÐÐ½Ð°ÑÐµÐ½Ð¸Ðµ Ð¿Ð¾Ð»Ð½Ð¾ÑÑÑÑ&apos; ,
        v_text-t096  &apos;Ð¿ÐµÑÐ²ÑÐµ&apos; ,
        v_text-t097  &apos;ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð²&apos; ,
        v_text-t098  &apos;Ñ Ð¿Ð¾Ð·Ð¸ÑÐ¸Ð¸&apos; ,
        v_text-t099  &apos;Ð²ÑÐµ Ð¿Ð¾ÑÐ»ÐµÐ´ÑÑÑÐ¸Ðµ&apos; ,
        v_text-t100  &apos;ÐÐ¿ÐµÑÐ°ÑÐ¸Ñ Ð¾ÑÐ¼ÐµÐ½ÐµÐ½Ð° Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÐµÐ¼&apos; ,
        v_text-t101  &apos;Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÐ¾ÑÐ¼ÑÐ»ÑÑ&apos; ,
        v_text-t102  &apos;ÑÐ´Ð°Ð»ÐµÐ½&apos; ,
        v_text-t103  &apos;ÐÐºÐ»ÑÑÐ¸ÑÑ ÑÑÐ½ÐºÑÐ¸Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ Ð½Ð°Ñ.XLSX-ÑÐ°Ð±Ð»Ð¾Ð½Ð° Ñ frontend&apos; ,
        v_text-t104  &apos;ÐÐ¾Ð¼Ð°Ð½Ð´Ð° Ð½Ðµ Ð¾Ð±ÑÐ°Ð±Ð°ÑÑÐ²Ð°ÐµÑÑÑ&apos; ,
        v_text-t105  &apos;ÐÐ½Ð¸Ð¼Ð°Ð½Ð¸Ðµ!&apos; ,
        v_text-t106  &apos;ÐÑÐ¾Ð´Ð¾Ð»Ð¶Ð¸ÑÑ&apos; ,
        v_text-t107  &apos;ÐÑÐ¼ÐµÐ½Ð¸ÑÑ&apos; ,
        v_text-t108  &apos;Ð£ÐºÐ°Ð¶Ð¸ÑÐµ ÑÐ½Ð¸ÐºÐ°Ð»ÑÐ½Ð¾Ðµ Ð½Ð°Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ðµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ°&apos; ,
        v_text-t109  &apos;ÐÐ¾Ð´ÑÐ¾Ð´ÑÑÐ¸Ñ ÑÐ·Ð»Ð¾Ð² ÐºÐ¾Ð½ÑÐµÐºÑÑÐ° Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾&apos; ,
        v_text-t110  &apos;ÐÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ Ð½ÐµÐ´Ð¾ÑÑÑÐ¿ÐµÐ½ Ð´Ð»Ñ Ð²ÑÐ±Ð¾ÑÐ°&apos; ,
        v_text-t111  &apos;ÐÐ±ÑÐ°Ñ Ð´Ð»Ð¸Ð½Ð° Ð¿Ð¾Ð»Ñ&apos; ,
        v_text-t112  &apos;ÐÑÐ¸Ð±ÐºÐ° Ð¿Ð¾Ð¸ÑÐºÐ° ÐÐ¸ÑÑÐ¾Ð² Ð² ÑÐ°Ð±Ð»Ð¾Ð½Ðµ&apos; ,
        v_text-t113  &apos;ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð»Ð¸ÑÑ ÑÐ°Ð±Ð»Ð¾Ð½Ð°&apos; ,
        v_text-t114  &apos;ÐÐ·Ð¼ÐµÐ½Ð¸ÑÑ&apos; ,
        v_text-t115  &apos;Ð¡Ð¾Ð·Ð´Ð°ÑÑ&apos; ,
        v_text-t116  &apos;Ð¨Ð°Ð±Ð».&apos; ,
        v_text-t117  &apos;Ð¡ÐºÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°ÑÑ&apos; ,
        v_text-t118  &apos;Ð£Ð´Ð°Ð»Ð¸ÑÑ&apos; ,
        v_text-t119  &apos;ÐÐµÑÐµÐ¼ÐµÑÐµÐ½Ð¸Ðµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ°&apos; ,
        v_text-t120  &apos;ÐÐµÑ Ð¿Ð¾Ð´ÑÐ¾Ð´ÑÑÐ¸Ñ ÑÐ¸Ð¿Ð¾Ð² ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ¾Ð²&apos; ,
        v_text-t121  &apos;ÐÑÐ±ÐµÑÐ¸ÑÐµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ&apos; ,
        v_text-t122  &apos;Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ° ÑÐ¾ÑÐ¼Ñ&apos; ,
        v_text-t123  &apos;ÐºÐ¾Ð½ÑÐµÐºÑÑ&apos; ,
        v_text-t124  &apos;Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¸Ð¼Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ° (ÑÐ¸Ð¿ Ð´Ð°Ð½Ð½ÑÑ Ð² ÑÐ»Ð¾Ð²Ð°ÑÐµ)&apos; ,
        v_text-t125  &apos;ÐÑÐ¾ÑÐµÑÑ Ð¿ÑÐ¾ÑÐµÐºÐ°ÐµÑ Ð² OFF-line ÑÐµÐ¶Ð¸Ð¼Ðµ&apos; ,
        v_text-t126  &apos;Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð½Ð¾Ð²Ð¾Ðµ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ&apos; ,
        v_text-t127  &apos;Ð¡Ð½Ð°ÑÐ°Ð»Ð° ÑÑÑÑÐ°Ð½Ð¸ÑÐµ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ ÑÐ²ÑÐ·Ð¸ Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ¾Ð¼&apos; ,
        v_text-t128  &apos;Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ ÑÐ²ÑÐ·Ð¸&apos; ,
        v_text-t129  &apos;Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÑÑÐ»ÐºÑ Ð½Ð° Ð¿Ð¾Ð»Ðµ ?&apos; ,
        v_text-t130  &apos;Ð¡Ð²Ð¾Ð¹ÑÑÐ²Ð¾ Ð½Ðµ ÑÐµÐ»ÐµÐ²Ð°Ð½ÑÐ½Ð¾ Ð´Ð»Ñ Ð´Ð°Ð½Ð½Ð¾Ð³Ð¾ ÑÐ¸Ð¿Ð° ÑÐ·Ð»Ð°&apos; ,
        v_text-t131  &apos;Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÐ²ÑÐ·Ñ Ñ ÐÐ¸ÑÑÐ¾Ð¼ ?&apos; ,
        v_text-t132  &apos;Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¾Ð±Ð»Ð°ÑÑÑ Ð½Ð° Ð»Ð¸ÑÑÐµ:&apos; ,
        v_text-t133  &apos;ÐÑÐ´ÐµÑ ÑÐ¾Ð·Ð´Ð°Ð½Ð° ÑÐ²ÑÐ·Ñ Ñ Ð²ÑÐ´ÐµÐ»ÐµÐ½Ð½Ð¾Ð¹ Ð¾Ð±Ð»Ð°ÑÑÑÑ Ð² ÑÐ°Ð±Ð»Ð¾Ð½Ðµ&apos; ,
        v_text-t134  &apos;ÐÐ¾ÑÑÐ¸Ð³Ð½ÑÑ ÐºÐ¾Ð½ÐµÑ ÑÐ¿Ð¸ÑÐºÐ°&apos; ,
        v_text-t135  &apos;ÐÐ¾ÑÑÐ¸Ð³Ð½ÑÑÐ¾ Ð½Ð°ÑÐ°Ð»Ð¾ ÑÐ¿Ð¸ÑÐºÐ°&apos; ,
        v_text-t136  &apos;ÐÐ¾Ð¸ÑÐº XLSX-ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°&apos; ,
        v_text-t137  &apos;ÐÐ°Ð½Ð½ÑÐµ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ñ&apos; ,
        v_text-t138  &apos;ÐÑÐ¹ÑÐ¸ Ð¸Ð· ÑÐµÐ´Ð°ÐºÑÐ¾ÑÐ°?&apos; ,
        v_text-t139  &apos;Ð Ð¸ÑÑÐ½Ð¾Ðº&apos; ,
        v_text-t140  &apos;ÐÑÑÐ¾ÑÐ½Ð¸Ðº&apos; ,
        v_text-t141  &apos;ÐÐ°Ð½Ð½ÑÐµ Ð¸Ð· Ð¿Ð¾Ð»Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ°&apos; ,
        v_text-t142  &apos;Ð Ð¸ÑÑÐ½Ð¾Ðº Ð¸Ð· ÑÐ°Ð±Ð»Ð¾Ð½Ð°&apos; ,
        v_text-t143  &apos;ÐÑÐ±ÐµÑÐ¸ÑÐµ ÑÐ¸ÑÑÐ½Ð¾Ðº Ð½Ð° Ð»Ð¸ÑÑÐµ&apos; ,
        v_text-t144  &apos;ÐÐµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾ ÑÐ¸ÑÑÐ½ÐºÐ¾Ð² Ð½Ð° Ð»Ð¸ÑÑÐµ&apos; ,
        v_text-t145  &apos;ÐÐ°Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ðµ ÑÐ¸ÑÑÐ½ÐºÐ° Ð½Ðµ Ð·Ð°Ð´Ð°Ð½Ð¾&apos; ,
        v_text-t146  &apos;Ð½Ðµ ÑÐ¾Ð´ÐµÑÐ¶Ð¸Ñ ÑÐ¸ÑÑÐ½ÐºÐ¾Ð²&apos; ,
        v_text-t147  &apos;Ð¢ÐµÑÐ½Ð¸ÑÐµÑÐºÐ°Ñ Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ñ&apos; ,
        v_text-t148  &apos;Ð¡Ð¾Ð·Ð´Ð°Ð½Ð¾&apos; ,
        v_text-t149  &apos;ÐÐ·Ð¼ÐµÐ½ÐµÐ½Ð¾&apos; ,
        v_text-t150  &apos;ÐÐ°ÐºÐµÑ&apos; ,
        v_text-t151  &apos;Ð ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐµ Ð´Ð¾Ð»Ð¶ÐµÐ½ Ð±ÑÑÑ Ð¼Ð¸Ð½Ð¸Ð¼ÑÐ¼ Ð¾Ð´Ð¸Ð½ Ð»Ð¸ÑÑ&apos; ,
        v_text-t152  &apos;ÐÐµÑÐ°ÑÑ Ð½Ð° ÐºÐ°Ð¶Ð´Ð¾Ð¹ ÑÑÑÐ°Ð½Ð¸ÑÐµ&apos; ,
        v_text-t153  &apos;ÐÑÐµÐ´Ð¾ÑÐ²Ñ.Ð°Ð²ÑÐ¾Ð¼Ð°ÑÐ¸Ñ.ÑÐ°Ð·ÑÑÐ²Ð° ÑÑÑÐ°Ð½Ð¸Ñ (Ð²Ð½ÑÑÑÐ¸)&apos; ,
        v_text-t154  &apos;ÐÐ¾ÑÐ¸Ð·Ñ.&apos; ,
        v_text-t155  &apos;ÐÐµÑÑÐ¸Ðº.&apos; ,
        v_text-t156  &apos;ÐÑÐ¾Ð´Ð»Ð¸ÑÑ Ð½ÐµÑÐ°Ð·ÑÑÐ²Ð½ÑÑ Ð¾Ð±Ð»Ð°ÑÑÑ&apos; ,
        v_text-t157  &apos;ÐÐ¿ÑÐ¸Ñ Ð±ÑÐ´ÐµÑ ÑÐµÐ°Ð»Ð¸Ð·Ð¾Ð²Ð°Ð½Ð° Ð½Ð° FrontEnd ÑÐµÑÐµÐ· OLE&apos; ,
        v_text-t158  &apos;ÐÐµÑÐµÐ½Ð¾Ñ ÑÐ°Ð·ÑÑÐ²Ð° Ðº Ð»ÐµÐ²Ð¾Ð¹ Ð³ÑÐ°Ð½Ð¸ÑÐµ&apos; ,
        v_text-t159  &apos;ÐÐµÑÐµÐ½Ð¾Ñ ÑÐ°Ð·ÑÑÐ²Ð° Ð½Ð° &amp; ÑÑÐ»Ð± Ð·Ð° Ð¿ÑÐµÐ´ÐµÐ»Ñ Ð»ÐµÐ²Ð¾Ð¹ Ð³ÑÐ°Ð½Ð¸ÑÑ&apos; ,
        v_text-t160  &apos;ÐÐµÑÐµÐ½Ð¾Ñ ÑÐ°Ð·ÑÑÐ²Ð° Ðº Ð²ÐµÑÑÐ½ÐµÐ¹ Ð³ÑÐ°Ð½Ð¸ÑÐµ&apos; ,
        v_text-t161  &apos;ÐÐµÑÐµÐ½Ð¾Ñ ÑÐ°Ð·ÑÑÐ²Ð° Ð½Ð° &amp; ÑÑÑÐº Ð²ÑÑÐµ, ÑÐµÐ¼ Ð²ÐµÑÑÐ½ÑÑ Ð³ÑÐ°Ð½Ð¸ÑÐ°&apos; ,
        v_text-t162  &apos;ÑÑÐ»Ð±.&apos; ,
        v_text-t163  &apos;ÑÑÑÐº.&apos; ,
        v_text-t164  &apos;ÐÐ°ÑÑÐµÑÐ½Ñ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ñ&apos; ,
        v_text-t165  &apos;ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð¿Ð°ÑÑÐµÑÐ½&apos; ,
        v_text-t166  &apos;Ð¡Ð¾ÑÑÐ°Ð½Ð¸ÑÑ ÐºÐ°Ðº...&apos; ,
        v_text-t167  &apos;ÐÐ¾Ð²Ð¾Ðµ Ð¸Ð¼Ñ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°&apos; ,
        v_text-t168  &apos;Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð´ÑÑÐ³Ð¾Ðµ Ð¸Ð¼Ñ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°&apos; ,
        v_text-t169  &apos;Ð¤Ð¾ÑÐ¼ÑÐ»ÑÑ Ñ ÑÐ°ÐºÐ¸Ð¼ Ð¸Ð¼ÐµÐ½ÐµÐ¼ ÑÐ¶Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ. ÐÐ°Ð¼ÐµÐ½Ð¸ÑÑ?&apos; ,
        v_text-t170  &apos;Ð¤Ð¾ÑÐ¼ÑÐ»ÑÑ ÑÐ¾ÑÑÐ°Ð½ÐµÐ½&apos; ,
        v_text-t171  &apos;Ð¤Ð¾ÑÐ¼ÑÐ»ÑÑ Ð°ÐºÑÐ¸Ð²Ð¸ÑÐ¾Ð²Ð°Ð½&apos; ,
        v_text-t172  &apos;ÐÑÐ±Ð»Ð¸ÑÐ¾Ð²Ð°ÑÑ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ&apos; ,
        v_text-t173  &apos;ÐÐºÑÑÐ°Ð»ÑÐ½ÑÐµ Ð´Ð°Ð½Ð½ÑÐµ Ð½Ðµ Ð±ÑÐ»Ð¸ Ð¿Ð¾Ð»ÑÑÐµÐ½Ñ Ð¸Ð· Excel !&apos; ,
        v_text-t174  &apos;ÐÐµÑÐµÐ²Ð¾&apos; ,
        v_text-t175  &apos;ÐÐ°ÑÑÐµÑÐ½ (Ð¼Ð°ÑÑÑÐ°Ð±Ð¸Ñ.)&apos; ,
        v_text-t176  &apos;ÐÐ±ÑÐµÐ´Ð¸Ð½ÐµÐ½Ð¸Ðµ ÑÑÐµÐµÐº&apos; ,
        v_text-t177  &apos;ÐÑÐ²Ð°Ñ ÑÑÑÐ¾Ðº&apos; ,
        v_text-t178  &apos;ÐÑÐ²Ð°Ñ ÑÑÐ¾Ð»Ð±ÑÐ¾Ð²&apos; ,
        v_text-t179  &apos;Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¾Ð±Ð»Ð°ÑÑÑ Ð²ÑÑÐ¾ÑÐ¾Ð¹ Ð² Ð¾Ð´Ð½Ñ ÑÑÑÐ¾ÐºÑ&apos; ,
        v_text-t180  &apos;Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¾Ð±Ð»Ð°ÑÑÑ ÑÐ¸ÑÐ¸Ð½Ð¾Ð¹ Ð² Ð¾Ð´Ð¸Ð½ ÑÑÐ¾Ð»Ð±ÐµÑ&apos; ,
        v_text-t181  &apos;ÐÑÐ±ÐµÑÐ¸ÑÐµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÑ Ð´Ð»Ñ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ&apos; ,
        v_text-t182  &apos;Ð Ð¼ÐµÐ½Ñ Excel: ÐÐ°Ð½Ð½ÑÐµ &gt; Ð¡ÑÑÑÐºÑÑÑÐ°&apos; ,
        v_text-t183  &apos;ÑÐ±ÐµÑÐ¸ÑÐµ Ð³Ð°Ð»Ð¾ÑÐºÑ ÐÐ¢ÐÐÐÐÐ«Ð Ð¡Ð¢Ð ÐÐÐ ÐÐÐ ÐÐÐÐÐ«ÐÐ&apos; ,
        v_text-t184  &apos;ÐÐ¾Ð´Ð³Ð¾ÑÐ¾Ð²ÐºÐ° Ð´Ð°Ð½Ð½ÑÑ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°. Ð¨Ð°Ð³:&apos; ,
        v_text-t185  &apos;ÐÐ¿ÑÐ¸Ð¸ Ð²ÑÐ²Ð¾Ð´Ð°&apos; ,
        v_text-t186  &apos;ÑÐ°Ð·Ð²ÐµÑÐ½ÑÑÑ Ð½Ð° 90 Ð³ÑÐ°Ð´ÑÑÐ¾Ð²&apos; ,
        v_text-t187  &apos;ÑÑÐ°Ð½Ð´Ð°ÑÑÐ½Ð°Ñ Ð¾ÑÐ¸ÐµÐ½ÑÐ°ÑÐ¸Ñ&apos; ,
        v_text-t188  &apos;ÑÑÑÑÐºÑÑÑÐ°&apos; ,
        v_text-t189  &apos;Ð·Ð°Ð³Ð¾Ð»Ð¾Ð²Ð¾Ðº&apos; ,
        v_text-t190  &apos;ÑÑÐ¾Ð»Ð±ÐµÑ Ð¸ÐµÑÐ°ÑÑÐ¸Ð¸&apos; ,
        v_text-t191  &apos;Ð¾ÑÑÑÑÐ¿&apos; ,
        v_text-t192  &apos;Ð¾ÑÑÐ°Ð»ÑÐ½ÑÐµ ÑÑÐ¾Ð»Ð±ÑÑ&apos; ,
        v_text-t193  &apos;ÐÑÐµ ÑÐ°Ð·Ð²ÐµÑÐ½ÑÑÑ&apos; ,
        v_text-t194  &apos;ÐÑÐµ ÑÐ²ÐµÑÐ½ÑÑÑ&apos; ,
        v_text-t195  &apos;Ð§ÐµÑÐ½Ð¾Ð²Ð¸Ðº&apos; ,
        v_text-t196  &apos;Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¾Ð±Ð»Ð°ÑÑÑ Ð¼Ð¸Ð½Ð¸Ð¼ÑÐ¼ |2x2 ÑÑÐµÐ¹ÐºÐ¸ (ÑÐ¼.Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÐ°ÑÐ¸Ñ)&apos; ,
        v_text-t197  &apos;ÐÐ°Ð¿Ð¸ÑÑ Ð´Ð°Ð½Ð½ÑÑ Ð² XLSX-ÑÐ°Ð¹Ð»&apos; ,
        v_text-t198  &apos;ÐÐ¾ÑÑÑÐ¾ÐµÐ½Ð¸Ðµ Ð´ÐµÑÐµÐ²Ð°, ÑÐ·ÐµÐ»:&apos; ,
        v_text-t199  &apos;Ð Ð½Ð°ÑÐ°Ð»Ðµ&apos; ,
        v_text-t200  &apos;Ð ÐºÐ¾Ð½ÑÐµ&apos; ,
        v_text-t201  &apos;ÑÐ¸ÑÐ¸Ð½Ð° Ð¿Ð¾Ð»Ñ Ð¸Ð· Ñ.ÐºÐ°Ñ.&apos; ,
        v_text-t202  &apos;Ð¼Ð½Ð¾Ð¶Ð¸ÑÐµÐ»Ñ&apos; ,
        v_text-t203  &apos;ÐÐµÑÐµÐ³Ð¾ Ð²ÑÐ²Ð¾Ð´Ð¸ÑÑ (Ð¡ÑÑÑÐºÑÑÑÐ°/ Ð¡ÑÐ¾Ð»Ð±.Ð¸ÐµÑÐ°ÑÑÐ¸Ð¸/ ÐÑ.ÑÑÐ¾Ð»Ð±ÑÑ)&apos; ,
        v_text-t204  &apos;ÐÐºÑÑÐ°Ð»Ñ.(Ð¸Ð· TreeControl)&apos; ,
        v_text-t205  &apos;. ÐÐ°ÑÐ°Ð»Ñ.ÑÐ¾ÑÑÐ¾ÑÐ½Ð¸Ðµ ÑÐ·Ð»Ð¾Ð²:&apos; ,
        v_text-t206  &apos;ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸&apos; ,
        v_text-t207  &apos;Ð ÑÐºÐ¾Ð²Ð¾Ð´ÑÑÐ²Ð¾ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ&apos; ,
        v_text-t208  &apos;ÐÐ°Ð¿ÑÐ¾Ñ Ð¿Ð¾Ð´ÑÐ²ÐµÑÐ¶Ð´.Ð´ÐµÐ¹ÑÑÐ²Ð¸Ñ Ð¿ÑÐ¸ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ð¸ ÑÐ²ÑÐ·Ð¸ Ñ ÑÐ°Ð±Ð»Ð¾Ð½Ð¾Ð¼&apos; ,
        v_text-t209  &apos;ÐÐ°Ð³ÑÑÐ·Ð¸ÑÑ XLSX-ÑÐ°Ð±Ð»Ð¾Ð½ Ñ Ð»Ð¾ÐºÐ°Ð»ÑÐ½Ð¾Ð³Ð¾ ÐºÐ¾Ð¼Ð¿ÑÑÑÐµÑÐ°&apos; ,
        v_text-t210  &apos;ÐÐ¼Ð¿Ð¾ÑÑ&apos; ,
        v_text-t211  &apos;Ð­ÐºÑÐ¿Ð¾ÑÑ&apos; ,
        v_text-t212  &apos;Ð¡Ð¿ÑÐ°Ð²ÐºÐ°&apos; ,
        v_text-t213  &apos;Ð¡Ð¾Ð·Ð´Ð°ÑÑ ÑÑÑÑÐºÑÑÑÑ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ° Ð°Ð²ÑÐ¾Ð¼Ð°ÑÐ¸ÑÐµÑÐºÐ¸ ?&apos; ,
        v_text-t214  &apos;ÐÐ°ÑÑÐ¾Ð²ÑÐµ Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ð¸&apos; ,
        v_text-t215  &apos;ÐÑÐ´ÐµÐ»Ð¸ÑÑ Ð²ÑÐµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÑ&apos; ,
        v_text-t216  &apos;ÐÐ°ÑÑÐ¸ÑÐ° (ÐºÐ°Ð¶Ð´Ð°Ñ Ð±ÑÐºÐ²Ð° - Ð² Ð¾ÑÐ´ÐµÐ»ÑÐ½Ð¾Ð¹ ÑÑÐµÐ¹ÐºÐµ)&apos; ,
        v_text-t217  &apos;ÐÐ½ÑÐµÑÐ²Ð°Ð»:&apos; ,
        v_text-t218  &apos;ÐÐµ ÑÐ¾Ð·Ð´Ð°Ð²Ð°ÑÑ&apos; ,
        v_text-t219  &apos;ÐÐ°Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ðµ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°&apos; ,
        v_text-t220  &apos;Ð¡Ð´Ð²Ð¸Ð³ ÐºÐ¾Ð¾ÑÐ´Ð¸Ð½Ð°Ñ ÑÐ²ÑÐ·Ð¸ Ñ ÑÐ°Ð±Ð»Ð¾Ð½Ð¾Ð¼&apos; ,
        v_text-t221  &apos;ÐÐµÑ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ð¹&apos; ,
        v_text-t222  &apos;ÐÐ¸ÑÑ Ð¿Ð¾Ð´Ð³Ð¾ÑÐ°Ð²Ð»Ð¸Ð²Ð°ÐµÑÑÑ&apos; ,
        v_text-t223  &apos;ÐÑÑÐ°Ð²Ð¸ÑÑ ÑÐ°Ð·ÑÑÐ² ÑÑÑÐ°Ð½Ð¸ÑÑ (Ð² Ð½Ð°ÑÐ°Ð»Ðµ)&apos; ,
        v_text-t224  &apos;ÐÐµÑÐ°ÑÑ&apos; ,
        v_text-t225  &apos;ÐÑÐ¸Ð´&apos; ,
        v_text-t226  &apos;Ð²ÑÐ±Ð¾Ñ ÑÑÐ¾Ð»Ð±ÑÐ¾Ð²&apos; ,
        v_text-t227  &apos;Ð´Ð¾ÑÑÑÐ¿Ð½ÑÐµ ÑÑÐ¾Ð»Ð±ÑÑ&apos; ,
        v_text-t228  &apos;ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ° ÑÑÐ¾Ð»Ð±ÑÐ¾Ð² Ð² Ð²ÑÑÐ¾Ð´Ð½Ð¾Ð¹ ÑÐ°Ð±Ð»Ð¸ÑÐµ&apos; ,
        v_text-t229  &apos;Ð¢ÐµÑ.Ð¸Ð¼ÐµÐ½Ð°&apos; ,
        v_text-t230  &apos;ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ñ&apos; ,
        v_text-t231  &apos;Ð¡Ð¿Ð¸ÑÐ¾Ðº Ð²ÑÐ²Ð¾Ð´Ð¸Ð¼ÑÑ ÑÑÐ¾Ð»Ð±ÑÐ¾Ð² Ð½Ðµ Ð·Ð°Ð´Ð°Ð½&apos; ,
        v_text-t232  &apos;ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼Ð°&apos; ,
        v_text-t233  &apos;ÐÐ°ÐºÐµÑ&apos; ,
        v_text-t234  &apos;ÐÐ°Ð±Ð¾Ñ Ð´Ð°Ð½Ð½ÑÑ&apos; ,
        v_text-t235  &apos;Ð ÑÐ´Ñ&apos; ,
        v_text-t236  &apos;Ð¡ÑÑÐ¾ÐºÐ° ÑÐ°Ð±Ð»Ð¸ÑÑ&apos; ,
        v_text-t237  &apos;Ð¡ÑÐ¾Ð»Ð±ÐµÑ&apos; ,
        v_text-t238  &apos;ÐÐ° Ð»Ð¸ÑÑÐµ&apos; ,
        v_text-t239  &apos;ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð¼Ð°ÐºÐµÑ ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼Ñ Ð½Ð° Ð»Ð¸ÑÑÐµ&apos; ,
        v_text-t240  &apos;ÐÐµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾ ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼ Ð½Ð° Ð»Ð¸ÑÑÐµ&apos; ,
        v_text-t241  &apos;ÐÐ°Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð¼Ð°ÐºÐµÑÐ° ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼Ñ Ð½Ðµ Ð·Ð°Ð´Ð°Ð½Ð¾&apos; ,
        v_text-t242  &apos;Ð½Ðµ ÑÐ¾Ð´ÐµÑÐ¶Ð¸Ñ ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼Ñ&apos; ,
        v_text-t243  &apos;ÐÐ°Ð±Ð¾Ñ Ð´Ð°Ð½Ð½ÑÑ Ð½Ðµ ÑÐºÐ°Ð·Ð°Ð½&apos; ,
        v_text-t244  &apos;Ð£ÐºÐ°Ð·Ð°Ð½ Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½ÑÐ¹ ÐÐ°Ð±Ð¾Ñ Ð´Ð°Ð½Ð½ÑÑ&apos; ,
        v_text-t245  &apos;Ð¡Ð²ÑÐ·Ñ Ð¼ÐµÐ¶Ð´Ñ Ð ÑÐ´Ð°Ð¼Ð¸ Ð´Ð¸Ð°Ð³ÑÐ°Ð¼Ð¼Ñ Ð¸ Ð¡ÑÐ¾Ð»Ð±ÑÐ°Ð¼Ð¸ Ð¸ÑÑ.Ð´Ð°Ð½Ð½ÑÑ&apos; ,
        v_text-t246  &apos;Ð¸Ð·&apos; ,
        v_text-t247  &apos;Ð¿ÑÐ¸ÑÐ²Ð¾ÐµÐ½Ð¸Ðµ&apos; ,
        v_text-t248  &apos;Ð¸Ð¼ÐµÐµÑ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ&apos; ,
        v_text-t249  &apos;ÐÐ°Ð±Ð¾Ñ Ð´Ð°Ð½Ð½ÑÑ: Ð² ÐÑÐ¸Ð´Ðµ ÑÐºÑÑÑ ÑÑÐ¾Ð»Ð±ÐµÑ&apos; ,
        v_text-t250  &apos;ÐÐ¾Ð´Ð¿Ð¸ÑÐ¸ ÐÑÐ¸ ÐÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¹&apos; ,
        v_text-t251  &apos;ÐÐ°Ð·Ð²Ð°Ð½Ð¸Ðµ Ð´Ð¸Ð°Ð³ÑÐ°Ð¼Ð¼Ñ&apos; ,
        v_text-t252  &apos;ÐÐ¼ÐµÐ½Ð° ÑÑÐ´Ð¾Ð²&apos; ,
        v_text-t253  &apos;Ð¸Ð· ÐÐ°ÐºÐµÑÐ° (ÑÑÐ°ÑÐ¸ÑÐ½Ð¾)&apos; ,
        v_text-t254  &apos;Ð¸Ð· ÐÐ¾Ð½ÑÐµÐºÑÑÐ°&apos; ,
        v_text-t255  &apos;Ð¸Ð· Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ð¹ ÑÑÐ¾Ð»Ð±ÑÐ¾Ð² ÐÑÐ¸Ð´Ð° Ð½Ð°Ð±Ð¾ÑÐ° Ð´Ð°Ð½Ð½ÑÑ&apos; ,
        v_text-t256  &apos;Ð¤Ð°Ð¹Ð»&apos; ,
        v_text-t257  &apos;Ð²ÑÐ³ÑÑÐ¶ÐµÐ½ Ð² Ð´Ð¸ÑÐµÐºÑÐ¾ÑÐ¸Ñ&apos; ,
        v_text-t258  &apos;ÐÑÐ¸ Ð²ÑÐ²Ð¾Ð´Ðµ&apos; ,
        v_text-t259  &apos;ÐÐ¸Ð´Ð¸Ð¼ÑÐ¹&apos; ,
        v_text-t260  &apos;Ð¡ÐºÑÑÑ&apos; ,
        v_text-t261  &apos;ÐÐ±ÑÐ°Ð±Ð¾ÑÐºÐ° ÑÑÑÐ¾Ðº&apos; ,
        v_text-t262  &apos;ÐÑÐµ ÑÑÑÐ¾ÐºÐ¸&apos; ,
        v_text-t263  &apos;Ð¡ÑÑÐ¾ÐºÐ°&apos; ,
        v_text-t264  &apos;Ñ&apos; ,
        v_text-t265  &apos;Ð¿Ð¾&apos; ,
        v_text-t266  &apos;(0 = ÐÐµÐÐ³ÑÐ°Ð½Ð¸Ñ.)&apos; ,
        v_text-t267  &apos;ÐÐ½ÑÐµÑÐ²Ð°Ð» Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐµÐ½&apos; ,
        v_text-t268  &apos;Ð¤Ð¾ÑÐ¼ÑÐ»Ð°&apos; ,
        v_text-t269  &apos;ÑÐ°Ð·ÑÐµÑÐ¸ÑÑ ÑÐ¾ÑÐ¼ÑÐ»Ñ&apos; ,
        v_text-t270  &apos;ÐÐºÑÐ¸Ð²Ð¸ÑÐ¾Ð²Ð°ÑÑ Ð²ÐºÐ»Ð°Ð´ÐºÑ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸Ð¹ Ð¿ÑÐ¸ Ð½Ð°Ð»Ð¸ÑÐ¸Ð¸ Ð¾ÑÐ¸Ð±Ð¾Ðº&apos; ,
        v_text-t271  &apos;ÐÐ¾ÑÐµÑÑ Ð²ÑÐ´ÐµÐ»ÐµÐ½Ð¸Ñ ÑÑÐµÐµÐº Ð´Ð»Ñ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ°, Ð½Ðµ Ð¸Ð¼ÐµÑÑÐµÐ³Ð¾ ÑÐ²ÑÐ·Ð¸ Ñ ÑÐ°Ð±Ð»Ð¾Ð½Ð¾Ð¼&apos; ,
        v_text-t272  &apos;ÐÐµÑÐºÐ° Ð² ÑÐµÐºÑÑÐµ&apos; ,
        v_text-t273  &apos;ÐÐ¾ÑÐ»ÐµÐ´Ð¾Ð²Ð°Ñ-ÑÑÑ ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð², ÐºÐ¾ÑÐ¾ÑÑÑ ÑÐ»ÐµÐ´ÑÐµÑ Ð·Ð°Ð¼ÐµÐ½Ð¸ÑÑ ÐÐ½Ð°ÑÐµÐ½Ð¸ÐµÐ¼&apos; ,
        v_text-t274  &apos;ÐÐ¸ÑÑ ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼ Ð¼Ð¾Ð¶ÐµÑ ÑÐ¾Ð´ÐµÑÐ¶Ð°ÑÑ ÑÐ¾Ð»ÑÐºÐ¾ ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼Ñ&apos; ,
        v_text-t275  &apos;ÐÐ²ÑÐ¾Ð¿Ð¾Ð´Ð±Ð¾Ñ ÑÐ°Ð·Ð¼ÐµÑÐ¾Ð² Ð¾Ð±ÑÐµÐ´Ð¸Ð½ÐµÐ½Ð½ÑÑ ÑÑÐµÐµÐº&apos; ,
        v_text-t276  &apos;ÐÑÐºÐ».&apos; ,
        v_text-t277  &apos;ÐÑÑÐ¾ÑÑ ÑÑÑÐ¾Ðº&apos; ,
        v_text-t278  &apos;Ð¨Ð¸ÑÐ¸Ð½Ñ ÑÑÐ»Ð±Ñ&apos; ,
        v_text-t279  &apos;Ð¡Ð²Ð¾Ð¹ÑÑÐ²Ð° ÑÑÐ¾Ð»Ð±ÑÐ¾Ð² Ð³ÑÐ¸Ð´Ð°&apos; ,
        v_text-t280  &apos;ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ð¿ÑÐ¸ Ð¿Ð¾ÑÑ-Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐµ OLE/VBScript&apos; ,
        v_text-t281  &apos;ÐÐ²ÑÐ¾Ð¿Ð¾Ð´Ð±Ð¾Ñ ÑÐ°Ð·Ð¼ÐµÑÐ¾Ð² Ð¾Ð±ÑÐµÐ´Ð¸Ð½ÐµÐ½ÑÑ ÑÑÐµÐµÐº&apos; ,
        v_text-t282  &apos;ÐÑÐ¸Ð±ÐºÐ° Ð¸Ð½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ð¸ Ð¼Ð°ÐºÑÐ¾ÑÐ°&apos; ,
        v_text-t283  &apos;ÐÑÐ¸Ð±ÐºÐ° Ð¿ÑÐ¸ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ð¸ Ð¼Ð°ÐºÑÐ¾ÑÐ°&apos; ,
        v_text-t284  &apos;ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸ Design-time&apos; ,
        v_text-t285  &apos;ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸ Run-time&apos; ,
        v_text-t286  &apos;Ð¡Ð¿Ð¾ÑÐ¾Ð± Ð¿Ð¾ÑÑ-Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ¸&apos; ,
        v_text-t287  &apos;ÐÐ°ÐºÐ»ÑÑÐ¸ÑÐµÐ»ÑÐ½Ð°Ñ Ð¿Ð¾ÑÑ-Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ°&apos; ,
        v_text-t288  &apos;ÐÐµÑÐµÐ´Ð°ÑÑ ÑÐ°Ð±Ð»Ð¸ÑÑ&apos; ,
        v_text-t289  &apos;ÐÐµÑ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ð¹&apos; ,
        v_text-t290  &apos;Sub-Ð¿ÑÐ¾ÑÐµÐ´ÑÑÐ° &quot;Entry&quot; Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð° Ð¸Ð»Ð¸ Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð° |Ð² VBScript-ÐºÐ¾Ð´Ðµ Ð·Ð°ÐºÐ»ÑÑÐ¸ÑÐµÐ»ÑÐ½Ð¾Ð¹ Ð¿Ð¾ÑÑ-Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ¸&apos; ,
        v_text-t291  &apos;Ð¢Ð°Ð±Ð»Ð¸ÑÑ Ð´Ð»Ñ Ð¿ÐµÑÐµÐ´Ð°ÑÐ¸ Ð´Ð°Ð½Ð½ÑÑ Ð² ÐÐ°ÐºÐ»ÑÑÐ¸Ñ.Ð¿Ð¾ÑÑ-Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÑ VBScript&apos; ,
        v_text-t292  &apos;Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¸Ð¼Ñ ÑÐ°Ð±Ð»Ð¸ÑÑ&apos; ,
        v_text-t293  &apos;ÐÐ¼Ñ ÑÐ°Ð±Ð»Ð¸ÑÑ Ð½Ðµ ÑÐ½Ð¸ÐºÐ°Ð»ÑÐ½Ð¾&apos; ,
        v_text-t294  &apos;ÐÐ¼Ñ ÑÐ°Ð±Ð»Ð¸ÑÑ&apos; ,
        v_text-t295  &apos;ÐÑÐ¸Ð±ÐºÐ° Ð´Ð¾ÑÑÑÐ¿Ð° Ðº Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ MS Excel&apos; ,
        v_text-t296  &apos;ÐºÐ°Ðº ÐÐ¾ÑÐµÑÐ½Ð¸Ð¹&apos; ,
        v_text-t297  &apos;Ð½Ð° Ð­ÑÐ¾Ð¼ Ð¶Ðµ ÑÑÐ¾Ð²Ð½Ðµ&apos; ,
        v_text-t298  &apos;ÐÐ°ÑÐ¸ÑÐ° Ð»Ð¸ÑÑÐ°&apos; ,
        v_text-t299  &apos;ÐÐ· ÑÐ°Ð±Ð»Ð¾Ð½Ð°&apos; ,
        v_text-t300  &apos;ÐÐ· ÐºÐ¾Ð½ÑÐµÐºÑÑÐ°&apos; ,
        v_text-t301  &apos;Ð¡ÑÐ°ÑÐ¸ÑÐµÑÐºÐ¸&apos; ,
        v_text-t302  &apos;ÐÑÐ´ÐµÐ»ÐµÐ½Ð¸Ðµ Ð·Ð°Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð°Ð½Ð½ÑÑ ÑÑÐµÐµÐº&apos; ,
        v_text-t303  &apos;ÐÑÐ´ÐµÐ»ÐµÐ½Ð¸Ðµ ÐÐµÐ·Ð°Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð°Ð½Ð½ÑÑ ÑÑÐµÐµÐº&apos; ,
        v_text-t304  &apos;Ð¤Ð¾ÑÐ¼Ð°ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ Ð¯ÑÐµÐµÐº&apos; ,
        v_text-t305  &apos;Ð¤Ð¾ÑÐ¼Ð°ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ Ð¡ÑÐ¾Ð»Ð±ÑÐ¾Ð²&apos; ,
        v_text-t306  &apos;Ð¤Ð¾ÑÐ¼Ð°ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ Ð¡ÑÑÐ¾Ðº&apos; ,
        v_text-t307  &apos;ÐÑÑÐ°Ð²ÐºÑ Ð¡ÑÐ¾Ð»Ð±ÑÐ¾Ð²&apos; ,
        v_text-t308  &apos;ÐÑÑÐ°Ð²ÐºÑ Ð¡ÑÑÐ¾Ðº&apos; ,
        v_text-t309  &apos;ÐÑÑÐ°Ð²ÐºÑ ÐÐ¸Ð¿ÐµÑÑÑÑÐ»Ð¾Ðº&apos; ,
        v_text-t310  &apos;Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¡ÑÐ¾Ð»Ð±ÑÐ¾Ð²&apos; ,
        v_text-t311  &apos;Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¡ÑÑÐ¾Ðº&apos; ,
        v_text-t312  &apos;Ð¡Ð¾ÑÑÐ¸ÑÐ¾Ð²ÐºÑ&apos; ,
        v_text-t313  &apos;ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ ÐÐ²ÑÐ¾ÑÐ¸Ð»ÑÑÐ°&apos; ,
        v_text-t314  &apos;ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð¾ÑÑÐµÑÐ¾Ð² ÑÐ²Ð¾Ð´Ð½Ð¾Ð¹ ÑÐ°Ð±Ð»Ð¸ÑÑ&apos; ,
        v_text-t315  &apos;ÐÐ·Ð¼ÐµÐ½ÐµÐ½Ð¸Ðµ ÐÐ±ÑÐµÐºÑÐ¾Ð²&apos; ,
        v_text-t316  &apos;ÐÐ·Ð¼ÐµÐ½ÐµÐ½Ð¸Ðµ Ð¡ÑÐµÐ½Ð°ÑÐ¸ÐµÐ²&apos; ,
        v_text-t317  &apos;Ð Ð°Ð·ÑÐµÑÐ¸ÑÑ Ð²ÑÐµÐ¼ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÑÐ¼ ÑÑÐ¾Ð³Ð¾ Ð»Ð¸ÑÑÐ°:&apos; ,
        v_text-t318  &apos;ÐÐ°ÑÐ¾Ð»Ñ Ð´Ð»Ñ Ð¾ÑÐºÐ»ÑÑÐµÐ½Ð¸Ñ Ð·Ð°ÑÐ¸ÑÑ Ð»Ð¸ÑÑÐ°:&apos; ,
        v_text-t319  &apos;ÐÑÑÐ³Ð¾Ð¹&apos; ,
        v_text-t320  &apos;ÐÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÑ Ð´Ð¾Ð»Ð¶Ð½Ñ Ð±ÑÑÑ Ð¾Ð´Ð½Ð¾Ð³Ð¾ ÑÐ¸Ð¿Ð°&apos; ,
        v_text-t321  &apos;Ð£ÐºÐ°Ð¶Ð¸ÑÐµ ÑÐµÐ»ÐµÐ²Ð¾Ð¹ ÑÐ¾Ð´Ð¸ÑÐµÐ»ÑÑÐºÐ¸Ð¹ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ&apos; ,
        v_text-t322  &apos;ÐÐ¿ÑÐ¸Ð¸ Ð¿ÐµÑÐµÐ¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ñ&apos; ,
        v_text-t323  &apos;Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ ÐÑÐµÑÐ¸ÐºÑ&apos; ,
        v_text-t324  &apos;Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ ÐÐ¾ÑÑÑÐ¸ÐºÑ&apos; ,
        v_text-t325  &apos;ÐÐ°Ð¹ÑÐ¸ ÑÐµÐºÑÑ...&apos; ,
        v_text-t326  &apos;...Ð¸ Ð·Ð°Ð¼ÐµÐ½Ð¸ÑÑ ÐµÐ³Ð¾ ÑÐµÐºÑÑÐ¾Ð¼&apos; ,
        v_text-t327  &apos;Ð¤Ð¾ÑÐ¼Ð°Ñ ÑÐ°Ð¹Ð»Ð°&apos; ,
        v_text-t328  &apos;ÐÐµÐ· VBA-Ð¼Ð°ÐºÑÐ¾ÑÐ¾Ð²  .XLSX&apos; ,
        v_text-t329  &apos;Ð¡ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶ÐºÐ¾Ð¹ VBA-Ð¼Ð°ÐºÑÐ¾ÑÐ¾Ð²  .XLSM&apos; ,
        v_text-t330  &apos;ÐÐ¼Ñ Ð´Ð¸Ð°Ð¿Ð°Ð·Ð¾Ð½Ð° ÑÑÐµÐµÐº&apos; ,
        v_text-t331  &apos;ÐÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð¾Ðµ Ð¸Ð¼Ñ Ð´Ð¸Ð°Ð¿Ð°Ð·Ð¾Ð½Ð° ÑÑÐµÐµÐº&apos; ,
        v_text-t332  &apos;ÐÐµÑÐ¾ÑÑÐ½Ð°Ñ Ð¿ÑÐ¸ÑÐ¸Ð½Ð° Ð² ÑÐ¾Ð¼, ÑÑÐ¾&apos; ,
        v_text-t333  &apos;ÐÐ°ÑÐ° Ð²ÐµÑÑÐ¸Ñ SAP GUI&apos; ,
        v_text-t334  &apos;Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð¾ ÑÐ°Ð±Ð¾ÑÐ°ÐµÑ Ñ MS Excel.&apos; ,
        v_text-t335  &apos;ÐÐ¾Ð¿ÑÐ¾Ð±ÑÐ¹ÑÐµ Ð¾Ð±Ð½Ð¾Ð²Ð¸ÑÑ SAP GUI Ð´Ð¾ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½ÐµÐ¹ Ð²ÐµÑÑÐ¸Ð¸.&apos; ,
        v_text-t336  &apos;ÐÑÐ¸Ð±ÐºÐ° ÑÑÐµÐ½Ð¸Ñ ÑÐ°Ð¹Ð»Ð° ÑÐ°Ð±Ð»Ð¾Ð½Ð°&apos; ,
        v_text-t337  &apos;Ð Ð°Ð·Ð¼ÐµÑ&apos; ,
        v_text-t338  &apos;ÐÐ¿Ð¸ÑÐ°ÑÑ Ð² Ð¾Ð±Ð»Ð°ÑÑÑ&apos; ,
        v_text-t339  &apos;ÐÐ· Ð¿Ð¾Ð»Ñ ÐºÐ¾Ð½ÑÐµÐºÑÑÐ°&apos; ,
        v_text-t340  &apos;ÐÑÑÐ¾ÑÐ°&apos; ,
        v_text-t341  &apos;Ð¨Ð¸ÑÐ¸Ð½Ð°&apos; ,
        v_text-t342  &apos;ÐÐ¾ÑÐ½ÐµÐ²Ð¾Ð¹ ÑÐ·ÐµÐ» Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ ÑÐ´Ð°Ð»ÑÐ½&apos; ,
        v_text-t343  &apos;ÐÐ°Ð³Ð¾Ð»Ð¾Ð²Ð¾Ðº ÐÑÐ¸ ÐÐ½Ð°ÑÐµÐ½Ð¸Ð¹&apos; ,
        v_text-t344  &apos;ÐÐ°Ð³Ð¾Ð»Ð¾Ð²Ð¾Ðº ÐÑÐ¸ ÐÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¹&apos; ,
        v_text-t345  &apos;ÐÐ·Ð¼ÐµÐ½ÐµÐ½Ð¸Ðµ ÑÑÐ¾Ð³Ð¾ Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÐ° Ð¼Ð¾Ð¶ÐµÑ Ð¿ÑÐ¸Ð²ÐµÑÑÐ¸ Ðº Ð¾ÑÐ¸Ð±ÐºÐµ ÑÐ°Ð¹Ð»Ð°&apos; ,
        v_text-t346  &apos;ÐÑÐ¾ÑÐ¸Ðµ Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÑ&apos; ,
        v_text-t347  &apos;Ð¡Ð¾ÑÑÐ°Ð½ÑÑÑ Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð½ÑÐµ Ð´Ð¸Ð°Ð¿Ð°Ð·Ð¾Ð½Ñ ÑÐ°Ð±Ð»Ð¾Ð½Ð°&apos; ,
        v_text-t348  &apos;ÐÑÐ¾Ð²ÐµÑÐºÐ° Ð´Ð°Ð½Ð½ÑÑ&apos; ,
        v_text-t349  &apos;ÐÑÑÐ¸Ð±ÑÑÑ (Ð¸Ð· ÑÐ°Ð±Ð»Ð¾Ð½Ð°)&apos; ,
        v_text-t350  &apos;Ð¢Ð°Ð±Ð»Ð¸ÑÐ° Ð´Ð»Ñ Ð´Ð¸Ð½Ð°Ð¼Ð¸Ñ.Ð·Ð°Ð¼ÐµÐ½Ñ (Ð°ÑÑÐ¸Ð±ÑÑ/Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ)&apos; ,
        v_text-t351  &apos;ÐÐ½Ð°ÑÐµÐ½Ð¸Ðµ (Ð¤Ð¾ÑÐ¼ÑÐ»Ð°)&apos; ,
        v_text-t352  &apos;ÐÐ· ÐÐ°Ð±.Ð´Ð°Ð½Ð½ÑÑ (ÐÑÐ¸Ð´Ð°)&apos; ,
        v_text-t353  &apos;ÐÐ¾Ð»Ðµ ÐÐ°Ð±.Ð´Ð°Ð½Ð½ÑÑ Ð½Ðµ Ð·Ð°Ð¿Ð¾Ð»Ð½ÐµÐ½Ð¾&apos; ,
        v_text-t354  &apos;ÐÐ¾Ð»Ðµ ÐÐ°Ð±.Ð´Ð°Ð½Ð½ÑÑ Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð¾&apos; ,
        v_text-t355  &apos;Ð Ð°ÑÐ¿Ð¾Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ Ð¾ÑÐ½Ð¾ÑÐ¸ÑÐµÐ»ÑÐ½Ð¾ Ð²Ð»Ð¾Ð¶ÐµÐ½Ð½Ð¾Ð¹ Ð¾Ð±Ð»Ð°ÑÑÐ¸&apos; ,
        v_text-t356  &apos;ÐÐ¾&apos; ,
        v_text-t357  &apos;ÐÐ¾ÑÐ»Ðµ&apos; .
      WHEN OTHERS .
*       ...
    ENDCASE .
  ENDMETHOD .                    &quot;init_texts
  METHOD is_gui_available .
    CLEAR rv_available .

    STATICS:
      lv_available        TYPE flag ,
      lv_firstcall        TYPE flag VALUE abap_on .

    IF lv_firstcall EQ abap_on .
      lv_firstcall = abap_off .

*     Background ?
      DATA:
        lv_task_state       TYPE sm04dic-counter ,
        lv_task_state_x     TYPE x ,
        lv_task_online_x    TYPE x VALUE 1 .

      CHECK sy-batch IS INITIAL .

      CALL FUNCTION &apos;TH_USER_INFO&apos;
        IMPORTING
          task_state = lv_task_state.

      lv_task_state_x = lv_task_state .
      CHECK lv_task_state_x O lv_task_online_x .

*     Update task ?
      DATA lv_in_update_task TYPE sysubrc .
      CALL FUNCTION &apos;TH_IN_UPDATE_TASK&apos;
        IMPORTING
          in_update_task = lv_in_update_task.
      CHECK lv_in_update_task IS INITIAL .

*     Batch input mode &apos;Background processing&apos; ?
      IF sy-binpt IS NOT INITIAL .
        DATA ls_bi_info TYPE bdcrun .
        CALL FUNCTION &apos;BDC_RUNNING&apos;
          IMPORTING
            bi_info = ls_bi_info
          EXCEPTIONS
            OTHERS  = 3.
        IF sy-subrc EQ 0
        AND ( ls_bi_info-bdc_amodus EQ &apos;N&apos; OR
              ls_bi_info-ctu_amodus EQ &apos;N&apos; ) .
          EXIT .
        ENDIF .
      ENDIF .

*     Bapi dialog supressed ?
      DATA lv_dialog_status TYPE flag .
      GET PARAMETER ID &apos;FLAG_DIALOG_STATUS&apos; FIELD lv_dialog_status.
      CHECK lv_dialog_status IS INITIAL .

      CALL FUNCTION &apos;GUI_IS_AVAILABLE&apos;
        IMPORTING
          return = lv_available.

    ENDIF . &quot; lv_firstcall EQ abap_on

    rv_available = lv_available .

  ENDMETHOD .                    &quot;is_gui_available
  METHOD guid_create .
    DATA lv_guid TYPE guid_32 .
    CALL FUNCTION &apos;GUID_CREATE&apos;
      IMPORTING
        ev_guid_32 = lv_guid.
*   it&apos;s amazing, but the same (not unique) GUID can be generated several times successively!

*   we bring additional uniqueness for GUID
    IF gv_guidcounter GE 9999999998 .
      gv_guidcounter = 0 .
    ENDIF .
    ADD 1 TO gv_guidcounter .

    CONCATENATE gv_guidcounter lv_guid INTO rv_guid .

  ENDMETHOD .                    &quot; guid_create
  METHOD msg_init .
    CHECK v_msg_init EQ abap_on .
    CLEAR:  v_retcode,  t_retmess .
  ENDMETHOD .                    &quot;msg_init
  METHOD msg_add .
    CHECK iv_any NE me .

    IF v_retcode LT iv_any-&gt;v_retcode .
      v_retcode = iv_any-&gt;v_retcode .
    ENDIF .
    APPEND LINES OF iv_any-&gt;t_retmess TO t_retmess .
  ENDMETHOD .                    &quot;msg_add
  METHOD msg_syst_catch .
    DATA ls_retmess     TYPE bapiret2 .
    ls_retmess = msg_syst_convert( is_syst ) .
    ls_retmess-parameter = iv_subj .
    CASE iv_toplist .
      WHEN space .    APPEND ls_retmess TO t_retmess .
      WHEN OTHERS.    INSERT ls_retmess INTO t_retmess INDEX 1 .
    ENDCASE .

    IF ls_retmess-type CA &apos;EAX&apos; .
      v_retcode = c_retcode-error .
    ELSE .
      v_retcode = c_retcode-warning .
    ENDIF .
  ENDMETHOD .                    &quot;msg_syst_catch
  METHOD msg_syst_catch2 .
    DATA ls_retmess     TYPE bapiret2 .
    ls_retmess = msg_syst_convert( is_syst ) .
    APPEND ls_retmess TO ct_retmess .
  ENDMETHOD .                    &quot;msg_syst_catch2
  METHOD msg_syst_convert .
    CALL FUNCTION &apos;BALW_BAPIRETURN_GET2&apos;
      EXPORTING
        type   = is_syst-msgty
        cl     = is_syst-msgid
        number = is_syst-msgno
        par1   = is_syst-msgv1
        par2   = is_syst-msgv2
        par3   = is_syst-msgv3
        par4   = is_syst-msgv4
      IMPORTING
        return = rs_retmess.
  ENDMETHOD .                    &quot;msg_syst_convert
  METHOD msg_io_catch .
    DATA ls_retmess     TYPE bapiret2 .
    CHECK ir_error IS BOUND .
    CHECK ir_error-&gt;error_code NE c_oi_errors=&gt;ret_ok .

    ls_retmess-type      = &apos;E&apos; .
    ls_retmess-parameter = iv_subj .

    ir_error-&gt;get_message(
          IMPORTING message_id     = ls_retmess-id
                    message_number = ls_retmess-number
                    param1         = ls_retmess-message_v1
                    param2         = ls_retmess-message_v2
                    param3         = ls_retmess-message_v3
                    param4         = ls_retmess-message_v4 ) .
    APPEND ls_retmess TO t_retmess .

    v_retcode = c_retcode-error .
  ENDMETHOD .                    &quot;msg_io_catch
  METHOD msg_show .

    IF it_retmess IS INITIAL .
      it_retmess = t_retmess .
    ENDIF .
    CHECK NOT it_retmess[] IS INITIAL .

    LOOP AT it_retmess TRANSPORTING NO FIELDS WHERE parameter IS NOT INITIAL .
      EXIT .
    ENDLOOP .
    IF sy-subrc EQ 0 .
      msg_show_hier( it_retmess ) .
      EXIT .
    ENDIF .

    DATA:
      lv_balloghndl     TYPE balloghndl ,
      ls_log            TYPE bal_s_log ,
      ls_bal            TYPE bal_s_msg ,
      ls_profile        TYPE bal_s_prof .
    FIELD-SYMBOLS:
      &lt;bapiret2&gt;        TYPE bapiret2 .

    ls_log-aldate    = sy-datum .
    ls_log-altime    = sy-uzeit .
    ls_log-aluser    = sy-uname .
    ls_log-altcode   = sy-tcode .
    ls_log-alprog    = sy-repid .

    CALL FUNCTION &apos;BAL_LOG_CREATE&apos;
      EXPORTING
        i_s_log      = ls_log
      IMPORTING
        e_log_handle = lv_balloghndl
      EXCEPTIONS
        OTHERS       = 2.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      EXIT .
    ENDIF .

    CHECK NOT lv_balloghndl IS INITIAL .

    LOOP AT it_retmess ASSIGNING &lt;bapiret2&gt; .
      CLEAR ls_bal .
      MOVE:
        &lt;bapiret2&gt;-type        TO ls_bal-msgty ,
        &lt;bapiret2&gt;-id          TO ls_bal-msgid ,
        &lt;bapiret2&gt;-number      TO ls_bal-msgno ,
        &lt;bapiret2&gt;-message_v1  TO ls_bal-msgv1 ,
        &lt;bapiret2&gt;-message_v2  TO ls_bal-msgv2 ,
        &lt;bapiret2&gt;-message_v3  TO ls_bal-msgv3 ,
        &lt;bapiret2&gt;-message_v4  TO ls_bal-msgv4 .

      CALL FUNCTION &apos;BAL_LOG_MSG_ADD&apos;
        EXPORTING
          i_log_handle     = lv_balloghndl
          i_s_msg          = ls_bal
        EXCEPTIONS
          log_not_found    = 1
          msg_inconsistent = 2
          log_is_full      = 3
          OTHERS           = 4.
      IF sy-subrc NE 0 .
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      ENDIF .
    ENDLOOP .

    CALL FUNCTION &apos;BAL_DSP_PROFILE_POPUP_GET&apos;
      IMPORTING
        e_s_display_profile = ls_profile.

    IF sy-batch IS INITIAL .
      ls_profile-use_grid  = abap_on .
    ENDIF .
    ls_profile-no_toolbar  = abap_on .

    CALL FUNCTION &apos;BAL_DSP_LOG_DISPLAY&apos;
      EXPORTING
        i_s_display_profile = ls_profile
      EXCEPTIONS
        OTHERS              = 0.

    CALL FUNCTION &apos;BAL_LOG_MSG_DELETE_ALL&apos;
      EXPORTING
        i_log_handle  = lv_balloghndl
      EXCEPTIONS
        log_not_found = 1
        OTHERS        = 2.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
    ENDIF .

    CALL FUNCTION &apos;BAL_LOG_REFRESH&apos;
      EXPORTING
        i_log_handle = lv_balloghndl
      EXCEPTIONS
        OTHERS       = 0.

  ENDMETHOD .                    &quot;msg_show
  METHOD msg_show_hier .

    IF it_retmess IS INITIAL .
      it_retmess = t_retmess .
    ENDIF .
    CHECK NOT it_retmess[] IS INITIAL .

    DATA:
      ls_log                TYPE bal_s_log ,
      ls_bal                TYPE bal_s_msg ,
      ls_fcat               TYPE bal_s_fcat ,
      lv_balloghnd          TYPE balloghndl ,
      lt_balloghnd          TYPE bal_t_logh ,
      ls_display_profile    TYPE bal_s_prof .
    FIELD-SYMBOLS:
      &lt;balloghnd&gt;           TYPE balloghndl ,
      &lt;bapiret2&gt;            TYPE bapiret2 .

    ls_log-aldate    = sy-datum .
    ls_log-altime    = sy-uzeit .
    ls_log-aluser    = sy-uname .
    ls_log-altcode   = sy-tcode .
    ls_log-alprog    = sy-repid .
    ls_log-object    = &apos;BCT1&apos; .

    LOOP AT it_retmess ASSIGNING &lt;bapiret2&gt; .
      IF &lt;bapiret2&gt;-parameter IS INITIAL .
        &lt;bapiret2&gt;-parameter = v_text-t001 . &quot; text: Common messages
      ENDIF .
      IF ls_log-extnumber NE &lt;bapiret2&gt;-parameter .
        ls_log-extnumber = &lt;bapiret2&gt;-parameter .

        CALL FUNCTION &apos;BAL_LOG_CREATE&apos;
          EXPORTING
            i_s_log      = ls_log
          IMPORTING
            e_log_handle = lv_balloghnd
          EXCEPTIONS
            OTHERS       = 1.
        CHECK sy-subrc EQ 0 .
        INSERT lv_balloghnd INTO TABLE lt_balloghnd .
      ENDIF .

      CLEAR ls_bal .
      MOVE:
        &lt;bapiret2&gt;-type        TO ls_bal-msgty ,
        &lt;bapiret2&gt;-id          TO ls_bal-msgid ,
        &lt;bapiret2&gt;-number      TO ls_bal-msgno ,
        &lt;bapiret2&gt;-message_v1  TO ls_bal-msgv1 ,
        &lt;bapiret2&gt;-message_v2  TO ls_bal-msgv2 ,
        &lt;bapiret2&gt;-message_v3  TO ls_bal-msgv3 ,
        &lt;bapiret2&gt;-message_v4  TO ls_bal-msgv4 .

      CALL FUNCTION &apos;BAL_LOG_MSG_CUMULATE&apos;
        EXPORTING
          i_log_handle         = lv_balloghnd
          i_s_msg              = ls_bal
          i_compare_attributes = abap_on
          i_compare_context    = abap_on
          i_compare_parameters = abap_on
        EXCEPTIONS
          OTHERS               = 0.
    ENDLOOP .

    CHECK lt_balloghnd IS NOT INITIAL .

    CALL FUNCTION &apos;BAL_DSP_PROFILE_POPUP_GET&apos;
      IMPORTING
        e_s_display_profile = ls_display_profile.

    ls_display_profile-title = v_text-t002 .     &quot; text: Messages
    ls_display_profile-root_text = v_text-t003 . &quot; text: Components of the form

    ls_fcat-ref_table = &apos;BAL_S_SHOW&apos; .
    ls_fcat-ref_field = &apos;EXTNUMBER&apos; .
    ls_fcat-outputlen = 60 .
    APPEND ls_fcat TO ls_display_profile-lev1_fcat .

    CLEAR ls_display_profile-mess_fcat .
    ls_fcat-ref_table = &apos;BAL_S_SHOW&apos; .
    ls_fcat-ref_field = &apos;T_MSG&apos; .
    ls_fcat-outputlen = 60 .
    APPEND ls_fcat TO ls_display_profile-mess_fcat .

    ls_display_profile-use_grid = abap_on .
    ls_display_profile-no_toolbar = abap_on .
    ls_display_profile-end_col = 120 .
    ls_display_profile-disvariant-report = sy-repid .
    ls_display_profile-disvariant-handle = &apos;LOG&apos; .

    CALL FUNCTION &apos;BAL_DSP_LOG_DISPLAY&apos;
      EXPORTING
        i_t_log_handle      = lt_balloghnd
        i_s_display_profile = ls_display_profile
      EXCEPTIONS
        OTHERS              = 0.

    LOOP AT lt_balloghnd ASSIGNING &lt;balloghnd&gt; .
      CALL FUNCTION &apos;BAL_LOG_REFRESH&apos;
        EXPORTING
          i_log_handle = &lt;balloghnd&gt;
        EXCEPTIONS
          OTHERS       = 0.
    ENDLOOP .
  ENDMETHOD .                    &quot;msg_show_hier
  METHOD msg_check_errors_and_show .
    rv_error_occurs = abap_off .

    msg_add( iv_any ) .
    msg_show( ) .

    CHECK v_retcode EQ c_retcode-error .
    rv_error_occurs = abap_on .
  ENDMETHOD .                    &quot;msg_check_errors_and_show
  METHOD progressbar .
    CHECK v_gui_available IS NOT INITIAL .

    CALL FUNCTION &apos;SAPGUI_PROGRESS_INDICATOR&apos;
      EXPORTING
        percentage = iv_percentage
        text       = iv_text.
  ENDMETHOD .                    &quot;progressbar
  METHOD progressbar_loop_actualize .
    DATA:
      lv_percentage     TYPE i ,
      lv_percentage_tmp TYPE i ,
      lv_text           TYPE ty_char100 ,
      lv_row_current    TYPE ty_char15 ,
      lv_row_count      TYPE ty_char15 .

    CHECK v_gui_available IS NOT INITIAL .

*   record counter
    ADD 1 TO s_progressbar_loop-row_current .

*   steps control
    ADD 1 TO s_progressbar_loop-step_tmp .
    CHECK s_progressbar_loop-step_tmp GE s_progressbar_loop-step .
    CLEAR s_progressbar_loop-step_tmp .

*   ----
    MOVE s_progressbar_loop-row_current TO lv_row_current .
    CONDENSE lv_row_current .

    IF s_progressbar_loop-row_count IS INITIAL .
*     messages text formatting
      CONCATENATE s_progressbar_loop-text lv_row_current
      INTO lv_text SEPARATED BY space .

*     actual percent
      lv_percentage = 100 .

    ELSE .
*     messages text formatting
      MOVE s_progressbar_loop-row_count   TO lv_row_count .
      CONDENSE lv_row_count .

      CONCATENATE s_progressbar_loop-text lv_row_current &apos;//&apos; lv_row_count
      INTO lv_text SEPARATED BY space .

*     actual percent
      IF s_progressbar_loop-row_count NE 0 .
        lv_percentage_tmp = s_progressbar_loop-row_current * 100 / s_progressbar_loop-row_count .
      ELSE .
        lv_percentage_tmp = 0 .
      ENDIF .

*     interline the actual percent into the specified interval
      lv_percentage =
      ( ( s_progressbar_loop-percent_end - s_progressbar_loop-percent_start ) * lv_percentage_tmp / 100 )
                    + s_progressbar_loop-percent_start .

      IF lv_percentage GT 100 .
        lv_percentage = 100 .
      ENDIF .
    ENDIF .

*   output message by the statusbar
    progressbar( iv_percentage = lv_percentage
                 iv_text       = lv_text ) .
  ENDMETHOD .                    &quot;progressbar_loop_actualize
  METHOD progressbar_loop_init .
    CLEAR s_progressbar_loop.

    CHECK v_gui_available IS NOT INITIAL .

*   step (records count) for refreshing the progress bar
    MOVE iv_step TO:
      s_progressbar_loop-step ,
      s_progressbar_loop-step_tmp .

*   message text (beside with %)
    DATA lv_text TYPE ty_char1024 .
    MOVE iv_text TO lv_text .
    CONCATENATE lv_text &apos;:&apos; INTO s_progressbar_loop-text .

*   records count in the target table
    IF it_tab IS SUPPLIED .
      DESCRIBE TABLE it_tab .
      MOVE sy-tfill TO s_progressbar_loop-row_count .
    ENDIF .

*   percent
    IF  iv_percent_start BETWEEN 0 AND 100
    AND iv_percent_end   BETWEEN 0 AND 100
    AND iv_percent_start LT iv_percent_end .

      s_progressbar_loop-percent_start = iv_percent_start .
      s_progressbar_loop-percent_end   = iv_percent_end .

    ELSE .
      s_progressbar_loop-percent_start = 0 .
      s_progressbar_loop-percent_end   = 100 .
    ENDIF .
  ENDMETHOD .                    &quot;progressbar_loop_init
  METHOD get_fullpath .
    DATA lv_fullpath TYPE string .
    CLEAR rv_fullpath .
    IF iv_parent_fullpath IS INITIAL .
      lv_fullpath = iv_relpath .
    ELSEIF iv_relpath IS INITIAL .
      lv_fullpath = iv_parent_fullpath .
    ELSE .
      CONCATENATE iv_parent_fullpath
                  iv_relpath
             INTO lv_fullpath SEPARATED BY &apos;-&apos; .
    ENDIF .
    rv_fullpath = lv_fullpath .
  ENDMETHOD .                    &quot;get_fullpath
  METHOD tech_presets_dt_init .
    CLEAR rs_disextract .
    rs_disextract-report    = &apos;SAPLZXLWB&apos; . &quot;sy-repid .
    rs_disextract-handle    = &apos;0001&apos; .
    rs_disextract-username  = sy-uname .
    rs_disextract-text      = &apos;XLSX Workbench presets&apos; .
    rs_disextract-exname    = &apos;presets&apos; .
  ENDMETHOD .                    &quot;tech_presets_dt_init
  METHOD tech_presets_dt_load .
*   initialize extract parameters
    DATA ls_disextract TYPE disextract .
    ls_disextract = tech_presets_dt_init( ) .

    DATA:
      ls_fldval           TYPE ty_s_fldval ,
      lt_fldval           TYPE ty_t_fldval .
    FIELD-SYMBOLS:
      &lt;components&gt;        TYPE abap_compdescr ,
      &lt;value&gt;             TYPE ANY .

*   load presets from the extract
    CLEAR s_presets_dt .
    CALL FUNCTION &apos;REUSE_ALV_EXTRACT_LOAD&apos;
      EXPORTING
        is_extract = ls_disextract
      TABLES
        et_exp01   = lt_fldval
      EXCEPTIONS
        OTHERS     = 0.

*   convert LT_FLDVAL table to the S_PRESETS structure
    LOOP AT lt_fldval INTO ls_fldval .
      ASSIGN COMPONENT ls_fldval-field OF STRUCTURE s_presets_dt TO &lt;value&gt; .
      CHECK &lt;value&gt; IS ASSIGNED .
      &lt;value&gt; = ls_fldval-value .
    ENDLOOP .

    IF s_presets_dt IS INITIAL .
      s_presets_dt-popup_tb             = abap_on .
      s_presets_dt-mesgtab_when_error   = abap_on .
      s_presets_dt-deselect_cells_no_tb = abap_on .
    ENDIF .

    IF s_presets_dt-leftframe_width IS INITIAL .
      s_presets_dt-leftframe_width = 30 .
    ENDIF .
  ENDMETHOD .                    &quot;tech_presets_dt_load
  METHOD tech_presets_rt_init .
    CLEAR rs_disextract .
    rs_disextract-report    = &apos;SAPLZXLWB&apos; . &quot;sy-repid .
    rs_disextract-handle    = &apos;0002&apos; .
*   rs_disextract-username  = sy-uname .
    rs_disextract-text      = &apos;XLSX Workbench presets (Run-time)&apos; .
    rs_disextract-exname    = &apos;Run-time&apos; .
  ENDMETHOD .                    &quot;tech_presets_dt_init
  METHOD tech_presets_rt_load .
*   initialize extract parameters
    DATA ls_disextract TYPE disextract .
    ls_disextract = tech_presets_rt_init( ) .

    DATA:
      ls_fldval           TYPE ty_s_fldval ,
      lt_fldval           TYPE ty_t_fldval .
    FIELD-SYMBOLS:
      &lt;components&gt;        TYPE abap_compdescr ,
      &lt;value&gt;             TYPE ANY .

*   load presets from the extract
    CLEAR s_presets_rt .
    CALL FUNCTION &apos;REUSE_ALV_EXTRACT_LOAD&apos;
      EXPORTING
        is_extract = ls_disextract
      TABLES
        et_exp01   = lt_fldval
      EXCEPTIONS
        OTHERS     = 0.

*   convert LT_FLDVAL table to the S_PRESETS structure
    LOOP AT lt_fldval INTO ls_fldval .
      ASSIGN COMPONENT ls_fldval-field OF STRUCTURE s_presets_rt TO &lt;value&gt; .
      CHECK &lt;value&gt; IS ASSIGNED .
      &lt;value&gt; = ls_fldval-value .
    ENDLOOP .

  ENDMETHOD .                    &quot;tech_presets_rt_load
ENDCLASS .                    &quot; lcl_root IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_ole  DEFINITION
*----------------------------------------------------------------------*
*       MS-Office template document
*----------------------------------------------------------------------*
CLASS lcl_ole  DEFINITION INHERITING FROM lcl_root .
  PUBLIC SECTION .
    CLASS-DATA:
      v_temp_dir            TYPE string ,
      v_temp_directory      TYPE string ,
      v_file_separator      TYPE ty_char1 .
    CLASS-METHODS:
      temp_directory_set ,
      temp_directory_clear .

    DATA:
      r_control             TYPE REF TO i_oi_container_control ,
      r_docproxy            TYPE REF TO i_oi_document_proxy ,
      r_spreadsheet         TYPE REF TO i_oi_spreadsheet .
    DATA:
      BEGIN OF s_ole ,
        handle              TYPE cntl_handle ,
        application         TYPE ole2_object ,
        activeworkbook      TYPE ole2_object ,
        activewindow        TYPE ole2_object ,
        activesheet         TYPE ole2_object ,
        vbscript            TYPE ole2_object ,
        location            TYPE ole2_object ,
        locationnew         TYPE ole2_object ,
        pagebreak           TYPE ole2_object ,
        pagebreaks          TYPE ole2_object ,
        tmp_range           TYPE ole2_object ,
        tmp_range_rows      TYPE ole2_object ,
        tmp_range_row       TYPE ole2_object ,
        tmp_range_cols      TYPE ole2_object ,
        tmp_range_col       TYPE ole2_object ,
        tmp_cells           TYPE ole2_object ,
        cur_range           TYPE ole2_object ,
        cur_rang1           TYPE ole2_object ,
        cur_range_rows      TYPE ole2_object ,
        cur_range_row       TYPE ole2_object ,
        cur_range_cols      TYPE ole2_object ,
        cur_range_col       TYPE ole2_object ,
        selection           TYPE ole2_object ,
      END   OF s_ole .
    DATA:
      v_temp_filename       TYPE string ,
      v_readonly            TYPE flag ,
      v_viewmode            TYPE flag ,
      v_background          TYPE flag ,
      v_postprocessing      TYPE flag ,
      v_extension           TYPE ty_char10 ,
      r_container           TYPE REF TO cl_gui_container .
    CONSTANTS:
      BEGIN OF c_viewmode ,
        floating            TYPE flag VALUE abap_on ,
        inplace             TYPE flag VALUE space ,
      END   OF c_viewmode .
    CONSTANTS:
      BEGIN OF c_fcode ,
        close_template      TYPE ui_func VALUE &apos;CLOSE_TEMPLATE&apos; ,
      END   OF c_fcode .

    EVENTS:
      evnt_fcode
          EXPORTING value(ev_fcode)       TYPE ui_func .

    METHODS:
      constructor
          IMPORTING ir_container          TYPE REF TO cl_gui_container
                    iv_document_rawdata   TYPE xstring
                    iv_viewmode           TYPE flag
                    iv_readonly           TYPE flag DEFAULT space
                    iv_background         TYPE flag DEFAULT space
          EXCEPTIONS process_terminated ,
      init
          IMPORTING iv_document_rawdata   TYPE xstring
          EXCEPTIONS process_terminated ,
      application_availability_check ,
      rawdata_get_as_table
          IMPORTING iv_extension          TYPE ty_char10
          EXPORTING et_document_table     TYPE tsfmime
                    ev_document_size      TYPE i ,
      free ,
      free_ole_object
          IMPORTING value(iv_varname)     TYPE any  ,
      hndl_close
          FOR EVENT on_close_document     OF i_oi_document_proxy .

  PRIVATE SECTION .
    TYPES:
      BEGIN OF ty_s_regval ,
        key                 TYPE string ,
        name                TYPE string ,
        value               TYPE i ,
      END   OF ty_s_regval ,
      ty_t_regval           TYPE STANDARD TABLE OF ty_s_regval .

    METHODS:
      register_setnew
          EXPORTING et_regval             TYPE ty_t_regval ,
      register_return
          IMPORTING it_regval             TYPE ty_t_regval .
ENDCLASS .                    &quot;lcl_ole  DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ole  IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_ole  IMPLEMENTATION .
  METHOD constructor .
    super-&gt;constructor( ) .

    IF v_gui_available IS INITIAL .
      MESSAGE e000(lp) WITH v_text-t125   &quot;  text: Process is flowing in OFF-line mode
      RAISING process_terminated .
    ENDIF .

    v_readonly    = iv_readonly   .
    v_viewmode    = iv_viewmode   .
    v_background  = iv_background .
    r_container   = ir_container  .

    init( EXPORTING iv_document_rawdata = iv_document_rawdata
          EXCEPTIONS OTHERS = 1 ) .
    IF sy-subrc NE 0 .
      RAISE process_terminated .
    ENDIF .

  ENDMETHOD .                    &quot;constructor
  METHOD init .

    msg_init( ) .

    DATA:
      lv_inplace          TYPE flag ,
      lv_show_toolbars    TYPE flag ,
      lv_r3_appl_name     TYPE ty_char10 VALUE &apos;XLWB&apos; ,
      lv_on_close_event   TYPE flag ,
      lt_document_table   TYPE tsfmime ,
      lv_document_size    TYPE i ,
      lv_fileformat_cur   TYPE ty_char10 ,
      lt_regval           TYPE ty_t_regval .

    IF v_readonly IS INITIAL .
      temp_directory_set( ) .
      IF v_temp_directory IS INITIAL .
        MESSAGE i000(lp) WITH v_text-t050 . &quot; text: The working directory is not determined
        EXIT .
      ENDIF .
      temp_directory_clear( ) .
    ENDIF .

    CHECK r_container IS BOUND .

    c_oi_container_control_creator=&gt;get_container_control(
          IMPORTING control = r_control ) .

    CASE v_viewmode .
      WHEN c_viewmode-floating .
        lv_inplace        = abap_off .
        lv_show_toolbars  = abap_off .
        lv_on_close_event = abap_on .
      WHEN c_viewmode-inplace .
        lv_inplace        = abap_on .
        lv_show_toolbars  = abap_on .
        lv_on_close_event = abap_off .
    ENDCASE .

    r_control-&gt;init_control(
          EXPORTING parent                   = r_container
                    inplace_enabled          = lv_inplace
                    inplace_scroll_documents = lv_inplace
                    inplace_show_toolbars    = lv_show_toolbars
                    r3_application_name      = lv_r3_appl_name
                    register_on_close_event  = lv_on_close_event
                    no_flush                 = abap_on ) .

    r_control-&gt;get_document_proxy(
          EXPORTING document_type      = soi_doctype_excel_sheet
                    no_flush           = abap_on
          IMPORTING document_proxy     = r_docproxy ) .

    IF iv_document_rawdata IS INITIAL .
      r_docproxy-&gt;create_document(
          EXPORTING create_view_data = abap_off
                    open_inplace     = lv_inplace ) .
    ELSE .
      CALL FUNCTION &apos;SCMS_XSTRING_TO_BINARY&apos;
        EXPORTING
          buffer        = iv_document_rawdata
        IMPORTING
          output_length = lv_document_size
        TABLES
          binary_tab    = lt_document_table.

      register_setnew( IMPORTING et_regval = lt_regval ) .

      r_docproxy-&gt;open_document_from_table(
          EXPORTING document_size  = lv_document_size
                    document_table = lt_document_table
                    open_inplace   = lv_inplace
                    no_flush       = abap_on ) .

*     register_return( EXPORTING it_regval = lt_regval ) .
    ENDIF .

    DATA lv_spreadsheet_available TYPE i .
    r_docproxy-&gt;has_spreadsheet_interface(
          EXPORTING no_flush       = abap_on
          IMPORTING is_available   = lv_spreadsheet_available ) .
    cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 1 ) .
    IF lv_spreadsheet_available EQ 0 .
      MESSAGE e000(lp) WITH v_text-t295   &quot;  text: Error accessing MS Excel application
      RAISING process_terminated .
    ENDIF .

    r_docproxy-&gt;get_spreadsheet_interface(
          EXPORTING no_flush        = abap_on
          IMPORTING sheet_interface = r_spreadsheet ) .

    r_spreadsheet-&gt;load_lib(
          EXPORTING no_flush        = abap_on ) .

    IF lv_on_close_event EQ abap_on .
      SET HANDLER hndl_close FOR r_docproxy .
    ENDIF .

    CASE v_background .
      WHEN space  . r_spreadsheet-&gt;screen_update( EXPORTING updating = abap_on   no_flush = abap_on ) .
      WHEN OTHERS . r_spreadsheet-&gt;screen_update( EXPORTING updating = abap_off  no_flush = abap_on ) .
    ENDCASE .

    IF v_readonly IS INITIAL .
      r_docproxy-&gt;get_document_handle(
          EXPORTING no_flush      = abap_on
          IMPORTING handle        = s_ole-handle ) .
      GET PROPERTY OF s_ole-handle-obj &apos;Application&apos; = s_ole-application no flush .
      GET PROPERTY OF s_ole-application &apos;ActiveWorkbook&apos; = s_ole-activeworkbook no flush .

*     actual (current) format
      GET PROPERTY OF s_ole-activeworkbook &apos;FileFormat&apos; = lv_fileformat_cur .
      CASE lv_fileformat_cur .
        WHEN 51 .   v_extension = c_extension_xlsx .
        WHEN 52 .   v_extension = c_extension_xlsm .
      ENDCASE .
    ENDIF .

    cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 1 ) .

    IF v_background IS INITIAL .
      r_control-&gt;set_focus( ) .
    ENDIF .

  ENDMETHOD .                    &quot;init
  METHOD register_setnew .
*   Windows registry modification according http://support.microsoft.com/kb/948615/en-us
*     ( see SAP Note 1517552 )
*
*   to avoid an Excel application popup-message:
*     &quot;The file you are trying to open ... ,
*       is in a different format than specified by the file extension&quot;

    DATA ls_regval              TYPE ty_s_regval .
    DATA lv_tmp_key             TYPE string .
    DATA lv_tmp_value           TYPE string .
    DATA lv_office_version      TYPE ty_char10 .
    DATA lv_rc                  TYPE i .

    DO .
      CLEAR lv_tmp_key        .
      CLEAR lv_tmp_value      .
      CLEAR lv_rc             .
      CLEAR lv_office_version .

      CASE sy-index .
        WHEN 1 .  lv_office_version = &apos;12.0&apos; .
        WHEN 2 .  lv_office_version = &apos;14.0&apos; .
        WHEN 3 .  lv_office_version = &apos;15.0&apos; .
        WHEN 4 .  lv_office_version = &apos;16.0&apos; .
        WHEN OTHERS . EXIT .
      ENDCASE .

      CONCATENATE &apos;Software\Microsoft\Office\&apos; lv_office_version &apos;\Excel&apos;
      INTO lv_tmp_key .

      cl_gui_frontend_services=&gt;registry_get_value(
        EXPORTING root        = cl_gui_frontend_services=&gt;hkey_current_user
                  key         = lv_tmp_key
                  value       = &apos;ExcelName&apos;
        IMPORTING reg_value   = lv_tmp_value
        EXCEPTIONS OTHERS     = 0 ) .
      cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .

      CHECK lv_tmp_value IS NOT INITIAL .

      CONCATENATE &apos;Software\Microsoft\Office\&apos; lv_office_version &apos;\Excel\Security&apos;
      INTO ls_regval-key .

      ls_regval-name = &apos;ExtensionHardening&apos; .

      cl_gui_frontend_services=&gt;registry_get_dword_value(
        EXPORTING root        = cl_gui_frontend_services=&gt;hkey_current_user
                  key         = ls_regval-key
                  value       = ls_regval-name
        IMPORTING reg_value   = ls_regval-value
        EXCEPTIONS OTHERS     = 0 ) .
      cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .

      CHECK ls_regval-value NE 0 .

      cl_gui_frontend_services=&gt;registry_set_dword_value(
        EXPORTING root        = cl_gui_frontend_services=&gt;hkey_current_user
                  key         = ls_regval-key
                  value       = ls_regval-name
                  dword_value = 0
        IMPORTING rc          = lv_rc
        EXCEPTIONS OTHERS     = 0 ) .
      cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .

      CHECK lv_rc EQ 1 .

      APPEND ls_regval TO et_regval .
    ENDDO .
  ENDMETHOD .                    &quot;register_setnew
  METHOD register_return .
*   restore register values

    DATA ls_regval_old          TYPE ty_s_regval .

    LOOP AT it_regval INTO ls_regval_old .
      CASE ls_regval_old-value .
        WHEN 999999999 .
          cl_gui_frontend_services=&gt;registry_delete_value(
            EXPORTING root        = cl_gui_frontend_services=&gt;hkey_current_user
                      key         = ls_regval_old-key
                      value       = ls_regval_old-name
            EXCEPTIONS OTHERS     = 1 ) .
        WHEN OTHERS .
          cl_gui_frontend_services=&gt;registry_set_dword_value(
            EXPORTING root        = cl_gui_frontend_services=&gt;hkey_current_user
                      key         = ls_regval_old-key
                      value       = ls_regval_old-name
                      dword_value = ls_regval_old-value
            EXCEPTIONS OTHERS     = 1 ) .
      ENDCASE .
    ENDLOOP .

    CHECK sy-subrc EQ 0 .
    cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .
  ENDMETHOD .                    &quot;register_return
  METHOD temp_directory_set .
    DATA lv_temp_dir_c         TYPE ty_char1024 .
    DATA lv_rc                 TYPE i .

*   determine an available directory
    cl_gui_frontend_services=&gt;get_file_separator(
        CHANGING file_separator = v_file_separator
        EXCEPTIONS OTHERS = 0 ) .

    cl_gui_frontend_services=&gt;get_sapgui_workdir(
        CHANGING sapworkdir = v_temp_dir
        EXCEPTIONS OTHERS = 0 ) .
    cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .
    IF v_temp_dir IS INITIAL .
      CALL FUNCTION &apos;GUI_GET_DESKTOP_INFO&apos;
        EXPORTING
          type   = 4
        CHANGING
          return = lv_temp_dir_c.
      v_temp_dir = lv_temp_dir_c .
    ENDIF .
    CHECK v_temp_dir IS NOT INITIAL .

*   create subdirectory for NEW temporary files (if not exists yet)
    CONCATENATE v_temp_dir &apos;~tmp_XLWB_template&apos;
    INTO v_temp_directory SEPARATED BY v_file_separator .

    CHECK space EQ cl_gui_frontend_services=&gt;directory_exist(
                   directory = v_temp_directory ) .

    cl_gui_frontend_services=&gt;directory_create(
            EXPORTING directory = v_temp_directory
            CHANGING  rc = lv_rc
            EXCEPTIONS OTHERS = 1 ) .
    IF lv_rc    NE 0
    OR sy-subrc NE 0 .
      CLEAR v_temp_directory .
    ENDIF .

  ENDMETHOD .                    &quot;temp_directory_set
  METHOD temp_directory_clear .
    DATA:
      lv_temp_filename      TYPE string ,
      ls_old_filetab        TYPE file_info ,
      lt_old_filetab        TYPE STANDARD TABLE OF file_info ,
      lv_rc                 TYPE i ,
      lv_count              TYPE i .

    cl_gui_frontend_services=&gt;directory_list_files(
            EXPORTING directory	  = v_temp_directory
                      files_only  = abap_on
            CHANGING  file_table  = lt_old_filetab
                      count       = lv_count
            EXCEPTIONS OTHERS     = 0 ) .

    LOOP AT lt_old_filetab INTO ls_old_filetab .
      CONCATENATE
      v_temp_directory  v_file_separator ls_old_filetab-filename
      INTO lv_temp_filename .

      cl_gui_frontend_services=&gt;file_delete(
          EXPORTING filename = lv_temp_filename
          CHANGING  rc       = lv_rc
          EXCEPTIONS OTHERS = 0 ) .
    ENDLOOP .

  ENDMETHOD .                    &quot;temp_directory_clear
  METHOD application_availability_check .
    msg_init( ) .

    DATA lv_rs    TYPE soi_ret_string .
    DO 1 TIMES .
      r_docproxy-&gt;has_changed( IMPORTING retcode = lv_rs ) .
      CHECK lv_rs EQ c_oi_errors=&gt;ret_ok .
      r_spreadsheet-&gt;get_sheets( IMPORTING retcode = lv_rs ) .
    ENDDO .

    IF lv_rs NE c_oi_errors=&gt;ret_ok .
      SPLIT v_text-t054         &quot; text: Excel is not responding. |Perhaps a cell is being edited now
         AT &apos;|&apos; INTO sy-msgv1 sy-msgv2 .
      MESSAGE e000(lp) WITH sy-msgv1 sy-msgv2 INTO v_dummy .
      msg_syst_catch( ) .
      EXIT .
    ENDIF .
  ENDMETHOD .                    &quot;application_availability_check
  METHOD rawdata_get_as_table .
    CHECK v_readonly IS INITIAL .

    msg_init( ) .

    CLEAR ev_document_size .
    CLEAR et_document_table .

    v_extension = iv_extension .
    IF v_extension IS INITIAL .
      v_extension = c_extension_xlsx .
    ENDIF .

    application_availability_check( ) .
    CHECK v_retcode NE c_retcode-error .

    DATA:
      lv_snap_filename          TYPE string ,
      lv_snap_filename_c(30000) TYPE c ,
      lv_guid                   TYPE string ,
      lv_rc                     TYPE i ,
      lv_fileformat_cur         TYPE i ,
      lv_fileformat_new         TYPE i ,
      lv_document_rawdata       TYPE xstring ,
      lv_temp_filename          TYPE string ,
      ls_document_table         TYPE w3mime .

    cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .
    cl_gui_cfw=&gt;dispatch( ) .

*   actual (current) format
    GET PROPERTY OF s_ole-activeworkbook &apos;FileFormat&apos; = lv_fileformat_cur .

*   required format
    CASE v_extension .
      WHEN c_extension_xlsx .   lv_fileformat_new = 51 . &quot; xlOpenXMLWorkbook
      WHEN c_extension_xlsm .   lv_fileformat_new = 52 . &quot; xlOpenXMLWorkbookMacroEnabled
    ENDCASE .

    IF lv_fileformat_cur EQ lv_fileformat_new .
*     returning of result
      r_docproxy-&gt;save_document_to_table(
      CHANGING document_size  = ev_document_size
               document_table = et_document_table ) .

*     sometimes GET PROPERTY &apos;FileFormat&apos; returns wrong value. So, we verify file header signature
      READ TABLE et_document_table INTO ls_document_table INDEX 1 .
      IF ls_document_table-line(8) NE &apos;504B030414000600&apos; .
        CLEAR lv_fileformat_cur .
        CLEAR ev_document_size .
        CLEAR et_document_table .
      ENDIF .
    ENDIF .

    IF lv_fileformat_cur NE lv_fileformat_new .
*     convert to required format
      lv_guid = guid_create( ) .
      CONCATENATE v_temp_directory  v_file_separator  lv_guid `--`  v_extension
             INTO lv_temp_filename .

      CALL METHOD OF s_ole-activeworkbook &apos;SaveAs&apos;
        EXPORTING
        #1 = lv_temp_filename
        #2 = lv_fileformat_new .
      CHECK sy-subrc EQ 0 .

      CONCATENATE v_temp_directory  v_file_separator  lv_guid  v_extension
             INTO v_temp_filename .

      CALL METHOD OF s_ole-activeworkbook &apos;SaveAs&apos;
        EXPORTING
        #1 = v_temp_filename
        #2 = lv_fileformat_new .
      CHECK sy-subrc EQ 0 .

      cl_gui_frontend_services=&gt;gui_upload(
          EXPORTING   filename   = lv_temp_filename
                      filetype   = &apos;BIN&apos;
          IMPORTING   filelength = ev_document_size
          CHANGING    data_tab   = et_document_table
          EXCEPTIONS  OTHERS     = 1 ) .

      CALL FUNCTION &apos;SCMS_BINARY_TO_XSTRING&apos;
        EXPORTING
          input_length = ev_document_size
        IMPORTING
          buffer       = lv_document_rawdata
        TABLES
          binary_tab   = et_document_table.

      free( ) .

      init( EXPORTING iv_document_rawdata = lv_document_rawdata
            EXCEPTIONS OTHERS = 1 ) .
    ENDIF .

    temp_directory_clear( ) .
    cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .

  ENDMETHOD .                    &quot;rawdata_get_as_table
  METHOD free .
    DATA lv_rc        TYPE i .
    DATA lv_count     TYPE i .

    IF r_spreadsheet IS BOUND .
      r_spreadsheet-&gt;screen_update( EXPORTING updating = abap_on ) .
    ENDIF .

    IF v_readonly IS INITIAL .
      CALL METHOD OF s_ole-activeworkbook &apos;Close&apos; EXPORTING #1 = 0 .
      FREE OBJECT s_ole-activeworkbook . CLEAR s_ole-activeworkbook .
*     CALL METHOD OF s_ole-application &apos;Quit&apos; .
      FREE OBJECT s_ole-application . CLEAR s_ole-application .
    ENDIF .

    FREE OBJECT s_ole-handle-obj . CLEAR s_ole-handle-obj .

    IF r_docproxy IS BOUND .
      r_docproxy-&gt;is_open( IMPORTING ret_value = lv_rc ) .
      IF lv_rc EQ 1 .
        CALL METHOD r_docproxy-&gt;close_document( ) .
      ENDIF .
      r_docproxy-&gt;is_destroyed( IMPORTING ret_value = lv_rc ) .
      IF lv_rc EQ 0 .
        CALL METHOD r_docproxy-&gt;release_document( ) .
      ENDIF .
    ENDIF .

    IF NOT r_control IS INITIAL .
      r_control-&gt;release_all_documents( ) .
      r_control-&gt;destroy_control( ) .
    ENDIF .

    cl_gui_cfw=&gt;dispatch( ) .
    cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .

    IF r_spreadsheet IS BOUND .
      FREE r_spreadsheet .
    ENDIF .
    IF r_docproxy IS BOUND .
      FREE r_docproxy .
    ENDIF .
    IF NOT r_control IS INITIAL .
      FREE r_control .
    ENDIF .

    IF v_readonly IS INITIAL .
      temp_directory_clear( ) .
      cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .
    ENDIF .

  ENDMETHOD .                    &quot;free
  METHOD free_ole_object .
    FIELD-SYMBOLS &lt;ole2_object&gt; TYPE ole2_object .
    TRANSLATE iv_varname TO UPPER CASE .
    ASSIGN COMPONENT iv_varname OF STRUCTURE s_ole TO &lt;ole2_object&gt; .
    CHECK &lt;ole2_object&gt; IS ASSIGNED .

    IF &lt;ole2_object&gt; IS NOT INITIAL .
      FREE OBJECT &lt;ole2_object&gt; .
      CLEAR &lt;ole2_object&gt; .
    ENDIF .
  ENDMETHOD .                    &quot;free_ole_object
  METHOD hndl_close .
    RAISE EVENT evnt_fcode
    EXPORTING ev_fcode = c_fcode-close_template .
  ENDMETHOD .                    &quot;hndl_close
ENDCLASS .                    &quot;lcl_ole  IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_context DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_context DEFINITION INHERITING FROM lcl_root .

  PUBLIC SECTION .
    TYPES:
      ty_s_hierarchy      TYPE snodetext ,
      ty_t_hierarchy      TYPE STANDARD TABLE OF ty_s_hierarchy .
    TYPES:
      BEGIN OF ty_s_properties ,
        id                TYPE ty_s_hierarchy-id ,
        comp_type         TYPE ty_comp_type ,
        comp_name         TYPE ty_comp_name ,
        comp_fullpath     TYPE ty_comp_path ,
        comp_shortdescr   TYPE ddtext ,
        type_absname      TYPE abap_abstypename ,
        type_absname_t    TYPE abap_abstypename ,
        type_refname      TYPE abap_abstypename ,
        type_refname_tab  TYPE tabname ,
        type_refname_fld  TYPE fieldname ,
        type_kind         TYPE abap_typekind ,
        type_length       TYPE i ,
        type_decimals     TYPE i ,
        type_edit_mask    TYPE abap_editmask ,
      END   OF ty_s_properties ,
      ty_t_properties     TYPE HASHED TABLE OF ty_s_properties
                               WITH UNIQUE KEY comp_fullpath .
    TYPES:
      ty_contextname      TYPE bdlstruct .
    DATA:
      v_contextname       TYPE ty_contextname READ-ONLY ,
      v_contextshortdescr TYPE as4text READ-ONLY ,
      t_properties        TYPE ty_t_properties READ-ONLY ,
      t_hierarchy         TYPE ty_t_hierarchy READ-ONLY ,
      v_root_id           TYPE snode-id READ-ONLY ,
      v_f4_strategy       TYPE i READ-ONLY .
    CONSTANTS:
      BEGIN OF c_comp_type ,
        root              TYPE ty_comp_type VALUE &apos;R&apos; ,
        table             TYPE ty_comp_type VALUE &apos;T&apos; ,
        struct            TYPE ty_comp_type VALUE &apos;S&apos; ,
        element           TYPE ty_comp_type VALUE &apos;E&apos; ,
        tree              TYPE ty_comp_type VALUE &apos;A&apos; ,
        tree_s            TYPE ty_comp_type VALUE &apos;a&apos; ,
      END   OF c_comp_type .
    CONSTANTS:
      BEGIN OF c_comp_icon ,
        root              TYPE icon_d VALUE icon_tree ,
        table             TYPE icon_d VALUE icon_list ,
        struct            TYPE icon_d VALUE icon_structure ,
        element           TYPE icon_d VALUE icon_field_with_text ,
        tree              TYPE icon_d VALUE icon_display_tree ,
      END   OF c_comp_icon .
    CONSTANTS:
      BEGIN OF c_f4_strategy ,
        loopstep          TYPE i VALUE 1 ,
        folder            TYPE i VALUE 2 ,
        value             TYPE i VALUE 3 ,
        tree              TYPE i VALUE 4 ,
        grid              TYPE i VALUE 5 ,
        gridfld           TYPE i VALUE 6 ,
        apr_relpath       TYPE i VALUE 7 ,
      END   OF c_f4_strategy .

    METHODS:
      constructor
          IMPORTING iv_contextname        TYPE any ,
      free,
      comp_shortdescription
          IMPORTING iv_type_kind          TYPE any
                    iv_type_absname       TYPE any
                    iv_type_absname_t     TYPE any
                    iv_type_refname_tab   TYPE any
                    iv_type_refname_fld   TYPE any
          RETURNING value(rv_comp_shortdescr) TYPE ddtext ,
      node_get
          IMPORTING iv_id                 TYPE any
          RETURNING value(rs_properties)  TYPE ty_s_properties ,
      node_get_by_path
          IMPORTING iv_comp_fullpath      TYPE any OPTIONAL
                    iv_relpath            TYPE any OPTIONAL
                    iv_fullpath_parent    TYPE any OPTIONAL
          RETURNING value(rs_properties)  TYPE ty_s_properties ,
      subtree_get
          IMPORTING iv_begin_fullpath     TYPE any OPTIONAL
                    iv_f4_strategy        TYPE i
          EXPORTING et_hierarchy          TYPE ty_t_hierarchy ,
      gridfld_get
          IMPORTING iv_begin_fullpath     TYPE any
          EXPORTING et_hierarchy          TYPE ty_t_hierarchy
                    et_properties         TYPE ty_t_properties .


  PRIVATE SECTION .
    METHODS:
      subtree_get_recurs
          IMPORTING iv_parent_id_new    TYPE snode-id
                    is_parent_hierarchy TYPE ty_s_hierarchy
          CHANGING  ct_hierarchy_new    TYPE ty_t_hierarchy ,
      node_add
          IMPORTING iv_parent_id        TYPE snode-id
          CHANGING  cs_properties       TYPE ty_s_properties ,
      nodes_recurs
          IMPORTING iv_parent_id        TYPE snode-id
                    iv_parent_fullpath  TYPE any
                    iv_type_refname     TYPE any
                    iv_comp_name        TYPE any .

ENDCLASS .                    &quot;lcl_context DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_context IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_context IMPLEMENTATION .
  METHOD constructor .
    DATA ls_attr  TYPE streeattr .

    super-&gt;constructor( ) .
    msg_init( ) .

    cl_abap_datadescr=&gt;describe_by_name(
            EXPORTING p_name      = iv_contextname
            EXCEPTIONS OTHERS     = 4 ) .
    IF sy-subrc EQ 0 .
      v_contextname = iv_contextname .
    ELSE .
      MESSAGE e000(lp) WITH v_text-t004 INTO v_dummy . &quot; text: Specify valid name of the context
      msg_syst_catch( ) .
    ENDIF .

    ls_attr-nodeicon    = c_comp_icon-root .
    ls_attr-kind        = &apos;I&apos; .
    ls_attr-tlength1    = 30 .
    ls_attr-text1       = &apos;Component&apos; .
    ls_attr-tlength2    = 10 .
    ls_attr-text2       = &apos;Type&apos; .
    ls_attr-tlength3    = 10 .
    ls_attr-text3       = &apos;Length&apos; .    CONDENSE ls_attr-text3 .
    ls_attr-tlength4    = 10.
    ls_attr-text4       = &apos;Decimals&apos; .  CONDENSE ls_attr-text4 .
*   ls_attr-tlength5    = 20 .
*   ls_attr-text5       = &apos;Absolute_name&apos; .
    ls_attr-tlength5    = 20 .
    ls_attr-text5       = &apos;Short description&apos; .

    CALL FUNCTION &apos;RS_TREE_CREATE&apos;
      EXPORTING
        root_name          = &apos;CONTEXT&apos;
        display_attributes = ls_attr
      IMPORTING
        root_id            = v_root_id.

    IF v_contextname IS NOT INITIAL .
      nodes_recurs( iv_parent_id        = v_root_id
                    iv_parent_fullpath  = space
                    iv_type_refname     = v_contextname
                    iv_comp_name        = v_contextname ) .
    ENDIF .

    CALL FUNCTION &apos;RS_TREE_GET_CURRENT_TREE&apos;
      TABLES
        nodeinfo = t_hierarchy.

    CALL FUNCTION &apos;RS_TREE_SET_CURRENT_TREE&apos; .

  ENDMETHOD .                    &quot;constructor
  METHOD free .
    CLEAR:
    v_contextname ,
    t_properties ,
    t_hierarchy ,
    v_root_id ,
    v_f4_strategy .
  ENDMETHOD .                    &quot;free
  METHOD comp_shortdescription .
    DATA lv_tablename   TYPE dd02l-tabname .
    DATA lv_fieldname   TYPE dd03l-fieldname .
    DATA lv_ddtext      TYPE dd02t-ddtext .
    DATA ls_dd40v       TYPE dd40v .
    DATA lv_objname     TYPE ddobjname .

    CASE iv_type_kind .
      WHEN cl_abap_datadescr=&gt;typekind_struct1
        OR cl_abap_datadescr=&gt;typekind_struct2 .
        lv_tablename = iv_type_refname_tab .
        CALL FUNCTION &apos;RS_DS_INT_TAB_INFO&apos;
          EXPORTING
            p_tablename = lv_tablename
            p_language  = sy-langu
          IMPORTING
            p_text      = lv_ddtext
          EXCEPTIONS
            OTHERS      = 0.
        rv_comp_shortdescr = lv_ddtext .

      WHEN cl_abap_datadescr=&gt;typekind_table .
        lv_objname = iv_type_refname_tab .
        CALL FUNCTION &apos;DDIF_TTYP_GET&apos;
          EXPORTING
            name     = lv_objname
            state    = &apos;M&apos;
            langu    = sy-langu
          IMPORTING
            dd40v_wa = ls_dd40v
          EXCEPTIONS
            OTHERS   = 0.
        rv_comp_shortdescr = ls_dd40v-ddtext .

      WHEN cl_abap_datadescr=&gt;typekind_class .
        SELECT SINGLE descript
          INTO rv_comp_shortdescr
          FROM seoclasstx
         WHERE clsname EQ iv_type_absname_t
           AND langu   EQ sy-langu .
        IF sy-subrc NE 0 .
          SELECT SINGLE descript
            INTO rv_comp_shortdescr
            FROM seoclasstx
           WHERE clsname EQ iv_type_absname_t .
        ENDIF .

      WHEN OTHERS .
        lv_tablename = iv_type_refname_tab .
        lv_fieldname = iv_type_refname_fld .
        CALL FUNCTION &apos;RS_DS_INT_FIELD_INFO&apos;
          EXPORTING
            p_tablename = lv_tablename
            p_fieldname = lv_fieldname
            p_language  = sy-langu
          IMPORTING
            p_fieldtext = lv_ddtext
          EXCEPTIONS
            OTHERS      = 0.
        rv_comp_shortdescr = lv_ddtext .
    ENDCASE .
  ENDMETHOD .                    &quot;comp_shortdescription
  METHOD nodes_recurs .
    DATA:
      lr_tabledescr       TYPE REF TO cl_abap_tabledescr ,
      lr_structdescr      TYPE REF TO cl_abap_structdescr ,
      lr_elemdescr        TYPE REF TO cl_abap_elemdescr ,
      lr_typedescr        TYPE REF TO cl_abap_typedescr ,
      lr_classdescr       TYPE REF TO cl_abap_classdescr ,
      lt_components       TYPE abap_compdescr_tab ,
      lv_type_refname     TYPE string ,
      ls_properties       TYPE ty_s_properties ,
      lv_type_refname_tab TYPE ty_char100 ,
      lv_type_absname     TYPE abap_abstypename ,
      lv_type_absname_t   TYPE abap_abstypename ,
      lv_dummy            TYPE dummy .
    FIELD-SYMBOLS:
      &lt;components&gt;        TYPE abap_compdescr .

*======================================================================
*   add current node
*======================================================================
    ls_properties-comp_name     = iv_comp_name .
    ls_properties-type_refname  = iv_type_refname .


    SPLIT iv_type_refname AT &apos;-&apos;
    INTO lv_type_refname_tab  ls_properties-type_refname_fld .
    IF lv_type_refname_tab CS &apos;=&apos; .
      SPLIT lv_type_refname_tab AT &apos;=&apos; INTO lv_dummy lv_type_refname_tab .
    ENDIF .
    ls_properties-type_refname_tab = lv_type_refname_tab .

    ls_properties-comp_fullpath =
    get_fullpath( iv_parent_fullpath  = iv_parent_fullpath
                  iv_relpath = iv_comp_name ) .

*   describe
    cl_abap_datadescr=&gt;describe_by_name(
           EXPORTING  p_name         = iv_type_refname
           RECEIVING  p_descr_ref    = lr_typedescr
           EXCEPTIONS type_not_found = 4 ) .
    IF sy-subrc NE 0 .
      EXIT .
    ENDIF .

    CASE lr_typedescr-&gt;type_kind .
      WHEN cl_abap_datadescr=&gt;typekind_struct1
        OR cl_abap_datadescr=&gt;typekind_struct2 .
        TRY .
            lr_structdescr ?=  lr_typedescr .
          CATCH cx_sy_move_cast_error .
            EXIT .
        ENDTRY .
        ls_properties-comp_type     = c_comp_type-struct .
        ls_properties-type_absname  = lr_structdescr-&gt;absolute_name .
        ls_properties-type_kind     = lr_structdescr-&gt;type_kind .
        ls_properties-type_length   = lr_structdescr-&gt;length .
        ls_properties-type_decimals = lr_structdescr-&gt;decimals .
        lt_components[]             = lr_structdescr-&gt;components[] .

      WHEN cl_abap_datadescr=&gt;typekind_table .
        TRY .
            lr_tabledescr  ?=  lr_typedescr .
            lr_structdescr ?=  lr_tabledescr-&gt;get_table_line_type( ) .
          CATCH cx_sy_move_cast_error .
            EXIT .
        ENDTRY .
        ls_properties-comp_type     = c_comp_type-table .
        ls_properties-type_absname  = lr_tabledescr-&gt;absolute_name .
        ls_properties-type_kind     = lr_tabledescr-&gt;type_kind .
        ls_properties-type_length   = lr_tabledescr-&gt;length .
        ls_properties-type_decimals = lr_tabledescr-&gt;decimals .

      WHEN cl_abap_datadescr=&gt;typekind_class
        OR cl_abap_datadescr=&gt;typekind_oref .

        CLEAR lv_type_absname .
        CASE lr_typedescr-&gt;type_kind .
          WHEN cl_abap_datadescr=&gt;typekind_class .
            TRY .
                lr_classdescr  ?= lr_typedescr .
              CATCH cx_sy_move_cast_error .
                EXIT .
            ENDTRY .
            lv_type_absname = lr_classdescr-&gt;absolute_name .
          WHEN cl_abap_datadescr=&gt;typekind_oref .
            SELECT SINGLE rollname
              INTO lv_type_absname
              FROM dd03l
             WHERE tabname   EQ ls_properties-type_refname_tab
               AND fieldname EQ ls_properties-type_refname_fld .
            CHECK sy-subrc EQ 0 .
          WHEN OTHERS .
        ENDCASE .
        IF lv_type_absname CS &apos;=&apos; .
          SPLIT lv_type_absname AT &apos;=&apos; INTO lv_dummy lv_type_absname_t .
        ELSE .
          lv_type_absname_t = lv_type_absname .
        ENDIF .
        CASE lv_type_absname_t .
          WHEN c_typename_tree .
            ls_properties-comp_type      = c_comp_type-tree .
            ls_properties-type_absname   = lv_type_absname .
            ls_properties-type_absname_t = lv_type_absname_t .
            ls_properties-type_kind      = cl_abap_datadescr=&gt;typekind_class .
          WHEN c_typename_tree_s .
            ls_properties-comp_type      = c_comp_type-tree_s .
            ls_properties-type_absname   = lv_type_absname .
            ls_properties-type_absname_t = lv_type_absname_t .
            ls_properties-type_kind      = cl_abap_datadescr=&gt;typekind_class .
          WHEN OTHERS .  EXIT .
        ENDCASE .

      WHEN OTHERS .
        TRY .
            lr_elemdescr   ?=  lr_typedescr .
          CATCH cx_sy_move_cast_error .
            EXIT .
        ENDTRY .
        ls_properties-comp_type      = c_comp_type-element .
        ls_properties-type_absname   = lr_elemdescr-&gt;absolute_name .
        ls_properties-type_kind      = lr_elemdescr-&gt;type_kind .
        ls_properties-type_length    = lr_elemdescr-&gt;output_length .
        ls_properties-type_decimals  = lr_elemdescr-&gt;decimals .
        ls_properties-type_edit_mask = lr_elemdescr-&gt;edit_mask .
    ENDCASE .

    IF ls_properties-type_absname CS &apos;=&apos; .
      SPLIT ls_properties-type_absname AT &apos;=&apos;
       INTO lv_dummy ls_properties-type_absname_t .
    ELSE .
      ls_properties-type_absname_t = ls_properties-type_absname .
    ENDIF .

    ls_properties-comp_shortdescr = comp_shortdescription(
          iv_type_kind        = ls_properties-type_kind
          iv_type_absname     = ls_properties-type_absname
          iv_type_absname_t   = ls_properties-type_absname_t
          iv_type_refname_tab = ls_properties-type_refname_tab
          iv_type_refname_fld = ls_properties-type_refname_fld ) .

    IF  iv_parent_id    EQ v_root_id
    AND iv_type_refname EQ v_contextname .
      v_contextshortdescr = ls_properties-comp_shortdescr .
    ENDIF .

    node_add( EXPORTING iv_parent_id  = iv_parent_id
              CHANGING  cs_properties = ls_properties ) .

*======================================================================
*   find and add children components
*======================================================================
    CASE ls_properties-type_kind .
      WHEN cl_abap_datadescr=&gt;typekind_struct1
        OR cl_abap_datadescr=&gt;typekind_struct2 .

        LOOP AT lt_components ASSIGNING &lt;components&gt; .

          CONCATENATE ls_properties-type_absname  &lt;components&gt;-name
          INTO lv_type_refname SEPARATED BY &apos;-&apos; .

          nodes_recurs( iv_parent_id        = ls_properties-id
                        iv_parent_fullpath  = ls_properties-comp_fullpath
                        iv_type_refname     = lv_type_refname
                        iv_comp_name        = &lt;components&gt;-name ) .
        ENDLOOP .

      WHEN cl_abap_datadescr=&gt;typekind_table .
        nodes_recurs( iv_parent_id        = ls_properties-id
                      iv_parent_fullpath  = ls_properties-comp_fullpath
                      iv_type_refname     = lr_structdescr-&gt;absolute_name
                      iv_comp_name        = &apos;LINE&apos; ) .
      WHEN OTHERS .

    ENDCASE .

  ENDMETHOD .                    &quot;nodes_recurs
  METHOD node_add .
    DATA:
      ls_attr        TYPE streeattr .
    ls_attr-kind        = &apos;I&apos; .
    ls_attr-tlength1    = 30 .
    ls_attr-text1       = cs_properties-comp_name .
    ls_attr-tlength2    = 10 .
    ls_attr-text2       = cs_properties-type_kind .
    ls_attr-tlength3    = 10 .
    ls_attr-text3       = cs_properties-type_length .   CONDENSE ls_attr-text3 .
    ls_attr-tlength4    = 10 .
    ls_attr-text4       = cs_properties-type_decimals . CONDENSE ls_attr-text4 .
    ls_attr-tlength5    = 20 .
    ls_attr-text5       = cs_properties-comp_shortdescr .
*   ls_attr-text5       = cs_properties-type_absname .

    CASE cs_properties-comp_type .
      WHEN c_comp_type-struct .  ls_attr-nodeicon = c_comp_icon-struct .
      WHEN c_comp_type-table .   ls_attr-nodeicon = c_comp_icon-table .
      WHEN c_comp_type-element . ls_attr-nodeicon = c_comp_icon-element .
      WHEN c_comp_type-tree
        OR c_comp_type-tree_s .
        ls_attr-nodeicon = c_comp_icon-tree .
    ENDCASE .

    CALL FUNCTION &apos;RS_TREE_ADD_NODE&apos;
      EXPORTING
        new_name           = space
        insert_id          = iv_parent_id
        relationship       = stree_reltype_baby
        display_attributes = ls_attr
      IMPORTING
        new_id             = cs_properties-id
      EXCEPTIONS
        OTHERS             = 0.

    INSERT cs_properties INTO TABLE t_properties .
  ENDMETHOD .                    &quot;node_add
  METHOD node_get .
    msg_init( ) .

    READ TABLE t_properties INTO rs_properties WITH KEY id = iv_id .
    IF sy-subrc NE 0 .
      MESSAGE e000(lp) WITH v_text-t005 INTO v_dummy . &quot; text: Requested node was not found in the structure
      msg_syst_catch( ) .
      EXIT .
    ENDIF .
  ENDMETHOD .                    &quot;node_get
  METHOD node_get_by_path .
    msg_init( ) .
    DATA lv_comp_fullpath TYPE ty_comp_path .

    IF iv_comp_fullpath IS INITIAL .
      lv_comp_fullpath = get_fullpath( iv_parent_fullpath  = iv_fullpath_parent
                                       iv_relpath = iv_relpath ) .
    ELSE .
      lv_comp_fullpath = iv_comp_fullpath .
    ENDIF .

    READ TABLE t_properties INTO rs_properties
    WITH TABLE KEY comp_fullpath = lv_comp_fullpath .
    IF sy-subrc NE 0 .
      MESSAGE e000(lp) WITH v_text-t005 INTO v_dummy . &quot; text: Requested node was not found in the structure
      msg_syst_catch( ) .
      EXIT .
    ENDIF .
  ENDMETHOD .                    &quot;node_get_by_path
  METHOD subtree_get .
    msg_init( ) .

    DATA:
      lv_subtree_root_id    TYPE snode-id ,
      ls_attr               TYPE streeattr ,
      ls_hierarchy          TYPE ty_s_hierarchy ,
      ls_properties         TYPE ty_s_properties .

    v_f4_strategy = iv_f4_strategy .

*   create a header line (root node)
    READ TABLE t_hierarchy INTO ls_hierarchy WITH KEY id = v_root_id .
    CHECK sy-subrc EQ 0 .

    MOVE-CORRESPONDING ls_hierarchy TO ls_attr.
    ls_attr-force_plus = abap_on .
    ls_attr-hotspot    = abap_on .

    IF iv_begin_fullpath IS NOT INITIAL .
      format_path( EXPORTING iv_source = iv_begin_fullpath
                   CHANGING  cv_formatted = ls_attr-text1(25) ) .
    ENDIF .

    CALL FUNCTION &apos;RS_TREE_CREATE&apos;
      EXPORTING
        root_name          = &apos;CONTEXT&apos;
        display_attributes = ls_attr
      IMPORTING
        root_id            = lv_subtree_root_id.

*   create other nodes
    IF iv_begin_fullpath IS NOT INITIAL .
      CLEAR ls_hierarchy .
      CLEAR ls_properties .

      ls_properties = node_get_by_path( iv_comp_fullpath = iv_begin_fullpath ) .
      CHECK v_retcode NE c_retcode-error .

      READ TABLE t_hierarchy INTO ls_hierarchy WITH KEY id = ls_properties-id .
      CHECK sy-subrc EQ 0 .
    ENDIF .

    subtree_get_recurs( EXPORTING iv_parent_id_new    = lv_subtree_root_id
                                  is_parent_hierarchy = ls_hierarchy
                        CHANGING  ct_hierarchy_new    = et_hierarchy ) .

    CALL FUNCTION &apos;RS_TREE_GET_CURRENT_TREE&apos;
      TABLES
        nodeinfo = et_hierarchy.

    CALL FUNCTION &apos;RS_TREE_SET_CURRENT_TREE&apos; .

    CASE v_f4_strategy .
      WHEN c_f4_strategy-loopstep
        OR c_f4_strategy-grid .
        READ TABLE et_hierarchy TRANSPORTING NO FIELDS
        WITH KEY nodeicon = lcl_context=&gt;c_comp_icon-table .
      WHEN c_f4_strategy-folder .
        READ TABLE et_hierarchy TRANSPORTING NO FIELDS
        WITH KEY nodeicon = lcl_context=&gt;c_comp_icon-struct .
      WHEN c_f4_strategy-apr_relpath
        OR c_f4_strategy-gridfld .
        READ TABLE et_hierarchy TRANSPORTING NO FIELDS
        WITH KEY nodeicon = lcl_context=&gt;c_comp_icon-element .
      WHEN c_f4_strategy-value .
        READ TABLE et_hierarchy TRANSPORTING NO FIELDS
        WITH KEY nodeicon = lcl_context=&gt;c_comp_icon-element .
        IF sy-subrc NE 0 .
          READ TABLE et_hierarchy TRANSPORTING NO FIELDS
          WITH KEY nodeicon = lcl_context=&gt;c_comp_icon-table .
        ENDIF .
      WHEN c_f4_strategy-tree .
        READ TABLE et_hierarchy TRANSPORTING NO FIELDS
        WITH KEY nodeicon = lcl_context=&gt;c_comp_icon-tree .
      WHEN OTHERS .
    ENDCASE .

    IF sy-subrc NE 0 .
      MESSAGE e000(lp) WITH v_text-t006 INTO v_dummy . &quot; text: Relevant nodes of the context are not found
      msg_syst_catch( ) .
      CLEAR et_hierarchy[] .
      EXIT .
    ENDIF .

  ENDMETHOD .                    &quot;subtree_get
  METHOD subtree_get_recurs .
    DATA:
      ls_attr             TYPE streeattr ,
      ls_hierarchy        TYPE ty_s_hierarchy ,
      ls_properties       TYPE ty_s_properties ,
      lv_id_new           TYPE snode-id ,
      lv_id_next          TYPE snode-id .

    lv_id_next  = is_parent_hierarchy-child .
    lv_id_new   = iv_parent_id_new .

    DO .
*     read a next node
      READ TABLE t_hierarchy INTO ls_hierarchy
      WITH KEY parent = is_parent_hierarchy-id
               id     = lv_id_next .
      IF sy-subrc NE 0 .
        EXIT .
      ENDIF .

      READ TABLE t_properties INTO ls_properties
      WITH KEY id = ls_hierarchy-id .
      CHECK sy-subrc EQ 0 .
*===================================================

      DO 1 TIMES .
        CASE v_f4_strategy .
          WHEN c_f4_strategy-loopstep
            OR c_f4_strategy-grid .
            CHECK ls_properties-comp_type EQ c_comp_type-table
               OR ls_properties-comp_type EQ c_comp_type-struct .
          WHEN c_f4_strategy-folder .
            CHECK ls_properties-comp_type EQ c_comp_type-struct .
          WHEN c_f4_strategy-value .
            CHECK ls_properties-comp_type EQ c_comp_type-table
               OR ls_properties-comp_type EQ c_comp_type-struct
               OR ls_properties-comp_type EQ c_comp_type-element .
          WHEN c_f4_strategy-apr_relpath .
            CHECK ls_properties-comp_type EQ c_comp_type-struct
               OR ls_properties-comp_type EQ c_comp_type-element .
          WHEN c_f4_strategy-tree .
            CHECK ls_properties-comp_type EQ c_comp_type-struct
               OR ls_properties-comp_type EQ c_comp_type-tree
               OR ls_properties-comp_type EQ c_comp_type-tree_s .
          WHEN c_f4_strategy-gridfld .
            CHECK ls_properties-comp_type EQ c_comp_type-table
               OR ls_properties-comp_type EQ c_comp_type-struct
               OR ls_properties-comp_type EQ c_comp_type-element .
          WHEN OTHERS .
        ENDCASE .

        MOVE-CORRESPONDING ls_hierarchy TO ls_attr .
        ls_attr-hide  = ls_hierarchy-id .

        CALL FUNCTION &apos;RS_TREE_ADD_NODE&apos;
          EXPORTING
            new_name           = space
            insert_id          = iv_parent_id_new
            relationship       = stree_reltype_baby
            display_attributes = ls_attr
          IMPORTING
            new_id             = lv_id_new
          EXCEPTIONS
            OTHERS             = 0.
      ENDDO .

*===================================================
      DO 1 TIMES .
        CHECK ls_hierarchy-child IS NOT INITIAL .

        IF ls_properties-comp_type EQ c_comp_type-table .
          CHECK v_f4_strategy EQ c_f4_strategy-gridfld .
        ENDIF .

*       recursive process subtree
        subtree_get_recurs( EXPORTING iv_parent_id_new    = lv_id_new
                                      is_parent_hierarchy = ls_hierarchy
                            CHANGING  ct_hierarchy_new    = ct_hierarchy_new ) .
      ENDDO .

*===================================================
      IF ls_hierarchy-next IS INITIAL .
        EXIT .
      ELSE .
        lv_id_next = ls_hierarchy-next .
      ENDIF .
    ENDDO .

  ENDMETHOD .                    &quot;subtree_get_recurs
  METHOD gridfld_get .
    DATA:
      ls_hierarchy          TYPE ty_s_hierarchy ,
      lt_hierarchy          TYPE ty_t_hierarchy ,
      ls_properties         TYPE ty_s_properties .
    CLEAR:
      et_properties ,
      et_hierarchy .

    subtree_get(
        EXPORTING iv_begin_fullpath = iv_begin_fullpath
                  iv_f4_strategy = c_f4_strategy-gridfld
        IMPORTING et_hierarchy = lt_hierarchy ) .

    LOOP AT lt_hierarchy INTO ls_hierarchy .
      READ TABLE t_properties INTO ls_properties
        WITH KEY id = ls_hierarchy-hide .
      CHECK sy-subrc EQ 0 .

      CHECK ls_properties-comp_type EQ c_comp_type-element
         OR ls_properties-comp_type EQ c_comp_type-table .
      INSERT ls_properties INTO TABLE et_properties .
      INSERT ls_hierarchy  INTO TABLE et_hierarchy .
    ENDLOOP .

  ENDMETHOD .                    &quot;gridfld_get
ENDCLASS .                    &quot;lcl_context IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_excel DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_excel DEFINITION INHERITING FROM lcl_root ABSTRACT .

  PUBLIC SECTION.

    TYPE-POOLS:
      ixml.
    TYPES:
      ty_rawdata          TYPE xstring.
    TYPES:
      BEGIN OF ty_s_elemsequence ,
        order             TYPE sy-index ,
        element           TYPE string ,
      END   OF ty_s_elemsequence ,
      ty_t_elemsequence   TYPE STANDARD TABLE OF ty_s_elemsequence .
    TYPES:
      BEGIN OF ty_s_coordinates ,
        beg_y             TYPE i ,
        beg_x             TYPE i ,
        end_y             TYPE i ,
        end_x             TYPE i ,
      END   OF ty_s_coordinates .
    TYPES:
      BEGIN OF ty_s_sharedstrings ,
        value             TYPE string ,
        key               TYPE i ,
        si_node           TYPE REF TO if_ixml_node , &quot; --&gt;&gt; if extended cell formatting occurs
      END   OF ty_s_sharedstrings ,
      ty_t_sharedstrings  TYPE HASHED TABLE OF ty_s_sharedstrings
                               WITH UNIQUE KEY value .
    TYPES:
      BEGIN OF ty_s_mergecells .
    INCLUDE               TYPE ty_s_coordinates .
    TYPES:
        autofit_rows      TYPE flag ,
        autofit_cols      TYPE flag ,
      END   OF ty_s_mergecells ,
      ty_t_mergecells     TYPE STANDARD TABLE OF ty_s_mergecells
                               WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_relstab  ,
        target            TYPE string ,
        type              TYPE string ,
        id                TYPE string ,
      END   OF ty_s_relstab  ,
      ty_t_relstab        TYPE STANDARD TABLE OF ty_s_relstab
                               WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_datavalidation ,
        allowblank        TYPE string ,
        error             TYPE string ,
        errorstyle        TYPE string ,
        errortitle        TYPE string ,
        imemode           TYPE string ,
        operator          TYPE string ,
        prompt            TYPE string ,
        prompttitle       TYPE string ,
        showdropdown      TYPE string ,
        showerrormessage  TYPE string ,
        showinputmessage  TYPE string ,
        type              TYPE string ,
        formula1          TYPE string ,
        formula1_dataset_id   TYPE snodetext-id ,
        formula1_dataset_fld  TYPE string ,
        formula1_dataset_rt_path_1  TYPE string ,
        formula2          TYPE string ,
      END   OF ty_s_datavalidation .
    TYPES:
      BEGIN OF ty_s_datavalid_rt .
    INCLUDE           TYPE ty_s_datavalidation .
    TYPES:
        t_coordinates     TYPE STANDARD TABLE OF ty_s_coordinates WITH DEFAULT KEY ,
      END   OF ty_s_datavalid_rt ,
      ty_t_datavalid_rt   TYPE SORTED TABLE OF ty_s_datavalid_rt
                               WITH UNIQUE KEY allowblank
                                               error
                                               errorstyle
                                               errortitle
                                               imemode
                                               operator
                                               prompt
                                               prompttitle
                                               showdropdown
                                               showerrormessage
                                               showinputmessage
                                               TYPE
                                               formula1
                                               formula1_dataset_id
                                               formula1_dataset_fld
                                               formula1_dataset_rt_path_1
                                               formula2 .
    TYPES:
      BEGIN OF ty_s_datavalid_seqnr ,
        id                 TYPE snodetext-id ,
        dataset_seqnr      TYPE i ,
      END   OF ty_s_datavalid_seqnr ,
      ty_t_datavalid_seqnr TYPE HASHED TABLE OF ty_s_datavalid_seqnr
                                WITH UNIQUE KEY id .
    TYPES:
      BEGIN OF ty_s_cells ,
        y                 TYPE i ,
        x                 TYPE i ,
        style             TYPE string ,
        type              TYPE string ,
        value             TYPE string ,
        value_s           TYPE string , &quot; --&gt;&gt; respecting shared strings
        formula           TYPE string ,
        textformat_style  TYPE flag ,
        dateformat_style  TYPE flag ,
        tmp_flag          TYPE flag ,
        tmp_value_s       TYPE string ,
        tmp_si_node       TYPE REF TO if_ixml_node ,
        datavalidation    TYPE ty_s_datavalidation ,
      END   OF ty_s_cells ,
      ty_t_cells          TYPE SORTED TABLE OF ty_s_cells
                               WITH UNIQUE KEY y x .
    TYPES:
      BEGIN OF ty_s_calcchain ,
        sheet_index       TYPE i ,
        y                 TYPE i ,
        x                 TYPE i ,
      END   OF ty_s_calcchain ,
      ty_t_calcchain      TYPE STANDARD TABLE OF ty_s_calcchain
                               WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_colprop ,
        x                 TYPE i ,
        width             TYPE string ,
        style             TYPE string ,
        hidden            TYPE string ,
        bestfit           TYPE string ,
        customwidth       TYPE string ,
        outlinelevel      TYPE string ,
        collapsed         TYPE string ,
      END   OF ty_s_colprop ,
      ty_t_colprop        TYPE SORTED TABLE OF ty_s_colprop
                               WITH UNIQUE KEY x .
    TYPES:
      BEGIN OF ty_s_rowprop ,
        y                 TYPE i ,
        s                 TYPE string ,
        customformat      TYPE string ,
        ht                TYPE string ,
        customheight      TYPE string ,
        hidden            TYPE string ,
        outlinelevel      TYPE string ,
        collapsed         TYPE string ,
        is_empty          TYPE flag ,
      END   OF ty_s_rowprop ,
      ty_t_rowprop        TYPE HASHED TABLE OF ty_s_rowprop
                               WITH UNIQUE KEY y .
    TYPES:
      BEGIN OF ty_s_patterns ,
        id                TYPE snode-id ,
        outlinelevel_row  TYPE i ,
        outlinelevel_col  TYPE i ,
        t_cells           TYPE ty_t_cells ,
        t_mergecells      TYPE ty_t_mergecells_rel ,
        t_colprop         TYPE ty_t_colprop ,
        t_rowprop         TYPE ty_t_rowprop .
    INCLUDE               TYPE soi_area_item .
    TYPES:
      END   OF ty_s_patterns ,
      ty_t_patterns       TYPE STANDARD TABLE OF ty_s_patterns
                               WITH KEY id .
    TYPES:
      BEGIN OF ty_s_nopgbrk_range ,
        top               TYPE flag ,
        left              TYPE flag .
    INCLUDE               TYPE ty_s_coordinates .
    TYPES:
      END   OF ty_s_nopgbrk_range ,
      ty_t_nopgbrk_range  TYPE STANDARD TABLE OF ty_s_nopgbrk_range
                               WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_manual_pgbrk ,
        id                TYPE i ,
      END   OF ty_s_manual_pgbrk ,
      ty_t_manual_pgbrk   TYPE STANDARD TABLE OF ty_s_manual_pgbrk
                               WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_chart_series ,
        idx               TYPE string ,
        caption           TYPE string ,
      END   OF ty_s_chart_series ,
      ty_t_chart_series   TYPE STANDARD TABLE OF ty_s_chart_series
                               WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_drawings_tmp ,
        name                  TYPE string ,
        drawing_type          TYPE i ,
        twocellanchor_node    TYPE REF TO if_ixml_node ,
        media_rawdata         TYPE xstring ,
        dataset_id            TYPE snodetext-id ,
        dataset_rt_path_1     TYPE string ,     &quot; --&gt;&gt; runtime path (for dataset subordination)
        dataset_series_tab    TYPE ty_t_dataset_series_tab ,
        dataset_series_captyp TYPE i ,
        chart_id              TYPE snodetext-id ,
        chart_series          TYPE ty_t_chart_series ,
        chart_series_title    TYPE flag ,
        chart_title           TYPE flag ,
        chart_title_tx        TYPE string ,
        chart_catax_title     TYPE flag ,
        chart_catax_title_tx  TYPE string ,
        chart_valax_title     TYPE flag ,
        chart_valax_title_tx  TYPE string ,
        chart_ixml_doc        TYPE REF TO if_ixml_document ,
        chartcolors_ixml_doc  TYPE REF TO if_ixml_document ,
        chartstyle_ixml_doc   TYPE REF TO if_ixml_document ,
        drawing_size_h        TYPE i ,
        drawing_size_w        TYPE i .
    INCLUDE                   TYPE soi_area_item .
    TYPES:
      END   OF ty_s_drawings_tmp ,
      ty_t_drawings_tmp       TYPE HASHED TABLE OF ty_s_drawings_tmp
                                   WITH UNIQUE KEY name .
    TYPES:
      BEGIN OF ty_s_drawings ,
        drawing_type          TYPE i ,
        twocellanchor_node    TYPE REF TO if_ixml_node ,
        refer_id              TYPE string ,
        drawing_size_h        TYPE i ,
        drawing_size_w        TYPE i .
    INCLUDE                   TYPE ty_s_coordinates .
    TYPES:
      END   OF ty_s_drawings ,
      ty_t_drawings           TYPE STANDARD TABLE OF ty_s_drawings
                                   WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_media ,
        media_rawdata         TYPE xstring ,
        id                    TYPE string ,
      END   OF ty_s_media ,
      ty_t_media              TYPE HASHED TABLE OF ty_s_media
                                   WITH UNIQUE KEY media_rawdata .
    TYPES:
      BEGIN OF ty_s_charts ,
        id                    TYPE string ,
        chart_ixml_doc        TYPE REF TO if_ixml_document ,
        chart_path            TYPE string ,
        chart_path_           TYPE string ,
        chartcolors_ixml_doc  TYPE REF TO if_ixml_document ,
        chartcolors_path      TYPE string ,
        chartstyle_ixml_doc   TYPE REF TO if_ixml_document ,
        chartstyle_path       TYPE string ,
        chart_series_title    TYPE flag ,
        chart_title           TYPE flag ,
        chart_title_tx        TYPE string ,
        chart_catax_title     TYPE flag ,
        chart_catax_title_tx  TYPE string ,
        chart_valax_title     TYPE flag ,
        chart_valax_title_tx  TYPE string ,
        dataset_id            TYPE snodetext-id ,
        dataset_rt_path_1     TYPE string ,
        dataset_series_tab    TYPE ty_t_dataset_series_tab ,
        dataset_series_captyp TYPE i ,
      END  OF ty_s_charts ,
      ty_t_charts             TYPE HASHED TABLE OF ty_s_charts
                                   WITH UNIQUE KEY id .
    TYPES:
      BEGIN OF ty_s_dataset_ref_fields ,
        field              TYPE string ,
        ref                TYPE string ,
        ref_2              TYPE string ,
        beg_x              TYPE i ,
        end_x              TYPE i ,
        beg_y              TYPE i ,
        end_y              TYPE i ,
        caption_x          TYPE i ,
        caption_y          TYPE i ,
        caption_ref        TYPE string ,
      END   OF ty_s_dataset_ref_fields ,
      ty_t_dataset_ref_fields   TYPE STANDARD TABLE OF ty_s_dataset_ref_fields
                                WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_dataset_refs ,
        rt_path_1          TYPE string , &quot; --&gt;&gt; runtime path (for dataset subordination)
        sheetname          TYPE string ,
        t_fields           TYPE ty_t_dataset_ref_fields ,
      END   OF ty_s_dataset_refs ,
      ty_t_dataset_refs    TYPE HASHED TABLE OF ty_s_dataset_refs
                                WITH UNIQUE KEY rt_path_1 .
    TYPES:
      BEGIN OF ty_s_datasets ,
        id                 TYPE snodetext-id ,
        t_refs             TYPE ty_t_dataset_refs ,
      END   OF ty_s_datasets ,
      ty_t_datasets        TYPE HASHED TABLE OF ty_s_datasets
                                WITH UNIQUE KEY id .
    TYPES:
      BEGIN OF ty_s_cellrng_name ,
        name               TYPE string .
    INCLUDE                TYPE ty_s_coordinates .
    TYPES:
      END   OF ty_s_cellrng_name ,
      ty_t_cellrng_name    TYPE STANDARD TABLE OF ty_s_cellrng_name
                                WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_vmldrawings_rels .
    INCLUDE                  TYPE ty_s_relstab .
    TYPES:
        media_path           TYPE string ,
        media_rawdata        TYPE xstring ,
      END   OF ty_s_vmldrawings_rels ,
      ty_t_vmldrawings_rels  TYPE STANDARD TABLE OF ty_s_vmldrawings_rels WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_vmldrawings ,
        id                   TYPE string ,
        path                 TYPE string ,
        ixml_doc             TYPE REF TO if_ixml_document ,
        rels_path            TYPE string ,
        t_rels               TYPE ty_t_vmldrawings_rels ,
      END   OF ty_s_vmldrawings ,
      ty_t_vmldrawings       TYPE HASHED TABLE OF ty_s_vmldrawings
                                  WITH UNIQUE KEY id .
    TYPES:
      BEGIN OF ty_s_sheetdata_template ,
        t_patterns        TYPE ty_t_patterns ,
        t_sheetrels       TYPE ty_t_relstab ,
        t_drawings        TYPE ty_t_drawings_tmp ,
        vmldrawings       TYPE ty_s_vmldrawings ,
      END   OF ty_s_sheetdata_template .
    TYPES:
      BEGIN OF ty_s_sheetdata_runtime .
    INCLUDE               TYPE ty_s_coordinates .
    TYPES:
        t_cells           TYPE ty_t_cells ,
        t_mergecells      TYPE ty_t_mergecells ,
        t_colprop         TYPE ty_t_colprop ,
        t_rowprop         TYPE ty_t_rowprop ,
        t_sheetrels       TYPE ty_t_relstab ,
        t_drawings        TYPE ty_t_drawings ,
        t_datavalid       TYPE ty_t_datavalid_rt ,
        drawing_path      TYPE string ,
        outlinelevelrow   TYPE i ,
        outlinelevelcol   TYPE i ,
        printtitles       TYPE ty_s_coordinates ,
        sheetprotection   TYPE ty_s_sheetprotection ,
        t_cellrng_name    TYPE ty_t_cellrng_name ,
        t_nopgbrk_range   TYPE ty_t_nopgbrk_range ,
        t_manual_pgbrk_col      TYPE ty_t_manual_pgbrk ,
        t_manual_pgbrk_row      TYPE ty_t_manual_pgbrk ,
        hidden                  TYPE flag ,
        postprocessing_autofit  TYPE flag ,
        postprocessing_nopgbrk  TYPE flag ,
      END   OF ty_s_sheetdata_runtime .
    TYPES:
      BEGIN OF ty_s_sheets ,
        name                TYPE ty_char31  ,
        name_int            TYPE ty_char100 ,
        id                  TYPE ty_char100 ,
        num                 TYPE ty_char100 ,
        index               TYPE i ,
        ixml_doc            TYPE REF TO if_ixml_document ,
        summarybelow        TYPE flag ,
        summaryright        TYPE flag ,
        chartsheet          TYPE flag ,
        active              TYPE flag ,
        sheetdata_template  TYPE ty_s_sheetdata_template ,
        sheetdata_runtime   TYPE ty_s_sheetdata_runtime ,
      END   OF ty_s_sheets ,
      ty_t_sheets           TYPE STANDARD TABLE OF ty_s_sheets
                                 WITH KEY name .
    TYPES:
      BEGIN OF ty_s_textformat_styles ,
        s                      TYPE i ,
      END   OF ty_s_textformat_styles ,
      ty_t_textformat_styles   TYPE HASHED TABLE OF ty_s_textformat_styles
                                    WITH UNIQUE KEY s .
    TYPES:
      BEGIN OF ty_s_dateformat_styles ,
        s                      TYPE i ,
      END   OF ty_s_dateformat_styles ,
      ty_t_dateformat_styles   TYPE HASHED TABLE OF ty_s_dateformat_styles
                                    WITH UNIQUE KEY s .
    TYPES:
      BEGIN OF ty_s_model ,
        ixml_doc_contenttypes  TYPE REF TO if_ixml_document ,
        ixml_doc_core          TYPE REF TO if_ixml_document ,
        ixml_doc_app           TYPE REF TO if_ixml_document ,
        ixml_doc_workbook      TYPE REF TO if_ixml_document ,
        ixml_doc_sharedstrings TYPE REF TO if_ixml_document ,
        ixml_doc_calcchain     TYPE REF TO if_ixml_document ,
        ixml_doc_styles        TYPE REF TO if_ixml_document ,
        t_contentrels          TYPE ty_t_relstab ,
        t_workbookrels         TYPE ty_t_relstab ,
        t_sheets               TYPE ty_t_sheets ,
        t_sharedstrings        TYPE ty_t_sharedstrings ,
        t_calcchain            TYPE ty_t_calcchain ,
        t_media                TYPE ty_t_media ,
        t_charts               TYPE ty_t_charts ,
        t_datasets             TYPE ty_t_datasets ,
        t_textformat_styles    TYPE ty_t_textformat_styles ,
        t_dateformat_styles    TYPE ty_t_dateformat_styles ,
        t_vmldrawings          TYPE ty_t_vmldrawings ,
        v_refer_id             TYPE ty_char10 ,
        v_active_sheet_id      TYPE ty_char100 ,
      END   OF ty_s_model .

    DATA:
      s_model             TYPE ty_s_model READ-ONLY ,
      r_zipfolder         TYPE REF TO cl_abap_zip READ-ONLY ,
      v_runtime           TYPE flag ,
      v_extension         TYPE ty_char10 ,
      t_elemsequence_worksheet TYPE ty_t_elemsequence ,
      t_elemsequence_workbook  TYPE ty_t_elemsequence .
    CONSTANTS:
      BEGIN OF c_tag ,
        a                 TYPE string VALUE &apos;a&apos; ,
        p                 TYPE string VALUE &apos;p&apos; ,
        r                 TYPE string VALUE &apos;r&apos; ,
        s                 TYPE string VALUE &apos;s&apos; ,
        t                 TYPE string VALUE &apos;t&apos; ,
        c                 TYPE string VALUE &apos;c&apos; ,
        v                 TYPE string VALUE &apos;v&apos; ,
        table             TYPE string VALUE &apos;table&apos; ,
        basetype          TYPE string VALUE &apos;baseType&apos; ,
        drawing           TYPE string VALUE &apos;drawing&apos; ,
        legacydrawing     TYPE string VALUE &apos;legacyDrawing&apos; ,
        override          TYPE string VALUE &apos;Override&apos; ,
        default           TYPE string VALUE &apos;Default&apos; ,
        contenttype       TYPE string VALUE &apos;ContentType&apos; ,
        extension         TYPE string VALUE &apos;Extension&apos; ,
        partname          TYPE string VALUE &apos;PartName&apos; ,
        relationships     TYPE string VALUE &apos;Relationships&apos; ,
        relationship      TYPE string VALUE &apos;Relationship&apos; ,
        type              TYPE string VALUE &apos;Type&apos; ,
        types             TYPE string VALUE &apos;Types&apos; ,
        target            TYPE string VALUE &apos;Target&apos; ,
        twocellanchor     TYPE string VALUE &apos;twoCellAnchor&apos; ,
        onecellanchor     TYPE string VALUE &apos;oneCellAnchor&apos; ,
        headingpairs      TYPE string VALUE &apos;HeadingPairs&apos; ,
        titlesofparts     TYPE string VALUE &apos;TitlesOfParts&apos; ,
        vt                TYPE string VALUE &apos;vt&apos; ,
        lpstr             TYPE string VALUE &apos;lpstr&apos; ,
        i4                TYPE string VALUE &apos;i4&apos; ,
        i                 TYPE string VALUE &apos;i&apos; ,
        vector            TYPE string VALUE &apos;vector&apos; ,
        variant           TYPE string VALUE &apos;variant&apos; ,
        size              TYPE string VALUE &apos;size&apos; ,
        id                TYPE string VALUE &apos;id&apos; ,
        id_               TYPE string VALUE &apos;Id&apos; ,
        name              TYPE string VALUE &apos;name&apos; ,
        sheet             TYPE string VALUE &apos;sheet&apos; ,
        sheets            TYPE string VALUE &apos;sheets&apos; ,
        sheetid           TYPE string VALUE &apos;sheetId&apos; ,
        row               TYPE string VALUE &apos;row&apos; ,
        rowoff            TYPE string VALUE &apos;rowOff&apos; ,
        definednames      TYPE string VALUE &apos;definedNames&apos; ,
        definedname       TYPE string VALUE &apos;definedName&apos; ,
        localsheetid      TYPE string VALUE &apos;localSheetId&apos; ,
        xlnmprinttitles   TYPE string VALUE &apos;_xlnm.Print_Titles&apos; ,
        si                TYPE string VALUE &apos;si&apos; ,
        sst               TYPE string VALUE &apos;sst&apos; ,
        space_            TYPE string VALUE &apos;space&apos; ,
        xml               TYPE string VALUE &apos;xml&apos; ,
        xmlns             TYPE string VALUE &apos;xmlns&apos; ,
        count             TYPE string VALUE &apos;count&apos; ,
        uniquecount       TYPE string VALUE &apos;uniqueCount&apos; ,
        workbookview      TYPE string VALUE &apos;workbookView&apos; ,
        workbook          TYPE string VALUE &apos;workbook&apos; ,
        activetab         TYPE string VALUE &apos;activeTab&apos; ,
        mergecell         TYPE string VALUE &apos;mergeCell&apos; ,
        mergecells        TYPE string VALUE &apos;mergeCells&apos; ,
        ref               TYPE string VALUE &apos;ref&apos; ,
        sheetdata         TYPE string VALUE &apos;sheetData&apos; ,
        spans             TYPE string VALUE &apos;spans&apos; ,
        worksheet         TYPE string VALUE &apos;worksheet&apos; ,
        dimension         TYPE string VALUE &apos;dimension&apos; ,
        selection         TYPE string VALUE &apos;selection&apos; ,
        sheetformatpr     TYPE string VALUE &apos;sheetFormatPr&apos; ,
        outlinelevelrow   TYPE string VALUE &apos;outlineLevelRow&apos; ,
        outlinelevelcol   TYPE string VALUE &apos;outlineLevelCol&apos; ,
        cols              TYPE string VALUE &apos;cols&apos; ,
        col               TYPE string VALUE &apos;col&apos; ,
        coloff            TYPE string VALUE &apos;colOff&apos; ,
        calcchain         TYPE string VALUE &apos;calcChain&apos; ,
        width             TYPE string VALUE &apos;width&apos; ,
        style             TYPE string VALUE &apos;style&apos; ,
        state             TYPE string VALUE &apos;state&apos; ,
        hidden            TYPE string VALUE &apos;hidden&apos; ,
        bestfit           TYPE string VALUE &apos;bestfit&apos; ,
        customwidth       TYPE string VALUE &apos;customWidth&apos; ,
        customheight      TYPE string VALUE &apos;customHeight&apos; ,
        outlinelevel      TYPE string VALUE &apos;outlineLevel&apos; ,
        customformat      TYPE string VALUE &apos;customFormat&apos; ,
        collapsed         TYPE string VALUE &apos;collapsed&apos; ,
        ht                TYPE string VALUE &apos;ht&apos; ,
        min               TYPE string VALUE &apos;min&apos; ,
        max               TYPE string VALUE &apos;max&apos; ,
        xdr               TYPE string VALUE &apos;xdr&apos; ,
        cnvpr             TYPE string VALUE &apos;cNvPr&apos; ,
        pic               TYPE string VALUE &apos;pic&apos; ,
        blip              TYPE string VALUE &apos;blip&apos; ,
        embed             TYPE string VALUE &apos;embed&apos; ,
        from              TYPE string VALUE &apos;from&apos; ,
        to                TYPE string VALUE &apos;to&apos; ,
        wsdr              TYPE string VALUE &apos;wsDr&apos; ,
        editas            TYPE string VALUE &apos;editAs&apos; ,
        onecell           TYPE string VALUE &apos;oneCell&apos; ,
        clientdata        TYPE string VALUE &apos;clientData&apos; ,
        nvpicpr           TYPE string VALUE &apos;nvPicPr&apos; ,
        cnvpicpr          TYPE string VALUE &apos;cNvPicPr&apos; ,
        descr             TYPE string VALUE &apos;descr&apos; ,
        piclocks          TYPE string VALUE &apos;picLocks&apos; ,
        nochangeaspect    TYPE string VALUE &apos;noChangeAspect&apos; ,
        blipfill          TYPE string VALUE &apos;blipFill&apos; ,
        stretch           TYPE string VALUE &apos;stretch&apos; ,
        fillrect          TYPE string VALUE &apos;fillRect&apos; ,
        sppr              TYPE string VALUE &apos;spPr&apos; ,
        xfrm              TYPE string VALUE &apos;xfrm&apos; ,
        off               TYPE string VALUE &apos;off&apos; ,
        ext               TYPE string VALUE &apos;ext&apos; ,
        x                 TYPE string VALUE &apos;x&apos; ,
        y                 TYPE string VALUE &apos;y&apos; ,
        cx                TYPE string VALUE &apos;cx&apos; ,
        cy                TYPE string VALUE &apos;cy&apos; ,
        prstgeom          TYPE string VALUE &apos;prstGeom&apos; ,
        prst              TYPE string VALUE &apos;prst&apos; ,
        rect              TYPE string VALUE &apos;rect&apos; ,
        avlst             TYPE string VALUE &apos;avLst&apos; ,
        jpeg              TYPE string VALUE &apos;jpeg&apos; ,
        imagejpeg         TYPE string VALUE &apos;image/jpeg&apos; ,
        emf               TYPE string VALUE &apos;emf&apos; ,
        imageemf          TYPE string VALUE &apos;image/x-emf&apos; ,
        outlinepr         TYPE string VALUE &apos;outlinePr&apos; ,
        summarybelow      TYPE string VALUE &apos;summaryBelow&apos; ,
        summaryright      TYPE string VALUE &apos;summaryRight&apos; ,
        sheetprotection   TYPE string VALUE &apos;sheetProtection&apos; ,
        password          TYPE string VALUE &apos;password&apos; ,
        selectlockedcells TYPE string VALUE &apos;selectLockedCells&apos; ,
        selectunlockedcells TYPE string VALUE &apos;selectUnlockedCells&apos; ,
        formatcells       TYPE string VALUE &apos;formatCells&apos; ,
        formatcolumns     TYPE string VALUE &apos;formatColumns&apos; ,
        formatrows        TYPE string VALUE &apos;formatRows&apos; ,
        insertcolumns     TYPE string VALUE &apos;insertColumns&apos; ,
        insertrows        TYPE string VALUE &apos;insertRows&apos; ,
        inserthyperlinks  TYPE string VALUE &apos;insertHyperlinks&apos; ,
        deletecolumns     TYPE string VALUE &apos;deleteColumns&apos; ,
        deleterows        TYPE string VALUE &apos;deleteRows&apos; ,
        sort              TYPE string VALUE &apos;sort&apos; ,
        autofilter        TYPE string VALUE &apos;autoFilter&apos; ,
        pivottables       TYPE string VALUE &apos;pivotTables&apos; ,
        objects           TYPE string VALUE &apos;objects&apos; ,
        scenarios         TYPE string VALUE &apos;scenarios&apos; ,
        cellxfs           TYPE string VALUE &apos;cellXfs&apos; ,
        xf                TYPE string VALUE &apos;xf&apos; ,
        numfmtid          TYPE string VALUE &apos;numFmtId&apos; ,
        preserve          TYPE string VALUE &apos;preserve&apos; ,
        properties        TYPE string VALUE &apos;Properties&apos; ,
        coreproperties    TYPE string VALUE &apos;coreProperties&apos; ,
        manager           TYPE string VALUE &apos;Manager&apos; ,
        company           TYPE string VALUE &apos;Company&apos; ,
        hyperlinkbase     TYPE string VALUE &apos;HyperlinkBase&apos; ,
        contentstatus     TYPE string VALUE &apos;contentStatus&apos; ,
        category          TYPE string VALUE &apos;category&apos; ,
        description       TYPE string VALUE &apos;description&apos; ,
        creator           TYPE string VALUE &apos;creator&apos; ,
        subject           TYPE string VALUE &apos;subject&apos; ,
        title             TYPE string VALUE &apos;title&apos; ,
        keywords          TYPE string VALUE &apos;keywords&apos; ,
        lastmodifiedby    TYPE string VALUE &apos;lastModifiedBy&apos; ,
        dc                TYPE string VALUE &apos;dc&apos; ,
        cp                TYPE string VALUE &apos;cp&apos; ,
        rowbreaks         TYPE string VALUE &apos;rowBreaks&apos; ,
        colbreaks         TYPE string VALUE &apos;colBreaks&apos; ,
        manualbreakcount  TYPE string VALUE &apos;manualBreakCount&apos; ,
        brk               TYPE string VALUE &apos;brk&apos; ,
        man               TYPE string VALUE &apos;man&apos; ,
        graphicframe      TYPE string VALUE &apos;graphicFrame&apos; ,
        chart             TYPE string VALUE &apos;chart&apos; ,
        plotarea          TYPE string VALUE &apos;plotArea&apos; ,
        ser               TYPE string VALUE &apos;ser&apos; ,
        val               TYPE string VALUE &apos;val&apos; ,
        xval              TYPE string VALUE &apos;xVal&apos; ,
        yval              TYPE string VALUE &apos;yVal&apos; ,
        cat               TYPE string VALUE &apos;cat&apos; ,
        idx               TYPE string VALUE &apos;idx&apos; ,
        catax             TYPE string VALUE &apos;catAx&apos; ,
        valax             TYPE string VALUE &apos;valAx&apos; ,
        rich              TYPE string VALUE &apos;rich&apos; ,
        tx                TYPE string VALUE &apos;tx&apos; ,
        txpr              TYPE string VALUE &apos;txPr&apos; ,
        strcache          TYPE string VALUE &apos;strCache&apos; ,
        numcache          TYPE string VALUE &apos;numCache&apos; ,
        pt                TYPE string VALUE &apos;pt&apos; ,
        numref            TYPE string VALUE &apos;numRef&apos; ,
        strref            TYPE string VALUE &apos;strRef&apos; ,
        f                 TYPE string VALUE &apos;f&apos; ,
        layout            TYPE string VALUE &apos;layout&apos; ,
        sheetview         TYPE string VALUE &apos;sheetView&apos; ,
        tabselected       TYPE string VALUE &apos;tabSelected&apos; ,
        endpararpr        TYPE string VALUE &apos;endParaRPr&apos; ,
        datavalidation    TYPE string VALUE &apos;dataValidation&apos; ,
        datavalidations   TYPE string VALUE &apos;dataValidations&apos; ,
        sqref             TYPE string VALUE &apos;sqref&apos; ,
        formula1          TYPE string VALUE &apos;formula1&apos; ,
        formula2          TYPE string VALUE &apos;formula2&apos; ,
        allowblank        TYPE string VALUE &apos;allowBlank&apos; ,
        error             TYPE string VALUE &apos;error&apos; ,
        errorstyle        TYPE string VALUE &apos;errorStyle&apos; ,
        errortitle        TYPE string VALUE &apos;errorTitle&apos; ,
        imemode           TYPE string VALUE &apos;imeMode&apos; ,
        operator          TYPE string VALUE &apos;operator&apos; ,
        prompt            TYPE string VALUE &apos;prompt&apos; ,
        prompttitle       TYPE string VALUE &apos;promptTitle&apos; ,
        showdropdown      TYPE string VALUE &apos;showDropDown&apos; ,
        showerrormessage  TYPE string VALUE &apos;showErrorMessage&apos; ,
        showinputmessage  TYPE string VALUE &apos;showInputMessage&apos; ,
        type_             TYPE string VALUE &apos;type&apos; ,
      END   OF c_tag .
    CONSTANTS:
      BEGIN OF c_contenttype ,
        app               TYPE string VALUE &apos;application/vnd.openxmlformats-officedocument.extended-properties+xml&apos; ,
        workbook          TYPE string VALUE &apos;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml&apos; ,
        workbook_macro    TYPE string VALUE &apos;application/vnd.ms-excel.sheet.macroEnabled.main+xml&apos; ,
        workbook_macro12  TYPE string VALUE &apos;application/vnd.ms-excel.sheet.macroEnabled.12.main+xml&apos; ,
        sharedstrings     TYPE string VALUE &apos;application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml&apos; ,
        calcchain         TYPE string VALUE &apos;application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml&apos; ,
        sheet             TYPE string VALUE &apos;application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml&apos; ,
        drawing           TYPE string VALUE &apos;application/vnd.openxmlformats-officedocument.drawing+xml&apos; ,
        chart             TYPE string VALUE &apos;application/vnd.openxmlformats-officedocument.drawingml.chart+xml&apos; ,
        chartstyle        TYPE string VALUE &apos;application/vnd.ms-office.chartstyle+xml&apos; ,
        chartcolors       TYPE string VALUE &apos;application/vnd.ms-office.chartcolorstyle+xml&apos; ,
        relationships     TYPE string VALUE &apos;http://schemas.openxmlformats.org/package/2006/relationships&apos; ,
        thumbnail         TYPE string VALUE &apos;http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail&apos; ,
        wb                TYPE string VALUE &apos;http://schemas.openxmlformats.org/officeDocument/2006/relationships&apos; ,
        wb_sheet          TYPE string VALUE &apos;http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet&apos; ,
        wb_chartsheet     TYPE string VALUE &apos;http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet&apos; ,
        wb_sharedstrings  TYPE string VALUE &apos;http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings&apos; ,
        wb_calcchain      TYPE string VALUE &apos;http://schemas.openxmlformats.org/officeDocument/2006/relationships/calcChain&apos; ,
        wb_drawing        TYPE string VALUE &apos;http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing&apos; ,
        wb_vmldrawing     TYPE string VALUE &apos;http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing&apos; ,
        wb_image          TYPE string VALUE &apos;http://schemas.openxmlformats.org/officeDocument/2006/relationships/image&apos; ,
        wb_chart          TYPE string VALUE &apos;http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart&apos; ,
        wb_chartstyle     TYPE string VALUE &apos;http://schemas.microsoft.com/office/2011/relationships/chartStyle&apos; ,
        wb_chartcolors    TYPE string VALUE &apos;http://schemas.microsoft.com/office/2011/relationships/chartColorStyle&apos; ,
        wb_main           TYPE string VALUE &apos;http://schemas.openxmlformats.org/spreadsheetml/2006/main&apos; ,
        wb_drawings       TYPE string VALUE &apos;http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing&apos; ,
        wb_drawings_main  TYPE string VALUE &apos;http://schemas.openxmlformats.org/drawingml/2006/main&apos; ,
      END   OF c_contenttype .
    CONSTANTS:
      BEGIN OF c_path ,
        contenttypes      TYPE string VALUE &apos;[Content_Types].xml&apos; ,
        app               TYPE string VALUE &apos;/docProps/app.xml&apos; ,
        core              TYPE string VALUE &apos;/docProps/core.xml&apos; ,
        workbook          TYPE string VALUE &apos;/xl/workbook.xml&apos; ,
        sharedstrings     TYPE string VALUE &apos;/xl/sharedStrings.xml&apos; ,
        calcchain         TYPE string VALUE &apos;/xl/calcChain.xml&apos; ,
        styles            TYPE string VALUE &apos;/xl/styles.xml&apos; ,
        sheetsfolder      TYPE string VALUE &apos;/xl/worksheets&apos; ,
        drawingsfolder    TYPE string VALUE &apos;/xl/drawings&apos; ,
        drawingsfolder_   TYPE string VALUE &apos;../drawings&apos; ,
        mediafolder       TYPE string VALUE &apos;/xl/media&apos; ,
        mediafolder_      TYPE string VALUE &apos;../media&apos; ,
        chartsfolder      TYPE string VALUE &apos;/xl/charts&apos; ,
        chartsfolder_     TYPE string VALUE &apos;../charts&apos; ,
        formparameters    TYPE string VALUE &apos;/FormParameters&apos; ,
        formhead          TYPE string VALUE &apos;/FormParameters/head.xml&apos; ,
        formproperties    TYPE string VALUE &apos;/FormParameters/properties.xml&apos; ,
        formhierarchy     TYPE string VALUE &apos;/FormParameters/hierarchy.xml&apos; ,
      END   OF c_path .
    CONSTANTS:
      BEGIN OF c_drawing_type ,
        vector            TYPE i VALUE 1 ,
        bitmap            TYPE i VALUE 2 ,
        chart             TYPE i VALUE 3 ,
      END   OF c_drawing_type .
    CONSTANTS:
      c_numbers           TYPE ty_char10 VALUE &apos;0123456789&apos; ,
      c_numbers__         TYPE ty_char15 VALUE &apos; 0123456789&apos; ,
      c_numbers_          TYPE ty_char15 VALUE &apos;-0123456789.&apos; ,
      c_character_set     TYPE string    VALUE &apos;UTF-8&apos; .

    METHODS:
      constructor
          IMPORTING iv_rawdata            TYPE any OPTIONAL
                    it_document_table     TYPE tsfmime OPTIONAL
                    iv_document_size      TYPE i OPTIONAL
          EXCEPTIONS error_file_reading ,
      free ,
      bufferization_baseinfo ,
      rawdata_set
          IMPORTING iv_rawdata            TYPE any ,
      rawdata_set_as_table
          IMPORTING it_document_table     TYPE tsfmime
                    iv_document_size      TYPE i ,
      rawdata_get
          RETURNING value(rv_rawdata)     TYPE ty_rawdata,
      rawdata_get_as_table
          EXPORTING et_document_table     TYPE tsfmime
                    ev_document_size      TYPE i ,
      conv_nc
          IMPORTING iv_number             TYPE any
          EXPORTING ev_char               TYPE any ,
      conv_cn
          IMPORTING iv_char               TYPE any
          EXPORTING ev_number             TYPE any ,
      conv_ref_nc
          IMPORTING iv_beg_x              TYPE any OPTIONAL
                    iv_beg_y              TYPE any OPTIONAL
                    iv_end_x              TYPE any OPTIONAL
                    iv_end_y              TYPE any OPTIONAL
                    iv_prefix             TYPE any OPTIONAL
                    iv_prefix_x           TYPE any OPTIONAL
                    iv_prefix_y           TYPE any OPTIONAL
                    iv_sheetname          TYPE any OPTIONAL
          EXPORTING ev_ref                TYPE any
                    ev_ref_2              TYPE any ,
      conv_ref_nc_2
          IMPORTING iv_beg_x              TYPE any OPTIONAL
                    iv_beg_y              TYPE any OPTIONAL
                    iv_end_x              TYPE any OPTIONAL
                    iv_end_y              TYPE any OPTIONAL
                    iv_prefix             TYPE any OPTIONAL
                    iv_sheetname          TYPE any
          EXPORTING ev_ref                TYPE any ,
      conv_ref_cn
          IMPORTING iv_ref                TYPE any
          EXPORTING ev_beg_x              TYPE any
                    ev_beg_y              TYPE any
                    ev_end_x              TYPE any
                    ev_end_y              TYPE any ,
      conv_formula_r1c1_a1
          IMPORTING iv_y                  TYPE any
                    iv_x                  TYPE any
           CHANGING cv_formula            TYPE any ,
      conv_formula_r1c1_a1_getshift
           CHANGING cv_substring          TYPE any
                    cv_shift              TYPE i .

  PROTECTED SECTION .
    METHODS:
      xml_attrib_get
          IMPORTING ir_node               TYPE REF TO if_ixml_node
                    iv_attrib_name1       TYPE any  OPTIONAL
                    iv_attrib_name2       TYPE any  OPTIONAL
                    iv_attrib_name3       TYPE any  OPTIONAL
                    iv_attrib_name4       TYPE any  OPTIONAL
          EXPORTING ev_attrib_value1      TYPE any
                    ev_attrib_value2      TYPE any
                    ev_attrib_value3      TYPE any
                    ev_attrib_value4      TYPE any ,
      xml_load
          IMPORTING iv_path               TYPE any
                    iv_preserve           TYPE flag OPTIONAL
          RETURNING value(rv_ixml_doc)    TYPE REF TO if_ixml_document ,
      xml_save
          IMPORTING iv_ixml_doc       TYPE REF TO if_ixml_document
              value(iv_path)          TYPE any
                    iv_show           TYPE flag OPTIONAL
          RETURNING value(rv_xml_xstring) TYPE xstring ,
      xml_string_to_dom
          IMPORTING iv_string         TYPE string
                    iv_preserve       TYPE flag OPTIONAL
          RETURNING value(rv_ixml_doc) TYPE REF TO if_ixml_document ,
      xml_xstring_to_dom
          IMPORTING iv_xstring        TYPE xstring
                    iv_preserve       TYPE flag OPTIONAL
          RETURNING value(rv_ixml_doc) TYPE REF TO if_ixml_document ,
      xml_insert_element
          IMPORTING iv_name_element   TYPE any
                    ir_ixml_element   TYPE REF TO if_ixml_element
                    it_elemsequence   TYPE ty_t_elemsequence
           CHANGING cr_ixml_parent 	  TYPE REF TO if_ixml_element ,
      xml_relstab_get
          IMPORTING iv_path           TYPE any
          RETURNING value(rt_relstab) TYPE ty_t_relstab ,
      xml_relstab_set
          IMPORTING iv_path           TYPE any
                    it_relstab        TYPE ty_t_relstab ,
      xml_remove_nodes
          IMPORTING iv_ixml_doc       TYPE REF TO if_ixml_document
                    iv_name           TYPE any
                    iv_namespace      TYPE any OPTIONAL ,
      template_getfrom_hardcode
          RETURNING value(rv_rawdata) TYPE xstring .

ENDCLASS .                   &quot;lcl_excel DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_excel IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_excel IMPLEMENTATION .
  METHOD constructor .
    super-&gt;constructor( ) .
    CREATE OBJECT r_zipfolder .

    IF  it_document_table IS NOT SUPPLIED
    AND iv_document_size IS NOT SUPPLIED
    AND iv_rawdata IS NOT SUPPLIED .
      v_runtime = abap_on .
    ENDIF .
    CHECK v_runtime IS INITIAL .

    msg_init( ) .
    IF  it_document_table IS NOT INITIAL
    AND iv_document_size  IS NOT INITIAL .
      rawdata_set_as_table( it_document_table = it_document_table
                            iv_document_size  = iv_document_size ) .
    ELSEIF iv_rawdata IS NOT INITIAL .
      rawdata_set( iv_rawdata ) .

    ELSE .
      DATA lv_rawdata  TYPE xstring .
      lv_rawdata = template_getfrom_hardcode( ) .
      rawdata_set( lv_rawdata ) .
    ENDIF .

    IF v_retcode EQ c_retcode-error .
      MESSAGE e000(lp) WITH v_text-t336         &quot; text: Error while reading template file
      RAISING error_file_reading .
    ENDIF .
  ENDMETHOD .                    &quot;constructor
  METHOD free .
    CLEAR s_model .
    FREE  s_model .

    IF r_zipfolder IS BOUND .
      FREE r_zipfolder .
    ENDIF .
  ENDMETHOD .                    &quot;free
  METHOD conv_nc .
    DATA:
      lv_number         TYPE i ,
      lv_flt            TYPE f ,
      lv_int            TYPE i ,
      lv_tail           TYPE i ,
      lv_symbol         TYPE ty_char1 .

    lv_number = iv_number .

*--&gt;&gt; improve performance (set direct value without calculations)
    CASE lv_number .
      WHEN 1 .  ev_char = &apos;A&apos; .  EXIT .
      WHEN 2 .  ev_char = &apos;B&apos; .  EXIT .
      WHEN 3 .  ev_char = &apos;C&apos; .  EXIT .
      WHEN 4 .  ev_char = &apos;D&apos; .  EXIT .
      WHEN 5 .  ev_char = &apos;E&apos; .  EXIT .
      WHEN 6 .  ev_char = &apos;F&apos; .  EXIT .
      WHEN 7 .  ev_char = &apos;G&apos; .  EXIT .
      WHEN 8 .  ev_char = &apos;H&apos; .  EXIT .
      WHEN 9 .  ev_char = &apos;I&apos; .  EXIT .
      WHEN 10.  ev_char = &apos;J&apos; .  EXIT .
      WHEN 11.  ev_char = &apos;K&apos; .  EXIT .
      WHEN 12.  ev_char = &apos;L&apos; .  EXIT .
      WHEN 13.  ev_char = &apos;M&apos; .  EXIT .
      WHEN 14.  ev_char = &apos;N&apos; .  EXIT .
      WHEN 15.  ev_char = &apos;O&apos; .  EXIT .
      WHEN 16.  ev_char = &apos;P&apos; .  EXIT .
      WHEN 17.  ev_char = &apos;Q&apos; .  EXIT .
      WHEN 18.  ev_char = &apos;R&apos; .  EXIT .
      WHEN 19.  ev_char = &apos;S&apos; .  EXIT .
      WHEN 20.  ev_char = &apos;T&apos; .  EXIT .
      WHEN 21.  ev_char = &apos;U&apos; .  EXIT .
      WHEN 22.  ev_char = &apos;V&apos; .  EXIT .
      WHEN 23.  ev_char = &apos;W&apos; .  EXIT .
      WHEN 24.  ev_char = &apos;X&apos; .  EXIT .
      WHEN 25.  ev_char = &apos;Y&apos; .  EXIT .
      WHEN 26.  ev_char = &apos;Z&apos; .  EXIT .
    ENDCASE .
*&lt;&lt;-- improve performance (set direct value without calculations)

    CLEAR ev_char .

    WHILE lv_number GT 0 .
      lv_flt  = lv_number / 26 .
      lv_int  = TRUNC( lv_flt ).
      lv_tail = lv_number - lv_int * 26 .

      CASE lv_tail .
        WHEN 1 .  lv_symbol = &apos;A&apos; .
        WHEN 2 .  lv_symbol = &apos;B&apos; .
        WHEN 3 .  lv_symbol = &apos;C&apos; .
        WHEN 4 .  lv_symbol = &apos;D&apos; .
        WHEN 5 .  lv_symbol = &apos;E&apos; .
        WHEN 6 .  lv_symbol = &apos;F&apos; .
        WHEN 7 .  lv_symbol = &apos;G&apos; .
        WHEN 8 .  lv_symbol = &apos;H&apos; .
        WHEN 9 .  lv_symbol = &apos;I&apos; .
        WHEN 10.  lv_symbol = &apos;J&apos; .
        WHEN 11.  lv_symbol = &apos;K&apos; .
        WHEN 12.  lv_symbol = &apos;L&apos; .
        WHEN 13.  lv_symbol = &apos;M&apos; .
        WHEN 14.  lv_symbol = &apos;N&apos; .
        WHEN 15.  lv_symbol = &apos;O&apos; .
        WHEN 16.  lv_symbol = &apos;P&apos; .
        WHEN 17.  lv_symbol = &apos;Q&apos; .
        WHEN 18.  lv_symbol = &apos;R&apos; .
        WHEN 19.  lv_symbol = &apos;S&apos; .
        WHEN 20.  lv_symbol = &apos;T&apos; .
        WHEN 21.  lv_symbol = &apos;U&apos; .
        WHEN 22.  lv_symbol = &apos;V&apos; .
        WHEN 23.  lv_symbol = &apos;W&apos; .
        WHEN 24.  lv_symbol = &apos;X&apos; .
        WHEN 25.  lv_symbol = &apos;Y&apos; .
        WHEN 0 .  lv_symbol = &apos;Z&apos; .  SUBTRACT 1 FROM lv_int .
      ENDCASE .

      CONCATENATE lv_symbol ev_char  INTO ev_char .

      lv_number = lv_int .
    ENDWHILE .

  ENDMETHOD .                                               &quot;conv_nc
  METHOD conv_cn .
    DATA:
      lv_char           TYPE ty_char1024 ,
      lv_tail           TYPE i ,
      lv_strlen         TYPE i ,
      lv_offset         TYPE i ,
      lv_exponent       TYPE i .
    FIELD-SYMBOLS:
      &lt;symbol&gt;          TYPE ty_char1 .

    lv_char = iv_char .

*--&gt;&gt; improve performance (direct value without calculations)
    CASE lv_char.
      WHEN &apos;A&apos; .   ev_number = 1 .  EXIT .
      WHEN &apos;B&apos; .   ev_number = 2 .  EXIT .
      WHEN &apos;C&apos; .   ev_number = 3 .  EXIT .
      WHEN &apos;D&apos; .   ev_number = 4 .  EXIT .
      WHEN &apos;E&apos; .   ev_number = 5 .  EXIT .
      WHEN &apos;F&apos; .   ev_number = 6 .  EXIT .
      WHEN &apos;G&apos; .   ev_number = 7 .  EXIT .
      WHEN &apos;H&apos; .   ev_number = 8 .  EXIT .
      WHEN &apos;I&apos; .   ev_number = 9 .  EXIT .
      WHEN &apos;J&apos; .   ev_number = 10.  EXIT .
      WHEN &apos;K&apos; .   ev_number = 11.  EXIT .
      WHEN &apos;L&apos; .   ev_number = 12.  EXIT .
      WHEN &apos;M&apos; .   ev_number = 13.  EXIT .
      WHEN &apos;N&apos; .   ev_number = 14.  EXIT .
      WHEN &apos;O&apos; .   ev_number = 15.  EXIT .
      WHEN &apos;P&apos; .   ev_number = 16.  EXIT .
      WHEN &apos;Q&apos; .   ev_number = 17.  EXIT .
      WHEN &apos;R&apos; .   ev_number = 18.  EXIT .
      WHEN &apos;S&apos; .   ev_number = 19.  EXIT .
      WHEN &apos;T&apos; .   ev_number = 20.  EXIT .
      WHEN &apos;U&apos; .   ev_number = 21.  EXIT .
      WHEN &apos;V&apos; .   ev_number = 22.  EXIT .
      WHEN &apos;W&apos; .   ev_number = 23.  EXIT .
      WHEN &apos;X&apos; .   ev_number = 24.  EXIT .
      WHEN &apos;Y&apos; .   ev_number = 25.  EXIT .
      WHEN &apos;Z&apos; .   ev_number = 26.  EXIT .
    ENDCASE .
*&lt;&lt;-- improve performance (direct value without calculations)

    CLEAR ev_number .

    IF lv_char CA c_numbers .
      CLEAR lv_char+sy-fdpos .
    ENDIF .
    CONDENSE lv_char NO-GAPS .

    lv_strlen = STRLEN( lv_char ) .
    lv_offset = -1 .

    DO lv_strlen TIMES .
      lv_exponent = lv_strlen - sy-index .
      ADD 1 TO lv_offset .

      ASSIGN lv_char+lv_offset(1)
          TO &lt;symbol&gt; .

      CASE &lt;symbol&gt;.
        WHEN &apos;A&apos; .   lv_tail = 1 .
        WHEN &apos;B&apos; .   lv_tail = 2 .
        WHEN &apos;C&apos; .   lv_tail = 3 .
        WHEN &apos;D&apos; .   lv_tail = 4 .
        WHEN &apos;E&apos; .   lv_tail = 5 .
        WHEN &apos;F&apos; .   lv_tail = 6 .
        WHEN &apos;G&apos; .   lv_tail = 7 .
        WHEN &apos;H&apos; .   lv_tail = 8 .
        WHEN &apos;I&apos; .   lv_tail = 9 .
        WHEN &apos;J&apos; .   lv_tail = 10.
        WHEN &apos;K&apos; .   lv_tail = 11.
        WHEN &apos;L&apos; .   lv_tail = 12.
        WHEN &apos;M&apos; .   lv_tail = 13.
        WHEN &apos;N&apos; .   lv_tail = 14.
        WHEN &apos;O&apos; .   lv_tail = 15.
        WHEN &apos;P&apos; .   lv_tail = 16.
        WHEN &apos;Q&apos; .   lv_tail = 17.
        WHEN &apos;R&apos; .   lv_tail = 18.
        WHEN &apos;S&apos; .   lv_tail = 19.
        WHEN &apos;T&apos; .   lv_tail = 20.
        WHEN &apos;U&apos; .   lv_tail = 21.
        WHEN &apos;V&apos; .   lv_tail = 22.
        WHEN &apos;W&apos; .   lv_tail = 23.
        WHEN &apos;X&apos; .   lv_tail = 24.
        WHEN &apos;Y&apos; .   lv_tail = 25.
        WHEN &apos;Z&apos; .   lv_tail = 26.
        WHEN OTHERS. CLEAR ev_number. EXIT .
      ENDCASE .

      ev_number = ev_number + lv_tail * ( 26 ** lv_exponent ) .
    ENDDO .

  ENDMETHOD .                                               &quot;conv_cn
  METHOD conv_ref_nc .
    DATA:
      lv_beg_x_char     TYPE ty_char100 ,
      lv_beg_y_char     TYPE ty_char100 ,
      lv_end_x_char     TYPE ty_char100 ,
      lv_end_y_char     TYPE ty_char100 ,
      lv_ref            TYPE ty_char1024 .

    IF  iv_beg_x  IS NOT INITIAL
    AND iv_beg_y  IS NOT INITIAL .
      lv_beg_y_char = iv_beg_y .
      CONDENSE lv_beg_y_char .

      conv_nc( EXPORTING iv_number = iv_beg_x
               IMPORTING ev_char   = lv_beg_x_char ) .
      CONCATENATE iv_prefix iv_prefix_x lv_beg_x_char iv_prefix iv_prefix_y lv_beg_y_char INTO lv_ref .
    ENDIF .

    IF  iv_end_x  IS NOT INITIAL
    AND iv_end_y  IS NOT INITIAL .
      lv_end_y_char = iv_end_y .
      CONDENSE lv_end_y_char .

      conv_nc( EXPORTING iv_number = iv_end_x
               IMPORTING ev_char   = lv_end_x_char ) .
      CONCATENATE lv_ref &apos;:&apos; iv_prefix iv_prefix_x lv_end_x_char iv_prefix iv_prefix_y lv_end_y_char INTO lv_ref .
    ENDIF .

    ev_ref_2 = lv_ref .

    IF iv_sheetname IS NOT INITIAL .
      CONCATENATE  &apos;&apos;&apos;&apos; iv_sheetname &apos;&apos;&apos;&apos; &apos;!&apos; lv_ref INTO lv_ref .
    ENDIF .

    ev_ref = lv_ref .
  ENDMETHOD .                    &quot;conv_ref_nc
  METHOD conv_ref_nc_2 .
    DATA:
      lv_beg_x_char     TYPE ty_char100 ,
      lv_beg_y_char     TYPE ty_char100 ,
      lv_end_x_char     TYPE ty_char100 ,
      lv_end_y_char     TYPE ty_char100 ,
      lv_ref            TYPE ty_char1024 .
    CLEAR ev_ref .

    IF  iv_beg_x  IS NOT INITIAL
    AND iv_end_x  IS NOT INITIAL .
      conv_nc( EXPORTING iv_number = iv_beg_x
               IMPORTING ev_char   = lv_beg_x_char ) .
      conv_nc( EXPORTING iv_number = iv_end_x
               IMPORTING ev_char   = lv_end_x_char ) .
      CONCATENATE &apos;&apos;&apos;&apos; iv_sheetname &apos;&apos;&apos;&apos; &apos;!&apos;
                  iv_prefix lv_beg_x_char &apos;:&apos; iv_prefix lv_end_x_char INTO lv_ref .
    ENDIF .

    IF  iv_beg_y  IS NOT INITIAL
    AND iv_end_y  IS NOT INITIAL .
      lv_beg_y_char = iv_beg_y .
      CONDENSE lv_beg_y_char NO-GAPS .

      lv_end_y_char = iv_end_y .
      CONDENSE lv_end_y_char NO-GAPS .

      IF lv_ref IS NOT INITIAL .
        CONCATENATE lv_ref &apos;,&apos; INTO lv_ref .
      ENDIF .
      CONCATENATE &apos;&apos;&apos;&apos; iv_sheetname &apos;&apos;&apos;&apos; &apos;!&apos;
                  iv_prefix lv_beg_y_char &apos;:&apos; iv_prefix lv_end_y_char INTO lv_ref .
    ENDIF .

    ev_ref = lv_ref .

  ENDMETHOD .                    &quot;conv_ref_nc_2
  METHOD conv_ref_cn .
    DATA:
      lv_ref            TYPE ty_char1024 ,
      lv_ref_beg        TYPE ty_char100 ,
      lv_ref_end        TYPE ty_char100 ,
      lv_beg_x_char     TYPE ty_char100 ,
      lv_beg_y_char     TYPE ty_char100 ,
      lv_end_x_char     TYPE ty_char100 ,
      lv_end_y_char     TYPE ty_char100 .
    CLEAR:
      ev_beg_x ,
      ev_beg_y ,
      ev_end_x ,
      ev_end_y .
    CHECK iv_ref IS NOT INITIAL .

    lv_ref = iv_ref .
    SPLIT lv_ref AT &apos;:&apos; INTO lv_ref_beg lv_ref_end .

    IF lv_ref_beg IS NOT INITIAL .
      IF lv_ref_beg CA c_numbers .
        lv_beg_x_char = lv_ref_beg(sy-fdpos).
        lv_beg_y_char = lv_ref_beg+sy-fdpos .

        conv_cn( EXPORTING iv_char   = lv_beg_x_char
                 IMPORTING ev_number = ev_beg_x ) .
        ev_beg_y = lv_beg_y_char .
      ENDIF .
    ENDIF .

    IF lv_ref_end IS NOT INITIAL .
      IF lv_ref_end CA c_numbers .
        lv_end_x_char = lv_ref_end(sy-fdpos).
        lv_end_y_char = lv_ref_end+sy-fdpos .

        conv_cn( EXPORTING iv_char   = lv_end_x_char
                 IMPORTING ev_number = ev_end_x ) .
        ev_end_y = lv_end_y_char .
      ENDIF .
    ENDIF .

  ENDMETHOD .                    &quot;conv_ref_cn
  METHOD conv_formula_r1c1_a1 .

*======================================================================
*   convert R1C1 notation to A1
*======================================================================

    DATA:
      lt_result_tab       TYPE match_result_tab ,
      lv_i                TYPE i ,
      lv_i2               TYPE i ,
      lv_x                TYPE i ,
      lv_x_prefix         TYPE string ,
      lv_y                TYPE i ,
      lv_y_prefix         TYPE string ,
      lv_shift            TYPE i ,
      lv_substring        TYPE c LENGTH 10000 ,
      lv_sub_r            TYPE c LENGTH 10000 ,
      lv_sub_c            TYPE c LENGTH 10000 ,
      lv_formula_a1       TYPE string .
    FIELD-SYMBOLS:
      &lt;ls_result_tab&gt;     TYPE match_result ,
      &lt;ls_submatches&gt;     TYPE submatch_result .

*   check: does formula use R1C1 notation ?
    TRY.
        FIND ALL OCCURRENCES OF REGEX &apos;R((\[-?\d+\])|(\d+))C((\[-?\d+\])|(\d+))|R((\[-?\d+\])|(\d+))C|RC((\[-?\d+\])|(\d+))&apos;
                IN cv_formula
                RESULTS lt_result_tab .
      CATCH cx_sy_regex
            cx_sy_regex_too_complex .
        RETURN .
    ENDTRY .

    CHECK lt_result_tab IS NOT INITIAL .

*   Yes, R1C1 notation!
    SORT lt_result_tab BY offset .

    LOOP AT lt_result_tab ASSIGNING &lt;ls_result_tab&gt; .

*     ===========
      IF &lt;ls_result_tab&gt;-offset &gt; lv_i .
        lv_i2 = &lt;ls_result_tab&gt;-offset - lv_i .
        CONCATENATE lv_formula_a1
                    cv_formula+lv_i(lv_i2)
               INTO lv_formula_a1 .
      ENDIF .
      lv_i = &lt;ls_result_tab&gt;-offset + &lt;ls_result_tab&gt;-length .

      lv_substring = cv_formula+&lt;ls_result_tab&gt;-offset(&lt;ls_result_tab&gt;-length) .

      DO 1 TIMES .
        CHECK lv_substring(1) EQ &apos;R&apos; .
        CHECK lv_substring    CS &apos;C&apos; .
        lv_sub_r = lv_substring(sy-fdpos) .
        lv_sub_c = lv_substring+sy-fdpos .

*       Row
        SHIFT lv_sub_r LEFT DELETING LEADING &apos;R&apos; .
        IF lv_sub_r IS INITIAL .
          lv_y        = iv_y  .
          lv_y_prefix = space .

        ELSEIF lv_sub_r CP &apos;[*]&apos; .
          conv_formula_r1c1_a1_getshift( CHANGING cv_substring  = lv_sub_r
                                                  cv_shift      = lv_shift ) .
          lv_y        = iv_y + lv_shift .
          lv_y_prefix = space .
        ELSE .
          CHECK lv_sub_r CO c_numbers__ .
          lv_y        = lv_sub_r .
          lv_y_prefix = &apos;$&apos; .
        ENDIF .

*       Column
        SHIFT lv_sub_c LEFT DELETING LEADING &apos;C&apos; .
        IF lv_sub_c IS INITIAL .
          lv_x        = iv_x  .
          lv_x_prefix = space .

        ELSEIF lv_sub_c CP &apos;[*]&apos; .
          conv_formula_r1c1_a1_getshift( CHANGING cv_substring  = lv_sub_c
                                                  cv_shift      = lv_shift ) .
          lv_x        = iv_x + lv_shift .
          lv_x_prefix = space .

        ELSE .
          CHECK lv_sub_c CO c_numbers__ .
          lv_x = lv_sub_c .
          lv_x_prefix = &apos;$&apos; .
        ENDIF .

*       convert to &apos;A1&apos; notation
        conv_ref_nc( EXPORTING iv_beg_x      = lv_x
                               iv_beg_y      = lv_y
                               iv_prefix_x   = lv_x_prefix
                               iv_prefix_y   = lv_y_prefix
                     IMPORTING ev_ref        = lv_substring ) .
      ENDDO .

*     ===========
      CONCATENATE lv_formula_a1
                  lv_substring
             INTO lv_formula_a1 .

      AT LAST .
        CHECK STRLEN( cv_formula ) &gt; lv_i .
        CONCATENATE lv_formula_a1
                    cv_formula+lv_i
               INTO lv_formula_a1 .
      ENDAT .
    ENDLOOP .

*   replace R1C1-style formula with A1-style
    cv_formula = lv_formula_a1 .

  ENDMETHOD .                    &quot;conv_formula_r1c1_a1
  METHOD conv_formula_r1c1_a1_getshift .
*   get relative shift: number inside the square brackets (for example [-5] )
    DATA:
      lv_negative     TYPE flag ,
      lv_length       TYPE i .

    CLEAR cv_shift .

    CHECK cv_substring IS NOT INITIAL .
    CHECK cv_substring(1) EQ &apos;[&apos; .

    cv_substring = cv_substring+1 .

    IF cv_substring(1) EQ &apos;-&apos; .
      cv_substring = cv_substring+1 .
      lv_negative = abap_on .
    ELSE  .
      lv_negative = space .
    ENDIF .

    CHECK cv_substring CS &apos;]&apos; .

    lv_length = sy-fdpos .
    cv_shift = cv_substring(lv_length) .

    ADD 1 TO lv_length .
    cv_substring = cv_substring+lv_length .

    CHECK lv_negative IS NOT INITIAL .
    cv_shift = - cv_shift .
  ENDMETHOD .                    &quot;conv_formula_r1c1_a1_getshift
  METHOD xml_attrib_get .
    DATA:
      lr_ndmap          TYPE REF TO if_ixml_named_node_map ,
      lr_nditerator     TYPE REF TO if_ixml_node_iterator ,
      lr_attrib         TYPE REF TO if_ixml_node ,
      lv_attrib_name    TYPE string ,
      lv_attrib_value   TYPE string .

    CLEAR ev_attrib_value1 .
    CLEAR ev_attrib_value2 .
    CLEAR ev_attrib_value3 .
    CLEAR ev_attrib_value4 .

    lr_ndmap      = ir_node-&gt;get_attributes( ) .
    lr_nditerator = lr_ndmap-&gt;create_iterator( ) .
    lr_attrib     = lr_nditerator-&gt;get_next( ) .

    WHILE lr_attrib IS NOT INITIAL .
      lv_attrib_name  = lr_attrib-&gt;get_name( ) .
      lv_attrib_value = lr_attrib-&gt;get_value( ) .

      CASE lv_attrib_name .
        WHEN iv_attrib_name1 .  ev_attrib_value1 = lv_attrib_value .
        WHEN iv_attrib_name2 .  ev_attrib_value2 = lv_attrib_value .
        WHEN iv_attrib_name3 .  ev_attrib_value3 = lv_attrib_value .
        WHEN iv_attrib_name4 .  ev_attrib_value4 = lv_attrib_value .
        WHEN OTHERS .
      ENDCASE .

      lr_attrib = lr_nditerator-&gt;get_next( ) .
    ENDWHILE .

  ENDMETHOD .                    &quot;xml_attrib_get
  METHOD xml_load .
    DATA:
      lv_name           TYPE string ,
      lv_content        TYPE xstring .
    lv_name = iv_path .
    SHIFT lv_name LEFT DELETING LEADING &apos;/&apos; .

    r_zipfolder-&gt;get( EXPORTING name = lv_name
                      IMPORTING content = lv_content
                      EXCEPTIONS OTHERS = 1 ) .
    CHECK sy-subrc EQ 0 .

    rv_ixml_doc = xml_xstring_to_dom( iv_xstring = lv_content iv_preserve = iv_preserve ) .
  ENDMETHOD .                    &quot;xml_load
  METHOD xml_string_to_dom .
    DATA lv_xstring     TYPE xstring .
    CALL FUNCTION &apos;SCMS_STRING_TO_XSTRING&apos;
      EXPORTING
        text   = iv_string
      IMPORTING
        buffer = lv_xstring
      EXCEPTIONS
        OTHERS = 2.
    CHECK sy-subrc EQ 0 .

    rv_ixml_doc = xml_xstring_to_dom( iv_xstring = lv_xstring iv_preserve = iv_preserve ) .
  ENDMETHOD .                    &quot;xml_string_to_dom
  METHOD xml_xstring_to_dom .
    DATA:
      lr_ixml           TYPE REF TO if_ixml ,
      lr_istream        TYPE REF TO if_ixml_istream ,
      lr_parser         TYPE REF TO if_ixml_parser ,
      lr_parse_error    TYPE REF TO if_ixml_parse_error ,
      lr_stream_factory TYPE REF TO if_ixml_stream_factory ,
      lv_err_count      TYPE i ,
      lv_err_index      TYPE i ,
      lv_err_reason     TYPE string .

    lr_ixml = cl_ixml=&gt;create( ) .
    rv_ixml_doc = lr_ixml-&gt;create_document( ) .
    lr_stream_factory = lr_ixml-&gt;create_stream_factory( ) .
    lr_istream = lr_stream_factory-&gt;create_istream_xstring( iv_xstring ) .

    lr_parser = lr_ixml-&gt;create_parser( stream_factory = lr_stream_factory
                                        istream        = lr_istream
                                        document       = rv_ixml_doc ) .
    IF iv_preserve IS NOT INITIAL .
      lr_parser-&gt;add_preserve_space_element( ) .
    ENDIF .

    IF  lr_parser-&gt;parse( ) NE 0
    AND lr_parser-&gt;num_errors( ) NE 0 .
      lv_err_count = lr_parser-&gt;num_errors( ) .
      WHILE lv_err_index &lt; lv_err_count .
        lr_parse_error = lr_parser-&gt;get_error( index = lv_err_index ) .
        lv_err_reason  = lr_parse_error-&gt;get_reason( ) .
        MESSAGE i000(lp) WITH lv_err_reason .
        ADD 1 TO lv_err_index .
      ENDWHILE .
    ENDIF .

    lr_istream-&gt;close( ) .
  ENDMETHOD .                     &quot;xml_xstring_to_dom
  METHOD xml_save .
    DATA:
      lr_ixml               TYPE REF TO if_ixml ,
      lr_streamfactory      TYPE REF TO if_ixml_stream_factory ,
      lr_ostream            TYPE REF TO if_ixml_ostream ,
      lr_encoding           TYPE REF TO if_ixml_encoding ,
      lr_renderer           TYPE REF TO if_ixml_renderer .

    CHECK iv_ixml_doc IS NOT INITIAL .

    iv_ixml_doc-&gt;set_standalone( standalone = abap_true ) .

    lr_ixml = cl_ixml=&gt;create( ) .
    lr_streamfactory = lr_ixml-&gt;create_stream_factory( ) .

*----------render XML into xstring
    lr_ostream = lr_streamfactory-&gt;create_ostream_xstring( string = rv_xml_xstring ) .
    lr_encoding = lr_ixml-&gt;create_encoding( character_set = c_character_set
                                            byte_order    = 0 ) .
    lr_ostream-&gt;set_encoding( encoding = lr_encoding ) .
*   lr_ostream-&gt;set_pretty_print( pretty_print = abap_on ) .

    lr_renderer = lr_ixml-&gt;create_renderer( ostream  = lr_ostream
                                            document = iv_ixml_doc ) .
    lr_renderer-&gt;render( ) .

*----------save content into ZIP-folder
    SHIFT iv_path LEFT DELETING LEADING &apos;/&apos; .

    r_zipfolder-&gt;delete( EXPORTING name = iv_path
                         EXCEPTIONS OTHERS = 0 ) .

    r_zipfolder-&gt;add( name    = iv_path
                      content	= rv_xml_xstring ) .

    IF iv_show IS NOT INITIAL .
      DATA lv_title TYPE ty_char100 .
      lv_title = iv_path .
      CALL FUNCTION &apos;DISPLAY_XML_STRING&apos;
        EXPORTING
          title      = lv_title
          xml_string = rv_xml_xstring
        EXCEPTIONS
          OTHERS     = 0.
    ENDIF .
  ENDMETHOD .                    &quot;xml_save
  METHOD xml_insert_element .

    DATA:
      lv_tabix            TYPE sytabix ,
      lv_index            TYPE syindex ,
      ls_elemsequence     TYPE ty_s_elemsequence ,
      lr_ixml_node        TYPE REF TO if_ixml_node ,
      lr_ixml_node_any    TYPE REF TO if_ixml_node ,
      lr_ixml_node_next   TYPE REF TO if_ixml_node ,
      lr_ixml_ncol        TYPE REF TO if_ixml_node_collection .

*   lookup a previous element (according the sequence)
    READ TABLE it_elemsequence TRANSPORTING NO FIELDS
    WITH KEY element = iv_name_element .
    lv_tabix = sy-tabix + 1 .
    LOOP AT it_elemsequence INTO ls_elemsequence FROM lv_tabix .
      FREE lr_ixml_ncol .
      lr_ixml_ncol = cr_ixml_parent-&gt;get_elements_by_tag_name( name = ls_elemsequence-element  depth = 1 ) .
      CHECK lr_ixml_ncol IS BOUND .

      lv_index = lr_ixml_ncol-&gt;get_length( ) - 1 .
      CHECK lv_index GE 0 .

      lr_ixml_node_any = lr_ixml_ncol-&gt;get_item( index = lv_index ) .
      EXIT .
    ENDLOOP .

*   insert the new node exactly AFTER node that has been found
    CHECK lr_ixml_node_any IS BOUND .
    lr_ixml_node_next = lr_ixml_node_any-&gt;get_next( ) .
    lr_ixml_node ?= ir_ixml_element .

    IF lr_ixml_node_next IS BOUND .
      cr_ixml_parent-&gt;insert_child( new_child = lr_ixml_node
                                    ref_child = lr_ixml_node_next ) .
    ELSE .
      cr_ixml_parent-&gt;append_child( new_child = lr_ixml_node ) .
    ENDIF .

  ENDMETHOD .                    &quot;xml_insert_element
  METHOD xml_relstab_get .
    DATA:
      lr_document       TYPE REF TO if_ixml_document ,
      lr_ncol           TYPE REF TO if_ixml_node_collection ,
      lr_node           TYPE REF TO if_ixml_node ,
      lv_index          TYPE syindex ,
      lv_fullpath_rels  TYPE string ,
      lv_path           TYPE string ,
      lv_file           TYPE string ,
      ls_relstab        TYPE ty_s_relstab .

    CLEAR rt_relstab .
    FREE  rt_relstab .

*   split source fullpath
    path_file_split( EXPORTING iv_fullpath = iv_path
                     IMPORTING ev_path = lv_path
                               ev_file = lv_file ) .

*   build new fullpath for RELS
    CONCATENATE lv_path &apos;_rels/&apos; lv_file &apos;.rels&apos; INTO lv_fullpath_rels .
    lr_document = xml_load( iv_path = lv_fullpath_rels ).

    CHECK lr_document IS BOUND .
    lr_ncol = lr_document-&gt;get_elements_by_tag_name( name  = c_tag-relationship
                                                     depth = 2 ) .
    CHECK lr_ncol IS BOUND .
    DO .
      lv_index = sy-index - 1.
      lr_node = lr_ncol-&gt;get_item( index = lv_index ).
      IF lr_node IS INITIAL. EXIT. ENDIF.

      xml_attrib_get( EXPORTING ir_node           = lr_node
                                iv_attrib_name1   = c_tag-target
                                iv_attrib_name2   = c_tag-type
                                iv_attrib_name3   = c_tag-id_
                      IMPORTING ev_attrib_value1  = ls_relstab-target
                                ev_attrib_value2  = ls_relstab-type
                                ev_attrib_value3  = ls_relstab-id ) .
      APPEND ls_relstab TO rt_relstab .
    ENDDO .
  ENDMETHOD .                    &quot;xml_relstab_get
  METHOD xml_relstab_set .
    DATA:
      lv_fullpath_rels  TYPE string ,
      lv_path           TYPE string ,
      lv_file           TYPE string ,
      ls_relstab        TYPE ty_s_relstab ,
      lr_ixml           TYPE REF TO if_ixml ,
      lr_ixml_doc       TYPE REF TO if_ixml_document .
    DATA:
      BEGIN OF lr_element ,
        relationships   TYPE REF TO if_ixml_element ,
        relationship    TYPE REF TO if_ixml_element ,
      END   OF lr_element .

    CHECK it_relstab[] IS NOT INITIAL .

*   compose XML
    lr_ixml = cl_ixml=&gt;create( ) .
    lr_ixml_doc = lr_ixml-&gt;create_document( ) .

    lr_element-relationships =              &quot; Root-node
    lr_ixml_doc-&gt;create_simple_element(
                      name      = c_tag-relationships
                      parent    = lr_ixml_doc ) .
    lr_element-relationships-&gt;set_attribute(
                      name      = c_tag-xmlns
                      value     = c_contenttype-relationships ).

    LOOP AT it_relstab  INTO ls_relstab .
      lr_element-relationship =
      lr_ixml_doc-&gt;create_simple_element(
                      name      = c_tag-relationship
                      parent    = lr_element-relationships ).
      lr_element-relationship-&gt;set_attribute(
                      name      = c_tag-id_
                      value     = ls_relstab-id ).
      lr_element-relationship-&gt;set_attribute(
                      name      = c_tag-type
                      value     = ls_relstab-type ).
      lr_element-relationship-&gt;set_attribute(
                      name      = c_tag-target
                      value     = ls_relstab-target ).
    ENDLOOP .

*   split source fullpath
    path_file_split( EXPORTING iv_fullpath = iv_path
                     IMPORTING ev_path = lv_path
                               ev_file = lv_file ) .

*   build new fullpath for RELS
    CONCATENATE lv_path &apos;_rels/&apos; lv_file &apos;.rels&apos; INTO lv_fullpath_rels .

*   send XML to ZIP-folder
    xml_save( iv_ixml_doc  = lr_ixml_doc
              iv_path      = lv_fullpath_rels ) .

  ENDMETHOD .                    &quot;xml_relstab_set
  METHOD xml_remove_nodes .
    DATA:
      lr_ncol         TYPE REF TO if_ixml_node_collection ,
      lr_node         TYPE REF TO if_ixml_node ,
      lv_index        TYPE sy-index .


    IF iv_namespace IS INITIAL .
      lr_ncol = iv_ixml_doc-&gt;get_elements_by_tag_name(
                            name  = iv_name ) .
    ELSE .
      lr_ncol = iv_ixml_doc-&gt;get_elements_by_tag_name(
                            name  = iv_name
                            namespace = iv_namespace ) .
    ENDIF .
    IF lr_ncol IS BOUND .
      DO .
        lv_index = sy-index - 1 .
        lr_node = lr_ncol-&gt;get_item( index = lv_index ) .
        IF lr_node IS NOT BOUND. EXIT. ENDIF .
        lr_node-&gt;remove_node( ) .
      ENDDO .
    ENDIF .
  ENDMETHOD .                    &quot;xml_remove_nodes
  METHOD bufferization_baseinfo .
    CHECK r_zipfolder-&gt;save( ) IS NOT INITIAL .

*======================================================================
*   bufferization header data
*======================================================================
    s_model-ixml_doc_contenttypes  = xml_load( iv_path = c_path-contenttypes ) .
    s_model-ixml_doc_core          = xml_load( iv_path = c_path-core ) .
    s_model-ixml_doc_app           = xml_load( iv_path = c_path-app ) .
    s_model-ixml_doc_workbook      = xml_load( iv_path = c_path-workbook ) .
    s_model-ixml_doc_sharedstrings = xml_load( iv_path = c_path-sharedstrings  iv_preserve = abap_on ) .
    s_model-ixml_doc_styles        = xml_load( iv_path = c_path-styles ) .
    s_model-t_contentrels          = xml_relstab_get( c_path-contenttypes ) .
    s_model-t_workbookrels         = xml_relstab_get( c_path-workbook ) .

*======================================================================
*   bufferization sheets data
*======================================================================
    FIELD-SYMBOLS:
      &lt;sheets&gt;              TYPE ty_s_sheets ,
      &lt;chart_series&gt;        TYPE ty_s_chart_series .
    TYPES:
      BEGIN OF ty_s_images ,
        id                  TYPE string ,
        value               TYPE xstring ,
      END   OF ty_s_images ,
      ty_t_images           TYPE HASHED TABLE OF ty_s_images
                                 WITH UNIQUE KEY id .
    DATA:
      ls_textformat_styles  TYPE ty_s_textformat_styles ,
      ls_dateformat_styles  TYPE ty_s_dateformat_styles ,
      lv_string_tmp         TYPE string ,
      lv_index              TYPE sy-index ,
      lv_path_sheet         TYPE string ,
      lv_path               TYPE string ,
      lv_id                 TYPE string ,
      lv_id_drawings        TYPE string ,
      ls_drawings           TYPE ty_s_drawings_tmp ,
      lv_numfmtid           TYPE i ,
      lv_partname           TYPE string ,
      lv_contenttype        TYPE string ,
      lr_ncol               TYPE REF TO if_ixml_node_collection ,
      lr_node               TYPE REF TO if_ixml_node ,
      lr_twocellanchor_ncol TYPE REF TO if_ixml_node_collection ,
      lr_twocellanchor_node TYPE REF TO if_ixml_node ,
      lr_ser_ncol           TYPE REF TO if_ixml_node_collection ,
      lr_ser_node           TYPE REF TO if_ixml_node ,
      ls_sheetrels          TYPE ty_s_relstab ,
      ls_drawingrels        TYPE ty_s_relstab ,
      lt_drawingrels        TYPE ty_t_relstab ,
      ls_vmldrawing_rels    TYPE ty_s_vmldrawings_rels  ,
      ls_vmldrawingrels     TYPE ty_s_relstab ,
      lt_vmldrawingrels     TYPE ty_t_relstab ,
      ls_chartrels          TYPE ty_s_relstab ,
      lt_chartrels          TYPE ty_t_relstab ,
      lr_drawing_doc        TYPE REF TO if_ixml_document ,
      ls_workbookrels       TYPE ty_s_relstab .
    DATA:
      BEGIN OF lr_element ,
        any                 TYPE REF TO if_ixml_element ,
        twocellanchor       TYPE REF TO if_ixml_element ,
        drawing             TYPE REF TO if_ixml_element ,
        legacydrawing       TYPE REF TO if_ixml_element ,
        cnvpr               TYPE REF TO if_ixml_element ,
        pic                 TYPE REF TO if_ixml_element ,
        blip                TYPE REF TO if_ixml_element ,
        cellxfs             TYPE REF TO if_ixml_element ,
        outlinepr           TYPE REF TO if_ixml_element ,
        graphicframe        TYPE REF TO if_ixml_element ,
        chart               TYPE REF TO if_ixml_element ,
        plotarea            TYPE REF TO if_ixml_element ,
        ser                 TYPE REF TO if_ixml_element ,
        idx                 TYPE REF TO if_ixml_element ,
        tx                  TYPE REF TO if_ixml_element ,
        strcache            TYPE REF TO if_ixml_element ,
        pt                  TYPE REF TO if_ixml_element ,
        v                   TYPE REF TO if_ixml_element ,
        sheetview           TYPE REF TO if_ixml_element ,
      END   OF lr_element .

    IF s_model-ixml_doc_workbook IS NOT BOUND
    OR s_model-ixml_doc_styles   IS NOT BOUND .
      MESSAGE e000(lp) WITH v_text-t336         &quot; text: Error while reading template file
                       INTO v_dummy .
      msg_syst_catch( ) .
      RETURN .
    ENDIF .


*======================================================================
*   format definition (analyze [Content_Types].xml)
*======================================================================
    DO 1 TIMES .
      CLEAR v_extension .
      lr_ncol =
      s_model-ixml_doc_contenttypes-&gt;get_elements_by_tag_name(
                                     name  = c_tag-override ) .
      CHECK lr_ncol IS BOUND .
      DO .
        lv_index = sy-index - 1 .
        lr_node = lr_ncol-&gt;get_item( index = lv_index ) .
        IF lr_node IS INITIAL. EXIT. ENDIF .

        xml_attrib_get( EXPORTING ir_node           = lr_node
                                  iv_attrib_name1   = c_tag-partname
                                  iv_attrib_name2   = c_tag-contenttype
                        IMPORTING ev_attrib_value1  = lv_partname
                                  ev_attrib_value2  = lv_contenttype ) .
        CHECK lv_partname EQ c_path-workbook .
        CASE lv_contenttype .
          WHEN c_contenttype-workbook_macro
            OR c_contenttype-workbook_macro12 .
            v_extension = c_extension_xlsm .
          WHEN c_contenttype-workbook .
            v_extension = c_extension_xlsx .
        ENDCASE .
      ENDDO .

      CHECK v_extension IS INITIAL .
      v_extension = c_extension_xlsx .
    ENDDO .

*======================================================================
*   bufferization styles (get styles with text format)
*======================================================================
    DO 1 TIMES .
      lr_element-cellxfs =
      s_model-ixml_doc_styles-&gt;find_from_name( name = c_tag-cellxfs  depth = 1 ) .
      CHECK lr_element-cellxfs IS BOUND .

      lr_ncol =
      lr_element-cellxfs-&gt;get_elements_by_tag_name(
                               name  = c_tag-xf
                               depth = 1 ) .
      CHECK lr_ncol IS BOUND .
      DO .
        lv_index = sy-index - 1 .
        lr_node = lr_ncol-&gt;get_item( index = lv_index ) .
        IF lr_node IS INITIAL. EXIT. ENDIF .

        xml_attrib_get( EXPORTING ir_node           = lr_node
                                  iv_attrib_name1   = c_tag-numfmtid
                        IMPORTING ev_attrib_value1  = lv_numfmtid ) .
        IF lv_numfmtid EQ 49 .                    &quot; --&gt;&gt; Text
          ls_textformat_styles-s = lv_index .
          INSERT ls_textformat_styles INTO TABLE s_model-t_textformat_styles .

        ELSEIF lv_numfmtid BETWEEN 14  AND 22     &quot; --&gt;&gt; Date
            OR lv_numfmtid BETWEEN 165 AND 180 .
          ls_dateformat_styles-s = lv_index .
          INSERT ls_dateformat_styles INTO TABLE s_model-t_dateformat_styles .
        ENDIF .
      ENDDO .
    ENDDO .


*======================================================================
*   analyze xl/workbook.xml
*   and add sheets into buffer
*======================================================================
    lr_ncol =
    s_model-ixml_doc_workbook-&gt;get_elements_by_tag_name(
                             name  = c_tag-sheet
                             depth = 3 ) .
    CHECK lr_ncol IS BOUND .
    DO .
      lv_index = sy-index - 1 .
      lr_node = lr_ncol-&gt;get_item( index = lv_index ) .
      IF lr_node IS INITIAL. EXIT. ENDIF .

      APPEND INITIAL LINE TO s_model-t_sheets
      ASSIGNING &lt;sheets&gt; .

      xml_attrib_get( EXPORTING ir_node           = lr_node
                                iv_attrib_name1   = c_tag-name
                                iv_attrib_name2   = c_tag-id
                      IMPORTING ev_attrib_value1  = &lt;sheets&gt;-name
                                ev_attrib_value2  = &lt;sheets&gt;-id ) .
    ENDDO .


*======================================================================
*   loop at worksheets
*======================================================================
    LOOP AT s_model-t_sheets ASSIGNING &lt;sheets&gt; .

      FREE lr_drawing_doc .     CLEAR lr_drawing_doc .
      FREE lt_drawingrels .     CLEAR lt_drawingrels .


      READ TABLE s_model-t_workbookrels INTO ls_workbookrels
        WITH KEY type = c_contenttype-wb_sheet
                 id   = &lt;sheets&gt;-id  .
      IF sy-subrc NE 0 .
        DELETE  s_model-t_sheets .
        CONTINUE .
*       READ TABLE s_model-t_workbookrels INTO ls_workbookrels
*         WITH KEY type = c_contenttype-wb_chartsheet
*                  id   = &lt;sheets&gt;-id  .
*       CHECK sy-subrc EQ 0 .
*       &lt;sheets&gt;-chartsheet = abap_on .
      ENDIF .


*======================================================================
*======================================================================
*     read /xl/worksheets/sheet.xml
*======================================================================
*======================================================================
      CONCATENATE &apos;/xl/&apos;  ls_workbookrels-target INTO lv_path_sheet .
      &lt;sheets&gt;-ixml_doc = xml_load( iv_path = lv_path_sheet ) .

*     read relations with Sheet [ xl/worksheets/_rels/sheet.xml.rels ]
      &lt;sheets&gt;-sheetdata_template-t_sheetrels = xml_relstab_get( lv_path_sheet ) .

*     read &apos;summarybelow&apos; and &apos;summaryRight&apos; properties
      DO 1 TIMES .
        &lt;sheets&gt;-summarybelow = abap_on .  &quot; --&gt;&gt; preset values
        &lt;sheets&gt;-summaryright = abap_on .

        lr_element-outlinepr =
        &lt;sheets&gt;-ixml_doc-&gt;find_from_name( name = c_tag-outlinepr   depth = 2 ) .
        CHECK lr_element-outlinepr IS BOUND .

        CLEAR lv_string_tmp .
        lv_string_tmp = lr_element-outlinepr-&gt;get_attribute( name = c_tag-summarybelow ) .
        IF lv_string_tmp EQ &apos;0&apos; .
          CLEAR &lt;sheets&gt;-summarybelow .
        ENDIF .
        CLEAR lv_string_tmp .
        lv_string_tmp = lr_element-outlinepr-&gt;get_attribute( name = c_tag-summaryright ) .
        IF lv_string_tmp EQ &apos;0&apos; .
          CLEAR &lt;sheets&gt;-summaryright .
        ENDIF .
      ENDDO .

*     read &apos;tabSelected&apos; propertiy
      DO 1 TIMES .
        lr_element-sheetview =
        &lt;sheets&gt;-ixml_doc-&gt;find_from_name( name = c_tag-sheetview   depth = 3 ) .
        CHECK lr_element-sheetview IS BOUND .

        CLEAR lv_string_tmp .
        lv_string_tmp = lr_element-sheetview-&gt;get_attribute( name = c_tag-tabselected ) .
        IF lv_string_tmp EQ &apos;1&apos; .
          &lt;sheets&gt;-active = abap_on .
        ENDIF .
      ENDDO .


*======================================================================
*======================================================================
*     DRAWING
*======================================================================
*======================================================================
      DO 1 TIMES .
*       in the sheet we lookup an ID, that refer the document with Drawing
        lr_element-drawing =
        &lt;sheets&gt;-ixml_doc-&gt;find_from_name(
                              name      = c_tag-drawing
                              depth     = 1 ) .
        CHECK lr_element-drawing IS BOUND .

        lv_id_drawings = lr_element-drawing-&gt;get_attribute(
                              name      = c_tag-id
                              namespace = c_tag-r ) .
        CHECK lv_id_drawings IS NOT INITIAL . &quot; --&gt;&gt; id was found


*======================================================================
*       xl/worksheets/sheet1.xml
*         --&gt;   xl/worksheets/_rels/sheet.xml.rels
*           --&gt;   xl/drawings/drawing.xml
*             --&gt;   xl/drawings/_rels/drawing.xml.rels
*======================================================================
        READ TABLE &lt;sheets&gt;-sheetdata_template-t_sheetrels INTO ls_sheetrels
          WITH KEY type = c_contenttype-wb_drawing
                   id   = lv_id_drawings .
        CHECK sy-subrc EQ 0.

*       read Drawings [ xl/drawings/drawing.xml ]
        SHIFT ls_sheetrels-target LEFT DELETING LEADING &apos;.&apos; .
        CONCATENATE &apos;/xl&apos; ls_sheetrels-target INTO lv_path .
        lr_drawing_doc = xml_load( iv_path = lv_path ) .

*       read relations of Drawings [ xl/drawing/_rels/drawing.xml.rels ]
        lt_drawingrels = xml_relstab_get( lv_path ) .


*======================================================================
*       analyze xl/drawings/drawing.xml :
*         and fill general buffer of drawings
*======================================================================
        lr_twocellanchor_ncol =
        lr_drawing_doc-&gt;get_elements_by_tag_name(
                              name      = c_tag-twocellanchor
                              namespace = c_tag-xdr
                              depth     = 2 ) .
        CHECK lr_twocellanchor_ncol IS BOUND .
        DO .
          lv_index = sy-index - 1 .
          lr_twocellanchor_node = lr_twocellanchor_ncol-&gt;get_item( index = lv_index ) .
          IF lr_twocellanchor_node IS INITIAL. EXIT. ENDIF .

          lr_element-twocellanchor ?= lr_twocellanchor_node-&gt;query_interface( ixml_iid_element ) .

          FREE lr_element-cnvpr . CLEAR lr_element-cnvpr .
          lr_element-cnvpr =
          lr_element-twocellanchor-&gt;find_from_name( name = c_tag-cnvpr  namespace = c_tag-xdr  depth = 3 ) .
          CHECK lr_element-cnvpr IS BOUND .

          CLEAR ls_drawings .
          ls_drawings-name = lr_element-cnvpr-&gt;get_attribute( name = c_tag-name ) .
          ls_drawings-twocellanchor_node = lr_twocellanchor_node-&gt;clone( ) .

          DO 1 TIMES .
            CHECK ls_drawings-drawing_type IS INITIAL .

            FREE lr_element-pic . CLEAR lr_element-pic .
            lr_element-pic = lr_element-twocellanchor-&gt;find_from_name( name = c_tag-pic  namespace = c_tag-xdr   depth = 3 ) .
            CHECK lr_element-pic IS BOUND . &quot; --&gt;&gt; bitmap
            lr_element-blip = lr_element-pic-&gt;find_from_name( name = c_tag-blip  namespace = c_tag-a ) .
            CHECK lr_element-blip IS BOUND .
            lv_id = lr_element-blip-&gt;get_attribute( name = c_tag-embed  namespace = c_tag-r ) .
            READ TABLE lt_drawingrels INTO ls_drawingrels WITH KEY id = lv_id .
            CHECK sy-subrc EQ 0 .
            CHECK ls_drawingrels-type EQ c_contenttype-wb_image .

            SHIFT ls_drawingrels-target LEFT DELETING LEADING &apos;.&apos; .
            CONCATENATE &apos;xl&apos; ls_drawingrels-target INTO lv_path .

            r_zipfolder-&gt;get( EXPORTING name = lv_path
                              IMPORTING content = ls_drawings-media_rawdata
                              EXCEPTIONS OTHERS = 1 ) .
            CHECK sy-subrc EQ 0 .
            ls_drawings-drawing_type = c_drawing_type-bitmap .  &quot; --&gt;&gt; raster image
          ENDDO .

          DO 1 TIMES .
            CHECK ls_drawings-drawing_type IS INITIAL .

            FREE lr_element-graphicframe . CLEAR lr_element-graphicframe .
            lr_element-graphicframe = lr_element-twocellanchor-&gt;find_from_name( name = c_tag-graphicframe  namespace = c_tag-xdr   depth = 3 ) .
            CHECK lr_element-graphicframe IS BOUND .
            FREE lr_element-chart . CLEAR lr_element-chart .
            lr_element-chart = lr_element-graphicframe-&gt;find_from_name( name = c_tag-chart namespace = c_tag-c ) .
            CHECK lr_element-chart IS BOUND .

            lv_id = lr_element-chart-&gt;get_attribute( name = c_tag-id namespace = c_tag-r ) .
            READ TABLE lt_drawingrels INTO ls_drawingrels WITH KEY id = lv_id .
            CHECK sy-subrc EQ 0 .
            CHECK ls_drawingrels-type EQ c_contenttype-wb_chart .

            SHIFT ls_drawingrels-target LEFT DELETING LEADING &apos;.&apos; .
            CONCATENATE &apos;xl&apos; ls_drawingrels-target INTO lv_path .

            ls_drawings-chart_ixml_doc = xml_load( iv_path = lv_path ) .
            CHECK ls_drawings-chart_ixml_doc IS BOUND .
            FREE lr_element-chart . CLEAR lr_element-chart .
            lr_element-chart = ls_drawings-chart_ixml_doc-&gt;find_from_name( name = c_tag-chart  namespace = c_tag-c  depth = 2 ) .
            CHECK lr_element-chart IS BOUND .
            FREE lr_element-plotarea . CLEAR lr_element-plotarea .
            lr_element-plotarea = lr_element-chart-&gt;find_from_name( name = c_tag-plotarea  namespace = c_tag-c  depth = 1 ) .
            CHECK lr_element-plotarea IS BOUND .

            lr_ser_ncol =
            lr_element-plotarea-&gt;get_elements_by_tag_name(
                                  name      = c_tag-ser
                                  namespace = c_tag-c
                                  depth     = 2 ) .
            CHECK lr_ser_ncol IS BOUND .
            DO .
              lv_index = sy-index - 1 .
              lr_ser_node = lr_ser_ncol-&gt;get_item( index = lv_index ) .
              IF lr_ser_node IS INITIAL. EXIT. ENDIF .
              lr_element-ser ?= lr_ser_node-&gt;query_interface( ixml_iid_element ) .
              FREE lr_element-idx . CLEAR lr_element-idx .
              lr_element-idx = lr_element-ser-&gt;find_from_name( name = c_tag-idx  namespace = c_tag-c   depth = 1 ) .
              CHECK lr_element-idx IS BOUND .
              APPEND INITIAL LINE TO ls_drawings-chart_series ASSIGNING &lt;chart_series&gt; .
              &lt;chart_series&gt;-idx = lr_element-idx-&gt;get_attribute( name = c_tag-val ) .
              FREE lr_element-tx . CLEAR lr_element-tx .
              lr_element-tx = lr_element-ser-&gt;find_from_name( name = c_tag-tx  namespace = c_tag-c   depth = 1 ) .
              CHECK lr_element-tx IS BOUND .

              FREE lr_element-v . CLEAR lr_element-v .
              lr_element-v = lr_element-tx-&gt;find_from_name( name = c_tag-v  namespace = c_tag-c   depth = 1 ) .
              IF lr_element-v IS BOUND .
                &lt;chart_series&gt;-caption = lr_element-v-&gt;get_value( ) .
              ENDIF .
              CHECK &lt;chart_series&gt;-caption IS INITIAL .
              FREE lr_element-strcache . CLEAR lr_element-strcache .
              lr_element-strcache = lr_element-tx-&gt;find_from_name( name = c_tag-strcache  namespace = c_tag-c   depth = 2 ) .
              CHECK lr_element-strcache IS BOUND .
              FREE lr_element-pt . CLEAR lr_element-pt .
              lr_element-pt = lr_element-strcache-&gt;find_from_name( name = c_tag-pt  namespace = c_tag-c   depth = 1 ) .
              CHECK lr_element-pt IS BOUND .
              FREE lr_element-v . CLEAR lr_element-v .
              lr_element-v = lr_element-pt-&gt;find_from_name( name = c_tag-v  namespace = c_tag-c   depth = 1 ) .
              CHECK lr_element-v IS BOUND .
              &lt;chart_series&gt;-caption = lr_element-v-&gt;get_value( ) .
            ENDDO .

*           read relations of Charts [ xl/charts/_rels/chartXXX.xml.rels ]
            CLEAR lt_chartrels .
            lt_chartrels = xml_relstab_get( lv_path ) .

            LOOP AT lt_chartrels INTO ls_chartrels .
              CONCATENATE c_path-chartsfolder &apos;/&apos; ls_chartrels-target INTO lv_path .
              CASE ls_chartrels-type .
                WHEN c_contenttype-wb_chartstyle .  ls_drawings-chartstyle_ixml_doc  = xml_load( iv_path = lv_path ) .
                WHEN c_contenttype-wb_chartcolors . ls_drawings-chartcolors_ixml_doc = xml_load( iv_path = lv_path ) .
              ENDCASE .
            ENDLOOP .
*            CHECK ls_drawings-chartstyle_ixml_doc  IS BOUND .
*            CHECK ls_drawings-chartcolors_ixml_doc IS BOUND .

            ls_drawings-drawing_type  = c_drawing_type-chart .  &quot; --&gt;&gt; chart
          ENDDO .

          DO 1 TIMES .
            CHECK ls_drawings-drawing_type IS INITIAL .

            ls_drawings-drawing_type  = c_drawing_type-vector . &quot; --&gt;&gt; vector graphics
          ENDDO .

          CHECK ls_drawings-drawing_type IS NOT INITIAL .
          INSERT ls_drawings INTO TABLE &lt;sheets&gt;-sheetdata_template-t_drawings .
        ENDDO .
      ENDDO .


*======================================================================
*======================================================================
*     LEGACY DRAWING (whole copy with all related objects)
*======================================================================
*======================================================================
      DO 1 TIMES .
*       in the sheet we lookup an ID, that refer the document with Legacy Drawing
        lr_element-legacydrawing =
        &lt;sheets&gt;-ixml_doc-&gt;find_from_name(
                              name      = c_tag-legacydrawing
                              depth     = 1 ) .
        CHECK lr_element-legacydrawing IS BOUND .

        &lt;sheets&gt;-sheetdata_template-vmldrawings-id = lr_element-legacydrawing-&gt;get_attribute(
                              name      = c_tag-id
                              namespace = c_tag-r ) .
        CHECK &lt;sheets&gt;-sheetdata_template-vmldrawings-id IS NOT INITIAL . &quot; --&gt;&gt; id was found


*======================================================================
*       xl/worksheets/sheet1.xml
*         --&gt;   xl/worksheets/_rels/sheet.xml.rels
*           --&gt;   xl/drawings/vmlDrawing.xml
*             --&gt;   xl/drawings/_rels/vmlDrawing.vml.rels
*======================================================================
        READ TABLE &lt;sheets&gt;-sheetdata_template-t_sheetrels INTO ls_sheetrels
          WITH KEY type = c_contenttype-wb_vmldrawing
                   id   = &lt;sheets&gt;-sheetdata_template-vmldrawings-id .
        CHECK sy-subrc EQ 0.

*       read Drawings [ xl/drawings/vmlDrawing.vml ]
        SHIFT ls_sheetrels-target LEFT DELETING LEADING &apos;.&apos; .
        CONCATENATE &apos;/xl&apos; ls_sheetrels-target INTO &lt;sheets&gt;-sheetdata_template-vmldrawings-path .
        &lt;sheets&gt;-sheetdata_template-vmldrawings-ixml_doc = xml_load( iv_path = &lt;sheets&gt;-sheetdata_template-vmldrawings-path ) .

*       read relations of vmlDrawing [ xl/drawings/_rels/vmlDrawing.vml.rels ]
        lt_vmldrawingrels = xml_relstab_get( &lt;sheets&gt;-sheetdata_template-vmldrawings-path ) .

        LOOP AT lt_vmldrawingrels INTO ls_vmldrawingrels
          WHERE type EQ c_contenttype-wb_image .

*         get  ...xl\media\imageXXX.emf
          CLEAR ls_vmldrawing_rels .
          MOVE-CORRESPONDING ls_vmldrawingrels TO ls_vmldrawing_rels .

          SHIFT ls_vmldrawingrels-target LEFT DELETING LEADING &apos;.&apos; .
          CONCATENATE &apos;xl&apos; ls_vmldrawingrels-target INTO ls_vmldrawing_rels-media_path .

          r_zipfolder-&gt;get( EXPORTING name = ls_vmldrawing_rels-media_path
                            IMPORTING content = ls_vmldrawing_rels-media_rawdata
                            EXCEPTIONS OTHERS = 1 ) .
          APPEND ls_vmldrawing_rels TO &lt;sheets&gt;-sheetdata_template-vmldrawings-t_rels .
        ENDLOOP .
      ENDDO .

    ENDLOOP .   &quot; t_sheets

  ENDMETHOD .                    &quot; bufferization_baseinfo
  METHOD rawdata_set .
    free( ).

    CREATE OBJECT r_zipfolder .
    r_zipfolder-&gt;load( iv_rawdata ) .

    bufferization_baseinfo( ) .
  ENDMETHOD .                    &quot;rawdata_set
  METHOD rawdata_set_as_table .
    DATA lv_rawdata TYPE ty_rawdata .
    CHECK iv_document_size GT 0 .

    CALL FUNCTION &apos;SCMS_BINARY_TO_XSTRING&apos;
      EXPORTING
        input_length = iv_document_size
      IMPORTING
        buffer       = lv_rawdata
      TABLES
        binary_tab   = it_document_table.

    rawdata_set( lv_rawdata ) .
  ENDMETHOD .                    &quot;rawdata_set_as_table
  METHOD rawdata_get .
    rv_rawdata  = r_zipfolder-&gt;save( ) .
    IF rv_rawdata EQ &apos;504B0506000000000000000000000000000000000000&apos; .
      CLEAR rv_rawdata .
      FREE  rv_rawdata .
    ENDIF .
  ENDMETHOD .                    &quot;rawdata_get
  METHOD rawdata_get_as_table .
    DATA lv_rawdata TYPE ty_rawdata .
    lv_rawdata = rawdata_get( ) .

    CALL FUNCTION &apos;SCMS_XSTRING_TO_BINARY&apos;
      EXPORTING
        buffer        = lv_rawdata
      IMPORTING
        output_length = ev_document_size
      TABLES
        binary_tab    = et_document_table.
  ENDMETHOD .                    &quot;rawdata_get_as_table
  METHOD template_getfrom_hardcode .
    DATA:
      lv_doctab             TYPE thespacex ,
      lt_doctab             TYPE STANDARD TABLE OF thespacex ,
      lv_docsize            TYPE i VALUE 7821 .
    DEFINE mk_append .
      lv_doctab = &amp;1 .
      append lv_doctab to lt_doctab .
    END-OF-DEFINITION .

    mk_append:
    &apos;504B030414000600080000002100CC7EE6A14E010000080400001300DF015B436F6E74656E745F54797065735D2E786D6C20A2DB0128A0000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000AC93CB4EC3301045F748FC83E52D8ADDB2400835ED82C712BA281F60EC4963D52F79DCD2FE3D938422814A455536B1226BEE9D39733D996DBD631BC86863A8F9588C3883A0A3B161&apos; ,
    &apos;59F3D7C55375CB1916158C723140CD77807C36BDBC982C7609905175C09AB7A5A43B2951B7E0158A9820D04D13B357857EF35226A5576A09F27A34BA913A8602A154A5D3E0D3C90B3590AD013657B93C2B4F3E72EB64213518BE63417A9CDD0F859D77CD&apos; ,
    &apos;554ACE6A55A873B909E6876B159BC66A3051AF3D79895EECAA5391BF1A62D939C0B3AD306550065B80E29D1844F7CE0FD0A8B52BEC714B0406E8191C9E36DA274C4195FDF8D8DA84471C8EB33BCEE43DE6D55B8CABFFA6D2D1115ED9B0EFFB5008687BF3&apos; ,
    &apos;1C134ADAF5D90D4087DC80A91249422E16BE981DF2A60076B3F76B44D91FE7A7F07B34BEF4FFC440C70CA743D867A5AB3E30B9ECDFF1F4030000FFFF0300504B030414000600080000002100B5553023F50000004C0200000B00CE015F72656C732F2E72&apos; ,
    &apos;656C7320A2CA0128A000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008C92CF4EC3300CC6EF48BC43E4FBEA6E4808A1A5BB4C48BB21541EC024EE1FB58DA324&apos; ,
    &apos;40F7F68403824A63DBD1F6E7CF3F5BDEEEE669541F1C622F4EC3BA2841B133627BD76A78AD9F560FA06222676914C71A8E1C6157DDDE6C5F78A4949B62D7FBA8B28B8B1ABA94FC2362341D4F140BF1EC72A5913051CA6168D19319A865DC94E53D86BF1E&apos; ,
    &apos;502D3CD5C16A08077B07AA3EFA3CF9B2B7344D6F782FE67D62974E8C409E133BCB76E543660BA9CFDBA89A42CB498315F39CD311C9FB2263039E26DA5C4FF4FFB63871224B89D048E0F33CDF8A7340EBEB812E9F68A9F8BDCE3CE2A784E14D64F861C1C5&apos; ,
    &apos;0F545F000000FFFF0300504B0304140006000800000021008D87DA70E00000002D0200001A000801786C2F5F72656C732F776F726B626F6F6B2E786D6C2E72656C7320A2040128A000010000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;000000000000000000000000000000000000000000000000000000000000AC91CB6AC3301045F785FE83987D3D760AA594C8D99442B6C5FD00218F1FC496846692D67F5FE182DD404836D908AE06DD73246D773FE3A04E14B9F74E4391E5A0C8595FF7AE&apos; ,
    &apos;D5F0557D3CBD826231AE368377A46122865DF9F8B0FDA4C1483AC45D1F58A516C71A3A91F086C8B6A3D170E603B934697C1C8DA4185B0CC61E4C4BB8C9F3178CFF3BA03CEB54FB5A43DCD7CFA0AA2924F2ED6EDF34BDA5776F8F2339B980409669481750&apos; ,
    &apos;95892D8986BF9C2547C0CBF8CD3DF1929E8556FA1C715E8B6B0EC53D1DBE7D3C704724ABC7B2C5384F16193CFBE4F2170000FFFF0300504B0304140000000800C8665944FA26B7975C0100005B0200000F000000786C2F776F726B626F6F6B2E786D6C8D&apos; ,
    &apos;914D6E83301085F7957A07CBFB0670429A469048512B359BAA52A364EDE221583136B24D49CED6458FD42B7400919F5D579E37E06FDE1BFF7EFF24CB63A9C81758278D4E69340A29019D1921F53EA5B5CF1F669438CFB5E0CA6848E9091C5D2EEEEF92C6&apos; ,
    &apos;D8C3A731078200ED525A785FCD83C0650594DC8D4C051ABFE4C696DCA3B4FBC05516B87005802F55C0C2701A945C6ADA13E6F63F0C93E732836793D52568DF432C28EED1BE2B64E5287A2324C9A5826D9F8AF0AA7AE3257A3F2A4A1477FE45480F22A513&apos; ,
    &apos;94A6819B86ADAB552D552BE230A624E87943DA774B7039D0F33685742B6C522220E7B5F21BF43D8CC565B20963D333A2BDBE95D0B84E5E31DB2639EEA416A649E9231BE31B9C06396368A2E9C44E0A5F20761C5D7AAF20F7854F298B2F5E83DB4949B7F1&apos; ,
    &apos;F3D44E11DD05F868EB081FB83DD798196B3B9758D8B5882EC02B42927195B55BC0A3BBC12671F4D4FF9A0443A4C51F504B0304140006000800000021001D21165BC5010000800300000D000000786C2F7374796C65732E786D6CA4934D8ADC301085F781&apos; ,
    &apos;B983D07E466E930C49B03D8B4043600602D3816C654BB605FA3152B969E70259CC1D72872CB3C81DBA6F9492EC7177AFB2C8C62E3D557D7AAE928B8783D1642F7D50CE9674739751226DE384B25D49BFEEB6B7EF2909C0ADE0DA5959D24906FA50DDBC29&apos; ,
    &apos;024C5A3EF7520241840D25ED01868F8C85A69786873B37488B3BADF386032E7DC7C2E02517211619CDF22CBB67862B4BABA275160269DC68015D2C425584EF64CF352A1BCAAAA271DA790288472349B1DCC839E313D7AAF62AA6B5DC283DCD729EEA7AEE&apos; ,
    &apos;03FA4CA83C7B1BB5E472A935CA3A1F45166D2CAF8020A5F56A2A8FA650A88A8103486FB7B8204BBC9B06B464B1433326E5FD23BBF37CDAE4EF2E0A583AB02A6AE7054EE4B21DB354155AB68046BDEAFAF80637E0B37600CE602014EF9CE51A43F65AB104&apos; ,
    &apos;F8398DD4FA394EED5B7BC53EB4C48E666BE0B32829CE3F36E135C40F59C299372F22FF9236B3FF1B4B0EED351F8917B6AF4CAFC79378074A7AFC79FC757A39FD38FE39BD1C7FD31545EA516950F61A9CDA806C7138B7228B93005EE3AD8E4D5A4FC38E08&apos; ,
    &apos;D9F251C36EDD2CE9397E92428DE6C39AF545ED1D244449CFF1639CD8E63E4D3BACBF4EF5170000FFFF0300504B030414000600080000002100DAEB1BFFA0060000861B000013000000786C2F7468656D652F7468656D65312E786D6CEC59CF6E1B4518BF&apos; ,
    &apos;23F10EA3BDB7B6133B8DA33A55ECD804DAB451EC16F5385E8F77A799DD59CD8C93FA56A5472410A2202E48C085030222B5884BFA0EEE33048AA0487D05BE99D9B577E20D49DA08043487D83BFBFBFEFF996FC657AFDD8F18DA2542521E37BCCAE5B28748&apos; ,
    &apos;ECF3018D838677BBD7B9B4EC21A9703CC08CC7A4E18D89F4AEADBEFDD655BCA242121104F4B15CC10D2F542A592995A40FCB585EE60989E1DD908B082B7814416920F01EF08D5869A15C5E2A4598C61E8A71046C275F4F7E9C1C4E0ED0ADE190FAC45BCD&apos; ,
    &apos;F8B719088995D40B3E135DCD9D64445F3DDB9F1C4C9E4E9E4C0E9E3D80EF4FE1F323433BD8A9680A39962D26D02E660D0F440FF85E8FDC571E62582A78D1F0CAE6CF2BAD5E2DE1959488A9136873741DF397D2A504839D05235304FDA9D04AA75ABFB23E&apos; ,
    &apos;E56F004CCDE3DAED76AB5D99F23300ECFB60B9D525CFB3DA59AE34339E3990FD3ACFBB55AE95AB2E3EC77F714EE77AB3D9ACD5535D2C5303B25FAB73F8E5F252756DC1C11B90C5D7E6F0D5E65AABB5E4E00DC8E297E6F09D2BF5A5AA8B37A090D178670E&apos; ,
    &apos;AD03DAE9A4DCA79021671B85F065802F9753F80C05D930CD362D62C86375D6DC8BF03D2E3A40A009195634466A9C9021F621D15B38EA0B8AB540BC4270EE8D5DF2E5DC92968DA42F68A21ADE7B0986A299F17B79F8DDCBC3C7E8E5E1C1D1FE93A3FD9F8E&apos; ,
    &apos;1E3E3CDAFFC1F2720837701CE4095F7CF3F11F5F3C40BF3FFEF2C5A34F8BF1328FFFE5FB0F7E7EFA4931102A6AA6D1F3CF0E7E7D72F0FCF30F7FFBF651017C4DE07E1EDEA31191E826D943DB3C02DB8C635CCD495F9C8FA21762EA50E0107817B06EABD0&apos; ,
    &apos;01DE1C6356846B12D7797704349322E03BA37B8EAEDD508C142D907C3D8C1CE026E7ACC945A103AE6B59390FF74671502C5C8CF2B86D8C778B64B770EC84B63D4AA0AB6649E9F8BE151247CD2D86638503121385F43BBE43488175772975FCBA497DC125&apos; ,
    &apos;1F2A7497A226A6852EE9D1BE934833A20D1A415CC6453643A81DDF6CDE414DCE8AAC5E27BB2E120A02B302E57B84396E7C078F148E8A58F670C4F20EBF815558A464772CFC3CAE2D15443A208CA3F680485944734B80BDB9A05FC7D0BF0AC3BEC9C6918B&apos; ,
    &apos;148AEE14F1BC8139CF23D7F94E2BC4515284EDD238CC63DF953B90A2186D715504DFE46E85E86788038E4F0CF71D4A9C709FDE086ED3C051699620FACD48E85842E376FA6F44E3BF6AC68C4237B639F0A61937BC35D89A8A4A62E3580B3E09F72F6CBCEB&apos; ,
    &apos;78146F11C8F5F98DE74DDF7DD377BDFF7CDF3DA996CFDA6D670D167AAF1E1EEC9C6CA6E6E8CC43F39032D65563466E4833374BD83C061D58D47CCC99924C0F5549085FD366EFE002810D0D125CBD4F55D80D71023377C5D34C0299B20E244AB884B39F59&apos; ,
    &apos;2EE4ADF130B72B7B72ACE93385ED0F12AB4D3EB0CB8B7A393B3A4CD9982D2830E7D54CD0A2667056618B5752A660F6AB08AB68A5CE2CAD625433ADCF91363519623A6F1A2C4EBD095309825906BCBC04A77A2D1ACE2A989181F6BBDD90B3B098285C6488&apos; ,
    &apos;648807248D91B67B3E461513A42C57CCE501E44E418CF439F014AFE5A4D535DBD790769620E5C5554F109745EF75A29465F02C4ABA8E8F95238BF3C5C962B4D7F0EAB5859A877C9C34BC211C73E16B9440D4A51E04310BE03AC957C2A6FDA9C56CAA7C16&apos; ,
    &apos;CD7A66985B0415B8C9B07E9F33D8E90389906A1DCBD0A6867995A6008BB524ABFF420DDC7A5106D84C7F052D16972119FE312DC08F6E68C970487C950F766E45FBCE3EA6AD948F1411DD70B087FA6C24B631845FA72AD833A0126E2B4C47D00F70D5A6BD&apos; ,
    &apos;6D5EB9CD392DBAFC0597C1D975CC9210A7ED56976856C9166EEA78AA8379CAA907B615EA6E8C3BBF29A6E42FC8947C1AFFCF4CD1FB095C1F2C0E74047CB8FC1518E97A6D785CA89043174A42EA77040C12A67740B6C0752DBC86A4822B68F329C8AEFEB4&apos; ,
    &apos;35677998B28653A0DAA6011214F623150A42B6A02D99EC3B855925DDBB2C4B963232199553572656ED3ED925ACA77BE092DEDB3D1442AA9B6E92B601833B9E7FEE735A41FD400F39F97A737AC874EFB535F0774F3EB698C128B70F9B8126F3FF54C5825D&apos; ,
    &apos;D5D21BF26CEFCD1BA25FCCC6AC6A5615202CB715D4D3B27F4515CEB9D5DA8E3567F1422D530EA2386F312C4E07A2042E8190FE07FB1F153EB33F66E80DB5C7B7A1B722F82D423383B481ACBE64070FA41BA45DECC3E064176D326956D6B5E9E8A4BD966D&apos; ,
    &apos;D6173CE94EE51E73B6D6EC2CF13EA7B3A7C3992BCEA9C58B7476EA61C7D776ED445743648F97282C0DB3838D098CF9212CFF4315EFDF8340AFC395FF88296992097E76121846CFAEA903287E2BD190AEFE090000FFFF0300504B03041400000008003681&apos; ,
    &apos;4148C357C7AD510100005102000018000000786C2F776F726B7368656574732F7368656574312E786D6C8D52CB4EC33010BC23F10F96EFD40D8887AAA415A8427000A156E2EE26EBC4AAED8DEC0DA1DFC6814FE217B093B60871E1E6995DCFCE8EFDF5F1&apos; ,
    &apos;992FDEAD616FE0834657F06C32E50C5C89957675C13B5267379C0592AE92061D147C07812FE6A727798F7E1B1A006251C185823744ED4C885036606598600B2E56147A2B29425F8BD07A90D570C91A713E9D5E092BB5E3A3C2CCFF470395D2252CB1EC2C&apos; ,
    &apos;381A453C1849D17F68741B7834C7583E4C79F12CAE02CFD246E7EBC4646339366047463B882DA1B356FADD1D18EC0B1E03D8132B5D37341062D4147BD111553A3A48B1310FAAE0B7D9B16F687BD5D087C3B023C3486ED660A024A862DC9CA5183788DB54&apos; ,
    &apos;7CACFE4EFB911945EE872CA2EB0A94EC0CADB07F80D16876F9DBC152923C10ADACE149FA5ABBC00CA8B4D6E49A33BF5F319D09DBE11455364884F6809AF868E013BAE04C21D21124F15C1C7FC2FC1B504B03041400000008002D6659445FA65CD1440100&apos; ,
    &apos;007C02000011000000646F6350726F70732F636F72652E786D6C8D92DF4AC3301487EF05DFA1E4BE4DD3E970A1ED608A2038101414EF4272D6159B3F2499DD9ECD0B1FC95730EDB6BAB15D08B9497E5FBE9C73C8CFD7773E5DCB26FA04EB6AAD0A449214&apos; ,
    &apos;45A0B816B5AA0AB4F28BF80645CE332558A3151468030E4DCBCB8B9C1BCAB58527AB0D585F838B824939CA4D8196DE1B8AB1E34B90CC258150215C682B990F5B5B61C3F807AB0067693AC6123C13CC33DC09633318D14E29F8A0342BDBF402C131342041&apos; ,
    &apos;79874942F01FEBC14A77F6429F1C90B2F61B0367D17D38D06B570F60DBB6493BEAD1503FC16FF3C7E7BED5B856DDAC38A030A128CA05A7DC02F3DA960F95B6336DBBC1E6F8E0BCE7C22C1BE6FC3CA48B1AC46C738C9FC63B7BDFD05605220A25D26D43FB&apos; ,
    &apos;E475747BF7728FCA2C25A398A461BD90945E8DE9F5E4BDABE2E8FEB154EE1EFBA795D06C42497660DD0BBABF824F3E4BF90B504B030414000000080019665944DE01D331A80100009A03000010000000646F6350726F70732F6170702E786D6C9D53C18E&apos; ,
    &apos;D33010BD23F10F96EF5B271542A872BC5A75913880A8D4B277E34C1A0BC7B6EC69D472832B9FC08F2071E017B65FB2BF809B6CB25D85E5B03ED96F669EDFF378EE7EFFE197FBC6901642D4CE16349F65948055AED4765BD01D56176F2889286D298DB350&apos; ,
    &apos;D003447A295EBEE0ABE03C04D41049A2B0B1A035A25F3016550D8D8CB314B62952B9D0484CC7B065AEAAB4826BA7760D5864F32C7BCD608F604B282FFC48487BC6458BCF252D9D3AE98B379B834F7C492F21FCCA7BA395C4E4547CD02AB8E82A246FF70A&apos; ,
    &apos;0C67E7C12E3B11AE41ED82C683C8383B3F76F1B5920696E91251491381B307A08BBF03797AC495D4217648C25A5CB4A0D00512F5D7F498734A3ECB082791056D65D0D222BD4FBE4FEFC111EB51E3230671FBF3F6D7F1DBF1FBF10767233816B37F543FCD&apos; ,
    &apos;A85F89BC2B499BFF50F45067A177C92636F946A381F8B15AC9804F3ACFCF9D77CA1FFBEECDAC6B00CC27EEA62AA677F2A56BBCB407C1D9B0EBE0F7DA7E899FFCC65D4B84A1758FC1BEBDB50C50A6AE8FED1D81BEBD497930A7BA652DED16CA216F1A183E&apos; ,
    &apos;DF4D3F65229FCFB2B4BA3F376069A0D8C34489BF504B0102130014000600080000002100CC7EE6A14E010000080400001300DF0100000000000000000000000000005B436F6E74656E745F54797065735D2E786D6C20A2DB0128A0000200000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000504B0102130014000600080000002100B5553023F50000004C0200000B00CE0100000000&apos; ,
    &apos;0000000000005E0300005F72656C732F2E72656C7320A2CA0128A000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000504B01021300140006000800000021008D&apos; ,
    &apos;87DA70E00000002D0200001A000801000000000000000000004A060000786C2F5F72656C732F776F726B626F6F6B2E786D6C2E72656C7320A2040128A0000100000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; ,
    &apos;00000000000000000000000000000000000000504B01021400140000000800C8665944FA26B7975C0100005B0200000F000000000000000100200000006A080000786C2F776F726B626F6F6B2E786D6C504B01021300140006000800000021001D21165B&apos; ,
    &apos;C5010000800300000D00000000000000000000000000F3090000786C2F7374796C65732E786D6C504B0102130014000600080000002100DAEB1BFFA0060000861B00001300000000000000000000000000E30B0000786C2F7468656D652F7468656D6531&apos; ,
    &apos;2E786D6C504B0102140014000000080036814148C357C7AD51010000510200001800000000000000010020000000B4120000786C2F776F726B7368656574732F7368656574312E786D6C504B010214001400000008002D6659445FA65CD1440100007C02&apos; ,
    &apos;000011000000000000000100200000003B140000646F6350726F70732F636F72652E786D6C504B0102140014000000080019665944DE01D331A80100009A0300001000000000000000010020000000AE150000646F6350726F70732F6170702E786D6C50&apos; ,
    &apos;4B05060000000009000900F306000084170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&apos; .

    CALL FUNCTION &apos;SCMS_BINARY_TO_XSTRING&apos;
      EXPORTING
        input_length = lv_docsize
      IMPORTING
        buffer       = rv_rawdata
      TABLES
        binary_tab   = lt_doctab.

  ENDMETHOD .                    &quot;template_getfrom_hardcode
ENDCLASS .                   &quot;lcl_excel IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_excelruntime DEFINITION
*----------------------------------------------------------------------*
*       runtime excel buffer
*----------------------------------------------------------------------*
CLASS lcl_excelruntime DEFINITION INHERITING FROM lcl_excel .

  PUBLIC SECTION .
    DATA:
      v_summarybelow        TYPE flag READ-ONLY ,
      v_summaryright        TYPE flag READ-ONLY .

    METHODS:
      constructor
              EXCEPTIONS error_file_reading ,
      free    REDEFINITION ,
      begin_model
          IMPORTING is_model          TYPE ty_s_model
                    iv_extension      TYPE ty_char10
                    ir_zipfolder      TYPE REF TO cl_abap_zip
                    iv_protect        TYPE flag
                    iv_definednames_dont_remove TYPE flag OPTIONAL ,
      finalize_model
          IMPORTING it_docproperties  TYPE ckf_field_value_table
          EXCEPTIONS process_terminated ,
      begin_sheet
          IMPORTING iv_sheetname      TYPE any OPTIONAL
                    iv_hidden         TYPE any
                    iv_active         TYPE any
                    iv_ixml_doc       TYPE REF TO if_ixml_document
                    it_sheetrels      TYPE ty_t_relstab
                    iv_summarybelow   TYPE flag
                    iv_summaryright   TYPE flag
                    is_sheetprotection TYPE ty_s_sheetprotection
                    is_vmldrawings    TYPE ty_s_vmldrawings
          RETURNING value(rv_sheet_name) TYPE string ,
      finalize_sheet ,
      sheet_name_validate
          CHANGING cv_sheetname       TYPE any ,
      begin_folder ,
      finalize_folder
          IMPORTING iv_left           TYPE any
                    iv_top            TYPE any
                    iv_rows           TYPE any
                    iv_columns        TYPE any
                    iv_rowgroup_level TYPE any
                    iv_colgroup_level TYPE any
                    iv_rowgroup_clp   TYPE any
                    iv_colgroup_clp   TYPE any
                    iv_nopgbrk_top    TYPE any  OPTIONAL
                    iv_nopgbrk_left   TYPE any  OPTIONAL
                    iv_nopgbrk_beg_x  TYPE any  OPTIONAL
                    iv_nopgbrk_end_x  TYPE any  OPTIONAL
                    iv_nopgbrk_beg_y  TYPE any  OPTIONAL
                    iv_nopgbrk_end_y  TYPE any  OPTIONAL
                    iv_pgbrk_top      TYPE any  OPTIONAL
                    iv_pgbrk_left     TYPE any  OPTIONAL
                    iv_cellrng_name   TYPE any  OPTIONAL ,
      begin_field
          IMPORTING iv_value          TYPE any
                    iv_top            TYPE any
                    iv_left           TYPE any
                    iv_formula        TYPE flag OPTIONAL
                    iv_rt_path_1      TYPE any  OPTIONAL   &quot; --&gt;&gt; runtime path (for dataset subordination)
                    it_valvld_attr_table        TYPE ANY TABLE OPTIONAL
                    iv_valvld_for1_dataset_id   TYPE any  OPTIONAL
                    iv_valvld_for1_dataset_fld  TYPE any  OPTIONAL
                    iv_valvld_for1_value        TYPE any  OPTIONAL
                    iv_valvld_for1_value_x      TYPE flag OPTIONAL
                    iv_valvld_for2_value        TYPE any  OPTIONAL
                    iv_valvld_for2_value_x      TYPE flag OPTIONAL ,
      begin_field_textmark
          IMPORTING iv_value          TYPE any
                    iv_textmark       TYPE any
                    iv_formula        TYPE flag OPTIONAL
                    iv_rt_path_1      TYPE any  OPTIONAL   &quot; --&gt;&gt; runtime path (for dataset subordination)
                    it_valvld_attr_table        TYPE ANY TABLE OPTIONAL
                    iv_valvld_for1_dataset_id   TYPE any  OPTIONAL
                    iv_valvld_for1_dataset_fld  TYPE any  OPTIONAL
                    iv_valvld_for1_value        TYPE any  OPTIONAL
                    iv_valvld_for1_value_x      TYPE flag OPTIONAL
                    iv_valvld_for2_value        TYPE any  OPTIONAL
                    iv_valvld_for2_value_x      TYPE flag OPTIONAL  ,
      begin_drawing
          IMPORTING is_drawings_tmp   TYPE ty_s_drawings_tmp ,
      begin_chart
          IMPORTING is_drawings_tmp   TYPE ty_s_drawings_tmp ,
      begin_pattern
          IMPORTING is_patterns       TYPE ty_s_patterns ,
      finalize_pattern
          IMPORTING iv_printtitles_r  TYPE flag
                    iv_printtitles_c  TYPE flag
                    iv_autofitmerged_r TYPE flag DEFAULT space
                    iv_autofitmerged_c TYPE flag DEFAULT space
          CHANGING  cv_top            TYPE i
                    cv_left           TYPE i ,
      finalize_respattern
          IMPORTING iv_rowspan        TYPE flag OPTIONAL
                    iv_colspan        TYPE flag OPTIONAL
                    iv_top            TYPE i
                    iv_left           TYPE i
                    iv_rows           TYPE i
                    iv_columns        TYPE i
                    iv_autofitmerged_r TYPE flag DEFAULT space
                    iv_autofitmerged_c TYPE flag DEFAULT space
                    it_autofitmerged_r TYPE ty_t_int_tab OPTIONAL
                    it_autofitmerged_c TYPE ty_t_int_tab OPTIONAL ,
      finalize_grid
          IMPORTING iv_form_id        TYPE any
                    it_ref_fields     TYPE ty_t_dataset_ref_fields
                    iv_rt_path_1      TYPE any , &quot; --&gt;&gt; runtime path (for dataset subordination)
      value_describe
          IMPORTING iv_value          TYPE any
                    iv_cell_dateformat_style TYPE flag
          EXPORTING ev_number_flag    TYPE flag
                    ev_date_flag      TYPE flag
                    ev_date_excel     TYPE ty_char100 ,
      is_number
          IMPORTING value(iv_value)   TYPE any
          RETURNING value(rv_number)  TYPE flag ,
      postprocessing
          IMPORTING iv_startup_macro  TYPE any
          CHANGING  cv_vbs_code       TYPE any
                    ct_vbs_tables_tab TYPE ty_t_vbs_tables_tab ,
      postpr_ole_nopgbrk ,
      postpr_ole_autofit ,
      postpr_vbs_autofit ,
      postpr_vbs_autofit_macros_add ,
      postpr_vbs_nopgbrk ,
      postpr_vbs_nopgbrk_macros_add ,
      postpr_vbs_final
          CHANGING cv_vbs_code        TYPE any
                   ct_vbs_tables_tab  TYPE ty_t_vbs_tables_tab .


  PRIVATE SECTION .
    TYPES:
      BEGIN OF ty_s_sheetnamesuffix ,
        sheetname           TYPE ty_char31 ,
        suffix_index        TYPE sy-index ,
      END   OF ty_s_sheetnamesuffix ,
      ty_t_sheetnamesuffix  TYPE HASHED TABLE OF ty_s_sheetnamesuffix
                            WITH UNIQUE KEY sheetname .

    DATA:
      v_postprocessing_autofit  TYPE flag ,
      v_postprocessing_nopgbrk  TYPE flag ,
      v_protect             TYPE flag ,
      s_sheets              TYPE ty_s_sheets ,
      s_patterns            TYPE ty_s_patterns ,
      t_drawings_tmp        TYPE STANDARD TABLE OF ty_s_drawings_tmp ,
      t_sheetnamesuffix     TYPE ty_t_sheetnamesuffix ,
      r_ole                 TYPE REF TO lcl_ole ,
      BEGIN OF s_ole_variables ,
        ref                 TYPE string ,
        ref1                TYPE string ,
        ref2                TYPE string ,
        index               TYPE sy-index ,
        height              TYPE i ,
        width               TYPE i ,
        cur_rows_height     TYPE i ,
        cur_rows_count      TYPE i ,
        cur_cols_width      TYPE i ,
        cur_cols_count      TYPE i ,
        cur_wraptext        TYPE i ,
        vbscode             TYPE string ,
      END   OF s_ole_variables .

ENDCLASS .                    &quot;lcl_excelruntime DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_excelruntime IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_excelruntime IMPLEMENTATION .
  METHOD constructor .
    super-&gt;constructor( EXCEPTIONS error_file_reading = 1 ) .
    IF sy-subrc NE 0 .
      MESSAGE e000(lp) WITH v_text-t336         &quot; text: Error while reading template file
      RAISING error_file_reading .
    ENDIF .

    DATA ls_elemsequence   TYPE ty_s_elemsequence .
    DEFINE mk_elemsequence_add .
      clear ls_elemsequence .
      ls_elemsequence-order   = lines( &amp;1 ) + 1 .
      ls_elemsequence-element = &amp;2 .
      append ls_elemsequence to &amp;1 .
    END-OF-DEFINITION .

    mk_elemsequence_add
    t_elemsequence_worksheet :
    &apos;sheetPr&apos; ,
    &apos;dimension&apos; ,
    &apos;sheetViews&apos; ,
    &apos;sheetFormatPr&apos; ,
    &apos;cols&apos; ,
    &apos;sheetData&apos; ,
    &apos;sheetCalcPr&apos; ,
    &apos;sheetProtection&apos; ,
    &apos;protectedRanges&apos; ,
    &apos;scenarios&apos; ,
    &apos;autoFilter&apos; ,
    &apos;sortState&apos; ,
    &apos;dataConsolidate&apos; ,
    &apos;customSheetViews&apos; ,
    &apos;mergeCells&apos; ,
    &apos;phoneticPr&apos; ,
    &apos;conditionalFormatting&apos; ,
    &apos;dataValidations&apos; ,
    &apos;hyperlinks&apos; ,
    &apos;printOptions&apos; ,
    &apos;pageMargins&apos; ,
    &apos;pageSetup&apos; ,
    &apos;headerFooter&apos; ,
    &apos;rowBreaks&apos; ,
    &apos;colBreaks&apos; ,
    &apos;customProperties&apos; ,
    &apos;cellWatches&apos; ,
    &apos;ignoredErrors&apos; ,
    &apos;smartTags&apos; ,
    &apos;drawing&apos; ,
    &apos;drawingHF&apos; ,
    &apos;picture&apos; ,
    &apos;oleObjects&apos; ,
    &apos;controls&apos; ,
    &apos;webPublishItems&apos; ,
    &apos;tableParts&apos; ,
    &apos;extLst&apos; .
    SORT t_elemsequence_worksheet BY order DESCENDING .

    mk_elemsequence_add
    t_elemsequence_workbook :
    &apos;fileVersion&apos; ,
    &apos;fileSharing&apos; ,
    &apos;workbookPr&apos; ,
    &apos;workbookProtection&apos; ,
    &apos;bookViews&apos; ,
    &apos;sheets&apos; ,
    &apos;functionGroups&apos; ,
    &apos;externalReferences&apos; ,
    &apos;definedNames&apos; ,
    &apos;calcPr&apos; ,
    &apos;oleSize&apos; ,
    &apos;customWorkbookViews&apos; ,
    &apos;pivotCaches&apos; ,
    &apos;smartTagPr&apos; ,
    &apos;smartTagTypes&apos; ,
    &apos;webPublishing&apos; ,
    &apos;fileRecoveryPr&apos; ,
    &apos;webPublishObjects&apos; ,
    &apos;extLst&apos; .
    SORT t_elemsequence_workbook BY order DESCENDING .

  ENDMETHOD .                    &quot;constructor
  METHOD free .
    super-&gt;free( ).
  ENDMETHOD .                    &quot; FREE
  METHOD begin_model .
    s_model-ixml_doc_contenttypes = is_model-ixml_doc_contenttypes .
    s_model-ixml_doc_core         = is_model-ixml_doc_core .
    s_model-ixml_doc_app          = is_model-ixml_doc_app .
    s_model-ixml_doc_workbook     = is_model-ixml_doc_workbook .
    s_model-t_contentrels         = is_model-t_contentrels .
    s_model-t_workbookrels        = is_model-t_workbookrels .
    s_model-t_sharedstrings       = is_model-t_sharedstrings .

    v_protect   = iv_protect .
    v_extension = iv_extension .
    r_zipfolder = ir_zipfolder .

    DATA:
      lr_ncol         TYPE REF TO if_ixml_node_collection ,
      lr_node         TYPE REF TO if_ixml_node ,
      lr_elem         TYPE REF TO if_ixml_element ,
      lv_index        TYPE sy-index ,
      lv_contenttype  TYPE string ,
      lv_activetab    TYPE string ,
      ls_contentrels  TYPE ty_s_relstab .

*======================================================================
*   Clear [Content_Types].xml
*======================================================================
    lr_ncol =
    s_model-ixml_doc_contenttypes-&gt;get_elements_by_tag_name(
                                   name  = c_tag-override ) .
    IF lr_ncol IS BOUND .
      DO .
        lv_index = sy-index - 1 .
        lr_node = lr_ncol-&gt;get_item( index = lv_index ) .
        IF lr_node IS NOT BOUND. EXIT. ENDIF .
        CLEAR lv_contenttype .
        xml_attrib_get( EXPORTING ir_node           = lr_node
                                  iv_attrib_name1   = c_tag-contenttype
                        IMPORTING ev_attrib_value1  = lv_contenttype ) .
        CASE lv_contenttype .
          WHEN c_contenttype-sheet
            OR c_contenttype-sharedstrings
            OR c_contenttype-calcchain
            OR c_contenttype-drawing
            OR c_contenttype-chart
            OR c_contenttype-chartstyle
            OR c_contenttype-chartcolors .
            lr_node-&gt;remove_node( ) .
        ENDCASE .
      ENDDO .
    ENDIF .

    lr_ncol =
    s_model-ixml_doc_contenttypes-&gt;get_elements_by_tag_name(
                                   name  = c_tag-default ) .
    IF lr_ncol IS BOUND .
      DO .
        lv_index = sy-index - 1 .
        lr_node = lr_ncol-&gt;get_item( index = lv_index ) .
        IF lr_node IS NOT BOUND. EXIT. ENDIF .
        CLEAR lv_contenttype .
        xml_attrib_get( EXPORTING ir_node           = lr_node
                                  iv_attrib_name1   = c_tag-contenttype
                        IMPORTING ev_attrib_value1  = lv_contenttype ) .
        CHECK lv_contenttype CP &apos;image/*&apos; .
        lr_node-&gt;remove_node( ) .
      ENDDO .
    ENDIF .

*======================================================================
*   Clear \docProps\app.xml
*======================================================================
    xml_remove_nodes(
            iv_ixml_doc  = s_model-ixml_doc_app
            iv_name      = c_tag-vector
            iv_namespace = c_tag-vt ) .


*======================================================================
*   Clear \xl\_rels\workbook.xml.rels
*======================================================================
    DELETE s_model-t_workbookrels
     WHERE type EQ c_contenttype-wb_sheet
        OR type EQ c_contenttype-wb_sharedstrings
        OR type EQ c_contenttype-wb_calcchain
         .


*======================================================================
*   Clear \xl\workbook.xml
*======================================================================
    xml_remove_nodes(
            iv_ixml_doc = s_model-ixml_doc_workbook
            iv_name     = c_tag-sheet ) .

    IF iv_definednames_dont_remove IS INITIAL .
      xml_remove_nodes(
              iv_ixml_doc = s_model-ixml_doc_workbook
              iv_name     = c_tag-definednames ) .
    ENDIF .

*    lr_ncol =
*    s_model-ixml_doc_workbook-&gt;get_elements_by_tag_name(
*                               name  = c_tag-workbookview ) .
*    IF lr_ncol IS BOUND .
*      DO .
*        lv_index = sy-index - 1 .
*        lr_node = lr_ncol-&gt;get_item( index = lv_index ) .
*        IF lr_node IS NOT BOUND. EXIT. ENDIF .
*        xml_attrib_get( EXPORTING ir_node           = lr_node
*                                  iv_attrib_name1   = c_tag-activetab
*                        IMPORTING ev_attrib_value1  = lv_activetab ) .
*        CHECK lv_activetab IS NOT INITIAL
*          AND lv_activetab NE 0 .
*
*        lr_elem ?= lr_node-&gt;query_interface( ixml_iid_element ) .
*        lr_elem-&gt;remove_attribute( name = c_tag-activetab ) .
*      ENDDO .
*    ENDIF .

*======================================================================
*   Remove XML-docs from ZIP-folder
*======================================================================
    FIELD-SYMBOLS &lt;files&gt; TYPE r_zipfolder-&gt;t_file .

    DEFINE mk_delete_files .
      loop at r_zipfolder-&gt;files assigning &lt;files&gt; where name cs &amp;1+1 .

        r_zipfolder-&gt;delete( exporting name = &lt;files&gt;-name
                             exceptions others = 0 ) .
      endloop .
    END-OF-DEFINITION .

    mk_delete_files:
          c_path-sharedstrings ,
          c_path-calcchain ,
          c_path-sheetsfolder ,
          c_path-mediafolder ,
          c_path-drawingsfolder ,
          c_path-formparameters ,
          c_path-chartsfolder .

*======================================================================
*   Clear \.rels
*======================================================================
    LOOP AT s_model-t_contentrels INTO ls_contentrels
      WHERE type EQ c_contenttype-thumbnail .
      mk_delete_files  ls_contentrels-target .

      DELETE s_model-t_contentrels .
    ENDLOOP .

  ENDMETHOD .                    &quot; begin_model
  METHOD finalize_model .
    DATA:
      BEGIN OF lr_element ,
        types             TYPE REF TO if_ixml_element ,
        override          TYPE REF TO if_ixml_element ,
        default           TYPE REF TO if_ixml_element ,
        headingpairs      TYPE REF TO if_ixml_element ,
        properties        TYPE REF TO if_ixml_element ,
        titlesofparts     TYPE REF TO if_ixml_element ,
        vector            TYPE REF TO if_ixml_element ,
        variant           TYPE REF TO if_ixml_element ,
        lpstr             TYPE REF TO if_ixml_element ,
        i4                TYPE REF TO if_ixml_element ,
        relationships     TYPE REF TO if_ixml_element ,
        relationship      TYPE REF TO if_ixml_element ,
        workbook          TYPE REF TO if_ixml_element ,
        definednames      TYPE REF TO if_ixml_element ,
        definedname       TYPE REF TO if_ixml_element ,
        sheets            TYPE REF TO if_ixml_element ,
        sheet             TYPE REF TO if_ixml_element ,
        sst               TYPE REF TO if_ixml_element ,
        calcchain         TYPE REF TO if_ixml_element ,
        si                TYPE REF TO if_ixml_element ,
        t                 TYPE REF TO if_ixml_element ,
        p                 TYPE REF TO if_ixml_element ,
        r                 TYPE REF TO if_ixml_element ,
        c                 TYPE REF TO if_ixml_element ,
        company           TYPE REF TO if_ixml_element ,
        chart             TYPE REF TO if_ixml_element ,
        title             TYPE REF TO if_ixml_element ,
        layout            TYPE REF TO if_ixml_element ,
        plotarea          TYPE REF TO if_ixml_element ,
        strref            TYPE REF TO if_ixml_element ,
        ser               TYPE REF TO if_ixml_element ,
        idx               TYPE REF TO if_ixml_element ,
        val               TYPE REF TO if_ixml_element ,
        cat               TYPE REF TO if_ixml_element ,
        axis              TYPE REF TO if_ixml_element ,
        tx                TYPE REF TO if_ixml_element ,
        txpr              TYPE REF TO if_ixml_element ,
        rich              TYPE REF TO if_ixml_element ,
        ref               TYPE REF TO if_ixml_element ,
        sppr              TYPE REF TO if_ixml_element ,
        any               TYPE REF TO if_ixml_element ,
      END   OF lr_element ,
      BEGIN OF lr_node ,
        tx                TYPE REF TO if_ixml_node ,
        layout            TYPE REF TO if_ixml_node ,
        ser               TYPE REF TO if_ixml_node ,
        r                 TYPE REF TO if_ixml_node ,
        val               TYPE REF TO if_ixml_node ,
        cat               TYPE REF TO if_ixml_node ,
        sppr              TYPE REF TO if_ixml_node ,
        workbookview      TYPE REF TO if_ixml_node ,
        txpr              TYPE REF TO if_ixml_node ,
        rich              TYPE REF TO if_ixml_node ,
        strref            TYPE REF TO if_ixml_node ,
        any               TYPE REF TO if_ixml_node ,
      END   OF lr_node ,
      BEGIN OF lr_ncol ,
        ser               TYPE REF TO if_ixml_node_collection ,
        r                 TYPE REF TO if_ixml_node_collection ,
        workbookview      TYPE REF TO if_ixml_node_collection ,
      END   OF lr_ncol ,
      lv_activetab        TYPE i ,
      lv_string_tmp       TYPE string ,
      lv_idx              TYPE string ,
      lv_index            TYPE syindex ,
      lv_localsheetid     TYPE string ,
      lv_definednames_occurs TYPE flag ,
      lv_char1            TYPE ty_char1 ,
      lv_name             TYPE string ,
      lv_namespace        TYPE string ,
      lt_sharedstrings    TYPE STANDARD TABLE OF ty_s_sharedstrings ,
      ls_docproperties    TYPE ckf_field_value ,
      lt_chartrels        TYPE ty_t_relstab ,
      ls_vmldrawingsrels  TYPE ty_s_relstab ,
      lt_vmldrawingsrels  TYPE ty_t_relstab ,
      lv_x_char           TYPE ty_char15 ,
      lv_y_char           TYPE ty_char15 ,
      lv_axis_title       TYPE flag ,
      lv_axis_title_tx    TYPE string ,
      lr_ixml             TYPE REF TO if_ixml ,
      lr_ixml_doc         TYPE REF TO if_ixml_document ,
      lr_text             TYPE REF TO if_ixml_text ,
      lr_streamfactory    TYPE REF TO if_ixml_stream_factory ,
      lr_ostream          TYPE REF TO if_ixml_ostream ,
      lr_encoding         TYPE REF TO if_ixml_encoding ,
      lv_emf              TYPE flag .
    DATA:
      lv_bookmark_string  TYPE string ,
      lv_bookmark_xstring TYPE xstring ,
      lv_bookmark_offset  TYPE i ,
      lv_xml_xstring      TYPE xstring ,
      BEGIN OF ls_ostream_xstring ,
        beg               TYPE xstring ,
        mid               TYPE xstring ,
        end               TYPE xstring ,
      END   OF ls_ostream_xstring .
    CONSTANTS:
      lc_tag_bookmark     TYPE string   VALUE &apos;DummySstr&apos; . &quot; &apos;&lt;DummySstr/&gt;&apos;
    FIELD-SYMBOLS:
      &lt;sheets&gt;            TYPE ty_s_sheets ,
      &lt;drawings&gt;          TYPE ty_s_drawings ,
      &lt;sharedstrings&gt;     TYPE ty_s_sharedstrings ,
      &lt;calcchain&gt;         TYPE ty_s_calcchain ,
      &lt;media&gt;             TYPE ty_s_media ,
      &lt;charts&gt;            TYPE ty_s_charts ,
      &lt;datasets&gt;          TYPE ty_s_datasets ,
      &lt;dataset_refs&gt;      TYPE ty_s_dataset_refs ,
      &lt;cellrng_name&gt;      TYPE ty_s_cellrng_name ,
      &lt;dataset_ref_fields&gt; TYPE ty_s_dataset_ref_fields ,
      &lt;dataset_series_tab&gt; TYPE ty_s_dataset_series_tab ,
      &lt;vmldrawings&gt;       TYPE ty_s_vmldrawings ,
      &lt;vmldrawings_rels&gt;  TYPE ty_s_vmldrawings_rels .

*======================================================================
*   Fill [Content_Types].xml
*======================================================================
    lr_element-types =
    s_model-ixml_doc_contenttypes-&gt;find_from_name(
                          name      = c_tag-types
                          depth     = 1 ) .
    IF lr_element-types IS BOUND .

*     sheets
      IF s_model-t_sheets[] IS NOT INITIAL .
        LOOP AT s_model-t_sheets ASSIGNING &lt;sheets&gt; .

*         drawing
          IF &lt;sheets&gt;-sheetdata_runtime-t_drawings[] IS NOT INITIAL .
            lr_element-override = s_model-ixml_doc_contenttypes-&gt;create_simple_element(
                                                name = c_tag-override    parent = lr_element-types ) .
            lr_element-override-&gt;set_attribute( name = c_tag-partname    value  = &lt;sheets&gt;-sheetdata_runtime-drawing_path ) .
            lr_element-override-&gt;set_attribute( name = c_tag-contenttype value  = c_contenttype-drawing ) .

            LOOP AT &lt;sheets&gt;-sheetdata_runtime-t_drawings ASSIGNING &lt;drawings&gt; WHERE drawing_type EQ c_drawing_type-chart .
              READ TABLE s_model-t_charts ASSIGNING &lt;charts&gt; WITH TABLE KEY id = &lt;drawings&gt;-refer_id .
              CHECK sy-subrc EQ 0 .
              lr_element-override = s_model-ixml_doc_contenttypes-&gt;create_simple_element(
                                                  name = c_tag-override    parent = lr_element-types ) .
              lr_element-override-&gt;set_attribute( name = c_tag-partname    value  = &lt;charts&gt;-chart_path ) .
              lr_element-override-&gt;set_attribute( name = c_tag-contenttype value  = c_contenttype-chart ) .

              lr_element-override = s_model-ixml_doc_contenttypes-&gt;create_simple_element(
                                                  name = c_tag-override    parent = lr_element-types ) .
              lr_element-override-&gt;set_attribute( name = c_tag-partname    value  = &lt;charts&gt;-chartstyle_path ) .
              lr_element-override-&gt;set_attribute( name = c_tag-contenttype value  = c_contenttype-chartstyle ) .

              lr_element-override = s_model-ixml_doc_contenttypes-&gt;create_simple_element(
                                                  name = c_tag-override    parent = lr_element-types ) .
              lr_element-override-&gt;set_attribute( name = c_tag-partname    value  = &lt;charts&gt;-chartcolors_path ) .
              lr_element-override-&gt;set_attribute( name = c_tag-contenttype value  = c_contenttype-chartcolors ) .
            ENDLOOP .
          ENDIF .

*         sheet
          lr_element-override = s_model-ixml_doc_contenttypes-&gt;create_simple_element(
                                              name = c_tag-override     parent = lr_element-types ) .
          CONCATENATE c_path-sheetsfolder &apos;/&apos; &lt;sheets&gt;-name_int &apos;.xml&apos; INTO lv_string_tmp .
          lr_element-override-&gt;set_attribute( name = c_tag-partname     value  = lv_string_tmp ) .
          lr_element-override-&gt;set_attribute( name = c_tag-contenttype  value  = c_contenttype-sheet ) .
        ENDLOOP .
      ENDIF .

*     shared strings
      IF s_model-t_sharedstrings[] IS NOT INITIAL .
        lr_element-override = s_model-ixml_doc_contenttypes-&gt;create_simple_element(
                                            name = c_tag-override     parent = lr_element-types ) .
        lr_element-override-&gt;set_attribute( name = c_tag-partname     value  = c_path-sharedstrings ) .
        lr_element-override-&gt;set_attribute( name = c_tag-contenttype  value  = c_contenttype-sharedstrings ) .
      ENDIF .

*     calculation chain
      IF s_model-t_calcchain[] IS NOT INITIAL .
        lr_element-override = s_model-ixml_doc_contenttypes-&gt;create_simple_element(
                                            name = c_tag-override     parent = lr_element-types ) .
        lr_element-override-&gt;set_attribute( name = c_tag-partname     value  = c_path-calcchain ) .
        lr_element-override-&gt;set_attribute( name = c_tag-contenttype  value  = c_contenttype-calcchain ) .
      ENDIF .

*     bitmaps
      IF s_model-t_media[] IS NOT INITIAL .
        lr_element-default = s_model-ixml_doc_contenttypes-&gt;create_simple_element(
                                           name = c_tag-default       parent = lr_element-types ) .
        lr_element-default-&gt;set_attribute( name = c_tag-extension     value  = c_tag-jpeg ) .
        lr_element-default-&gt;set_attribute( name = c_tag-contenttype   value  = c_tag-imagejpeg ) .
      ENDIF .


*     vmlDrawings
      LOOP AT s_model-t_vmldrawings ASSIGNING &lt;vmldrawings&gt; .
        LOOP AT &lt;vmldrawings&gt;-t_rels ASSIGNING &lt;vmldrawings_rels&gt;
          WHERE media_path CP &apos;*.emf&apos; .
          lv_emf = abap_on .
        ENDLOOP .
      ENDLOOP .
      IF lv_emf IS NOT INITIAL .
        lr_element-default = s_model-ixml_doc_contenttypes-&gt;create_simple_element(
                                           name = c_tag-default       parent = lr_element-types ) .
        lr_element-default-&gt;set_attribute( name = c_tag-extension     value  = c_tag-emf ) .
        lr_element-default-&gt;set_attribute( name = c_tag-contenttype   value  = c_tag-imageemf ) .
      ENDIF .
    ENDIF .

    xml_save( iv_ixml_doc  = s_model-ixml_doc_contenttypes
              iv_path      = c_path-contenttypes ) .


*======================================================================
*   Fill /.rels
*======================================================================
    xml_relstab_set( iv_path = c_path-contenttypes
                     it_relstab = s_model-t_contentrels[] ) .


*======================================================================
*   Fill \docProps\core.xml
*======================================================================
    DO 1 TIMES .
      lr_element-properties =
      s_model-ixml_doc_core-&gt;find_from_name( name = c_tag-coreproperties
                                             namespace = c_tag-cp ) .
      CHECK lr_element-properties IS BOUND .

      lr_element-any =
      s_model-ixml_doc_core-&gt;find_from_name( name = c_tag-lastmodifiedby
                                             namespace = c_tag-cp ) .
      IF lr_element-any IS BOUND .
        lr_element-any-&gt;remove_node( ) .
      ENDIF .

      LOOP AT it_docproperties INTO ls_docproperties .
        SET LOCALE LANGUAGE sy-langu .
        TRANSLATE ls_docproperties-fieldname TO LOWER CASE .
        CASE ls_docproperties-fieldname .
          WHEN &apos;title&apos; .          lv_name = c_tag-title .          lv_namespace = c_tag-dc .
          WHEN &apos;subject&apos; .        lv_name = c_tag-subject .        lv_namespace = c_tag-dc .
          WHEN &apos;author&apos; .         lv_name = c_tag-creator .        lv_namespace = c_tag-dc .
          WHEN &apos;keywords&apos; .       lv_name = c_tag-keywords .       lv_namespace = c_tag-cp .
          WHEN &apos;comments&apos; .       lv_name = c_tag-description .    lv_namespace = c_tag-dc .
          WHEN &apos;status&apos; .         lv_name = c_tag-contentstatus .  lv_namespace = c_tag-cp .
          WHEN &apos;category&apos; .       lv_name = c_tag-category .       lv_namespace = c_tag-cp .
          WHEN &apos;lastmodifiedby&apos; . lv_name = c_tag-lastmodifiedby . lv_namespace = c_tag-cp .
          WHEN OTHERS . CONTINUE .
        ENDCASE .

        lr_element-any =
        s_model-ixml_doc_core-&gt;find_from_name( name = lv_name
                                               namespace = lv_namespace ) .
        IF lr_element-any IS BOUND .
          lr_element-any-&gt;remove_node( ) .
        ENDIF .

        lv_string_tmp = ls_docproperties-value .
        s_model-ixml_doc_core-&gt;create_simple_element(
                          name      = lv_name
                          namespace = lv_namespace
                          value     = lv_string_tmp
                          parent    = lr_element-properties ) .
      ENDLOOP .
    ENDDO .


    xml_save( iv_ixml_doc  = s_model-ixml_doc_core
              iv_path      = c_path-core ) .

*======================================================================
*   Fill \docProps\app.xml
*======================================================================
    DO 1 TIMES .
      lr_element-headingpairs =
      s_model-ixml_doc_app-&gt;find_from_name( name = c_tag-headingpairs ).
      CHECK lr_element-headingpairs IS BOUND .

      lr_element-vector =
      s_model-ixml_doc_app-&gt;create_simple_element(
                        namespace = c_tag-vt    name = c_tag-vector
                        parent    = lr_element-headingpairs ).

      lr_element-vector-&gt;set_attribute( name = c_tag-size  value = &apos;2&apos; ) .
      lr_element-vector-&gt;set_attribute( name = c_tag-basetype  value = c_tag-variant ) .

      lr_element-variant =
      s_model-ixml_doc_app-&gt;create_simple_element(
                        namespace = c_tag-vt    name = c_tag-variant
                        parent    = lr_element-vector ) .
      lr_element-lpstr =
      s_model-ixml_doc_app-&gt;create_simple_element(
                        namespace = c_tag-vt    name = c_tag-lpstr
                        parent    = lr_element-variant ) .

      lv_string_tmp = v_text-t007 . &quot; text: Sheets
      lr_element-lpstr-&gt;set_value( lv_string_tmp ) .

      lr_element-variant =
      s_model-ixml_doc_app-&gt;create_simple_element(
                        namespace = c_tag-vt    name = c_tag-variant
                        parent    = lr_element-vector ) .
      lr_element-i4 =
      s_model-ixml_doc_app-&gt;create_simple_element(
                        namespace = c_tag-vt    name = c_tag-i4
                        parent    = lr_element-variant ) .

      lv_string_tmp = LINES( s_model-t_sheets ) . CONDENSE lv_string_tmp NO-GAPS .
      lr_element-i4-&gt;set_value( lv_string_tmp ) .

    ENDDO .

    DO 1 TIMES .
      lr_element-titlesofparts =
      s_model-ixml_doc_app-&gt;find_from_name( name = c_tag-titlesofparts ).
      CHECK lr_element-titlesofparts IS BOUND .

      lr_element-vector =
      s_model-ixml_doc_app-&gt;create_simple_element(
                        namespace = c_tag-vt    name = c_tag-vector
                        parent    = lr_element-titlesofparts ) .

      lv_string_tmp = LINES( s_model-t_sheets ) . CONDENSE lv_string_tmp NO-GAPS .
      lr_element-vector-&gt;set_attribute( name = c_tag-size   value = lv_string_tmp ) .
      lr_element-vector-&gt;set_attribute( name = c_tag-basetype  value = c_tag-lpstr ) .

      LOOP AT s_model-t_sheets ASSIGNING &lt;sheets&gt; .
        lr_element-lpstr =
        s_model-ixml_doc_app-&gt;create_simple_element(
                          namespace = c_tag-vt    name = c_tag-lpstr
                          parent    = lr_element-vector ).

        lv_string_tmp = &lt;sheets&gt;-name .
        lr_element-lpstr-&gt;set_value( lv_string_tmp ) .
      ENDLOOP .
    ENDDO .

    DO 1 TIMES .
      lr_element-company =
      s_model-ixml_doc_app-&gt;find_from_name( name = c_tag-company ) .
      CHECK lr_element-company IS BOUND .

      CONCATENATE v_title &apos;for SAP (&apos; v_text-url0 &apos;)&apos;
      INTO lv_string_tmp SEPARATED BY space .

      lr_element-company-&gt;set_value( lv_string_tmp ) .
    ENDDO .

    DO 1 TIMES .
      lr_element-properties =
      s_model-ixml_doc_app-&gt;find_from_name( name = c_tag-properties ) .
      CHECK lr_element-properties IS BOUND .

      LOOP AT it_docproperties INTO ls_docproperties .
        SET LOCALE LANGUAGE sy-langu .
        TRANSLATE ls_docproperties-fieldname TO LOWER CASE .
        CASE ls_docproperties-fieldname .
          WHEN &apos;manager&apos; .        lv_name = c_tag-manager .
          WHEN &apos;company&apos; .        lv_name = c_tag-company .
          WHEN &apos;hyperlinkbase&apos; .  lv_name = c_tag-hyperlinkbase .
          WHEN OTHERS . CONTINUE .
        ENDCASE .

        lr_element-any =
        s_model-ixml_doc_app-&gt;find_from_name( name = lv_name ) .
        IF lr_element-any IS BOUND .
          lr_element-any-&gt;remove_node( ) .
        ENDIF .

        lv_string_tmp = ls_docproperties-value .
        s_model-ixml_doc_app-&gt;create_simple_element(
                          name    = lv_name
                          value   = lv_string_tmp
                          parent  = lr_element-properties ) .
      ENDLOOP .
    ENDDO .

    xml_save( iv_ixml_doc  = s_model-ixml_doc_app
              iv_path      = c_path-app ) .


*======================================================================
*   Fill /xl/_rels/workbook.xml.rels
*======================================================================
    DATA ls_relstab TYPE ty_s_relstab .

    LOOP AT s_model-t_sheets ASSIGNING &lt;sheets&gt; .
      CLEAR ls_relstab .
      CONCATENATE &apos;worksheets/&apos; &lt;sheets&gt;-name_int &apos;.xml&apos;
      INTO ls_relstab-target .
      ls_relstab-type   = c_contenttype-wb_sheet .
      ls_relstab-id     = &lt;sheets&gt;-id .
      APPEND ls_relstab TO s_model-t_workbookrels .
    ENDLOOP .

    IF s_model-t_sharedstrings[] IS NOT INITIAL .
      CLEAR ls_relstab .
      ls_relstab-target = &apos;sharedStrings.xml&apos; .
      ls_relstab-type   = c_contenttype-wb_sharedstrings .
      ls_relstab-id     = &apos;rId547&apos; .
      APPEND ls_relstab TO s_model-t_workbookrels .
    ENDIF .

    IF s_model-t_calcchain[] IS NOT INITIAL .
      CLEAR ls_relstab .
      ls_relstab-target = &apos;calcChain.xml&apos; .
      ls_relstab-type   = c_contenttype-wb_calcchain .
      ls_relstab-id     = &apos;rId548&apos; .
      APPEND ls_relstab TO s_model-t_workbookrels .
    ENDIF .

    xml_relstab_set( iv_path = c_path-workbook
                     it_relstab = s_model-t_workbookrels[] ) .


*======================================================================
*   Fill \xl\workbook.xml
*======================================================================
    DO 1 TIMES .
*     sheets
      lr_element-sheets =
      s_model-ixml_doc_workbook-&gt;find_from_name( name = c_tag-sheets ) .
      CHECK lr_element-sheets IS BOUND .

      READ TABLE s_model-t_sheets ASSIGNING &lt;sheets&gt; WITH KEY active = abap_on .
      IF sy-subrc EQ 0 .
        lv_activetab = &lt;sheets&gt;-index .
      ENDIF .

      LOOP AT s_model-t_sheets ASSIGNING &lt;sheets&gt; .
        lr_element-sheet =
        s_model-ixml_doc_app-&gt;create_simple_element(
                          name   = c_tag-sheet
                          parent = lr_element-sheets ) .

        lv_string_tmp = &lt;sheets&gt;-name .
        lr_element-sheet-&gt;set_attribute( name = c_tag-name   value = lv_string_tmp ) .

        lv_string_tmp = &lt;sheets&gt;-index . CONDENSE lv_string_tmp .
        lr_element-sheet-&gt;set_attribute( name = c_tag-sheetid  value = lv_string_tmp ) .

        IF &lt;sheets&gt;-sheetdata_runtime-hidden IS INITIAL .
          IF lv_activetab IS INITIAL .
            lv_activetab = &lt;sheets&gt;-index .
          ENDIF .
        ELSE .
          lr_element-sheet-&gt;set_attribute( name = c_tag-state  value = c_tag-hidden ) .
        ENDIF .

        lv_string_tmp = &lt;sheets&gt;-id .
        lr_element-sheet-&gt;set_attribute( namespace = c_tag-r  name = c_tag-id  value = lv_string_tmp ) .
      ENDLOOP .
    ENDDO .

    DO 1 TIMES .

      IF lv_activetab IS INITIAL .
        MESSAGE e000(lp) WITH v_text-t023 &quot; text: Workbook must have at least one visible Worksheet
        RAISING process_terminated .
      ENDIF .
      SUBTRACT 1 FROM lv_activetab .

      lr_ncol-workbookview =
      s_model-ixml_doc_workbook-&gt;get_elements_by_tag_name( name = c_tag-workbookview ) .
      IF lr_ncol-workbookview IS BOUND .
        DO .
          lv_index = sy-index - 1 .
          lr_node-workbookview = lr_ncol-workbookview-&gt;get_item( index = lv_index ) .
          IF lr_node-workbookview IS NOT BOUND. EXIT. ENDIF .
          lr_element-any ?= lr_node-workbookview-&gt;query_interface( ixml_iid_element ) .
          lr_element-any-&gt;remove_attribute( name = c_tag-activetab ) .
          CHECK lv_activetab GT 0 .
          lv_string_tmp = lv_activetab . CONDENSE lv_string_tmp NO-GAPS .
          lr_element-any-&gt;set_attribute( name = c_tag-activetab   value = lv_string_tmp ) .
        ENDDO .
      ENDIF .
    ENDDO .

    DO 1 TIMES .
      CLEAR lv_definednames_occurs .
*     compose a &apos;definedNames&apos; node
      lr_element-definednames =
      s_model-ixml_doc_workbook-&gt;create_element( name = c_tag-definednames ) .

*     names of cell range
      LOOP AT s_model-t_sheets ASSIGNING &lt;sheets&gt; .
        lv_localsheetid = &lt;sheets&gt;-index - 1 .
        CONDENSE lv_localsheetid NO-GAPS .

        SORT &lt;sheets&gt;-sheetdata_runtime-t_cellrng_name BY name .
        DELETE ADJACENT DUPLICATES FROM &lt;sheets&gt;-sheetdata_runtime-t_cellrng_name COMPARING name .

        SORT &lt;sheets&gt;-sheetdata_runtime-t_cellrng_name BY beg_y beg_x end_y end_x .
        DELETE ADJACENT DUPLICATES FROM &lt;sheets&gt;-sheetdata_runtime-t_cellrng_name COMPARING beg_y beg_x end_y end_x .

        LOOP AT &lt;sheets&gt;-sheetdata_runtime-t_cellrng_name ASSIGNING &lt;cellrng_name&gt; .
          lr_element-definedname =
          s_model-ixml_doc_workbook-&gt;create_simple_element(
                  name = c_tag-definedname    parent = lr_element-definednames ) .
          lr_element-definedname-&gt;set_attribute( name = c_tag-name   value = &lt;cellrng_name&gt;-name ) .

          conv_ref_nc(   EXPORTING iv_beg_x     = &lt;cellrng_name&gt;-beg_x
                                   iv_beg_y     = &lt;cellrng_name&gt;-beg_y
                                   iv_end_x     = &lt;cellrng_name&gt;-end_x
                                   iv_end_y     = &lt;cellrng_name&gt;-end_y
                                   iv_prefix    = &apos;$&apos;
                                   iv_sheetname = &lt;sheets&gt;-name
                         IMPORTING ev_ref       = lv_string_tmp ) .
          lr_text = s_model-ixml_doc_workbook-&gt;create_text( lv_string_tmp ) .
          lr_element-definedname-&gt;append_child( lr_text ) .

          lv_definednames_occurs = abap_on .
        ENDLOOP .
      ENDLOOP .

**    no-Page-Break ranges
*     LOOP AT s_model-t_sheets ASSIGNING &lt;sheets&gt; .
*       LOOP AT &lt;sheets&gt;-sheetdata_runtime-t_nopgbrk_range ASSIGNING &lt;nopgbrk_range&gt; .
*         lr_element-definedname =
*         s_model-ixml_doc_workbook-&gt;create_simple_element(
*                 name = c_tag-definedname    parent = lr_element-definednames ) .
*         CALL FUNCTION &apos;GUID_CREATE&apos;
*           IMPORTING
*             ev_guid_32 = lv_guid.
*         IF &lt;nopgbrk_range&gt;-top IS NOT INITIAL .
*           lv_shift = &apos;T&apos; .
*         ELSEIF NOT &lt;nopgbrk_range&gt;-left IS NOT INITIAL .
*           lv_shift = &apos;L&apos; .
*         ENDIF.
*         CONCATENATE c_preventpagebreak lv_shift lv_guid INTO lv_string_tmp .
*         lr_element-definedname-&gt;set_attribute( name = c_tag-name   value = lv_string_tmp ) .
*
*         conv_ref_nc_2( EXPORTING iv_beg_x     = &lt;nopgbrk_range&gt;-beg_x
*                                  iv_beg_y     = &lt;nopgbrk_range&gt;-beg_y
*                                  iv_end_x     = &lt;nopgbrk_range&gt;-end_x
*                                  iv_end_y     = &lt;nopgbrk_range&gt;-end_y
*                                  iv_prefix    = &apos;$&apos;
*                                  iv_sheetname = &lt;sheets&gt;-name
*                        IMPORTING ev_ref       = lv_string_tmp ) .
*         lr_text = s_model-ixml_doc_workbook-&gt;create_text( lv_string_tmp ) .
*         lr_element-definedname-&gt;append_child( lr_text ) .
*
*         lv_definednames_occurs = abap_on .
*       ENDLOOP .
*     ENDLOOP .

*     print titles
      LOOP AT s_model-t_sheets ASSIGNING &lt;sheets&gt; .
        lv_localsheetid = &lt;sheets&gt;-index - 1 .
        CONDENSE lv_localsheetid NO-GAPS .

        CHECK &lt;sheets&gt;-sheetdata_runtime-printtitles-beg_x IS NOT INITIAL
           OR &lt;sheets&gt;-sheetdata_runtime-printtitles-beg_y IS NOT INITIAL .

        lr_element-definedname =
        s_model-ixml_doc_workbook-&gt;create_simple_element(
                name = c_tag-definedname    parent = lr_element-definednames ) .
        lr_element-definedname-&gt;set_attribute( name = c_tag-name   value = c_tag-xlnmprinttitles ) .
        lr_element-definedname-&gt;set_attribute( name = c_tag-localsheetid   value = lv_localsheetid ) .

        conv_ref_nc_2( EXPORTING iv_beg_x     = &lt;sheets&gt;-sheetdata_runtime-printtitles-beg_x
                                 iv_beg_y     = &lt;sheets&gt;-sheetdata_runtime-printtitles-beg_y
                                 iv_end_x     = &lt;sheets&gt;-sheetdata_runtime-printtitles-end_x
                                 iv_end_y     = &lt;sheets&gt;-sheetdata_runtime-printtitles-end_y
                                 iv_prefix    = &apos;$&apos;
                                 iv_sheetname = &lt;sheets&gt;-name
                       IMPORTING ev_ref       = lv_string_tmp ) .
        lr_text = s_model-ixml_doc_workbook-&gt;create_text( lv_string_tmp ) .
        lr_element-definedname-&gt;append_child( lr_text ) .

        lv_definednames_occurs = abap_on .
      ENDLOOP .

*     insert composed element
      CHECK lv_definednames_occurs IS NOT INITIAL .
      lr_element-workbook =
      s_model-ixml_doc_workbook-&gt;find_from_name( name = c_tag-workbook ) .
      CHECK lr_element-workbook IS BOUND .

      xml_insert_element(
          EXPORTING iv_name_element   = c_tag-definednames
                    ir_ixml_element   = lr_element-definednames
                    it_elemsequence   = t_elemsequence_workbook
           CHANGING cr_ixml_parent 	  = lr_element-workbook ) .
    ENDDO .

    xml_save( iv_ixml_doc  = s_model-ixml_doc_workbook
              iv_path      = c_path-workbook ) .

*======================================================================
*   Fill /xl/charts/chartXXX.xml
*        /xl/charts/colorsXXX.xml
*        /xl/charts/styleXXX.xml
*        /xl/charts/_rels/chartXXX.xml.rels
*======================================================================

    LOOP AT s_model-t_sheets ASSIGNING &lt;sheets&gt; .
      LOOP AT &lt;sheets&gt;-sheetdata_runtime-t_drawings[] ASSIGNING &lt;drawings&gt;
        WHERE drawing_type EQ c_drawing_type-chart .

        READ TABLE s_model-t_charts ASSIGNING &lt;charts&gt; WITH TABLE KEY id = &lt;drawings&gt;-refer_id .
        CHECK sy-subrc EQ 0 .

        CLEAR lt_chartrels .
        DO 2 TIMES .
          CASE sy-index .
            WHEN 1 . &quot;  -----[ /xl/charts/colorsXXX.xml
              CHECK &lt;charts&gt;-chartcolors_ixml_doc IS BOUND .
              ls_relstab-id   = &apos;rId546&apos; .
              ls_relstab-type = c_contenttype-wb_chartcolors .
              CONCATENATE &apos;colors&apos; &lt;drawings&gt;-refer_id &apos;.xml&apos; INTO ls_relstab-target .

              xml_save( iv_path      = &lt;charts&gt;-chartcolors_path
                        iv_ixml_doc  = &lt;charts&gt;-chartcolors_ixml_doc ) .
              FREE &lt;charts&gt;-chartcolors_ixml_doc .

            WHEN 2 . &quot;  -----[ /xl/charts/styleXXX.xml
              CHECK &lt;charts&gt;-chartstyle_ixml_doc IS BOUND .
              ls_relstab-id   = &apos;rId545&apos; .
              ls_relstab-type = c_contenttype-wb_chartstyle .
              CONCATENATE &apos;style&apos;  &lt;drawings&gt;-refer_id &apos;.xml&apos; INTO ls_relstab-target .

              xml_save( iv_path      = &lt;charts&gt;-chartstyle_path
                        iv_ixml_doc  = &lt;charts&gt;-chartstyle_ixml_doc ) .
              FREE &lt;charts&gt;-chartstyle_ixml_doc .
          ENDCASE .
          COLLECT ls_relstab INTO lt_chartrels[] .
        ENDDO .
*       -----[ /xl/charts/_rels/chartXXX.xml.rels
        xml_relstab_set( iv_path    = &lt;charts&gt;-chart_path
                         it_relstab = lt_chartrels[] ) .

*       -----[ /xl/charts/chartXXX.xml ]

*       ---&lt; c:title &gt;
        DO 1 TIMES .
          CHECK &lt;charts&gt;-chart_title IS NOT INITIAL .

          CHECK &lt;charts&gt;-chart_ixml_doc IS BOUND .
          FREE lr_element-chart . CLEAR lr_element-chart .
          lr_element-chart = &lt;charts&gt;-chart_ixml_doc-&gt;find_from_name( name = c_tag-chart  namespace = c_tag-c  depth = 2 ) .
          CHECK lr_element-chart IS BOUND .
          FREE lr_element-title . CLEAR lr_element-title .
          lr_element-title = lr_element-chart-&gt;find_from_name( name = c_tag-title  namespace = c_tag-c  depth = 1 ) .
          CHECK lr_element-title IS BOUND .
          FREE lr_element-tx . CLEAR lr_element-tx .
          lr_element-tx = lr_element-title-&gt;find_from_name( name = c_tag-tx  namespace = c_tag-c  depth = 1 ) .
          IF lr_element-tx IS NOT BOUND .
            &quot; prepare node &lt; c:tx &gt;
            FREE lr_ixml_doc . CLEAR lr_ixml_doc .
            CONCATENATE
            &apos;&lt;c:tx xmlns:c=&quot;http://schemas.openxmlformats.org/drawingml/2006/chart&quot;&gt;&apos;
            &apos;&lt;c:rich&gt;&lt;a:bodyPr rot=&quot;-540000&quot; spcFirstLastPara=&quot;1&quot; vertOverflow=&quot;ellipsis&quot; wrap=&quot;square&quot; anchor&apos;
            &apos;=&quot;ctr&quot; anchorCtr=&quot;1&quot; xmlns:a=&quot;http://schemas.openxmlformats.org/drawingml/2006/main&quot; /&gt;&apos;
            &apos;&lt;a:lstStyle xmlns:a=&quot;http://schemas.openxmlformats.org/drawingml/2006/main&quot; /&gt;&apos;
            &apos;&lt;a:p xmlns:a=&quot;http://schemas.openxmlformats.org/drawingml/2006/main&quot;&gt;&lt;a:pPr&gt;&apos;
            &apos;&lt;a:defRPr sz=&quot;1400&quot; b=&quot;0&quot; i=&quot;0&quot; u=&quot;none&quot; strike=&quot;noStrike&quot; kern=&quot;1200&quot; spc=&quot;0&quot; baseline=&quot;0&quot;&gt;&lt;a:solidFill&gt;&apos;
            &apos;&lt;a:schemeClr val=&quot;tx1&quot;&gt;&lt;a:lumMod val=&quot;65000&quot; /&gt;&lt;a:lumOff val=&quot;35000&quot; /&gt;&lt;/a:schemeClr&gt;&lt;/a:solidFill&gt;&apos;
            &apos;&lt;a:latin typeface=&quot;+mn-lt&quot; /&gt;&lt;a:ea typeface=&quot;+mn-ea&quot; /&gt;&lt;a:cs typeface=&quot;+mn-cs&quot; /&gt;&lt;/a:defRPr&gt;&lt;/a:pPr&gt;&apos;
            &apos;&lt;a:r&gt;&lt;a:rPr lang=&quot;en-US&quot; /&gt;&lt;a:t&gt;DUMMY&lt;/a:t&gt;&lt;/a:r&gt;&lt;a:endParaRPr lang=&quot;ru-RU&quot; /&gt;&lt;/a:p&gt;&lt;/c:rich&gt;&lt;/c:tx&gt;&apos;
            INTO lv_string_tmp .
            lr_ixml_doc = xml_string_to_dom( iv_string = lv_string_tmp ) .
            CHECK lr_ixml_doc IS BOUND .
            lr_element-tx = lr_ixml_doc-&gt;find_from_name( name = c_tag-tx  namespace = c_tag-c  depth = 1 ) .
            &quot; insert node &lt; c:tx &gt; before node &lt; c:layout &gt;
            FREE lr_element-layout . CLEAR lr_element-layout .
            lr_element-layout = lr_element-title-&gt;find_from_name( name = c_tag-layout  namespace = c_tag-c  depth = 1 ) .
            CHECK lr_element-layout IS BOUND .
            lr_node-tx ?= lr_element-tx .
            lr_node-layout ?= lr_element-layout .
            lr_element-title-&gt;insert_child( new_child = lr_node-tx
                                            ref_child = lr_node-layout ) .
          ENDIF .
          CHECK lr_element-tx IS BOUND .
          FREE lr_ncol-r . CLEAR lr_ncol-r .
          lr_ncol-r = lr_element-tx-&gt;get_elements_by_tag_name( name = c_tag-r  namespace = c_tag-a ) .
          CHECK lr_ncol-r IS BOUND .
          DO . &quot; --&gt;&gt; loop at &lt; a:r &gt;
            lv_index = sy-index - 1 .
            lr_node-r = lr_ncol-r-&gt;get_item( index = lv_index ) .
            IF lr_node-r IS INITIAL. EXIT. ENDIF .
            IF lv_index GT 0 .
              lr_node-r-&gt;remove_node( ) .
              CHECK 1 = 2 .
            ENDIF .
            lr_element-r ?= lr_node-r-&gt;query_interface( ixml_iid_element ) .
            FREE lr_element-any . CLEAR lr_element-any .
            lr_element-any = lr_element-r-&gt;find_from_name( name = c_tag-t  namespace = c_tag-a  depth = 1 ) .
            CHECK lr_element-any IS BOUND .
            lr_element-any-&gt;set_value( &lt;charts&gt;-chart_title_tx ) .
          ENDDO .
        ENDDO .

        DO 1 TIMES .
          READ TABLE s_model-t_datasets ASSIGNING &lt;datasets&gt; WITH TABLE KEY id = &lt;charts&gt;-dataset_id .
          CHECK sy-subrc EQ 0 .
          READ TABLE &lt;datasets&gt;-t_refs ASSIGNING &lt;dataset_refs&gt; WITH TABLE KEY rt_path_1 = &lt;charts&gt;-dataset_rt_path_1 .
          CHECK sy-subrc EQ 0 .

          CHECK &lt;charts&gt;-chart_ixml_doc IS BOUND .
          FREE lr_element-chart . CLEAR lr_element-chart .
          lr_element-chart = &lt;charts&gt;-chart_ixml_doc-&gt;find_from_name( name = c_tag-chart  namespace = c_tag-c  depth = 2 ) .
          CHECK lr_element-chart IS BOUND .
          FREE lr_element-plotarea . CLEAR lr_element-plotarea .
          lr_element-plotarea = lr_element-chart-&gt;find_from_name( name = c_tag-plotarea  namespace = c_tag-c  depth = 1 ) .
          CHECK lr_element-plotarea IS BOUND .
          FREE lr_ncol-ser . CLEAR lr_ncol-ser .
          lr_ncol-ser = lr_element-plotarea-&gt;get_elements_by_tag_name( name = c_tag-ser  namespace = c_tag-c  depth = 2 ) .
          CHECK lr_ncol-ser IS BOUND .
          DO . &quot; --&gt;&gt; loop at &lt; c:lineChart &gt; &lt; c:ser &gt;
            lv_index = sy-index - 1 .
            lr_node-ser = lr_ncol-ser-&gt;get_item( index = lv_index ) .
            IF lr_node-ser IS INITIAL. EXIT. ENDIF .
            lr_element-ser ?= lr_node-ser-&gt;query_interface( ixml_iid_element ) .
            FREE lr_element-idx . CLEAR lr_element-idx .
            lr_element-idx = lr_element-ser-&gt;find_from_name( name = c_tag-idx  namespace = c_tag-c   depth = 1 ) .
            CHECK lr_element-idx IS BOUND .
            lv_idx = lr_element-idx-&gt;get_attribute( name = c_tag-val ) .

            READ TABLE &lt;charts&gt;-dataset_series_tab ASSIGNING &lt;dataset_series_tab&gt; WITH KEY seridx = lv_idx .
            CHECK sy-subrc EQ 0 .
            READ TABLE &lt;dataset_refs&gt;-t_fields ASSIGNING &lt;dataset_ref_fields&gt; WITH KEY field = &lt;dataset_series_tab&gt;-dtsfld .
            CHECK sy-subrc EQ 0 .

*           ---&lt; c:tx &gt;
            DO 1 TIMES .
              &quot; find Caption node
              FREE lr_element-tx . CLEAR lr_element-tx .
              lr_element-tx = lr_element-ser-&gt;find_from_name( name = c_tag-tx  namespace = c_tag-c   depth = 1 ) .


              IF lr_element-tx IS NOT BOUND .
                lr_element-sppr = lr_element-ser-&gt;find_from_name( name = c_tag-sppr  namespace = c_tag-c   depth = 1 ) .
                CHECK lr_element-sppr IS BOUND .
                lr_element-tx = &lt;charts&gt;-chart_ixml_doc-&gt;create_element( name = c_tag-tx  namespace = c_tag-c ) .
                CHECK lr_element-tx IS BOUND .
                lr_element-ref =
                &lt;charts&gt;-chart_ixml_doc-&gt;create_simple_element( name = c_tag-strref   namespace = c_tag-c   parent = lr_element-tx ) .
                &lt;charts&gt;-chart_ixml_doc-&gt;create_simple_element( name = c_tag-f        namespace = c_tag-c   parent = lr_element-ref ) .
                lr_node-sppr  ?= lr_element-sppr .
                lr_node-tx    ?= lr_element-tx .
                lr_element-ser-&gt;insert_child( new_child = lr_node-tx
                                              ref_child = lr_node-sppr ) .
              ENDIF .
              CHECK lr_element-tx IS BOUND .
              &quot; remove children
              DO .
                lr_node-any = lr_element-tx-&gt;get_first_child( ) .
                IF lr_node-any IS NOT BOUND . EXIT . ENDIF .
                lr_node-any-&gt;remove_node( ) .
              ENDDO .

              IF  &lt;charts&gt;-chart_series_title  IS NOT INITIAL
              AND &lt;dataset_ref_fields&gt;-caption_ref IS INITIAL .
                CLEAR &lt;charts&gt;-chart_series_title .
              ENDIF .

              CASE &lt;charts&gt;-chart_series_title .
                WHEN space .
                  lr_element-any =
                  &lt;charts&gt;-chart_ixml_doc-&gt;create_simple_element( name = c_tag-v  namespace = c_tag-c  parent = lr_element-tx ) .
                  CHECK lr_element-any IS BOUND .
                  lr_element-any-&gt;set_value( value = &lt;dataset_series_tab&gt;-sercap ) .
                WHEN OTHERS .
                  lr_element-ref =
                  &lt;charts&gt;-chart_ixml_doc-&gt;create_simple_element( name = c_tag-strref  namespace = c_tag-c  parent = lr_element-tx ) .
                  CHECK lr_element-ref IS BOUND .
                  lr_element-any =
                  &lt;charts&gt;-chart_ixml_doc-&gt;create_simple_element( name = c_tag-f  namespace = c_tag-c  parent = lr_element-ref ) .
                  CHECK lr_element-any IS BOUND .
                  lr_element-any-&gt;set_value( value = &lt;dataset_ref_fields&gt;-caption_ref ) .
              ENDCASE .
            ENDDO .

*           ---&lt; c:val &gt;
            DO 1 TIMES .
              &quot; find Value node
              FREE lr_element-val . CLEAR lr_element-val .
              lr_element-val = lr_element-ser-&gt;find_from_name( name = c_tag-val  namespace = c_tag-c   depth = 1 ) .
              IF lr_element-val IS NOT BOUND .
                lr_element-val = lr_element-ser-&gt;find_from_name( name = c_tag-yval  namespace = c_tag-c   depth = 1 ) .
              ENDIF .
              CHECK lr_element-val IS BOUND .
              &quot; set reference
              FREE lr_element-ref . CLEAR lr_element-ref .
              lr_element-ref = lr_element-val-&gt;find_from_name( name = c_tag-strref  namespace = c_tag-c   depth = 1 ) .
              IF lr_element-ref IS NOT BOUND .
                lr_element-ref = lr_element-val-&gt;find_from_name( name = c_tag-numref  namespace = c_tag-c   depth = 1 ) .
              ENDIF .
              CHECK lr_element-ref IS BOUND .
              FREE lr_element-any . CLEAR lr_element-any .
              lr_element-any = lr_element-ref-&gt;find_from_name( name = c_tag-f  namespace = c_tag-c   depth = 1 ) .
              CHECK lr_element-any IS BOUND .
              lr_element-any-&gt;set_value( value = &lt;dataset_ref_fields&gt;-ref ) .
              &quot; delete cache
              FREE lr_element-any . CLEAR lr_element-any .
              lr_element-any = lr_element-ref-&gt;find_from_name( name = c_tag-numcache  namespace = c_tag-c   depth = 1 ) .
              IF lr_element-any IS NOT BOUND .
                lr_element-any = lr_element-ref-&gt;find_from_name( name = c_tag-strcache  namespace = c_tag-c   depth = 1 ) .
              ENDIF .
              CHECK lr_element-any IS BOUND .
              lr_element-any-&gt;remove_node( ) .
            ENDDO .

*           ---&lt; c:cat &gt;
            DO 1 TIMES .
              READ TABLE &lt;charts&gt;-dataset_series_tab ASSIGNING &lt;dataset_series_tab&gt; WITH KEY seridx = c_chart_category_idx .
              IF sy-subrc NE 0
              OR &lt;dataset_series_tab&gt;-dtsfld IS INITIAL .
                READ TABLE &lt;charts&gt;-dataset_series_tab ASSIGNING &lt;dataset_series_tab&gt; WITH KEY seridx = lv_idx .
                CHECK sy-subrc EQ 0 .
              ENDIF .
              READ TABLE &lt;dataset_refs&gt;-t_fields ASSIGNING &lt;dataset_ref_fields&gt; WITH KEY field = &lt;dataset_series_tab&gt;-dtsfld .
              &quot; find Category node
              CHECK sy-subrc EQ 0 .
              FREE lr_element-cat . CLEAR lr_element-cat .
              lr_element-cat = lr_element-ser-&gt;find_from_name( name = c_tag-cat  namespace = c_tag-c   depth = 1 ) .
              IF lr_element-cat IS NOT BOUND .
                lr_element-cat = lr_element-ser-&gt;find_from_name( name = c_tag-xval  namespace = c_tag-c   depth = 1 ) .
              ENDIF .
              IF lr_element-cat IS NOT BOUND .
                CHECK lr_element-val IS BOUND .
                lr_element-cat = &lt;charts&gt;-chart_ixml_doc-&gt;create_element( name = c_tag-cat  namespace = c_tag-c ) .
                CHECK lr_element-cat IS BOUND .
                lr_element-ref =
                &lt;charts&gt;-chart_ixml_doc-&gt;create_simple_element( name = c_tag-strref   namespace = c_tag-c   parent = lr_element-cat ) .
                &lt;charts&gt;-chart_ixml_doc-&gt;create_simple_element( name = c_tag-f        namespace = c_tag-c   parent = lr_element-ref ) .
                lr_node-val ?= lr_element-val .
                lr_node-cat ?= lr_element-cat .
                lr_element-ser-&gt;insert_child( new_child = lr_node-cat
                                              ref_child = lr_node-val ) .
              ENDIF .
              CHECK lr_element-cat IS BOUND .
              &quot; set reference
              FREE lr_element-ref . CLEAR lr_element-ref .
              lr_element-ref = lr_element-cat-&gt;find_from_name( name = c_tag-strref  namespace = c_tag-c   depth = 1 ) .
              IF lr_element-ref IS NOT BOUND .
                lr_element-ref = lr_element-cat-&gt;find_from_name( name = c_tag-numref  namespace = c_tag-c   depth = 1 ) .
              ENDIF .
              CHECK lr_element-ref IS BOUND .
              FREE lr_element-any . CLEAR lr_element-any .
              lr_element-any = lr_element-ref-&gt;find_from_name( name = c_tag-f  namespace = c_tag-c   depth = 1 ) .
              CHECK lr_element-any IS BOUND .
              lr_element-any-&gt;set_value( value = &lt;dataset_ref_fields&gt;-ref ) .
              &quot; delete cache
              FREE lr_element-any . CLEAR lr_element-any .
              lr_element-any = lr_element-ref-&gt;find_from_name( name = c_tag-numcache  namespace = c_tag-c   depth = 1 ) .
              IF lr_element-any IS NOT BOUND .
                lr_element-any = lr_element-ref-&gt;find_from_name( name = c_tag-strcache  namespace = c_tag-c   depth = 1 ) .
              ENDIF .
              CHECK lr_element-any IS BOUND .
              lr_element-any-&gt;remove_node( ) .
            ENDDO .
          ENDDO .


*         AXIS Titles
          DO 2 TIMES .
            CASE sy-index .
              WHEN 1 .  &quot; first iteration: Category Axis Title

                lv_axis_title    = &lt;charts&gt;-chart_catax_title .
                lv_axis_title_tx = &lt;charts&gt;-chart_catax_title_tx .
                &quot; --&gt;&gt; find &lt; c:catAx &gt;
                FREE lr_element-axis . CLEAR lr_element-axis .
                lr_element-axis = lr_element-plotarea-&gt;find_from_name( name = c_tag-catax  namespace = c_tag-c   depth = 1 ) .

              WHEN 2 .  &quot; second iteration: Value Axis Title

                lv_axis_title    = &lt;charts&gt;-chart_valax_title .
                lv_axis_title_tx = &lt;charts&gt;-chart_valax_title_tx .
                &quot; --&gt;&gt; find &lt; c:valAx &gt;
                FREE lr_element-axis . CLEAR lr_element-axis .
                lr_element-axis = lr_element-plotarea-&gt;find_from_name( name = c_tag-valax  namespace = c_tag-c   depth = 1 ) .
            ENDCASE .

            CHECK lv_axis_title IS NOT INITIAL .
            CHECK lr_element-axis IS BOUND .

            CASE lv_axis_title .
              WHEN &apos;1&apos; .
                READ TABLE &lt;charts&gt;-dataset_series_tab ASSIGNING &lt;dataset_series_tab&gt; WITH KEY seridx = &apos;9999&apos; .
                CHECK sy-subrc EQ 0 .
                READ TABLE &lt;dataset_refs&gt;-t_fields ASSIGNING &lt;dataset_ref_fields&gt; WITH KEY field = &lt;dataset_series_tab&gt;-dtsfld .
                CHECK sy-subrc EQ 0 .
                CHECK &lt;dataset_ref_fields&gt;-ref IS NOT INITIAL .

              WHEN OTHERS .
            ENDCASE .


            &quot; --&gt;&gt; find &lt; c:title &gt;
            FREE lr_element-title . CLEAR lr_element-title .
            lr_element-title = lr_element-axis-&gt;find_from_name( name = c_tag-title  namespace = c_tag-c   depth = 1 ) .
            CHECK lr_element-title IS BOUND .

            &quot; --&gt;&gt; try to find &lt; c:tx &gt;
            FREE lr_element-tx . CLEAR lr_element-tx .
            lr_element-tx = lr_element-title-&gt;find_from_name( name = c_tag-tx  namespace = c_tag-c  depth = 1 ) .
            IF lr_element-tx IS NOT BOUND .
              &quot; prepare node &lt; c:tx &gt;
              FREE lr_ixml_doc . CLEAR lr_ixml_doc .
              CONCATENATE
              &apos;&lt;c:tx xmlns:c=&quot;http://schemas.openxmlformats.org/drawingml/2006/chart&quot;&gt;&apos;
              &apos;&lt;c:rich&gt;&lt;a:bodyPr xmlns:a=&quot;http://schemas.openxmlformats.org/drawingml/2006/main&quot; /&gt;&apos;
              &apos;&lt;a:lstStyle xmlns:a=&quot;http://schemas.openxmlformats.org/drawingml/2006/main&quot; /&gt;&apos;
              &apos;&lt;a:p xmlns:a=&quot;http://schemas.openxmlformats.org/drawingml/2006/main&quot;&gt;&lt;a:pPr&gt;&lt;a:defRPr /&gt;&apos;
              &apos;&lt;/a:pPr&gt;&lt;a:r&gt;&lt;a:rPr lang=&quot;ru-RU&quot; /&gt;&lt;a:t&gt;DUMMY&lt;/a:t&gt;&lt;/a:r&gt;&lt;/a:p&gt;&lt;/c:rich&gt;&lt;/c:tx&gt;&apos;
              INTO lv_string_tmp .
              lr_ixml_doc = xml_string_to_dom( iv_string = lv_string_tmp ) .
              CHECK lr_ixml_doc IS BOUND .
              lr_element-tx = lr_ixml_doc-&gt;find_from_name( name = c_tag-tx  namespace = c_tag-c  depth = 1 ) .
              &quot; insert node &lt; c:tx &gt; before node &lt; c:layout &gt;
              FREE lr_element-layout . CLEAR lr_element-layout .
              lr_element-layout = lr_element-title-&gt;find_from_name( name = c_tag-layout  namespace = c_tag-c  depth = 1 ) .
              CHECK lr_element-layout IS BOUND .
              lr_node-tx ?= lr_element-tx .
              lr_node-layout ?= lr_element-layout .
              lr_element-title-&gt;insert_child( new_child = lr_node-tx
                                              ref_child = lr_node-layout ) .
            ENDIF .
            CHECK lr_element-tx IS BOUND .

            &quot; --&gt;&gt; try to find &lt; c:strRef &gt;
            FREE lr_element-strref . CLEAR lr_element-strref .
            lr_element-strref = lr_element-tx-&gt;find_from_name( name = c_tag-strref  namespace = c_tag-c   depth = 1 ) .

            CASE lv_axis_title .
              WHEN &apos;1&apos; .
                IF lr_element-strref IS BOUND . &quot; Caption by cell reference
                  &quot; we need to just overwrite value

                  &quot; overwrite value of &lt;c:f&gt;
                  FREE lr_element-any . CLEAR lr_element-any .
                  lr_element-any = lr_element-strref-&gt;find_from_name( name = c_tag-f  namespace = c_tag-c   depth = 1 ) .
                  IF lr_element-any IS BOUND .
                    lr_element-any-&gt;set_value( value = &lt;dataset_ref_fields&gt;-caption_ref ) .
                  ENDIF .

                  &quot; remove &lt;c:strCache&gt;
                  FREE lr_element-any . CLEAR lr_element-any .
                  lr_element-any = lr_element-strref-&gt;find_from_name( name = c_tag-strcache  namespace = c_tag-c   depth = 1 ) .
                  IF lr_element-any IS BOUND .
                    lr_element-any-&gt;remove_node( ) .
                  ENDIF .

                ELSE .    &quot; Caption is hardcoded
                  &quot; we need to convert it to cell reference
                  &quot; find &lt;c:rich&gt;
                  FREE lr_element-rich . CLEAR lr_element-rich .
                  lr_element-rich = lr_element-tx-&gt;find_from_name( name = c_tag-rich  namespace = c_tag-c   depth = 1 ) .
                  CHECK lr_element-rich IS BOUND .

                  &quot; clone &lt;c:rich&gt; to &lt;c:txPr&gt;
                  FREE lr_node-txpr . CLEAR lr_node-txpr .
                  lr_node-txpr ?= lr_element-rich-&gt;clone( ) .
                  CHECK lr_node-txpr IS BOUND .

                  FREE lr_element-txpr . CLEAR lr_element-txpr .
                  lr_element-txpr ?= lr_node-txpr-&gt;query_interface( ixml_iid_element ) .
                  CHECK lr_element-txpr IS BOUND .

                  lr_node-txpr-&gt;set_name( name = c_tag-txpr ) .

                  &quot; delete &lt;a:r&gt; from &lt;c:txPr&gt;
                  FREE lr_element-r . CLEAR lr_element-r .
                  lr_element-r = lr_element-txpr-&gt;find_from_name( name = c_tag-r  namespace = c_tag-a   depth = 3 ) .
                  CHECK lr_element-r IS BOUND .
                  lr_element-r-&gt;remove_node( ) .

                  &quot; append &lt;c:txPr&gt; as child of &lt;c:title&gt; (under &lt;c:spPr&gt; )
                  lr_element-title-&gt;append_child( new_child = lr_node-txpr ) .

                  &quot; rename &lt;c:rich&gt; to &lt;c:strRef&gt; and remove all children
                  lr_element-ref = lr_element-rich .
                  lr_element-ref-&gt;set_name( name = c_tag-strref ) .
                  DO .
                    lr_node-any = lr_element-ref-&gt;get_first_child( ) .
                    IF lr_node-any IS NOT BOUND . EXIT . ENDIF .
                    lr_node-any-&gt;remove_node( ) .
                  ENDDO .
                  &quot; append &lt;c:f&gt; (with Caption ref.value) as child of &lt;c:strRef&gt;
                  &lt;charts&gt;-chart_ixml_doc-&gt;create_simple_element( name = c_tag-f  namespace = c_tag-c   parent = lr_element-ref  value = &lt;dataset_ref_fields&gt;-caption_ref ) .
                ENDIF .

              WHEN OTHERS .
                IF lr_element-strref IS BOUND . &quot; Caption by cell reference
                  &quot; we need to convert it to hardcoded value
                  &quot; find &lt;c:txPr&gt;
                  FREE lr_element-txpr . CLEAR lr_element-txpr .
                  lr_element-txpr = lr_element-title-&gt;find_from_name( name = c_tag-txpr  namespace = c_tag-c   depth = 1 ) .
                  CHECK lr_element-txpr IS BOUND .

                  &quot; clone &lt;c:txPr&gt; to &lt;c:rich&gt;
                  FREE lr_node-rich . CLEAR lr_node-rich .
                  lr_node-rich ?= lr_element-txpr-&gt;clone( ) .
                  CHECK lr_node-rich IS BOUND .

                  FREE lr_element-rich . CLEAR lr_element-rich .
                  lr_element-rich ?= lr_node-rich-&gt;query_interface( ixml_iid_element ) .
                  CHECK lr_element-rich IS BOUND .

                  lr_node-rich-&gt;set_name( name = c_tag-rich ) .
                  lr_element-txpr-&gt;remove_node( ) .

*                 insert &lt;c:rich&gt; instead of &lt;c:strRef&gt;
                  lr_node-strref ?= lr_element-strref .
                  lr_element-tx-&gt;replace_child( new_child = lr_node-rich
                                                old_child = lr_node-strref ) .

                  &quot; find &lt;a:p&gt;
                  FREE lr_element-p . CLEAR lr_element-p .
                  lr_element-p = lr_element-rich-&gt;find_from_name( name = c_tag-p  namespace = c_tag-a   depth = 1 ) .
                  CHECK lr_element-p IS BOUND .

                  &quot; remove &lt;a:endParaRPr&gt;
                  FREE lr_element-any . CLEAR lr_element-any .
                  lr_element-any = lr_element-p-&gt;find_from_name( name = c_tag-endpararpr  namespace = c_tag-a   depth = 1 ) .
                  IF lr_element-any IS BOUND .
                    lr_element-any-&gt;remove_node( ) .
                  ENDIF .

                  lr_element-r =
                  &lt;charts&gt;-chart_ixml_doc-&gt;create_simple_element( name = c_tag-r  namespace = c_tag-a  parent = lr_element-p ) .
                  CHECK lr_element-r IS BOUND .
                  lr_element-t =
                  &lt;charts&gt;-chart_ixml_doc-&gt;create_simple_element( name = c_tag-t  namespace = c_tag-a  parent = lr_element-r  value = lv_axis_title_tx ) .

                ELSE .    &quot; Caption is hardcoded
                  &quot; we need to just overwrite value
                  FREE lr_ncol-r . CLEAR lr_ncol-r .
                  lr_ncol-r = lr_element-tx-&gt;get_elements_by_tag_name( name = c_tag-r  namespace = c_tag-a ) .
                  CHECK lr_ncol-r IS BOUND .
                  DO . &quot; --&gt;&gt; loop at &lt; a:r &gt;
                    lv_index = sy-index - 1 .
                    lr_node-r = lr_ncol-r-&gt;get_item( index = lv_index ) .
                    IF lr_node-r IS INITIAL. EXIT. ENDIF .
                    IF lv_index GT 0 .
                      lr_node-r-&gt;remove_node( ) .
                      CHECK 1 = 2 .
                    ENDIF .
                    lr_element-r ?= lr_node-r-&gt;query_interface( ixml_iid_element ) .
                    FREE lr_element-any . CLEAR lr_element-any .
                    lr_element-any = lr_element-r-&gt;find_from_name( name = c_tag-t  namespace = c_tag-a  depth = 1 ) .
                    CHECK lr_element-any IS BOUND .
                    lr_element-any-&gt;set_value( lv_axis_title_tx ) .
                  ENDDO .
                ENDIF .
            ENDCASE .
          ENDDO .

        ENDDO .

        xml_save( iv_path      = &lt;charts&gt;-chart_path
                  iv_ixml_doc  = &lt;charts&gt;-chart_ixml_doc ) .
        FREE &lt;charts&gt;-chart_ixml_doc .
      ENDLOOP .
    ENDLOOP .


*======================================================================
*   save Bitmap files into &apos;/xl/media&apos; folder
*======================================================================
    LOOP AT s_model-t_media ASSIGNING &lt;media&gt; .
      CONCATENATE  c_path-mediafolder+1 &apos;/image&apos; &lt;media&gt;-id &apos;.jpeg&apos;
      INTO lv_string_tmp .
      CONDENSE lv_string_tmp NO-GAPS .
      r_zipfolder-&gt;add( name    = lv_string_tmp
                        content	= &lt;media&gt;-media_rawdata ) .
    ENDLOOP .

*======================================================================
*   save vmlDrawings
*======================================================================
    LOOP AT s_model-t_vmldrawings ASSIGNING &lt;vmldrawings&gt; .

      xml_save( iv_path      = &lt;vmldrawings&gt;-path
                iv_ixml_doc  = &lt;vmldrawings&gt;-ixml_doc ) .

      CLEAR lt_vmldrawingsrels .
      LOOP AT &lt;vmldrawings&gt;-t_rels ASSIGNING &lt;vmldrawings_rels&gt; .
        MOVE-CORRESPONDING &lt;vmldrawings_rels&gt; TO ls_vmldrawingsrels .
        APPEND ls_vmldrawingsrels TO lt_vmldrawingsrels .

*     -----[ /xl/media/imageXXX.emf
        r_zipfolder-&gt;add( name    = &lt;vmldrawings_rels&gt;-media_path
                          content	= &lt;vmldrawings_rels&gt;-media_rawdata ) .
      ENDLOOP .

*     -----[ /xl/drawings/_rels/vmldrawingsXXX.vml.rels
      xml_relstab_set( iv_path    = &lt;vmldrawings&gt;-path
                       it_relstab = lt_vmldrawingsrels[] ) .
    ENDLOOP .



*&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;
*======================================================================
*   Fill \xl\sharedStrings.xml
*======================================================================
*   According SAP NOTE 1229110 (Lack of memory when working with large amounts of XML data),
*     here we implement step-by-step (by piecemeal) rendering of XML-file
*======================================================================
*&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;

    IF s_model-t_sharedstrings[] IS NOT INITIAL .
      CLEAR lv_bookmark_string  .
      CLEAR lv_bookmark_xstring .
      CLEAR lv_bookmark_offset  .
      CLEAR lv_xml_xstring      .
      FREE  lr_streamfactory    .
      FREE  lr_encoding         .
      FREE  lr_ixml             .

*     create XML-DOM
      lt_sharedstrings[] = s_model-t_sharedstrings[] .

      lr_ixml = cl_ixml=&gt;create( ) .
      s_model-ixml_doc_sharedstrings = lr_ixml-&gt;create_document( ) .

      lr_element-sst =     &quot; Root-node
      s_model-ixml_doc_sharedstrings-&gt;create_simple_element(
                        name      = c_tag-sst
                        parent    = s_model-ixml_doc_sharedstrings ) .

      lr_element-sst-&gt;set_attribute( name = c_tag-xmlns  value = c_contenttype-wb_main ) .

      lv_string_tmp = LINES( lt_sharedstrings ) .
      CONDENSE lv_string_tmp .
      lr_element-sst-&gt;set_attribute( name = c_tag-count  value = lv_string_tmp ) .
      lr_element-sst-&gt;set_attribute( name = c_tag-uniquecount  value = lv_string_tmp ) .

*     add bookmark node (for splitting XML Xstring) to XML-DOM
      lr_element-si =
      s_model-ixml_doc_sharedstrings-&gt;create_simple_element(
                      name      = lc_tag_bookmark
                      parent    = lr_element-sst ) .

*     render XML-DOM to Xstring
      lv_xml_xstring =
      xml_save( iv_ixml_doc  = s_model-ixml_doc_sharedstrings
                iv_path      = c_path-sharedstrings ) .

*     split rendered XML Xstring at bookmark into two parts (BEGIN and END)
      CONCATENATE &apos;&lt;&apos; lc_tag_bookmark &apos;/&gt;&apos; INTO lv_bookmark_string . &quot; --&gt;&gt; bookmark
      CALL FUNCTION &apos;SCMS_STRING_TO_XSTRING&apos;
        EXPORTING
          text   = lv_bookmark_string
        IMPORTING
          buffer = lv_bookmark_xstring
        EXCEPTIONS
          OTHERS = 0.

      CLEAR lv_bookmark_offset .
      FIND lv_bookmark_xstring IN lv_xml_xstring
      MATCH OFFSET lv_bookmark_offset IN BYTE MODE .
      IF  sy-subrc EQ 0
      AND lv_bookmark_offset NE 0 .
        ls_ostream_xstring-beg = lv_xml_xstring(lv_bookmark_offset) .
        ADD 12 TO lv_bookmark_offset .
        ls_ostream_xstring-end = lv_xml_xstring+lv_bookmark_offset .
      ENDIF .

*     generate MIDDLE part Xstring: add nodes and immediately render it
      lr_ixml = cl_ixml=&gt;create( ) .
      lr_streamfactory = lr_ixml-&gt;create_stream_factory( ) .
      lr_ostream = lr_streamfactory-&gt;create_ostream_xstring( string = ls_ostream_xstring-mid ) .
      lr_encoding = lr_ixml-&gt;create_encoding( character_set = c_character_set   byte_order = 0 ) .
      lr_ostream-&gt;set_encoding( encoding = lr_encoding ) .

      LOOP AT lt_sharedstrings ASSIGNING &lt;sharedstrings&gt; .
        IF  &lt;sharedstrings&gt;-si_node IS BOUND .
          &lt;sharedstrings&gt;-si_node-&gt;render( ostream = lr_ostream  recursive = abap_on ).
        ELSE .
          lr_element-si = s_model-ixml_doc_sharedstrings-&gt;create_element( name = c_tag-si ) .
          lr_element-t  = s_model-ixml_doc_sharedstrings-&gt;create_simple_element(
                          name      = c_tag-t
                          parent    = lr_element-si
                          value     = &lt;sharedstrings&gt;-value ) .
          IF &lt;sharedstrings&gt;-value IS NOT INITIAL .
            lv_char1 = &lt;sharedstrings&gt;-value .
            IF lv_char1 EQ space .
              lr_element-t-&gt;set_attribute(
                          name      = c_tag-space_
                          namespace = c_tag-xml
                          value     = c_tag-preserve ) .
            ENDIF .
          ENDIF .
          lr_element-si-&gt;render( ostream = lr_ostream  recursive = abap_on ) .
          lr_element-si-&gt;remove_node( ) .
        ENDIF .
      ENDLOOP .

      lr_ostream-&gt;close( ) .
      FREE lr_ostream .
      FREE lr_encoding .
      FREE lr_streamfactory .
      FREE lr_ixml .
      FREE s_model-t_sharedstrings[] .

*     concatenate all gotten substrings into whole XML-file Xstring
*      and save it to ZIP-folder
      CONCATENATE
        ls_ostream_xstring-beg
        ls_ostream_xstring-mid
        ls_ostream_xstring-end
      INTO lv_xml_xstring IN BYTE MODE .
      FREE ls_ostream_xstring .

      lv_string_tmp = c_path-sharedstrings .
      SHIFT lv_string_tmp LEFT DELETING LEADING &apos;/&apos; .

      r_zipfolder-&gt;delete( EXPORTING name = lv_string_tmp
                           EXCEPTIONS OTHERS = 0 ) .

      r_zipfolder-&gt;add( name     = lv_string_tmp
                        content  = lv_xml_xstring ) .
      FREE lv_xml_xstring .
    ENDIF .


*&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;
*======================================================================
*   Fill \xl\calcChain.xml
*======================================================================
*   According SAP NOTE 1229110 (Lack of memory when working with large amounts of XML data),
*     here we implement step-by-step (by piecemeal) rendering of XML-file
*======================================================================
*&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;

    IF s_model-t_calcchain[] IS NOT INITIAL .
      CLEAR lv_bookmark_string  .
      CLEAR lv_bookmark_xstring .
      CLEAR lv_bookmark_offset  .
      CLEAR lv_xml_xstring      .
      FREE  lr_streamfactory    .
      FREE  lr_encoding         .
      FREE  lr_ixml             .

*     create XML-DOM
      lr_ixml = cl_ixml=&gt;create( ) .
      s_model-ixml_doc_calcchain = lr_ixml-&gt;create_document( ) .

      lr_element-calcchain =     &quot; Root-node
      s_model-ixml_doc_calcchain-&gt;create_simple_element(
                        name      = c_tag-calcchain
                        parent    = s_model-ixml_doc_calcchain ) .

      lr_element-calcchain-&gt;set_attribute( name = c_tag-xmlns  value = c_contenttype-wb_main ) .

*     add bookmark node (for splitting XML Xstring) to XML-DOM
      lr_element-si =
      s_model-ixml_doc_calcchain-&gt;create_simple_element(
                      name      = lc_tag_bookmark
                      parent    = lr_element-calcchain ) .

*     render XML-DOM to Xstring
      lv_xml_xstring =
      xml_save( iv_ixml_doc  = s_model-ixml_doc_calcchain
                iv_path      = c_path-calcchain ) .

*     split rendered XML Xstring at bookmark into two parts (BEGIN and END)
      CONCATENATE &apos;&lt;&apos; lc_tag_bookmark &apos;/&gt;&apos; INTO lv_bookmark_string . &quot; --&gt;&gt; bookmark
      CALL FUNCTION &apos;SCMS_STRING_TO_XSTRING&apos;
        EXPORTING
          text   = lv_bookmark_string
        IMPORTING
          buffer = lv_bookmark_xstring
        EXCEPTIONS
          OTHERS = 0.

      CLEAR lv_bookmark_offset .
      FIND lv_bookmark_xstring IN lv_xml_xstring
      MATCH OFFSET lv_bookmark_offset IN BYTE MODE .
      IF  sy-subrc EQ 0
      AND lv_bookmark_offset NE 0 .
        ls_ostream_xstring-beg = lv_xml_xstring(lv_bookmark_offset) .
        ADD 12 TO lv_bookmark_offset .
        ls_ostream_xstring-end = lv_xml_xstring+lv_bookmark_offset .
      ENDIF .

*     generate MIDDLE part Xstring: add nodes and immediately render it
      lr_ixml = cl_ixml=&gt;create( ) .
      lr_streamfactory = lr_ixml-&gt;create_stream_factory( ) .
      lr_ostream = lr_streamfactory-&gt;create_ostream_xstring( string = ls_ostream_xstring-mid ) .
      lr_encoding = lr_ixml-&gt;create_encoding( character_set = c_character_set   byte_order = 0 ) .
      lr_ostream-&gt;set_encoding( encoding = lr_encoding ) .

      LOOP AT s_model-t_calcchain ASSIGNING &lt;calcchain&gt; .
        lr_element-c = s_model-ixml_doc_calcchain-&gt;create_element( name = c_tag-c ) .

        lv_y_char = &lt;calcchain&gt;-y . CONDENSE lv_y_char NO-GAPS .
        conv_nc( EXPORTING iv_number = &lt;calcchain&gt;-x
                 IMPORTING ev_char  = lv_x_char ) .
        CONCATENATE lv_x_char lv_y_char INTO lv_string_tmp .
        lr_element-c-&gt;set_attribute( name = c_tag-r  value = lv_string_tmp ) .

        lv_string_tmp = &lt;calcchain&gt;-sheet_index . CONDENSE lv_string_tmp NO-GAPS .
        lr_element-c-&gt;set_attribute( name = c_tag-i  value = lv_string_tmp ) .

        lr_element-c-&gt;render( ostream = lr_ostream  recursive = abap_on ) .
        lr_element-c-&gt;remove_node( ) .
      ENDLOOP .

      lr_ostream-&gt;close( ) .
      FREE lr_ostream .
      FREE lr_encoding .
      FREE lr_ostream .
      FREE lr_streamfactory .
      FREE lr_ixml .
      FREE s_model-t_calcchain[] .

*     concatenate all gotten substrings into whole XML-file Xstring
*      and save it to ZIP-folder
      CONCATENATE
        ls_ostream_xstring-beg
        ls_ostream_xstring-mid
        ls_ostream_xstring-end
      INTO lv_xml_xstring IN BYTE MODE .
      FREE ls_ostream_xstring .

      lv_string_tmp = c_path-calcchain .
      SHIFT lv_string_tmp LEFT DELETING LEADING &apos;/&apos; .

      r_zipfolder-&gt;delete( EXPORTING name = lv_string_tmp
                           EXCEPTIONS OTHERS = 0 ) .

      r_zipfolder-&gt;add( name     = lv_string_tmp
                        content  = lv_xml_xstring ) .
      FREE lv_xml_xstring .
    ENDIF .

  ENDMETHOD .                    &quot; finalize_model
  METHOD begin_sheet .

    CLEAR s_sheets .
    FREE  s_sheets .

*   Prepare Name and ID the sheet
    s_sheets-index = LINES( s_model-t_sheets ) + 1 .
    s_sheets-num   = s_sheets-index + 549 .
    CONDENSE s_sheets-num .

    IF iv_sheetname IS NOT INITIAL .
      s_sheets-name = iv_sheetname .
    ENDIF .
    sheet_name_validate( CHANGING cv_sheetname = s_sheets-name ) .
    rv_sheet_name = s_sheets-name .

    CONCATENATE &apos;sheet&apos; s_sheets-num INTO s_sheets-name_int .
    CONCATENATE &apos;rId&apos;   s_sheets-num INTO s_sheets-id .

    s_sheets-active = iv_active .
    s_sheets-sheetdata_runtime-hidden = iv_hidden .
    s_sheets-sheetdata_runtime-sheetprotection = is_sheetprotection .

*   Prepare XML-document of the sheet
    DATA:
      lr_ixml             TYPE REF TO if_ixml ,
      lr_rootnode         TYPE REF TO if_ixml_node .

    lr_ixml = cl_ixml=&gt;create( ) .
    s_sheets-ixml_doc = lr_ixml-&gt;create_document( ) .
    lr_rootnode = iv_ixml_doc-&gt;clone( ) .
    s_sheets-ixml_doc ?= lr_rootnode-&gt;query_interface( ixml_iid_document ) .

    xml_remove_nodes( iv_ixml_doc = s_sheets-ixml_doc   iv_name = c_tag-col ) .
    xml_remove_nodes( iv_ixml_doc = s_sheets-ixml_doc   iv_name = c_tag-cols ) .
    xml_remove_nodes( iv_ixml_doc = s_sheets-ixml_doc   iv_name = c_tag-row ) .
    xml_remove_nodes( iv_ixml_doc = s_sheets-ixml_doc   iv_name = c_tag-mergecells ) .
    xml_remove_nodes( iv_ixml_doc = s_sheets-ixml_doc   iv_name = c_tag-drawing ) .
    xml_remove_nodes( iv_ixml_doc = s_sheets-ixml_doc   iv_name = c_tag-selection ) .
    xml_remove_nodes( iv_ixml_doc = s_sheets-ixml_doc   iv_name = c_tag-rowbreaks ) .
    xml_remove_nodes( iv_ixml_doc = s_sheets-ixml_doc   iv_name = c_tag-colbreaks ) .
    xml_remove_nodes( iv_ixml_doc = s_sheets-ixml_doc   iv_name = c_tag-datavalidations ) .

    IF s_sheets-sheetdata_runtime-sheetprotection-mode NE c_sheetprotection_mode-from_template .
      xml_remove_nodes( iv_ixml_doc = s_sheets-ixml_doc   iv_name = c_tag-sheetprotection ) .
    ENDIF .

*   Prepare Relations with the sheet
    s_sheets-sheetdata_runtime-t_sheetrels[] = it_sheetrels[] .

    DELETE s_sheets-sheetdata_runtime-t_sheetrels
     WHERE type EQ c_contenttype-wb_drawing .

*   &apos;summarybelow&apos; and &apos;summaryright&apos; properties
    v_summarybelow = iv_summarybelow .
    v_summaryright = iv_summaryright .


*   vmlDrawings
    DO 1 TIMES .
      CHECK is_vmldrawings-id IS NOT INITIAL .

      READ TABLE s_model-t_vmldrawings TRANSPORTING NO FIELDS
      WITH TABLE KEY id = is_vmldrawings-id .
      CHECK sy-subrc NE 0 .

      INSERT is_vmldrawings INTO TABLE s_model-t_vmldrawings .
    ENDDO .



  ENDMETHOD .                    &quot;begin_sheet
  METHOD finalize_sheet .

    DATA:
      lr_ixml             TYPE REF TO if_ixml ,
      lr_ixml_doc_drawing TYPE REF TO if_ixml_document ,
      BEGIN OF lr_element ,
        worksheet         TYPE REF TO if_ixml_element ,
        dimension         TYPE REF TO if_ixml_element ,
        sheetformatpr     TYPE REF TO if_ixml_element ,
        sheetdata         TYPE REF TO if_ixml_element ,
        sheetview         TYPE REF TO if_ixml_element ,
        mergecells        TYPE REF TO if_ixml_element ,
        mergecell         TYPE REF TO if_ixml_element ,
        drawing           TYPE REF TO if_ixml_element ,
        wsdr              TYPE REF TO if_ixml_element ,
        any               TYPE REF TO if_ixml_element ,
        row               TYPE REF TO if_ixml_element ,
        cols              TYPE REF TO if_ixml_element ,
        col               TYPE REF TO if_ixml_element ,
        c                 TYPE REF TO if_ixml_element ,
        f                 TYPE REF TO if_ixml_element ,
        twocellanchor     TYPE REF TO if_ixml_element ,
        from              TYPE REF TO if_ixml_element ,
        to                TYPE REF TO if_ixml_element ,
        clientdata        TYPE REF TO if_ixml_element ,
        blip              TYPE REF TO if_ixml_element ,
        cnvpr             TYPE REF TO if_ixml_element ,
        pic               TYPE REF TO if_ixml_element ,
        chart             TYPE REF TO if_ixml_element ,
        nvpicpr           TYPE REF TO if_ixml_element ,
        cnvpicpr          TYPE REF TO if_ixml_element ,
        piclocks          TYPE REF TO if_ixml_element ,
        blipfill          TYPE REF TO if_ixml_element ,
        stretch           TYPE REF TO if_ixml_element ,
        sppr              TYPE REF TO if_ixml_element ,
        xfrm              TYPE REF TO if_ixml_element ,
        off               TYPE REF TO if_ixml_element ,
        ext               TYPE REF TO if_ixml_element ,
        prstgeom          TYPE REF TO if_ixml_element ,
        sheetprotection   TYPE REF TO if_ixml_element ,
        rowbreaks         TYPE REF TO if_ixml_element ,
        colbreaks         TYPE REF TO if_ixml_element ,
        brk               TYPE REF TO if_ixml_element ,
        datavalidations   TYPE REF TO if_ixml_element ,
        datavalidation    TYPE REF TO if_ixml_element ,
      END   OF lr_element ,
      BEGIN OF lr_node ,
        twocellanchor     TYPE REF TO if_ixml_node ,
        cnvpr             TYPE REF TO if_ixml_node ,
        ext               TYPE REF TO if_ixml_node ,
        to                TYPE REF TO if_ixml_node ,
      END   OF lr_node ,
      lr_text             TYPE REF TO if_ixml_text ,
      lr_cnvpr_ncol       TYPE REF TO if_ixml_node_collection ,
      lv_string_tmp       TYPE string ,
      lv_string_fname     TYPE string ,
      lv_string_value     TYPE string ,
      lv_string_sqref     TYPE string ,
      lv_spans            TYPE string ,
      lv_name             TYPE string ,
      lv_value            TYPE string ,
      lv_min              TYPE string ,
      lv_max              TYPE string ,
      lv_index            TYPE syindex ,
      lv_subrc            TYPE sysubrc ,
      lv_x_char           TYPE ty_char15 ,
      lv_y_char           TYPE ty_char15 ,
      ls_relstab          TYPE ty_s_relstab ,
      lv_sheetpath        TYPE string ,
      lt_drawingrels      TYPE ty_t_relstab ,
      lv_drawingnumber    TYPE string ,
      lt_chartrels        TYPE ty_t_relstab ,
      ls_cells            TYPE ty_s_cells ,
      ls_nopgbrk_range    TYPE ty_s_nopgbrk_range ,
      lt_nopgbrk_range    TYPE ty_t_nopgbrk_range .
    FIELD-SYMBOLS:
      &lt;cells&gt;             TYPE ty_s_cells ,
      &lt;mergecells&gt;        TYPE ty_s_mergecells ,
      &lt;drawings&gt;          TYPE ty_s_drawings ,
      &lt;charts&gt;            TYPE ty_s_charts ,
      &lt;colprop&gt;           TYPE ty_s_colprop ,
      &lt;rowprop&gt;           TYPE ty_s_rowprop ,
      &lt;nopgbrk_range&gt;     TYPE ty_s_nopgbrk_range ,
      &lt;manual_pgbrk&gt;      TYPE ty_s_manual_pgbrk ,
      &lt;datavalid&gt;         TYPE ty_s_datavalid_rt ,
      &lt;coordinates&gt;       TYPE ty_s_coordinates ,
      &lt;value&gt;             TYPE ANY ,
      &lt;datasets&gt;          TYPE ty_s_datasets ,
      &lt;dataset_refs&gt;      TYPE ty_s_dataset_refs ,
      &lt;cellrng_name&gt;      TYPE ty_s_cellrng_name ,
      &lt;dataset_ref_fields&gt; TYPE ty_s_dataset_ref_fields .

    CONCATENATE v_text-t222     &quot; --&gt;&gt;  text: Sheet is being prepared
                &apos;(&apos; s_sheets-name &apos;)&apos; INTO lv_string_tmp SEPARATED BY space .
    progressbar( iv_text = lv_string_tmp ) .

    lr_element-worksheet =
    s_sheets-ixml_doc-&gt;find_from_name(
                          name      = c_tag-worksheet
                          depth     = 1 ) .
    CHECK lr_element-worksheet IS BOUND .

*======================================================================
*   set data dimension
*======================================================================
    DO 1 TIMES .
      lr_element-dimension =
      s_sheets-ixml_doc-&gt;find_from_name(
                            name      = c_tag-dimension
                            depth     = 2 ) .
      CHECK lr_element-dimension IS BOUND .

      IF  s_sheets-sheetdata_runtime-beg_x IS INITIAL
      AND s_sheets-sheetdata_runtime-beg_y IS INITIAL
      AND s_sheets-sheetdata_runtime-end_x IS INITIAL
      AND s_sheets-sheetdata_runtime-end_y IS INITIAL .
        lv_string_tmp = &apos;A1&apos; .
      ELSE .
        conv_ref_nc( EXPORTING iv_beg_x = s_sheets-sheetdata_runtime-beg_x
                               iv_beg_y = s_sheets-sheetdata_runtime-beg_y
                               iv_end_x = s_sheets-sheetdata_runtime-end_x
                               iv_end_y = s_sheets-sheetdata_runtime-end_y
                     IMPORTING ev_ref = lv_string_tmp ) .
      ENDIF .

      lr_element-dimension-&gt;set_attribute(
                            name      = c_tag-ref
                            value     = lv_string_tmp ) .
    ENDDO .

*======================================================================
*   set active sheet
*======================================================================
    DO 1 TIMES .
      IF  s_sheets-active IS NOT INITIAL
      AND s_model-v_active_sheet_id IS INITIAL .
        s_model-v_active_sheet_id = s_sheets-id .
      ENDIF .

      lr_element-sheetview =
      s_sheets-ixml_doc-&gt;find_from_name(
                            name      = c_tag-sheetview
                            depth     = 3 ) .
      CHECK lr_element-sheetview IS BOUND .

      lr_element-sheetview-&gt;remove_attribute(
                            name      = c_tag-tabselected ) .
    ENDDO .


*======================================================================
*   set outline level
*======================================================================
    IF s_sheets-sheetdata_runtime-outlinelevelrow IS NOT INITIAL
    OR s_sheets-sheetdata_runtime-outlinelevelcol IS NOT INITIAL .
      lr_element-sheetformatpr =
      s_sheets-ixml_doc-&gt;find_from_name(
                            name      = c_tag-sheetformatpr
                            depth     = 2 ) .

      IF s_sheets-sheetdata_runtime-outlinelevelrow IS NOT INITIAL .
        lv_string_tmp = s_sheets-sheetdata_runtime-outlinelevelrow .
        CONDENSE lv_string_tmp NO-GAPS .
        lr_element-sheetformatpr-&gt;set_attribute(
                              name      = c_tag-outlinelevelrow
                              value     = lv_string_tmp ) .
      ENDIF .
      IF s_sheets-sheetdata_runtime-outlinelevelcol IS NOT INITIAL .
        lv_string_tmp = s_sheets-sheetdata_runtime-outlinelevelcol .
        CONDENSE lv_string_tmp NO-GAPS .
        lr_element-sheetformatpr-&gt;set_attribute(
                              name      = c_tag-outlinelevelcol
                              value     = lv_string_tmp ) .
      ENDIF .
    ENDIF .

*======================================================================
*   set a tamper protection (if required)
*======================================================================
    IF v_protect IS NOT INITIAL .
*     compose a &apos;sheetProtection&apos; node
      lr_element-sheetprotection =
      s_sheets-ixml_doc-&gt;create_element( name = c_tag-sheetprotection ) .
      lr_element-sheetprotection-&gt;set_attribute( name = c_tag-password    value = &apos;D692&apos; ) . &quot; pass: 1677718881
      lr_element-sheetprotection-&gt;set_attribute( name = c_tag-sheet       value = &apos;1&apos; ) .
      lr_element-sheetprotection-&gt;set_attribute( name = c_tag-objects     value = &apos;1&apos; ) .
      lr_element-sheetprotection-&gt;set_attribute( name = c_tag-scenarios   value = &apos;1&apos; ) .

*     insert composed element
      xml_insert_element(
          EXPORTING iv_name_element   = c_tag-sheetprotection
                    ir_ixml_element   = lr_element-sheetprotection
                    it_elemsequence   = t_elemsequence_worksheet
           CHANGING cr_ixml_parent    = lr_element-worksheet ) .
    ELSE .

      CASE s_sheets-sheetdata_runtime-sheetprotection-mode .
        WHEN c_sheetprotection_mode-off
          OR c_sheetprotection_mode-from_template .
*         ... do nothing
        WHEN c_sheetprotection_mode-from_context
          OR c_sheetprotection_mode-static .

*         compose a &apos;sheetProtection&apos; node
          lr_element-sheetprotection =
          s_sheets-ixml_doc-&gt;create_element( name = c_tag-sheetprotection ) .
          IF s_sheets-sheetdata_runtime-sheetprotection-password IS NOT INITIAL .
            lr_element-sheetprotection-&gt;set_attribute( name = c_tag-password   value = s_sheets-sheetdata_runtime-sheetprotection-password ) .
          ENDIF .
          lr_element-sheetprotection-&gt;set_attribute( name = c_tag-sheet        value = &apos;1&apos; ) .

          CASE s_sheets-sheetdata_runtime-sheetprotection-selectlockedcells .
            WHEN space OR &apos;0&apos; .   lr_element-sheetprotection-&gt;set_attribute( name = c_tag-selectlockedcells    value = &apos;1&apos; ) .
          ENDCASE .
          CASE s_sheets-sheetdata_runtime-sheetprotection-selectunlockedcells .
            WHEN space OR &apos;0&apos; .   lr_element-sheetprotection-&gt;set_attribute( name = c_tag-selectunlockedcells  value = &apos;1&apos; ) .
          ENDCASE .
          CASE s_sheets-sheetdata_runtime-sheetprotection-formatcells .
            WHEN space OR &apos;0&apos; .
            WHEN OTHERS .         lr_element-sheetprotection-&gt;set_attribute( name = c_tag-formatcells          value = &apos;0&apos; ) .
          ENDCASE .
          CASE s_sheets-sheetdata_runtime-sheetprotection-formatcolumns .
            WHEN space OR &apos;0&apos; .
            WHEN OTHERS .         lr_element-sheetprotection-&gt;set_attribute( name = c_tag-formatcolumns        value = &apos;0&apos; ) .
          ENDCASE .
          CASE s_sheets-sheetdata_runtime-sheetprotection-formatrows .
            WHEN space OR &apos;0&apos; .
            WHEN OTHERS .         lr_element-sheetprotection-&gt;set_attribute( name = c_tag-formatrows           value = &apos;0&apos; ) .
          ENDCASE .
          CASE s_sheets-sheetdata_runtime-sheetprotection-insertcolumns .
            WHEN space OR &apos;0&apos; .
            WHEN OTHERS .         lr_element-sheetprotection-&gt;set_attribute( name = c_tag-insertcolumns        value = &apos;0&apos; ) .
          ENDCASE .
          CASE s_sheets-sheetdata_runtime-sheetprotection-insertrows .
            WHEN space OR &apos;0&apos; .
            WHEN OTHERS .         lr_element-sheetprotection-&gt;set_attribute( name = c_tag-insertrows           value = &apos;0&apos; ) .
          ENDCASE .
          CASE s_sheets-sheetdata_runtime-sheetprotection-inserthyperlinks .
            WHEN space OR &apos;0&apos; .
            WHEN OTHERS .         lr_element-sheetprotection-&gt;set_attribute( name = c_tag-inserthyperlinks     value = &apos;0&apos; ) .
          ENDCASE .
          CASE s_sheets-sheetdata_runtime-sheetprotection-deletecolumns .
            WHEN space OR &apos;0&apos; .
            WHEN OTHERS .         lr_element-sheetprotection-&gt;set_attribute( name = c_tag-deletecolumns        value = &apos;0&apos; ) .
          ENDCASE .
          CASE s_sheets-sheetdata_runtime-sheetprotection-deleterows .
            WHEN space OR &apos;0&apos; .
            WHEN OTHERS .         lr_element-sheetprotection-&gt;set_attribute( name = c_tag-deleterows           value = &apos;0&apos; ) .
          ENDCASE .
          CASE s_sheets-sheetdata_runtime-sheetprotection-sort .
            WHEN space OR &apos;0&apos; .
            WHEN OTHERS .         lr_element-sheetprotection-&gt;set_attribute( name = c_tag-sort                 value = &apos;0&apos; ) .
          ENDCASE .
          CASE s_sheets-sheetdata_runtime-sheetprotection-autofilter .
            WHEN space OR &apos;0&apos; .
            WHEN OTHERS .         lr_element-sheetprotection-&gt;set_attribute( name = c_tag-autofilter           value = &apos;0&apos; ) .
          ENDCASE .
          CASE s_sheets-sheetdata_runtime-sheetprotection-pivottables .
            WHEN space OR &apos;0&apos; .
            WHEN OTHERS .         lr_element-sheetprotection-&gt;set_attribute( name = c_tag-pivottables           value = &apos;0&apos; ) .
          ENDCASE .
          CASE s_sheets-sheetdata_runtime-sheetprotection-objects .
            WHEN space OR &apos;0&apos; .   lr_element-sheetprotection-&gt;set_attribute( name = c_tag-objects              value = &apos;1&apos; ) .
          ENDCASE .
          CASE s_sheets-sheetdata_runtime-sheetprotection-scenarios .
            WHEN space OR &apos;0&apos; .   lr_element-sheetprotection-&gt;set_attribute( name = c_tag-scenarios            value = &apos;1&apos; ) .
          ENDCASE .

*         insert composed element
          xml_insert_element(
              EXPORTING iv_name_element   = c_tag-sheetprotection
                        ir_ixml_element   = lr_element-sheetprotection
                        it_elemsequence   = t_elemsequence_worksheet
               CHANGING cr_ixml_parent    = lr_element-worksheet ) .
      ENDCASE .
    ENDIF .

*======================================================================
*   set drawings
*======================================================================
    IF s_sheets-sheetdata_runtime-t_drawings[] IS NOT INITIAL .

*     SHEET: compose a &apos;drawing&apos; node
      lr_element-drawing =
      s_sheets-ixml_doc-&gt;create_element(
                        name      = c_tag-drawing ) .

      lv_string_tmp = s_sheets-id .
      lr_element-drawing-&gt;set_attribute(
                        name      = c_tag-id
                        namespace = c_tag-r
                        value     = lv_string_tmp ) .
*     insert element
      xml_insert_element(
          EXPORTING iv_name_element   = c_tag-drawing
                    ir_ixml_element   = lr_element-drawing
                    it_elemsequence   = t_elemsequence_worksheet
           CHANGING cr_ixml_parent 	  = lr_element-worksheet ) .


*     SHEET RELATIONS: prepare
      CLEAR ls_relstab .
      ls_relstab-id     = s_sheets-id .
      ls_relstab-type   = c_contenttype-wb_drawing .
      CONCATENATE  c_path-drawingsfolder_ &apos;/drawing&apos; s_sheets-num &apos;.xml&apos;
      INTO ls_relstab-target .
      CONDENSE ls_relstab-target .
      APPEND ls_relstab TO s_sheets-sheetdata_runtime-t_sheetrels[] .

*     DRAWING: create XML-document
      lr_ixml = cl_ixml=&gt;create( ) .
      lr_ixml_doc_drawing = lr_ixml-&gt;create_document( ) .

*     DRAWING: add root node
      lr_element-wsdr =
      lr_ixml_doc_drawing-&gt;create_simple_element(
                            name = c_tag-wsdr  namespace = c_tag-xdr  parent  = lr_ixml_doc_drawing ).
      lr_element-wsdr-&gt;set_attribute( name = c_tag-xdr  namespace = c_tag-xmlns  value  = c_contenttype-wb_drawings ) .
      lr_element-wsdr-&gt;set_attribute( name = c_tag-a    namespace = c_tag-xmlns  value  = c_contenttype-wb_drawings_main ) .

      CLEAR lv_drawingnumber .
      LOOP AT s_sheets-sheetdata_runtime-t_drawings[] ASSIGNING &lt;drawings&gt; .
        CASE &lt;drawings&gt;-drawing_type .
          WHEN c_drawing_type-vector   &quot;= V e c t o r   g r a p h i c s ==========================
            OR c_drawing_type-chart .  &quot;= C h a r t ==============================================

*           -----[ /xl/drawings/drawingXXX.xml ]  copy &apos;twoCellAnchor&apos; node as it was in the template,
*                                                 and overwrite dataset references,
*                                                 runtime location coordinates, etc.
            lr_node-twocellanchor = &lt;drawings&gt;-twocellanchor_node-&gt;clone( ) .
            lr_element-twocellanchor ?= lr_node-twocellanchor-&gt;query_interface( ixml_iid_element ) .

*           -----&lt; xdr:from &gt;
            lr_element-from = lr_element-twocellanchor-&gt;find_from_name(
                              name = c_tag-from    namespace = c_tag-xdr  depth = 2 ) .
            lr_element-any  = lr_element-from-&gt;find_from_name(
                              name = c_tag-col     namespace = c_tag-xdr  depth = 1 ) .
            lv_string_tmp = &lt;drawings&gt;-beg_x . CONDENSE lv_string_tmp .
            lr_element-any-&gt;set_value( value = lv_string_tmp ) .
            lr_element-any  = lr_element-from-&gt;find_from_name(
                              name = c_tag-coloff  namespace = c_tag-xdr  depth = 1 ) .
            lr_element-any-&gt;set_value( value = &apos;0&apos; ) .
            lr_element-any  = lr_element-from-&gt;find_from_name(
                              name = c_tag-row     namespace = c_tag-xdr  depth = 1 ) .
            lv_string_tmp = &lt;drawings&gt;-beg_y . CONDENSE lv_string_tmp .
            lr_element-any-&gt;set_value( value = lv_string_tmp ) .
            lr_element-any  = lr_element-from-&gt;find_from_name(
                              name = c_tag-rowoff  namespace = c_tag-xdr  depth = 1 ) .
            lr_element-any-&gt;set_value( value = &apos;0&apos; ) .

            IF  &lt;drawings&gt;-drawing_size_h EQ 0
            AND &lt;drawings&gt;-drawing_size_w EQ 0 .
*             -----&lt; xdr:to &gt;
              lr_element-to   = lr_element-twocellanchor-&gt;find_from_name(
                                name = c_tag-to      namespace = c_tag-xdr  depth = 2 ) .
              lr_element-any  = lr_element-to-&gt;find_from_name(
                                name = c_tag-col     namespace = c_tag-xdr  depth = 1 ) .
              lv_string_tmp = &lt;drawings&gt;-end_x . CONDENSE lv_string_tmp .
              lr_element-any-&gt;set_value( value = lv_string_tmp ) .
              lr_element-any  = lr_element-to-&gt;find_from_name(
                                name = c_tag-coloff  namespace = c_tag-xdr  depth = 1 ) .
              lr_element-any-&gt;set_value( value = &apos;0&apos; ) .
              lr_element-any  = lr_element-to-&gt;find_from_name(
                                name = c_tag-row     namespace = c_tag-xdr  depth = 1 ) .
              lv_string_tmp = &lt;drawings&gt;-end_y . CONDENSE lv_string_tmp .
              lr_element-any-&gt;set_value( value = lv_string_tmp ) .
              lr_element-any  = lr_element-to-&gt;find_from_name(
                                name = c_tag-rowoff  namespace = c_tag-xdr  depth = 1 ) .
              lr_element-any-&gt;set_value( value = &apos;0&apos; ) .
            ELSE .


              lr_element-to   = lr_element-twocellanchor-&gt;find_from_name(
                                name = c_tag-to      namespace = c_tag-xdr  depth = 2 ) .
*             -----&lt; xdr:ext &gt;
              lr_element-ext = lr_ixml_doc_drawing-&gt;create_element(
                                name = c_tag-ext  namespace = c_tag-xdr  ) .
              lv_string_tmp = &lt;drawings&gt;-drawing_size_w . CONDENSE lv_string_tmp .
              lr_element-ext-&gt;set_attribute( name = c_tag-cx   value  = lv_string_tmp ) .
              lv_string_tmp = &lt;drawings&gt;-drawing_size_h . CONDENSE lv_string_tmp .
              lr_element-ext-&gt;set_attribute( name = c_tag-cy   value  = lv_string_tmp ) .

*             rename twocellanchor by onecellanchor
              lr_node-twocellanchor-&gt;set_name( name = c_tag-onecellanchor ) .

*             replace
              lr_node-to  ?= lr_element-to .
              lr_node-ext ?= lr_element-ext .
              lr_node-twocellanchor-&gt;replace_child(
                                old_child = lr_node-to  new_child = lr_node-ext ) .
            ENDIF .


*           -----&lt; xdr:cNvPr &gt;
            lr_cnvpr_ncol =
            lr_element-twocellanchor-&gt;get_elements_by_tag_name( name = c_tag-cnvpr  namespace  = c_tag-xdr ) .
            CHECK lr_cnvpr_ncol IS BOUND .
            DO .
              lv_index = sy-index - 1 .
              lr_node-cnvpr = lr_cnvpr_ncol-&gt;get_item( index = lv_index ) .
              IF lr_node-cnvpr IS INITIAL. EXIT. ENDIF .
              lr_element-cnvpr ?= lr_node-cnvpr-&gt;query_interface( ixml_iid_element ) .

              ADD 1 TO lv_drawingnumber . CONDENSE lv_drawingnumber .
              CONCATENATE &apos;Object_&apos; lv_drawingnumber INTO lv_string_tmp .
              lr_element-cnvpr-&gt;set_attribute( name = c_tag-name    value  = lv_string_tmp ) .
              lr_element-cnvpr-&gt;set_attribute( name = c_tag-id      value  = lv_drawingnumber ) .
            ENDDO .

*           -----
            IF &lt;drawings&gt;-drawing_type EQ c_drawing_type-chart .
              READ TABLE s_model-t_charts ASSIGNING &lt;charts&gt; WITH TABLE KEY id = &lt;drawings&gt;-refer_id .
              CHECK sy-subrc EQ 0 .
*           -----[ prepare paths ]
              CONCATENATE  c_path-chartsfolder_ &apos;/chart&apos;  &lt;drawings&gt;-refer_id &apos;.xml&apos; INTO &lt;charts&gt;-chart_path_ .
              CONCATENATE  c_path-chartsfolder  &apos;/chart&apos;  &lt;drawings&gt;-refer_id &apos;.xml&apos; INTO &lt;charts&gt;-chart_path  .
              CONCATENATE  c_path-chartsfolder  &apos;/style&apos;  &lt;drawings&gt;-refer_id &apos;.xml&apos; INTO &lt;charts&gt;-chartstyle_path .
              CONCATENATE  c_path-chartsfolder  &apos;/colors&apos; &lt;drawings&gt;-refer_id &apos;.xml&apos; INTO &lt;charts&gt;-chartcolors_path .

*           -----[ /xl/drawings/_rels/drawingXXX.xml.rels ]
              CONCATENATE &apos;rId&apos; &lt;drawings&gt;-refer_id INTO ls_relstab-id .
              ls_relstab-type   = c_contenttype-wb_chart .
              ls_relstab-target = &lt;charts&gt;-chart_path_ .
              COLLECT ls_relstab INTO lt_drawingrels[] .

*           -----&lt; c:chart &gt;
              lr_element-chart = lr_element-twocellanchor-&gt;find_from_name(
                                name = c_tag-chart   namespace = c_tag-c  depth = 4 ) .
              CONCATENATE &apos;rId&apos; &lt;drawings&gt;-refer_id INTO lv_string_tmp .
              lr_element-chart-&gt;set_attribute( name = c_tag-id  namespace = c_tag-r  value  = lv_string_tmp ) .
            ENDIF .
*           -----
            lr_element-wsdr-&gt;append_child( new_child = lr_node-twocellanchor ) .

          WHEN c_drawing_type-bitmap . &quot;= B i t m a p   g r a p h i c s ==========================

*           -----[ /xl/drawings/_rels/drawingXXX.xml.rels ]
            CONCATENATE &apos;rId&apos; &lt;drawings&gt;-refer_id INTO ls_relstab-id .
            ls_relstab-type = c_contenttype-wb_image .
            CONCATENATE  c_path-mediafolder_ &apos;/image&apos; &lt;drawings&gt;-refer_id &apos;.jpeg&apos; INTO ls_relstab-target .
            COLLECT ls_relstab INTO lt_drawingrels[] .

*           -----[ /xl/drawings/drawingXXX.xml ] Build &apos;twoCellAnchor&apos; node manually

            IF  &lt;drawings&gt;-drawing_size_h EQ 0
            AND &lt;drawings&gt;-drawing_size_w EQ 0 .
*             -----&lt; xdr:twoCellAnchor &gt;
              lr_element-twocellanchor = lr_ixml_doc_drawing-&gt;create_simple_element(
                  name = c_tag-twocellanchor  namespace = c_tag-xdr  parent  = lr_element-wsdr ) .
            ELSE .
*             -----&lt; xdr:oneCellAnchor &gt;
              lr_element-twocellanchor = lr_ixml_doc_drawing-&gt;create_simple_element(
                  name = c_tag-onecellanchor  namespace = c_tag-xdr  parent  = lr_element-wsdr ) .
            ENDIF .
*           -----&lt; xdr:from &gt;
            lr_element-from = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-from  namespace = c_tag-xdr  parent  = lr_element-twocellanchor ) .
            lv_string_tmp = &lt;drawings&gt;-beg_x . CONDENSE lv_string_tmp .
            lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-col  namespace = c_tag-xdr value = lv_string_tmp  parent  = lr_element-from ) .
            lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-coloff  namespace = c_tag-xdr value = &apos;0&apos;  parent  = lr_element-from ) .
            lv_string_tmp = &lt;drawings&gt;-beg_y . CONDENSE lv_string_tmp .
            lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-row  namespace = c_tag-xdr value = lv_string_tmp  parent  = lr_element-from ) .
            lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-rowoff  namespace = c_tag-xdr value = &apos;0&apos;  parent  = lr_element-from ) .

            IF  &lt;drawings&gt;-drawing_size_h EQ 0
            AND &lt;drawings&gt;-drawing_size_w EQ 0 .
*             -----&lt; xdr:to &gt;
              lr_element-to = lr_ixml_doc_drawing-&gt;create_simple_element(
                  name = c_tag-to  namespace = c_tag-xdr  parent  = lr_element-twocellanchor ) .
              lv_string_tmp = &lt;drawings&gt;-end_x . CONDENSE lv_string_tmp .
              lr_ixml_doc_drawing-&gt;create_simple_element(
                  name = c_tag-col  namespace = c_tag-xdr value = lv_string_tmp  parent  = lr_element-to ) .
              lr_ixml_doc_drawing-&gt;create_simple_element(
                  name = c_tag-coloff  namespace = c_tag-xdr value = &apos;0&apos;  parent  = lr_element-to ) .
              lv_string_tmp = &lt;drawings&gt;-end_y . CONDENSE lv_string_tmp .
              lr_ixml_doc_drawing-&gt;create_simple_element(
                  name = c_tag-row  namespace = c_tag-xdr value = lv_string_tmp  parent  = lr_element-to ) .
              lr_ixml_doc_drawing-&gt;create_simple_element(
                  name = c_tag-rowoff  namespace = c_tag-xdr value = &apos;0&apos;  parent  = lr_element-to ) .
            ELSE .
*             -----&lt; xdr:ext &gt;
              lr_element-ext = lr_ixml_doc_drawing-&gt;create_simple_element(
                  name = c_tag-ext  namespace = c_tag-xdr  parent  = lr_element-twocellanchor ) .
              lv_string_tmp = &lt;drawings&gt;-drawing_size_w . CONDENSE lv_string_tmp .
              lr_element-ext-&gt;set_attribute( name = c_tag-cx   value  = lv_string_tmp ) .
              lv_string_tmp = &lt;drawings&gt;-drawing_size_h . CONDENSE lv_string_tmp .
              lr_element-ext-&gt;set_attribute( name = c_tag-cy   value  = lv_string_tmp ) .
            ENDIF .


*           -----&lt; xdr:pic &gt;
            lr_element-pic = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-pic  namespace = c_tag-xdr  parent  = lr_element-twocellanchor ) .
*           -----====
            lr_element-nvpicpr = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-nvpicpr  namespace = c_tag-xdr  parent  = lr_element-pic ) .
            lr_element-cnvpr = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-cnvpr  namespace = c_tag-xdr  parent  = lr_element-nvpicpr ) .
            ADD 1 TO lv_drawingnumber . CONDENSE lv_drawingnumber .
            CONCATENATE &apos;Object_&apos; lv_drawingnumber INTO lv_string_tmp .
            lr_element-cnvpr-&gt;set_attribute( name = c_tag-id      value  = lv_drawingnumber ) .
            lr_element-cnvpr-&gt;set_attribute( name = c_tag-name    value  = lv_string_tmp ) .
            lr_element-cnvpr-&gt;set_attribute( name = c_tag-descr   value  = lv_string_tmp ) .

            lr_element-cnvpicpr = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-cnvpicpr  namespace = c_tag-xdr  parent  = lr_element-nvpicpr ) .
            lr_element-piclocks = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-piclocks  namespace = c_tag-a  parent  = lr_element-cnvpicpr ) .
            lr_element-piclocks-&gt;set_attribute( name = c_tag-nochangeaspect    value  = &apos;1&apos; ) .
*           -----====
            lr_element-blipfill = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-blipfill  namespace = c_tag-xdr  parent  = lr_element-pic ) .
            lr_element-blip = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-blip    namespace = c_tag-a  parent  = lr_element-blipfill ) .
            lr_element-blip-&gt;set_attribute( name = c_tag-r  namespace = c_tag-xmlns  value  = c_contenttype-wb ) .
            lr_element-blip-&gt;set_attribute( name = c_tag-embed  namespace = c_tag-r  value  = ls_relstab-id ) .
            lr_element-stretch = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-stretch    namespace = c_tag-a  parent  = lr_element-blipfill ) .
            lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-fillrect   namespace = c_tag-a  parent  = lr_element-stretch ) .
*           -----====
            lr_element-sppr = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-sppr  namespace = c_tag-xdr  parent  = lr_element-pic ) .
            lr_element-xfrm = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-xfrm  namespace = c_tag-a  parent  = lr_element-sppr ) .
            lr_element-off = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-off  namespace = c_tag-a  parent  = lr_element-xfrm ) .
            lr_element-off-&gt;set_attribute( name = c_tag-x   value  = &apos;0&apos; ) .
            lr_element-off-&gt;set_attribute( name = c_tag-y   value  = &apos;0&apos; ) .
            lr_element-ext = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-ext  namespace = c_tag-a  parent  = lr_element-xfrm ) .
            lr_element-ext-&gt;set_attribute( name = c_tag-cx  value  = &apos;0&apos; ) .
            lr_element-ext-&gt;set_attribute( name = c_tag-cy  value  = &apos;0&apos; ) .
            lr_element-prstgeom = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-prstgeom  namespace = c_tag-a  parent  = lr_element-sppr ) .
            lr_element-prstgeom-&gt;set_attribute( name = c_tag-prst  value  = c_tag-rect ) .
            lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-avlst  namespace = c_tag-a  parent  = lr_element-prstgeom ) .
*           -----
            lr_element-clientdata = lr_ixml_doc_drawing-&gt;create_simple_element(
                name = c_tag-clientdata  namespace = c_tag-xdr  parent  = lr_element-twocellanchor ) .
        ENDCASE .
      ENDLOOP .

*============ drawing
      CONCATENATE c_path-drawingsfolder &apos;/drawing&apos; s_sheets-num &apos;.xml&apos;
            INTO s_sheets-sheetdata_runtime-drawing_path .
      CONDENSE s_sheets-sheetdata_runtime-drawing_path .

      xml_save( iv_path      = s_sheets-sheetdata_runtime-drawing_path
                iv_ixml_doc  = lr_ixml_doc_drawing ) .
      FREE lr_ixml_doc_drawing .

*============ drawing relations
      xml_relstab_set( iv_path    = s_sheets-sheetdata_runtime-drawing_path
                       it_relstab = lt_drawingrels[] ) .
    ENDIF .


*======================================================================
*   optimize no-Page-Break areas
*======================================================================
    SORT s_sheets-sheetdata_runtime-t_nopgbrk_range
      BY top  beg_y end_y
         left beg_x end_x .
    DELETE ADJACENT DUPLICATES FROM s_sheets-sheetdata_runtime-t_nopgbrk_range
    COMPARING ALL FIELDS .

    LOOP AT s_sheets-sheetdata_runtime-t_nopgbrk_range INTO ls_nopgbrk_range .
      LOOP AT lt_nopgbrk_range ASSIGNING &lt;nopgbrk_range&gt;
        WHERE top     EQ ls_nopgbrk_range-top
          AND beg_y   LE ls_nopgbrk_range-end_y
          AND end_y   GE ls_nopgbrk_range-beg_y
          AND left    EQ ls_nopgbrk_range-left
          AND beg_x   LE ls_nopgbrk_range-end_x
          AND end_x   GE ls_nopgbrk_range-beg_x .
        IF &lt;nopgbrk_range&gt;-beg_y GT ls_nopgbrk_range-beg_y .
          &lt;nopgbrk_range&gt;-beg_y = ls_nopgbrk_range-beg_y .
        ENDIF .
        IF &lt;nopgbrk_range&gt;-end_y LT ls_nopgbrk_range-end_y .
          &lt;nopgbrk_range&gt;-end_y = ls_nopgbrk_range-end_y .
        ENDIF .
        IF &lt;nopgbrk_range&gt;-beg_x GT ls_nopgbrk_range-beg_x .
          &lt;nopgbrk_range&gt;-beg_x = ls_nopgbrk_range-beg_x .
        ENDIF .
        IF &lt;nopgbrk_range&gt;-end_x LT ls_nopgbrk_range-end_x .
          &lt;nopgbrk_range&gt;-end_x = ls_nopgbrk_range-end_x .
        ENDIF .
      ENDLOOP .
      CHECK sy-subrc NE 0 .

      APPEND ls_nopgbrk_range TO lt_nopgbrk_range .
    ENDLOOP .

    s_sheets-sheetdata_runtime-t_nopgbrk_range[] = lt_nopgbrk_range[] .


*&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;
*======================================================================
*   According SAP NOTE 1229110 (Lack of memory when working with large amounts of XML data),
*     here we implement step-by-step (by piecemeal) rendering of XML-file
*
*----------------------------------------------------------------------
*   NOW we have XML-DOM prepared above, we&apos;ll use it as Dummy-XML.
*   NEXT, we perform the following steps:
*
*   1) render the Dummy-XML to Xstring
*   2) split rendered Dummy-XML-Xstring into several substrings (parts)
*        at tags of nodes, which expecting large amount of data
*   3) render large data nodes to it&apos;s own substrings
*   4) concatenate all gotten substrings into whole XML-file Xstring
*      and save in into ZIP-folder
*======================================================================
*&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;

    DATA:
      lr_streamfactory    TYPE REF TO if_ixml_stream_factory ,
      lr_ostream          TYPE REF TO if_ixml_ostream ,
      lr_encoding         TYPE REF TO if_ixml_encoding ,
      lr_renderer         TYPE REF TO if_ixml_renderer .
    DATA:
      lv_bookmark_string  TYPE string ,
      lv_bookmark_xstring TYPE xstring ,
      lv_bookmark_offset  TYPE i ,
      lv_bookmark_length  TYPE i ,
      lv_xml_xstring      TYPE xstring ,
      BEGIN OF ls_ostream_xstring ,
        cols1             TYPE xstring ,
        cols2             TYPE xstring ,
        rows1             TYPE xstring ,
        rows2             TYPE xstring ,
        merg1             TYPE xstring ,
        merg2             TYPE xstring ,
        rbrk1             TYPE xstring ,
        rbrk2             TYPE xstring ,
        cbrk1             TYPE xstring ,
        cbrk2             TYPE xstring ,
        dtvl1             TYPE xstring ,
        dtvl2             TYPE xstring ,
        tail              TYPE xstring ,
      END   OF ls_ostream_xstring .
    CONSTANTS:
      BEGIN OF lc_tag_bookmark ,
        cols              TYPE string   VALUE &apos;BmarkCols&apos; , &quot; &apos;&lt;BmarkCols/&gt;&apos;
        rows              TYPE string   VALUE &apos;BmarkRows&apos; , &quot; &apos;&lt;BmarkRows/&gt;&apos;
        merg              TYPE string   VALUE &apos;BmarkMerg&apos; , &quot; &apos;&lt;BmarkMerg/&gt;&apos;
        rbrk              TYPE string   VALUE &apos;BmarkRbrk&apos; , &quot; &apos;&lt;BmarkRbrk/&gt;&apos;
        cbrk              TYPE string   VALUE &apos;BmarkCbrk&apos; , &quot; &apos;&lt;BmarkCbrk/&gt;&apos;
        dtvl              TYPE string   VALUE &apos;BmarkDtvl&apos; , &quot; &apos;&lt;BmarkDtvl/&gt;&apos;
      END   OF lc_tag_bookmark .

*======================================================================
*   0) Supplement of Dummy-XML:
*      Insert nodes (which expect large amount of data).
*        Each of that nodes contain single children bookmark-node.
*      In further, this bookmark-node will be used for splitting XML-Xstring
*======================================================================

*   insert node &apos;cols&apos; with children bookmark-node &apos;BmarkCols&apos;
    IF s_sheets-sheetdata_runtime-t_colprop[] IS NOT INITIAL .
      lr_element-cols =
      s_sheets-ixml_doc-&gt;create_element( name = c_tag-cols ) .
      s_sheets-ixml_doc-&gt;create_simple_element( name = lc_tag_bookmark-cols  parent = lr_element-cols ) .

      xml_insert_element(
          EXPORTING iv_name_element   = c_tag-cols
                    ir_ixml_element   = lr_element-cols
                    it_elemsequence   = t_elemsequence_worksheet
           CHANGING cr_ixml_parent    = lr_element-worksheet ) .
    ENDIF .

*   insert node &apos;sheetData&apos; with children bookmark-node &apos;BmarkRows&apos;
    FREE lr_element-sheetdata .
    lr_element-sheetdata =
    s_sheets-ixml_doc-&gt;find_from_name( name = c_tag-sheetdata  depth = 2 ) .
    s_sheets-ixml_doc-&gt;create_simple_element( name = lc_tag_bookmark-rows  parent = lr_element-sheetdata ) .

*   insert node &apos;mergeCells&apos; with children bookmark-node &apos;BmarkMerg&apos;
    IF s_sheets-sheetdata_runtime-t_mergecells[] IS NOT INITIAL .
      lr_element-mergecells =
      s_sheets-ixml_doc-&gt;create_element( name = c_tag-mergecells ) .

      lv_string_tmp = LINES( s_sheets-sheetdata_runtime-t_mergecells ) . CONDENSE lv_string_tmp .
      lr_element-mergecells-&gt;set_attribute( name = c_tag-count  value = lv_string_tmp ) .

      s_sheets-ixml_doc-&gt;create_simple_element( name = lc_tag_bookmark-merg  parent = lr_element-mergecells ) .

      xml_insert_element(
          EXPORTING iv_name_element   = c_tag-mergecells
                    ir_ixml_element   = lr_element-mergecells
                    it_elemsequence   = t_elemsequence_worksheet
           CHANGING cr_ixml_parent 	  = lr_element-worksheet ) .
    ENDIF .

*   insert node &apos;rowBreaks&apos; with children bookmark-node &apos;BmarkRbrk&apos;
    IF s_sheets-sheetdata_runtime-t_manual_pgbrk_row[] IS NOT INITIAL .
      SORT s_sheets-sheetdata_runtime-t_manual_pgbrk_row BY id .
      DELETE ADJACENT DUPLICATES FROM s_sheets-sheetdata_runtime-t_manual_pgbrk_row
      COMPARING ALL FIELDS .

      lr_element-rowbreaks =
      s_sheets-ixml_doc-&gt;create_element( name = c_tag-rowbreaks ) .

      lv_string_tmp = LINES( s_sheets-sheetdata_runtime-t_manual_pgbrk_row[] ) . CONDENSE lv_string_tmp .
      lr_element-rowbreaks-&gt;set_attribute( name  = c_tag-count              value = lv_string_tmp ) .
      lr_element-rowbreaks-&gt;set_attribute( name  = c_tag-manualbreakcount   value = lv_string_tmp ) .

      s_sheets-ixml_doc-&gt;create_simple_element( name = lc_tag_bookmark-rbrk  parent = lr_element-rowbreaks ) .

      xml_insert_element(
          EXPORTING iv_name_element   = c_tag-rowbreaks
                    ir_ixml_element   = lr_element-rowbreaks
                    it_elemsequence   = t_elemsequence_worksheet
           CHANGING cr_ixml_parent    = lr_element-worksheet ) .
    ENDIF .

*   insert node &apos;colBreaks&apos; with children bookmark-node &apos;BmarkCbrk&apos;
    IF s_sheets-sheetdata_runtime-t_manual_pgbrk_col[] IS NOT INITIAL .
      SORT s_sheets-sheetdata_runtime-t_manual_pgbrk_col BY id .
      DELETE ADJACENT DUPLICATES FROM s_sheets-sheetdata_runtime-t_manual_pgbrk_col
      COMPARING ALL FIELDS .

      lr_element-colbreaks =
      s_sheets-ixml_doc-&gt;create_element( name = c_tag-colbreaks ) .

      lv_string_tmp = LINES( s_sheets-sheetdata_runtime-t_manual_pgbrk_col[] ) . CONDENSE lv_string_tmp .
      lr_element-colbreaks-&gt;set_attribute( name  = c_tag-count            value = lv_string_tmp ) .
      lr_element-colbreaks-&gt;set_attribute( name  = c_tag-manualbreakcount value = lv_string_tmp ) .

      s_sheets-ixml_doc-&gt;create_simple_element( name = lc_tag_bookmark-cbrk  parent = lr_element-colbreaks ) .

      xml_insert_element(
          EXPORTING iv_name_element   = c_tag-colbreaks
                    ir_ixml_element   = lr_element-colbreaks
                    it_elemsequence   = t_elemsequence_worksheet
           CHANGING cr_ixml_parent    = lr_element-worksheet ) .
    ENDIF .

*   insert node &apos;dataValidations&apos; with children bookmark-node &apos;BmarkDtvl&apos;
    LOOP AT s_sheets-sheetdata_runtime-t_datavalid[] ASSIGNING &lt;datavalid&gt; .
      CHECK &lt;datavalid&gt;-t_coordinates[] IS INITIAL .
      DELETE s_sheets-sheetdata_runtime-t_datavalid[] .
    ENDLOOP .

    IF s_sheets-sheetdata_runtime-t_datavalid[] IS NOT INITIAL .
      lr_element-datavalidations =
      s_sheets-ixml_doc-&gt;create_element( name = c_tag-datavalidations ) .

      lv_string_tmp = LINES( s_sheets-sheetdata_runtime-t_datavalid[] ) . CONDENSE lv_string_tmp .
      lr_element-datavalidations-&gt;set_attribute( name  = c_tag-count      value = lv_string_tmp ) .

      s_sheets-ixml_doc-&gt;create_simple_element( name = lc_tag_bookmark-dtvl  parent = lr_element-datavalidations ) .

      xml_insert_element(
          EXPORTING iv_name_element   = c_tag-datavalidations
                    ir_ixml_element   = lr_element-datavalidations
                    it_elemsequence   = t_elemsequence_worksheet
           CHANGING cr_ixml_parent    = lr_element-worksheet ) .
    ENDIF .

*======================================================================
*   1) render the Dummy-XML to Xstring
*======================================================================
    s_sheets-ixml_doc-&gt;set_standalone( standalone = abap_true ).
    lr_ixml = cl_ixml=&gt;create( ) .
    lr_streamfactory = lr_ixml-&gt;create_stream_factory( ) .
    lr_ostream = lr_streamfactory-&gt;create_ostream_xstring( string = ls_ostream_xstring-tail ) .
    lr_encoding = lr_ixml-&gt;create_encoding( character_set = c_character_set
                                            byte_order    = 0 ) .
    lr_ostream-&gt;set_encoding( encoding = lr_encoding ) .
    lr_renderer = lr_ixml-&gt;create_renderer( ostream  = lr_ostream
                                            document = s_sheets-ixml_doc ) .
    lr_renderer-&gt;render( ) .

    lr_ostream-&gt;close( ) .
    FREE lr_ostream .
    FREE lr_encoding .
    FREE lr_ostream .
    FREE lr_streamfactory .
    FREE lr_ixml .

*======================================================================
*   2) split rendered Dummy-XML-Xstring (at bookmarks) into several parts
*======================================================================
    DO .
      lv_index = sy-index .
      CASE lv_index .
        WHEN 1 .      lv_bookmark_string = lc_tag_bookmark-cols .
        WHEN 2 .      lv_bookmark_string = lc_tag_bookmark-rows .
        WHEN 3 .      lv_bookmark_string = lc_tag_bookmark-merg .
        WHEN 4 .      lv_bookmark_string = lc_tag_bookmark-rbrk .
        WHEN 5 .      lv_bookmark_string = lc_tag_bookmark-cbrk .
        WHEN 6 .      lv_bookmark_string = lc_tag_bookmark-dtvl .
        WHEN OTHERS . EXIT .
      ENDCASE .

      CONCATENATE &apos;&lt;&apos; lv_bookmark_string &apos;/&gt;&apos; INTO lv_bookmark_string . &quot; --&gt;&gt; bookmark
      CALL FUNCTION &apos;SCMS_STRING_TO_XSTRING&apos;
        EXPORTING
          text   = lv_bookmark_string
        IMPORTING
          buffer = lv_bookmark_xstring
        EXCEPTIONS
          OTHERS = 0.

      CLEAR lv_bookmark_offset .
      FIND lv_bookmark_xstring IN ls_ostream_xstring-tail
      MATCH OFFSET lv_bookmark_offset IN BYTE MODE .

      CHECK sy-subrc EQ 0
        AND lv_bookmark_offset NE 0 .
      CASE lv_index .
        WHEN 1 .      ls_ostream_xstring-cols1 = ls_ostream_xstring-tail(lv_bookmark_offset) .
        WHEN 2 .      ls_ostream_xstring-rows1 = ls_ostream_xstring-tail(lv_bookmark_offset) .
        WHEN 3 .      ls_ostream_xstring-merg1 = ls_ostream_xstring-tail(lv_bookmark_offset) .
        WHEN 4 .      ls_ostream_xstring-rbrk1 = ls_ostream_xstring-tail(lv_bookmark_offset) .
        WHEN 5 .      ls_ostream_xstring-cbrk1 = ls_ostream_xstring-tail(lv_bookmark_offset) .
        WHEN 6 .      ls_ostream_xstring-dtvl1 = ls_ostream_xstring-tail(lv_bookmark_offset) .
        WHEN OTHERS . EXIT .
      ENDCASE .

      lv_bookmark_length = XSTRLEN( lv_bookmark_xstring ) .
      ADD lv_bookmark_length TO lv_bookmark_offset .
      ls_ostream_xstring-tail = ls_ostream_xstring-tail+lv_bookmark_offset .
    ENDDO .

*======================================================================
*   3) render large data nodes to its own substrings
*======================================================================

*============ SET PROPERTIES OF COLUMNS
    IF s_sheets-sheetdata_runtime-t_colprop[] IS NOT INITIAL .

      lr_ixml = cl_ixml=&gt;create( ) .
      lr_streamfactory = lr_ixml-&gt;create_stream_factory( ) .
      lr_ostream = lr_streamfactory-&gt;create_ostream_xstring( string = ls_ostream_xstring-cols2 ) .
      lr_encoding = lr_ixml-&gt;create_encoding( character_set = c_character_set  byte_order = 0 ) .
      lr_ostream-&gt;set_encoding( encoding = lr_encoding ) .

      TYPES: BEGIN OF ty_s_colprop_meta .
      INCLUDE             TYPE ty_s_colprop .
      TYPES: _x           TYPE i .
      TYPES: END   OF ty_s_colprop_meta .
      TYPES: ty_t_colprop_meta TYPE STANDARD TABLE OF ty_s_colprop_meta .
      FIELD-SYMBOLS: &lt;colprop_meta&gt;  TYPE ty_s_colprop_meta .
      DATA:  lt_colprop_meta  TYPE ty_t_colprop_meta .

      LOOP AT s_sheets-sheetdata_runtime-t_colprop ASSIGNING &lt;colprop&gt; .
        APPEND INITIAL LINE TO lt_colprop_meta ASSIGNING &lt;colprop_meta&gt; .
        MOVE-CORRESPONDING &lt;colprop&gt; TO &lt;colprop_meta&gt; .
        &lt;colprop_meta&gt;-_x = &lt;colprop_meta&gt;-x .
        CLEAR &lt;colprop_meta&gt;-x .
      ENDLOOP .

      LOOP AT lt_colprop_meta ASSIGNING &lt;colprop_meta&gt; .
        AT NEW collapsed .
          lv_min = &lt;colprop_meta&gt;-_x .
        ENDAT .

        AT END OF collapsed .
          lv_max = &lt;colprop_meta&gt;-_x .

          lr_element-col =
          s_sheets-ixml_doc-&gt;create_element( name = c_tag-col ) .
          CONDENSE lv_min NO-GAPS .
          lr_element-col-&gt;set_attribute( name  = c_tag-min  value = lv_min ) .
          CONDENSE lv_max NO-GAPS .
          lr_element-col-&gt;set_attribute( name  = c_tag-max  value = lv_max ) .
          DO 7 TIMES .
            CASE sy-index .
              WHEN 1 .  lv_value = &lt;colprop_meta&gt;-width       .  lv_name = c_tag-width       .
              WHEN 2 .  lv_value = &lt;colprop_meta&gt;-style       .  lv_name = c_tag-style       .
              WHEN 3 .  lv_value = &lt;colprop_meta&gt;-hidden      .  lv_name = c_tag-hidden      .
              WHEN 4 .  lv_value = &lt;colprop_meta&gt;-bestfit     .  lv_name = c_tag-bestfit     .
              WHEN 5 .  lv_value = &lt;colprop_meta&gt;-customwidth .  lv_name = c_tag-customwidth .
              WHEN 6 .  lv_value = &lt;colprop_meta&gt;-outlinelevel.  lv_name = c_tag-outlinelevel. CONDENSE lv_value NO-GAPS .
              WHEN 7 .  lv_value = &lt;colprop_meta&gt;-collapsed   .  lv_name = c_tag-collapsed   .
              WHEN OTHERS . EXIT .
            ENDCASE .
            CHECK lv_value IS NOT INITIAL .
            CHECK lv_name  IS NOT INITIAL .

            lr_element-col-&gt;set_attribute( name  = lv_name  value = lv_value ) .
          ENDDO .

          lr_element-col-&gt;render( ostream = lr_ostream  recursive = abap_on ) .
          lr_element-col-&gt;remove_node( ) .
        ENDAT .
      ENDLOOP .

      lr_ostream-&gt;close( ) .
      FREE lr_ostream .
      FREE lr_encoding .
      FREE lr_ostream .
      FREE lr_streamfactory .
      FREE lr_ixml .
      CLEAR s_sheets-sheetdata_runtime-t_colprop[] .
      FREE  s_sheets-sheetdata_runtime-t_colprop[] .
    ENDIF .


*============ SET ROWS/COLUMNS DATA (SHEETDATA)

    lr_ixml = cl_ixml=&gt;create( ) .
    lr_streamfactory = lr_ixml-&gt;create_stream_factory( ) .
    lr_ostream = lr_streamfactory-&gt;create_ostream_xstring( string = ls_ostream_xstring-rows2 ) .
    lr_encoding = lr_ixml-&gt;create_encoding( character_set = c_character_set   byte_order = 0 ) .
    lr_ostream-&gt;set_encoding( encoding = lr_encoding ) .

*   add technical cells (with zero columns)
    CLEAR ls_cells .
    LOOP AT s_sheets-sheetdata_runtime-t_rowprop ASSIGNING &lt;rowprop&gt; .
      READ TABLE s_sheets-sheetdata_runtime-t_cells TRANSPORTING NO FIELDS
      WITH KEY y = &lt;rowprop&gt;-y BINARY SEARCH .
      CHECK sy-subrc NE 0 .
      &lt;rowprop&gt;-is_empty = abap_on .

      ls_cells-y = &lt;rowprop&gt;-y .
      ls_cells-x = 0 .
      INSERT ls_cells INTO TABLE s_sheets-sheetdata_runtime-t_cells .
    ENDLOOP .

*   calculate a formula of spans
    lv_spans      = s_sheets-sheetdata_runtime-beg_x .
    lv_string_tmp = s_sheets-sheetdata_runtime-end_x .
    CONCATENATE lv_spans &apos;:&apos; lv_string_tmp INTO lv_spans .
    CONDENSE lv_spans NO-GAPS .

*   process cells
    CONCATENATE v_text-t222           &quot; --&gt;&gt;  text: Sheet is being prepared
                &apos;(&apos; s_sheets-name &apos;)&apos;
                v_text-t163           &quot; --&gt;&gt;  text: row(s)
           INTO lv_string_tmp SEPARATED BY space .
    progressbar_loop_init( iv_step = 777
                           iv_text = lv_string_tmp ) .

    LOOP AT s_sheets-sheetdata_runtime-t_cells ASSIGNING &lt;cells&gt; .
      AT NEW y .
        progressbar_loop_actualize( ) .

        READ TABLE s_sheets-sheetdata_runtime-t_rowprop
        ASSIGNING &lt;rowprop&gt; WITH TABLE KEY y = &lt;cells&gt;-y .
        lv_subrc = sy-subrc .

*       add a new row
        lr_element-row = s_sheets-ixml_doc-&gt;create_element( name = c_tag-row ) .

        lv_string_tmp = &lt;cells&gt;-y . CONDENSE lv_string_tmp .
        lr_element-row-&gt;set_attribute(
                          name      = c_tag-r
                          value     = lv_string_tmp ) .
        lv_y_char = lv_string_tmp .

        DO 1 TIMES .
          IF lv_subrc EQ 0 .
            CHECK &lt;rowprop&gt;-is_empty IS INITIAL .
          ENDIF .
          IF s_sheets-sheetdata_runtime-end_x GT 0 .
            lr_element-row-&gt;set_attribute(
                            name      = c_tag-spans
                            value     = lv_spans ) .
          ENDIF .
        ENDDO .

*       set properties of the row
        IF lv_subrc EQ 0 .
          DO 7 TIMES .
            CASE sy-index .
              WHEN 1 .  lv_value = &lt;rowprop&gt;-s           .  lv_name = c_tag-s           .
              WHEN 2 .  lv_value = &lt;rowprop&gt;-customformat.  lv_name = c_tag-customformat.
              WHEN 3 .  lv_value = &lt;rowprop&gt;-ht          .  lv_name = c_tag-ht          .
              WHEN 4 .  lv_value = &lt;rowprop&gt;-customheight.  lv_name = c_tag-customheight.
              WHEN 5 .  lv_value = &lt;rowprop&gt;-hidden      .  lv_name = c_tag-hidden      .
              WHEN 6 .  lv_value = &lt;rowprop&gt;-outlinelevel.  lv_name = c_tag-outlinelevel. CONDENSE lv_value NO-GAPS .
              WHEN 7 .  lv_value = &lt;rowprop&gt;-collapsed   .  lv_name = c_tag-collapsed   .
              WHEN OTHERS . EXIT .
            ENDCASE .
            CHECK lv_value IS NOT INITIAL .
            CHECK lv_name  IS NOT INITIAL .
            lr_element-row-&gt;set_attribute( name  = lv_name
                                           value = lv_value ) .
          ENDDO .
        ENDIF .
      ENDAT . &quot; new Y

*     add a new cell (into the the row)
      IF &lt;cells&gt;-x IS NOT INITIAL .
        lr_element-c =
        s_sheets-ixml_doc-&gt;create_simple_element(
                          name      = c_tag-c
                          parent    = lr_element-row ) .

        conv_nc( EXPORTING iv_number = &lt;cells&gt;-x
                 IMPORTING ev_char  = lv_x_char ) .
        CONCATENATE lv_x_char lv_y_char INTO lv_string_tmp .

        lr_element-c-&gt;set_attribute(
                          name      = c_tag-r
                          value     = lv_string_tmp ) .

*       set value and properties of the cell
        IF &lt;cells&gt;-type IS NOT INITIAL .
          lr_element-c-&gt;set_attribute(
                          name      = c_tag-t
                          value     = &lt;cells&gt;-type ) .
        ENDIF .

        IF &lt;cells&gt;-style IS NOT INITIAL .
          lr_element-c-&gt;set_attribute(
                          name      = c_tag-s
                          value     = &lt;cells&gt;-style ) .
        ENDIF .

        IF &lt;cells&gt;-formula IS NOT INITIAL .
          lr_text = s_sheets-ixml_doc-&gt;create_text( &lt;cells&gt;-formula ) .

          lr_element-f =
          s_sheets-ixml_doc-&gt;create_simple_element(
                          name      = c_tag-f
                          parent    = lr_element-c ) .
          lr_element-f-&gt;append_child( lr_text ) .
        ENDIF .

        IF &lt;cells&gt;-value IS NOT INITIAL .
          s_sheets-ixml_doc-&gt;create_simple_element(
                          name      = c_tag-v
                          parent    = lr_element-c
                          value     = &lt;cells&gt;-value ) .
        ENDIF .
      ENDIF .

      AT END OF y .
        lr_element-row-&gt;render( ostream = lr_ostream  recursive = abap_on ).
        lr_element-row-&gt;remove_node( ) .
      ENDAT .
    ENDLOOP .

    lr_ostream-&gt;close( ) .
    FREE lr_ostream .
    FREE lr_encoding .
    FREE lr_ostream .
    FREE lr_streamfactory .
    FREE lr_ixml .
    FREE s_sheets-sheetdata_runtime-t_cells[] .


*============ SET MERGED CELLS
    IF s_sheets-sheetdata_runtime-t_mergecells[] IS NOT INITIAL .

      lr_ixml = cl_ixml=&gt;create( ) .
      lr_streamfactory = lr_ixml-&gt;create_stream_factory( ) .
      lr_ostream = lr_streamfactory-&gt;create_ostream_xstring( string = ls_ostream_xstring-merg2 ) .
      lr_encoding = lr_ixml-&gt;create_encoding( character_set = c_character_set   byte_order = 0 ) .
      lr_ostream-&gt;set_encoding( encoding = lr_encoding ) .

      LOOP AT s_sheets-sheetdata_runtime-t_mergecells ASSIGNING &lt;mergecells&gt; .
        lr_element-mergecell = s_sheets-ixml_doc-&gt;create_element( name = c_tag-mergecell ) .

        conv_ref_nc( EXPORTING iv_beg_x = &lt;mergecells&gt;-beg_x
                               iv_beg_y = &lt;mergecells&gt;-beg_y
                               iv_end_x = &lt;mergecells&gt;-end_x
                               iv_end_y = &lt;mergecells&gt;-end_y
                     IMPORTING ev_ref = lv_string_tmp ) .

        lr_element-mergecell-&gt;set_attribute(
                          name      = c_tag-ref
                          value     = lv_string_tmp ) .

        lr_element-mergecell-&gt;render( ostream = lr_ostream  recursive = abap_on ).
        lr_element-mergecell-&gt;remove_node( ) .
      ENDLOOP .

      lr_ostream-&gt;close( ) .
      FREE lr_ostream .
      FREE lr_encoding .
      FREE lr_ostream .
      FREE lr_streamfactory .
      FREE lr_ixml .
      IF s_sheets-sheetdata_runtime-postprocessing_autofit IS INITIAL .
        CLEAR s_sheets-sheetdata_runtime-t_mergecells[] .
        FREE  s_sheets-sheetdata_runtime-t_mergecells[] .
      ENDIF .
    ENDIF .


*============ INSERT MANUAL PAGE-BREAKS (ROWS)

    IF s_sheets-sheetdata_runtime-t_manual_pgbrk_row[] IS NOT INITIAL .

      lr_ixml = cl_ixml=&gt;create( ) .
      lr_streamfactory = lr_ixml-&gt;create_stream_factory( ) .
      lr_ostream = lr_streamfactory-&gt;create_ostream_xstring( string = ls_ostream_xstring-rbrk2 ) .
      lr_encoding = lr_ixml-&gt;create_encoding( character_set = c_character_set   byte_order = 0 ) .
      lr_ostream-&gt;set_encoding( encoding = lr_encoding ) .

      LOOP AT s_sheets-sheetdata_runtime-t_manual_pgbrk_row ASSIGNING &lt;manual_pgbrk&gt; .
        lr_element-brk = s_sheets-ixml_doc-&gt;create_element( name = c_tag-brk ) .

        lv_string_tmp = &lt;manual_pgbrk&gt;-id . CONDENSE lv_string_tmp .
        lr_element-brk-&gt;set_attribute( name  = c_tag-id value = lv_string_tmp ) .

        lv_string_tmp = &apos;16383&apos; .
        lr_element-brk-&gt;set_attribute( name  = c_tag-max value = lv_string_tmp ) .

        lv_string_tmp = &apos;1&apos; .
        lr_element-brk-&gt;set_attribute( name  = c_tag-man value = lv_string_tmp ) .

        lr_element-brk-&gt;render( ostream = lr_ostream  recursive = abap_on ).
        lr_element-brk-&gt;remove_node( ) .
      ENDLOOP .

      lr_ostream-&gt;close( ) .
      FREE lr_ostream .
      FREE lr_encoding .
      FREE lr_ostream .
      FREE lr_streamfactory .
      FREE lr_ixml .

      CLEAR s_sheets-sheetdata_runtime-t_manual_pgbrk_row[] .
      FREE  s_sheets-sheetdata_runtime-t_manual_pgbrk_row[] .
    ENDIF .


*============ INSERT MANUAL PAGE-BREAKS (COLUMNS)

    IF s_sheets-sheetdata_runtime-t_manual_pgbrk_col[] IS NOT INITIAL .

      lr_ixml = cl_ixml=&gt;create( ) .
      lr_streamfactory = lr_ixml-&gt;create_stream_factory( ) .
      lr_ostream = lr_streamfactory-&gt;create_ostream_xstring( string = ls_ostream_xstring-cbrk2 ) .
      lr_encoding = lr_ixml-&gt;create_encoding( character_set = c_character_set   byte_order = 0 ) .
      lr_ostream-&gt;set_encoding( encoding = lr_encoding ) .

      LOOP AT s_sheets-sheetdata_runtime-t_manual_pgbrk_col ASSIGNING &lt;manual_pgbrk&gt; .
        lr_element-brk = s_sheets-ixml_doc-&gt;create_element( name = c_tag-brk ) .

        lv_string_tmp = &lt;manual_pgbrk&gt;-id . CONDENSE lv_string_tmp .
        lr_element-brk-&gt;set_attribute( name  = c_tag-id value = lv_string_tmp ) .

        lv_string_tmp = &apos;1048575&apos; .
        lr_element-brk-&gt;set_attribute( name  = c_tag-max value = lv_string_tmp ) .

        lv_string_tmp = &apos;1&apos; .
        lr_element-brk-&gt;set_attribute( name  = c_tag-man value = lv_string_tmp ) .

        lr_element-brk-&gt;render( ostream = lr_ostream  recursive = abap_on ).
        lr_element-brk-&gt;remove_node( ) .
      ENDLOOP .

      lr_ostream-&gt;close( ) .
      FREE lr_ostream .
      FREE lr_encoding .
      FREE lr_ostream .
      FREE lr_streamfactory .
      FREE lr_ixml .
      CLEAR s_sheets-sheetdata_runtime-t_manual_pgbrk_col[] .
      FREE  s_sheets-sheetdata_runtime-t_manual_pgbrk_col[] .
    ENDIF .


*============ INSERT DATA VALIDATION INFO
    IF s_sheets-sheetdata_runtime-t_datavalid[] IS NOT INITIAL .

      lr_ixml = cl_ixml=&gt;create( ) .
      lr_streamfactory = lr_ixml-&gt;create_stream_factory( ) .
      lr_ostream = lr_streamfactory-&gt;create_ostream_xstring( string = ls_ostream_xstring-dtvl2 ) .
      lr_encoding = lr_ixml-&gt;create_encoding( character_set = c_character_set   byte_order = 0 ) .
      lr_ostream-&gt;set_encoding( encoding = lr_encoding ) .

      LOOP AT s_sheets-sheetdata_runtime-t_datavalid[] ASSIGNING &lt;datavalid&gt; .

*       element: dataValidation
        lr_element-datavalidation = s_sheets-ixml_doc-&gt;create_element( name = c_tag-datavalidation ) .

*       attribute: sqref
        CLEAR lv_string_sqref .
        LOOP AT &lt;datavalid&gt;-t_coordinates ASSIGNING &lt;coordinates&gt; .

          conv_ref_nc( EXPORTING iv_beg_x = &lt;coordinates&gt;-beg_x
                                 iv_beg_y = &lt;coordinates&gt;-beg_y
                                 iv_end_x = &lt;coordinates&gt;-end_x
                                 iv_end_y = &lt;coordinates&gt;-end_y
                       IMPORTING ev_ref = lv_string_tmp ) .
          IF lv_string_sqref IS INITIAL .
            lv_string_sqref = lv_string_tmp .
          ELSE .
            CONCATENATE lv_string_sqref lv_string_tmp INTO lv_string_sqref SEPARATED BY space .
          ENDIF .
        ENDLOOP .

*       other attributes
        DO .
          CASE sy-index .
            WHEN 1  .     lv_string_fname = c_tag-allowblank .
            WHEN 2  .     lv_string_fname = c_tag-error      .
            WHEN 3  .     lv_string_fname = c_tag-errorstyle .
            WHEN 4  .     lv_string_fname = c_tag-errortitle .
            WHEN 5  .     lv_string_fname = c_tag-imemode    .
            WHEN 6  .     lv_string_fname = c_tag-operator   .
            WHEN 7  .     lv_string_fname = c_tag-prompt     .
            WHEN 8  .     lv_string_fname = c_tag-prompttitle  .
            WHEN 9  .     lv_string_fname = c_tag-showdropdown .
            WHEN 10 .     lv_string_fname = c_tag-showerrormessage .
            WHEN 11 .     lv_string_fname = c_tag-showinputmessage .
            WHEN 12 .     lr_element-datavalidation-&gt;set_attribute( name = c_tag-sqref  value = lv_string_sqref ) . CONTINUE .
            WHEN 13 .     lv_string_fname = c_tag-type_ .
            WHEN OTHERS . EXIT .
          ENDCASE .

          lv_string_tmp = lv_string_fname .
          TRANSLATE lv_string_tmp TO UPPER CASE .
          ASSIGN COMPONENT lv_string_tmp OF STRUCTURE &lt;datavalid&gt; TO &lt;value&gt; .
          CHECK &lt;value&gt; IS ASSIGNED .
          CHECK &lt;value&gt; IS NOT INITIAL .

          lv_string_value = &lt;value&gt; .
          lr_element-datavalidation-&gt;set_attribute( name  = lv_string_fname
                                                    value = lv_string_value ) .
        ENDDO .

*       element: formula1
        IF &lt;datavalid&gt;-formula1_dataset_id IS NOT INITIAL .
          DO 1 TIMES .
            READ TABLE s_model-t_datasets ASSIGNING &lt;datasets&gt; WITH TABLE KEY id = &lt;datavalid&gt;-formula1_dataset_id  .
            CHECK sy-subrc EQ 0 .
            READ TABLE &lt;datasets&gt;-t_refs ASSIGNING &lt;dataset_refs&gt; WITH TABLE KEY rt_path_1 = &lt;datavalid&gt;-formula1_dataset_rt_path_1 .
            CHECK sy-subrc EQ 0 .
            READ TABLE &lt;dataset_refs&gt;-t_fields ASSIGNING &lt;dataset_ref_fields&gt; WITH KEY field = &lt;datavalid&gt;-formula1_dataset_fld .
            CHECK sy-subrc EQ 0 .

            s_sheets-ixml_doc-&gt;create_simple_element( name    = c_tag-formula1
                                                      parent  = lr_element-datavalidation
                                                      value   = &lt;dataset_ref_fields&gt;-ref_2 ) .
          ENDDO .

        ELSEIF &lt;datavalid&gt;-formula1 IS NOT INITIAL .
          s_sheets-ixml_doc-&gt;create_simple_element( name    = c_tag-formula1
                                                    parent  = lr_element-datavalidation
                                                    value   = &lt;datavalid&gt;-formula1 ) .
        ENDIF .

*       element: formula2
        IF &lt;datavalid&gt;-formula2 IS NOT INITIAL .
          s_sheets-ixml_doc-&gt;create_simple_element( name    = c_tag-formula2
                                                    parent  = lr_element-datavalidation
                                                    value   = &lt;datavalid&gt;-formula2 ) .
        ENDIF .

        lr_element-datavalidation-&gt;render( ostream = lr_ostream  recursive = abap_on ).
        lr_element-datavalidation-&gt;remove_node( ) .
      ENDLOOP .

      lr_ostream-&gt;close( ) .
      FREE lr_ostream .
      FREE lr_encoding .
      FREE lr_ostream .
      FREE lr_streamfactory .
      FREE lr_ixml .
      CLEAR s_sheets-sheetdata_runtime-t_datavalid[] .
      FREE  s_sheets-sheetdata_runtime-t_datavalid[] .
    ENDIF .



*======================================================================
*   4) concatenate all gotten substrings into whole XML-file Xstring
*      and save it to ZIP-folder
*======================================================================

*============ WORKSHEET
    CONCATENATE
      ls_ostream_xstring-cols1  ls_ostream_xstring-cols2
      ls_ostream_xstring-rows1  ls_ostream_xstring-rows2
      ls_ostream_xstring-merg1  ls_ostream_xstring-merg2
      ls_ostream_xstring-rbrk1  ls_ostream_xstring-rbrk2
      ls_ostream_xstring-cbrk1  ls_ostream_xstring-cbrk2
      ls_ostream_xstring-dtvl1  ls_ostream_xstring-dtvl2
      ls_ostream_xstring-tail
    INTO lv_xml_xstring IN BYTE MODE .
    FREE ls_ostream_xstring .

    CONCATENATE c_path-sheetsfolder+1 &apos;/&apos; s_sheets-name_int &apos;.xml&apos; INTO lv_sheetpath .
    CONDENSE lv_sheetpath .
    SHIFT lv_sheetpath LEFT DELETING LEADING &apos;/&apos; .

    r_zipfolder-&gt;delete( EXPORTING name = lv_sheetpath
                         EXCEPTIONS OTHERS = 0 ) .

    r_zipfolder-&gt;add( name     = lv_sheetpath
                      content  = lv_xml_xstring ) .
    FREE lv_xml_xstring .

*============ SHEET RELATIONS
    xml_relstab_set( iv_path = lv_sheetpath
                     it_relstab = s_sheets-sheetdata_runtime-t_sheetrels[] ) .

*======================================================================
*======================================================================

    APPEND s_sheets TO s_model-t_sheets .

  ENDMETHOD .                    &quot;finalize_sheet
  METHOD sheet_name_validate .
    DATA:
      lv_new_sheetname  TYPE ty_char31 ,
      lv_suffix         TYPE ty_char10 ,
      lv_strlen_all     TYPE i ,
      lv_strlen_suf     TYPE i ,
      lv_offset_suf     TYPE i .
    DATA:
      ls_sheetnamesuffix  TYPE ty_s_sheetnamesuffix .
    FIELD-SYMBOLS:
      &lt;sheetnamesuffix&gt;   TYPE ty_s_sheetnamesuffix .

    READ TABLE t_sheetnamesuffix ASSIGNING &lt;sheetnamesuffix&gt;
    WITH TABLE KEY sheetname = cv_sheetname .
    IF sy-subrc NE 0 .
      ls_sheetnamesuffix-sheetname = cv_sheetname .
      INSERT ls_sheetnamesuffix INTO TABLE t_sheetnamesuffix
      ASSIGNING &lt;sheetnamesuffix&gt; .
    ENDIF .

    lv_new_sheetname = cv_sheetname .
    DO .
      READ TABLE s_model-t_sheets TRANSPORTING NO FIELDS
      WITH TABLE KEY name = lv_new_sheetname .
      IF sy-subrc NE 0 .
        EXIT .
      ENDIF .

      ADD 1 TO &lt;sheetnamesuffix&gt;-suffix_index .
      lv_suffix = &lt;sheetnamesuffix&gt;-suffix_index .
      CONDENSE lv_suffix NO-GAPS .
      CONCATENATE &apos;_&apos; lv_suffix INTO lv_suffix .

      lv_strlen_suf = STRLEN( lv_suffix ) .
      lv_strlen_all = STRLEN( cv_sheetname ) + lv_strlen_suf .
      IF lv_strlen_all &gt; 31 .
        lv_offset_suf = 31 - lv_strlen_suf .
        lv_new_sheetname = cv_sheetname .
        lv_new_sheetname+lv_offset_suf = lv_suffix .
      ELSE.
        CONCATENATE cv_sheetname lv_suffix INTO lv_new_sheetname .
      ENDIF .
    ENDDO .

    cv_sheetname = lv_new_sheetname .
  ENDMETHOD .                    &quot;sheet_name_validate
  METHOD begin_folder .

  ENDMETHOD .                    &quot;begin_folder
  METHOD finalize_folder .
    DATA:
      ls_colprop          TYPE ty_s_colprop ,
      ls_rowprop          TYPE ty_s_rowprop ,
      ls_coordinates_abs  TYPE ty_s_coordinates ,
      ls_nopgbrk_range    TYPE ty_s_nopgbrk_range ,
      ls_manual_pgbrk     TYPE ty_s_manual_pgbrk ,
      ls_cellrng_name     TYPE ty_s_cellrng_name .
    FIELD-SYMBOLS:
      &lt;colprop&gt;           TYPE ty_s_colprop ,
      &lt;rowprop&gt;           TYPE ty_s_rowprop .

*   calculate absolute coordinates of area margins
    ls_coordinates_abs-beg_y = iv_top  + 1 .
    ls_coordinates_abs-end_y = iv_top  + iv_rows .
    ls_coordinates_abs-beg_x = iv_left + 1 .
    ls_coordinates_abs-end_x = iv_left + iv_columns .

*   grouping of the rows
    IF iv_rowgroup_level IS NOT INITIAL .
      CLEAR ls_rowprop .
      ls_rowprop-y            = ls_coordinates_abs-beg_y .
      ls_rowprop-outlinelevel = iv_rowgroup_level .
      IF iv_rowgroup_clp IS NOT INITIAL .
        ls_rowprop-hidden     = &apos;1&apos; .
      ENDIF .

      WHILE ls_rowprop-y LE ls_coordinates_abs-end_y .
        READ TABLE s_sheets-sheetdata_runtime-t_rowprop
        ASSIGNING &lt;rowprop&gt; WITH TABLE KEY y = ls_rowprop-y .
        IF sy-subrc EQ 0 .
          IF &lt;rowprop&gt;-outlinelevel LT ls_rowprop-outlinelevel .
            &lt;rowprop&gt;-outlinelevel = ls_rowprop-outlinelevel .
            &lt;rowprop&gt;-hidden       = ls_rowprop-hidden .
          ELSEIF ls_rowprop-hidden IS NOT INITIAL .
            &lt;rowprop&gt;-hidden       = ls_rowprop-hidden .
          ENDIF .
        ELSE .
          INSERT ls_rowprop
          INTO TABLE s_sheets-sheetdata_runtime-t_rowprop .
        ENDIF .

        ADD 1 TO ls_rowprop-y .
      ENDWHILE .
    ENDIF .

*   flag &apos;collapsed&apos; for rows
    IF iv_rowgroup_clp IS NOT INITIAL .
      CLEAR ls_rowprop .
      ls_rowprop-collapsed = &apos;1&apos; .

      IF v_summarybelow IS INITIAL .
        ls_rowprop-y = ls_coordinates_abs-beg_y - 1 .
      ELSE .
        ls_rowprop-y = ls_coordinates_abs-end_y + 1 .
      ENDIF .

      IF ls_rowprop-y IS NOT INITIAL .
        READ TABLE s_sheets-sheetdata_runtime-t_rowprop
        ASSIGNING &lt;rowprop&gt; WITH TABLE KEY y = ls_rowprop-y .
        IF sy-subrc EQ 0 .
          &lt;rowprop&gt;-collapsed = ls_rowprop-collapsed .
        ELSE .
          INSERT ls_rowprop
          INTO TABLE s_sheets-sheetdata_runtime-t_rowprop .
        ENDIF .
      ENDIF .
    ENDIF .

*   grouping of the columns
    IF iv_colgroup_level IS NOT INITIAL .
      CLEAR ls_colprop .
      ls_colprop-x            = ls_coordinates_abs-beg_x .
      ls_colprop-outlinelevel = iv_colgroup_level .
      IF iv_colgroup_clp IS INITIAL .
        ls_colprop-width      = &apos;10&apos; .
      ELSE .
        ls_colprop-hidden     = &apos;1&apos; .
      ENDIF .

      WHILE ls_colprop-x LE ls_coordinates_abs-end_x .
        READ TABLE s_sheets-sheetdata_runtime-t_colprop
        ASSIGNING &lt;colprop&gt; WITH KEY x = ls_colprop-x BINARY SEARCH .
        IF sy-subrc EQ 0 .
          IF &lt;colprop&gt;-outlinelevel LT ls_colprop-outlinelevel .
            &lt;colprop&gt;-outlinelevel = ls_colprop-outlinelevel .
            &lt;colprop&gt;-hidden       = ls_colprop-hidden .
          ELSEIF ls_colprop-hidden IS NOT INITIAL .
            &lt;colprop&gt;-hidden       = ls_colprop-hidden .
          ENDIF .
        ELSE .
          INSERT ls_colprop
          INTO TABLE s_sheets-sheetdata_runtime-t_colprop .
        ENDIF .

        ADD 1 TO ls_colprop-x .
      ENDWHILE .
    ENDIF .

*   flag &apos;collapsed&apos; for columns
    IF iv_colgroup_clp IS NOT INITIAL .
      CLEAR ls_colprop .
      ls_colprop-x         = ls_coordinates_abs-end_x + 1 .
      ls_colprop-collapsed = &apos;1&apos; .
      ls_colprop-width     = &apos;10&apos; .

      IF v_summaryright IS INITIAL .
        ls_colprop-x = ls_coordinates_abs-beg_x - 1 .
      ELSE .
        ls_colprop-x = ls_coordinates_abs-end_x + 1 .
      ENDIF .

      IF ls_colprop-x IS NOT INITIAL .
        READ TABLE s_sheets-sheetdata_runtime-t_colprop
        ASSIGNING &lt;colprop&gt; WITH KEY x = ls_colprop-x BINARY SEARCH .
        IF sy-subrc EQ 0 .
          &lt;colprop&gt;-collapsed = ls_colprop-collapsed .
          IF &lt;colprop&gt;-width IS INITIAL .
            &lt;colprop&gt;-width   = ls_colprop-width .
          ENDIF.
        ELSE .
          INSERT ls_colprop
          INTO TABLE s_sheets-sheetdata_runtime-t_colprop .
        ENDIF .
      ENDIF .
    ENDIF .

*   revise a depth of grouping on the sheet
    IF s_sheets-sheetdata_runtime-outlinelevelrow LT iv_rowgroup_level .
      s_sheets-sheetdata_runtime-outlinelevelrow = iv_rowgroup_level .
    ENDIF .
    IF s_sheets-sheetdata_runtime-outlinelevelcol LT iv_colgroup_level .
      s_sheets-sheetdata_runtime-outlinelevelcol = iv_colgroup_level .
    ENDIF .

*   revise a dimension of data on the sheet
    IF s_sheets-sheetdata_runtime-beg_y IS INITIAL
    OR s_sheets-sheetdata_runtime-beg_y GT ls_coordinates_abs-beg_y .
      s_sheets-sheetdata_runtime-beg_y = ls_coordinates_abs-beg_y .
    ENDIF .
    IF s_sheets-sheetdata_runtime-beg_x IS INITIAL
    OR s_sheets-sheetdata_runtime-beg_x GT ls_coordinates_abs-beg_x .
      s_sheets-sheetdata_runtime-beg_x = ls_coordinates_abs-beg_x .
    ENDIF .
    IF s_sheets-sheetdata_runtime-end_y IS INITIAL
    OR s_sheets-sheetdata_runtime-end_y LT ls_coordinates_abs-end_y .
      s_sheets-sheetdata_runtime-end_y = ls_coordinates_abs-end_y .
    ENDIF .
    IF s_sheets-sheetdata_runtime-end_x IS INITIAL
    OR s_sheets-sheetdata_runtime-end_x LT ls_coordinates_abs-end_x .
      s_sheets-sheetdata_runtime-end_x = ls_coordinates_abs-end_x .
    ENDIF .

*   range for preventing automatic page break
    IF iv_nopgbrk_left  IS NOT INITIAL .
      v_postprocessing_nopgbrk = abap_on .
      s_sheets-sheetdata_runtime-postprocessing_nopgbrk = abap_on .

      CLEAR ls_nopgbrk_range .
      ls_nopgbrk_range-left   = iv_nopgbrk_left .
      ls_nopgbrk_range-beg_x  = iv_nopgbrk_beg_x .
      IF ls_nopgbrk_range-beg_x LE 0 .
        ls_nopgbrk_range-beg_x = 1 .
      ENDIF .
      ls_nopgbrk_range-end_x  = iv_nopgbrk_end_x .
      APPEND ls_nopgbrk_range TO s_sheets-sheetdata_runtime-t_nopgbrk_range .
    ENDIF .

    IF iv_nopgbrk_top IS NOT INITIAL .
      v_postprocessing_nopgbrk = abap_on .
      s_sheets-sheetdata_runtime-postprocessing_nopgbrk = abap_on .

      CLEAR ls_nopgbrk_range .
      ls_nopgbrk_range-top    = iv_nopgbrk_top .
      ls_nopgbrk_range-beg_y  = iv_nopgbrk_beg_y .
      IF ls_nopgbrk_range-beg_y  LE 0 .
        ls_nopgbrk_range-beg_y = 1 .
      ENDIF .
      ls_nopgbrk_range-end_y  = iv_nopgbrk_end_y .
      APPEND ls_nopgbrk_range TO s_sheets-sheetdata_runtime-t_nopgbrk_range .
    ENDIF .

*   insert manual page breaks
    IF  iv_pgbrk_top IS NOT INITIAL
    AND ls_coordinates_abs-beg_y GT 1 .
      ls_manual_pgbrk-id = ls_coordinates_abs-beg_y - 1 .
      APPEND ls_manual_pgbrk TO s_sheets-sheetdata_runtime-t_manual_pgbrk_row .
    ENDIF .

    IF  iv_pgbrk_left IS NOT INITIAL
    AND ls_coordinates_abs-beg_x GT 1 .
      ls_manual_pgbrk-id = ls_coordinates_abs-beg_x - 1 .
      APPEND ls_manual_pgbrk TO s_sheets-sheetdata_runtime-t_manual_pgbrk_col .
    ENDIF .

*   insert name of cell range
    IF iv_cellrng_name IS NOT INITIAL .
      MOVE-CORRESPONDING ls_coordinates_abs TO ls_cellrng_name .
      ls_cellrng_name-name = iv_cellrng_name .
      APPEND ls_cellrng_name TO s_sheets-sheetdata_runtime-t_cellrng_name .
    ENDIF .

  ENDMETHOD .                    &quot;finalize_folder
  METHOD begin_field .
    DATA:
      ls_cells            TYPE ty_s_cells ,
      ls_sharedstrings    TYPE ty_s_sharedstrings ,
      lv_date_excel       TYPE ty_char100 ,
      lv_date_flag        TYPE flag ,
      lv_number_flag      TYPE flag ,
      lv_fld              TYPE string .
    FIELD-SYMBOLS:
      &lt;cells&gt;             TYPE ty_s_cells ,
      &lt;sharedstrings&gt;     TYPE ty_s_sharedstrings ,
      &lt;valvld_attr_line&gt;  TYPE ANY ,
      &lt;valvld_attr_fld&gt;   TYPE ANY ,
      &lt;valvld_attr_val&gt;   TYPE ANY ,
      &lt;val&gt;               TYPE ANY .

    READ TABLE s_patterns-t_cells ASSIGNING &lt;cells&gt;
      WITH KEY y = iv_top   x = iv_left
      BINARY SEARCH .
    IF sy-subrc NE 0 .
      ls_cells-y = iv_top .
      ls_cells-x = iv_left .
      INSERT ls_cells INTO TABLE s_patterns-t_cells ASSIGNING &lt;cells&gt; .
    ENDIF .
    CHECK &lt;cells&gt; IS ASSIGNED .

    CLEAR &lt;cells&gt;-tmp_flag    .
    CLEAR &lt;cells&gt;-tmp_value_s .
    CLEAR &lt;cells&gt;-tmp_si_node .

*   data validation for cell
    &lt;cells&gt;-datavalidation-formula1_dataset_id  = iv_valvld_for1_dataset_id  .
    &lt;cells&gt;-datavalidation-formula1_dataset_fld = iv_valvld_for1_dataset_fld .
    IF &lt;cells&gt;-datavalidation-formula1_dataset_id IS NOT INITIAL .
      &lt;cells&gt;-datavalidation-formula1_dataset_rt_path_1 = iv_rt_path_1 .  &quot; --&gt;&gt; runtime path (for dataset subordination)
    ENDIF .

    IF iv_valvld_for1_value_x IS NOT INITIAL .
      &lt;cells&gt;-datavalidation-formula1 = iv_valvld_for1_value .
    ENDIF .
    IF iv_valvld_for2_value_x IS NOT INITIAL .
      &lt;cells&gt;-datavalidation-formula2 = iv_valvld_for2_value .
    ENDIF .

    IF  &lt;cells&gt;-datavalidation-formula1 IS INITIAL
    AND &lt;cells&gt;-datavalidation-formula1_dataset_id  IS INITIAL
    AND &lt;cells&gt;-datavalidation-formula1_dataset_fld IS INITIAL
    AND &lt;cells&gt;-datavalidation-formula2 IS INITIAL .
      CLEAR &lt;cells&gt;-datavalidation .

    ELSE .
      LOOP AT it_valvld_attr_table ASSIGNING &lt;valvld_attr_line&gt; .
        UNASSIGN &lt;valvld_attr_fld&gt; .
        UNASSIGN &lt;valvld_attr_val&gt; .
        DO 2 TIMES .
          CASE sy-index .
            WHEN 1 .  ASSIGN COMPONENT 1 OF STRUCTURE &lt;valvld_attr_line&gt; TO &lt;valvld_attr_fld&gt; .
            WHEN 2 .  ASSIGN COMPONENT 2 OF STRUCTURE &lt;valvld_attr_line&gt; TO &lt;valvld_attr_val&gt; .
          ENDCASE .
        ENDDO .
        IF &lt;valvld_attr_fld&gt; IS NOT ASSIGNED
        OR &lt;valvld_attr_val&gt; IS NOT ASSIGNED .
          EXIT .
        ENDIF .

        UNASSIGN &lt;val&gt; .
        lv_fld = &lt;valvld_attr_fld&gt; .
        TRANSLATE lv_fld TO UPPER CASE .
        ASSIGN COMPONENT lv_fld OF STRUCTURE &lt;cells&gt;-datavalidation TO &lt;val&gt; .
        CHECK &lt;val&gt; IS ASSIGNED .
        &lt;val&gt; = &lt;valvld_attr_val&gt; .
      ENDLOOP .
    ENDIF .

*   cell value
    IF iv_formula IS NOT INITIAL .
      &lt;cells&gt;-formula = iv_value .
      CLEAR &lt;cells&gt;-value .
      CLEAR &lt;cells&gt;-value_s .
      RETURN .
    ENDIF .

    value_describe( EXPORTING iv_value       = iv_value
                              iv_cell_dateformat_style = &lt;cells&gt;-dateformat_style
                    IMPORTING ev_number_flag = lv_number_flag
                              ev_date_flag   = lv_date_flag
                              ev_date_excel  = lv_date_excel ) .

    IF iv_value IS INITIAL .
      &lt;cells&gt;-type    = space .
      &lt;cells&gt;-value   = space .
      &lt;cells&gt;-value_s = space .

    ELSEIF  lv_date_flag EQ abap_on
       AND  &lt;cells&gt;-dateformat_style EQ abap_on .
      &lt;cells&gt;-type    = space .
      &lt;cells&gt;-value   = lv_date_excel .
      &lt;cells&gt;-value_s = lv_date_excel .

    ELSEIF  lv_number_flag EQ abap_on
       AND  &lt;cells&gt;-textformat_style EQ abap_off .
      &lt;cells&gt;-type    = space .
      &lt;cells&gt;-value   = iv_value .
      &lt;cells&gt;-value_s = iv_value .

    ELSE .
      &lt;cells&gt;-type    = c_tag-s .
      &lt;cells&gt;-value_s = iv_value .
      READ TABLE s_model-t_sharedstrings ASSIGNING &lt;sharedstrings&gt;
      WITH TABLE KEY value = &lt;cells&gt;-value_s .
      IF sy-subrc NE 0 .
        ls_sharedstrings-value = &lt;cells&gt;-value_s .
        ls_sharedstrings-key   = LINES( s_model-t_sharedstrings ) .
        INSERT ls_sharedstrings INTO TABLE s_model-t_sharedstrings
        ASSIGNING &lt;sharedstrings&gt; .
      ENDIF .
      CHECK &lt;sharedstrings&gt; IS ASSIGNED .
      &lt;cells&gt;-value = &lt;sharedstrings&gt;-key .
    ENDIF .
  ENDMETHOD .                     &quot; begin_field
  METHOD begin_field_textmark .
    DATA:
      ls_cells            TYPE ty_s_cells ,
      ls_sharedstrings    TYPE ty_s_sharedstrings ,
      lv_date_excel       TYPE ty_char100 ,
      lv_date_flag        TYPE flag ,
      lv_number_flag      TYPE flag ,
      lv_fld              TYPE string .
    DATA:
      lv_val_index        TYPE sy-index ,
      lr_val_ncol         TYPE REF TO if_ixml_node_collection ,
      lr_val_node_r       TYPE REF TO if_ixml_node ,
      lr_val_node         TYPE REF TO if_ixml_node ,
      lr_val_elem         TYPE REF TO if_ixml_element ,
      lr_si_elem          TYPE REF TO if_ixml_element ,
      lv_stringtmp        TYPE string .
    FIELD-SYMBOLS:
      &lt;cells&gt;             TYPE ty_s_cells ,
      &lt;sharedstrings&gt;     TYPE ty_s_sharedstrings ,
      &lt;valvld_attr_line&gt;  TYPE ANY ,
      &lt;valvld_attr_fld&gt;   TYPE ANY ,
      &lt;valvld_attr_val&gt;   TYPE ANY ,
      &lt;val&gt;               TYPE ANY .

    LOOP AT s_patterns-t_cells ASSIGNING &lt;cells&gt; .
      CHECK &lt;cells&gt;-value_s CS iv_textmark .

*     data validation for cell
      &lt;cells&gt;-datavalidation-formula1_dataset_id  = iv_valvld_for1_dataset_id  .
      &lt;cells&gt;-datavalidation-formula1_dataset_fld = iv_valvld_for1_dataset_fld .
      IF &lt;cells&gt;-datavalidation-formula1_dataset_id IS NOT INITIAL .
        &lt;cells&gt;-datavalidation-formula1_dataset_rt_path_1 = iv_rt_path_1 .  &quot; --&gt;&gt; runtime path (for dataset subordination)
      ENDIF .
      IF iv_valvld_for1_value_x IS NOT INITIAL .
        &lt;cells&gt;-datavalidation-formula1 = iv_valvld_for1_value .
      ENDIF .
      IF iv_valvld_for2_value_x IS NOT INITIAL .
        &lt;cells&gt;-datavalidation-formula2 = iv_valvld_for2_value .
      ENDIF .

      IF  &lt;cells&gt;-datavalidation-formula1 IS INITIAL
      AND &lt;cells&gt;-datavalidation-formula1_dataset_id  IS INITIAL
      AND &lt;cells&gt;-datavalidation-formula1_dataset_fld IS INITIAL
      AND &lt;cells&gt;-datavalidation-formula2 IS INITIAL .
        CLEAR &lt;cells&gt;-datavalidation .

      ELSE .
        LOOP AT it_valvld_attr_table ASSIGNING &lt;valvld_attr_line&gt; .
          UNASSIGN &lt;valvld_attr_fld&gt; .
          UNASSIGN &lt;valvld_attr_val&gt; .
          DO 2 TIMES .
            CASE sy-index .
              WHEN 1 .  ASSIGN COMPONENT 1 OF STRUCTURE &lt;valvld_attr_line&gt; TO &lt;valvld_attr_fld&gt; .
              WHEN 2 .  ASSIGN COMPONENT 2 OF STRUCTURE &lt;valvld_attr_line&gt; TO &lt;valvld_attr_val&gt; .
            ENDCASE .
          ENDDO .
          IF &lt;valvld_attr_fld&gt; IS NOT ASSIGNED
          OR &lt;valvld_attr_val&gt; IS NOT ASSIGNED .
            EXIT .
          ENDIF .

          UNASSIGN &lt;val&gt; .
          lv_fld = &lt;valvld_attr_fld&gt; .
          TRANSLATE lv_fld TO UPPER CASE .
          ASSIGN COMPONENT lv_fld OF STRUCTURE &lt;cells&gt;-datavalidation TO &lt;val&gt; .
          CHECK &lt;val&gt; IS ASSIGNED .
          &lt;val&gt; = &lt;valvld_attr_val&gt; .
        ENDLOOP .
      ENDIF .

*     cell value
      IF &lt;cells&gt;-value_s EQ iv_textmark .

        CLEAR &lt;cells&gt;-tmp_flag .
        CLEAR &lt;cells&gt;-tmp_value_s .
        CLEAR &lt;cells&gt;-tmp_si_node .

        IF iv_formula IS NOT INITIAL .
          &lt;cells&gt;-formula = iv_value .
          CLEAR &lt;cells&gt;-value .
          CLEAR &lt;cells&gt;-value_s .
          CONTINUE .
        ENDIF .

        value_describe( EXPORTING iv_value       = iv_value
                                  iv_cell_dateformat_style = &lt;cells&gt;-dateformat_style
                        IMPORTING ev_number_flag = lv_number_flag
                                  ev_date_flag   = lv_date_flag
                                  ev_date_excel  = lv_date_excel ) .

        IF iv_value IS INITIAL .
          &lt;cells&gt;-type    = space .
          &lt;cells&gt;-value   = space .
          &lt;cells&gt;-value_s = space .

        ELSEIF  lv_date_flag EQ abap_on
           AND  &lt;cells&gt;-dateformat_style EQ abap_on .
          &lt;cells&gt;-type    = space .
          &lt;cells&gt;-value   = lv_date_excel .
          &lt;cells&gt;-value_s = lv_date_excel .

        ELSEIF  lv_number_flag EQ abap_on
           AND  &lt;cells&gt;-textformat_style EQ abap_off .
          &lt;cells&gt;-type    = space .
          &lt;cells&gt;-value   = iv_value .
          &lt;cells&gt;-value_s = iv_value .

        ELSE .
          &lt;cells&gt;-type    = c_tag-s .
          &lt;cells&gt;-value_s = iv_value .
          READ TABLE s_model-t_sharedstrings ASSIGNING &lt;sharedstrings&gt;
          WITH TABLE KEY value = &lt;cells&gt;-value_s .
          IF sy-subrc NE 0 .
            ls_sharedstrings-value    = &lt;cells&gt;-value_s .
            ls_sharedstrings-key      = LINES( s_model-t_sharedstrings ) .
            INSERT ls_sharedstrings INTO TABLE s_model-t_sharedstrings
            ASSIGNING &lt;sharedstrings&gt; .
          ENDIF .
          IF &lt;sharedstrings&gt; IS ASSIGNED .
            &lt;cells&gt;-value = &lt;sharedstrings&gt;-key .
          ENDIF .
        ENDIF .

      ELSE .

        IF &lt;cells&gt;-tmp_flag IS INITIAL .
          &lt;cells&gt;-tmp_flag    = abap_on .
          &lt;cells&gt;-tmp_value_s = &lt;cells&gt;-value_s .

          IF &lt;cells&gt;-type EQ c_tag-s .
            READ TABLE s_model-t_sharedstrings ASSIGNING &lt;sharedstrings&gt;
            WITH TABLE KEY value = &lt;cells&gt;-value_s .
            CHECK sy-subrc EQ 0 .
            IF &lt;sharedstrings&gt;-si_node IS BOUND .
              &lt;cells&gt;-tmp_si_node = &lt;sharedstrings&gt;-si_node-&gt;clone( ) .
            ENDIF .
          ENDIF .
        ENDIF .

        REPLACE ALL OCCURRENCES OF iv_textmark IN &lt;cells&gt;-tmp_value_s WITH iv_value .
        CHECK sy-subrc EQ 0 .

        CHECK &lt;cells&gt;-tmp_si_node IS BOUND .
        lr_si_elem ?= &lt;cells&gt;-tmp_si_node .
        lr_val_ncol = lr_si_elem-&gt;get_elements_by_tag_name( name = c_tag-t ) .
        CHECK lr_val_ncol IS BOUND .
        DO .
          lv_val_index = sy-index - 1 .
          lr_val_node = lr_val_ncol-&gt;get_item( index = lv_val_index ) .
          IF lr_val_node IS NOT BOUND. EXIT. ENDIF .
          lv_stringtmp = lr_val_node-&gt;get_value( ) .
          REPLACE ALL OCCURRENCES OF iv_textmark IN lv_stringtmp WITH iv_value .
          CHECK sy-subrc EQ 0 .
          lr_val_node-&gt;set_value( lv_stringtmp ) .
          CHECK lv_stringtmp IS INITIAL .
          lr_val_node_r = lr_val_node-&gt;get_parent( ) .
          CHECK lr_val_node_r IS BOUND .
          CHECK c_tag-r EQ lr_val_node_r-&gt;get_name( ) .
          lr_val_node_r-&gt;remove_node( ) .
        ENDDO .
      ENDIF .
    ENDLOOP .


  ENDMETHOD .                     &quot; begin_field_textmark
  METHOD value_describe .
    DATA:
      lv_date_sap       TYPE dats ,
      lv_date_sap_char  TYPE ty_char8 .
    CONSTANTS:
      lv_date_beg       TYPE dats VALUE &apos;18991230&apos; .

    CLEAR:
      ev_number_flag,
      ev_date_flag  ,
      ev_date_excel .

    CHECK iv_value IS NOT INITIAL .

    IF iv_cell_dateformat_style EQ abap_on .
      IF iv_value EQ &apos;00000000&apos;
      OR iv_value EQ &apos;00.00.0000&apos; .
        ev_date_flag  = abap_on .
        ev_date_excel = space .
      ELSE .
        IF STRLEN( iv_value ) EQ 8 .
          lv_date_sap_char = iv_value .
        ELSE .
          CALL FUNCTION &apos;CONVERSION_EXIT_IDATE_INPUT&apos;
            EXPORTING
              input  = iv_value
            IMPORTING
              output = lv_date_sap_char.
        ENDIF .
        IF  lv_date_sap_char IS NOT INITIAL
        AND lv_date_sap_char CO &apos; 1234567890&apos; .
          ev_date_flag  = abap_on .
          lv_date_sap   = lv_date_sap_char .
          ev_date_excel = lv_date_sap - lv_date_beg .
          CONDENSE ev_date_excel .
        ENDIF .
      ENDIF .
    ENDIF .

    IF ev_date_flag IS INITIAL .
      ev_number_flag = is_number( iv_value ) .
    ENDIF .

  ENDMETHOD .                     &quot; value_describe
  METHOD is_number .
    rv_number = space .
    CHECK iv_value CA &apos;0123456789&apos; .

    DATA lv_value TYPE string .
    lv_value = iv_value .
    TRY.
        FIND REGEX &apos;^\-?\d{1,}\.?\d{0,}$&apos; IN lv_value .
      CATCH cx_sy_regex
            cx_sy_regex_too_complex .
        RETURN .
    ENDTRY .
    CHECK sy-subrc EQ 0 .
    rv_number = abap_on .
  ENDMETHOD .                    &quot;is_number
  METHOD postprocessing .
    DATA:
      lv_document_rawdata   TYPE ty_rawdata ,
      lt_document_table     TYPE tsfmime ,
      lv_document_size      TYPE i ,
      lv_selected_sheetname TYPE ty_char31 ,
      lv_macro_string       TYPE ty_char1024 ,
      lr_error              TYPE REF TO i_oi_error .
    FIELD-SYMBOLS:
      &lt;mergecells&gt;          TYPE ty_s_mergecells ,
      &lt;sheets&gt;              TYPE ty_s_sheets .

    CHECK v_gui_available IS NOT INITIAL .

    CHECK v_postprocessing_nopgbrk IS NOT INITIAL
       OR v_postprocessing_autofit IS NOT INITIAL
       OR cv_vbs_code              IS NOT INITIAL
       OR ( iv_startup_macro IS NOT INITIAL AND v_extension EQ c_extension_xlsm ) .

    msg_init( ) .
    lv_document_rawdata = rawdata_get( ) .

    DATA lr_dummy_container  TYPE REF TO cl_gui_custom_container.
    CREATE OBJECT lr_dummy_container
      EXPORTING
        container_name = &apos;DUMMY&apos;
      EXCEPTIONS
        OTHERS         = 1.
    IF sy-subrc NE 0 .
      msg_syst_catch( iv_toplist = abap_on ) .
      msg_show( ) .
      RETURN .
    ENDIF .

*   Initialize objects
    CREATE OBJECT r_ole
      EXPORTING
        ir_container        = lr_dummy_container &quot;cl_gui_container=&gt;default_screen
        iv_document_rawdata = lv_document_rawdata
        iv_viewmode         = lcl_ole=&gt;c_viewmode-inplace
        iv_readonly         = abap_off
        iv_background       = abap_on
      EXCEPTIONS
        OTHERS              = 1.
    IF sy-subrc NE 0 .
      MESSAGE e000(lp)
         WITH v_text-t280   &quot; text: Problem while OLE/VBScript post-processing
         INTO v_dummy .
      msg_syst_catch( iv_toplist = abap_on ) .
      msg_show( ) .
      RETURN .
    ENDIF .

    cl_gui_cfw=&gt;flush( ) .

*   Keep active sheet
    r_ole-&gt;r_spreadsheet-&gt;get_active_sheet( IMPORTING sheetname = lv_selected_sheetname ) .

    CASE s_presets_rt-postprocessing_method .
      WHEN c_postprocessing_method-vbs .
*   Auto Fit rows/ columns for merged cells
        postpr_vbs_autofit( ) .

        CASE v_retcode .
          WHEN c_retcode-error .
            MESSAGE e000(lp)
              WITH v_text-t280   &quot; text: Problem while OLE/VBScript post-processing
                   &apos;(&apos;
                   v_text-t281   &quot; text: AutoFit merged cells
                   &apos;)&apos;
              INTO v_dummy .
            msg_syst_catch( iv_toplist = abap_on ) .

          WHEN OTHERS .
*   Revise Automatic Page Breaks
            postpr_vbs_nopgbrk( ) .

            IF v_retcode EQ c_retcode-error .
              MESSAGE e000(lp)
                 WITH v_text-t280   &quot; text: Problem while OLE/VBScript post-processing
                      &apos;(&apos;
                      v_text-t153   &quot; text: Preventing of automatic page breaks (inside)
                      &apos;)&apos;
                 INTO v_dummy .
              msg_syst_catch( iv_toplist = abap_on ) .
            ENDIF .
        ENDCASE .

      WHEN c_postprocessing_method-ole .
*   Auto Fit rows/ columns for merged cells
        postpr_ole_autofit( ) .

*   Revise Automatic Page Breaks
        postpr_ole_nopgbrk( ) .
    ENDCASE .

*   Restore active sheet
    r_ole-&gt;r_spreadsheet-&gt;select_sheet( name = lv_selected_sheetname ) .

*   Final post-processing
    IF v_retcode NE c_retcode-error .
      postpr_vbs_final( CHANGING cv_vbs_code       = cv_vbs_code
                                 ct_vbs_tables_tab = ct_vbs_tables_tab ) .

      IF v_retcode EQ c_retcode-error .
        MESSAGE e000(lp)
           WITH v_text-t280   &quot; text: Problem while OLE/VBScript post-processing
                &apos;(&apos;
                v_text-t287   &quot; text: Final post-processing
                &apos;)&apos;
           INTO v_dummy .
        msg_syst_catch( iv_toplist = abap_on ) .
      ENDIF .
    ENDIF .

*   Run embedded VBA-macro ( only for .XLSM, not for XLSX )
    IF  iv_startup_macro IS NOT INITIAL
    AND v_extension EQ c_extension_xlsm .
      lv_macro_string = iv_startup_macro .
      r_ole-&gt;r_docproxy-&gt;execute_macro( EXPORTING macro_string = lv_macro_string
                                                  no_flush     = space
                                        IMPORTING error        = lr_error ) .
      msg_io_catch( lr_error ) .
    ENDIF .

*   Show messages, if occurs
    msg_show( ) .

*   Get result
    r_ole-&gt;rawdata_get_as_table(
        EXPORTING iv_extension      = v_extension
        IMPORTING et_document_table = lt_document_table
                  ev_document_size  = lv_document_size ) .

    me-&gt;rawdata_set_as_table(
        EXPORTING it_document_table = lt_document_table
                  iv_document_size  = lv_document_size ) .

*   Release objects
    r_ole-&gt;free( ) .
    FREE r_ole .

    FREE lr_dummy_container .
  ENDMETHOD .                    &quot;postprocessing
  METHOD postpr_ole_nopgbrk .
    DATA:
      lv_selection_top      TYPE i ,
      lv_selection_left     TYPE i ,
      lv_selection_rows     TYPE i ,
      lv_selection_columns  TYPE i ,
      lv_index              TYPE i ,
      lv_row                TYPE i ,
      lv_column             TYPE i ,
      lv_ref                TYPE string .
    FIELD-SYMBOLS:
      &lt;nopgbrk_range&gt;       TYPE ty_s_nopgbrk_range ,
      &lt;sheets&gt;              TYPE ty_s_sheets .

    LOOP AT s_model-t_sheets ASSIGNING &lt;sheets&gt;
      WHERE sheetdata_runtime-postprocessing_nopgbrk IS NOT INITIAL .

      r_ole-&gt;r_spreadsheet-&gt;select_sheet(
            EXPORTING name = &lt;sheets&gt;-name ) .

*     keep actual cell selection
      r_ole-&gt;r_spreadsheet-&gt;get_selection(
            IMPORTING top     = lv_selection_top
                      left    = lv_selection_left
                      rows    = lv_selection_rows
                      columns = lv_selection_columns ) .

      GET PROPERTY OF r_ole-&gt;s_ole-application  &apos;Activesheet&apos; = r_ole-&gt;s_ole-activesheet no flush .

      CALL METHOD OF r_ole-&gt;s_ole-application &apos;ActiveWindow&apos; = r_ole-&gt;s_ole-activewindow NO FLUSH .
      SET PROPERTY OF r_ole-&gt;s_ole-activewindow &apos;View&apos; = 2 no flush .

*------------------- Horizontal Page Breaks
      GET PROPERTY OF r_ole-&gt;s_ole-activesheet  &apos;HPageBreaks&apos; = r_ole-&gt;s_ole-pagebreaks .
      DO .
        lv_index = sy-index .
        GET PROPERTY OF r_ole-&gt;s_ole-activesheet  &apos;HPageBreaks&apos; = r_ole-&gt;s_ole-pagebreak exporting #1 = lv_index .
        IF sy-subrc NE 0 .
          r_ole-&gt;free_ole_object( &apos;pagebreak&apos; ) .
          EXIT .
        ENDIF .

        CALL METHOD OF r_ole-&gt;s_ole-pagebreak &apos;Location&apos; = r_ole-&gt;s_ole-location.
        IF sy-subrc EQ 0 .
          CALL METHOD OF r_ole-&gt;s_ole-location &apos;Row&apos; = lv_row.
          CALL METHOD OF r_ole-&gt;s_ole-location &apos;Column&apos; = lv_column.

          LOOP AT &lt;sheets&gt;-sheetdata_runtime-t_nopgbrk_range ASSIGNING &lt;nopgbrk_range&gt;
            WHERE top   IS NOT INITIAL
              AND beg_y LT lv_row AND end_y GE lv_row .

            conv_ref_nc( EXPORTING iv_beg_x = lv_column
                                   iv_beg_y = &lt;nopgbrk_range&gt;-beg_y
                         IMPORTING ev_ref   = lv_ref ) .

            CALL METHOD OF r_ole-&gt;s_ole-activesheet &apos;Range&apos; = r_ole-&gt;s_ole-locationnew EXPORTING #1 = lv_ref.
            IF sy-subrc EQ 0 .
              CALL METHOD OF r_ole-&gt;s_ole-pagebreaks &apos;Add&apos; EXPORTING #1 = r_ole-&gt;s_ole-locationnew.
            ENDIF .

            EXIT .
          ENDLOOP .
        ENDIF .

        r_ole-&gt;free_ole_object( &apos;locationnew&apos; ) .
        r_ole-&gt;free_ole_object( &apos;location&apos; ) .
        r_ole-&gt;free_ole_object( &apos;pagebreak&apos; ) .
      ENDDO .
      r_ole-&gt;free_ole_object( &apos;pagebreaks&apos; ) .

*------------------- Vertical Page Breaks
      GET PROPERTY OF r_ole-&gt;s_ole-activesheet  &apos;VPageBreaks&apos; = r_ole-&gt;s_ole-pagebreaks .
      DO .
        lv_index = sy-index .
        GET PROPERTY OF r_ole-&gt;s_ole-activesheet  &apos;VPageBreaks&apos; = r_ole-&gt;s_ole-pagebreak exporting #1 = lv_index .
        IF sy-subrc NE 0 .
          r_ole-&gt;free_ole_object( &apos;pagebreak&apos; ) .
          EXIT .
        ENDIF .

        CALL METHOD OF r_ole-&gt;s_ole-pagebreak &apos;Location&apos; = r_ole-&gt;s_ole-location.
        IF sy-subrc EQ 0 .
          CALL METHOD OF r_ole-&gt;s_ole-location &apos;Row&apos; = lv_row.
          CALL METHOD OF r_ole-&gt;s_ole-location &apos;Column&apos; = lv_column.

          LOOP AT &lt;sheets&gt;-sheetdata_runtime-t_nopgbrk_range ASSIGNING &lt;nopgbrk_range&gt;
            WHERE left  IS NOT INITIAL
              AND beg_x LT lv_column AND end_x GE lv_column .

            conv_ref_nc( EXPORTING iv_beg_x = &lt;nopgbrk_range&gt;-beg_x
                                   iv_beg_y = lv_row
                         IMPORTING ev_ref   = lv_ref ) .

            CALL METHOD OF r_ole-&gt;s_ole-activesheet &apos;Range&apos; = r_ole-&gt;s_ole-locationnew EXPORTING #1 = lv_ref.
            IF sy-subrc EQ 0 .
              CALL METHOD OF r_ole-&gt;s_ole-pagebreaks &apos;Add&apos; EXPORTING #1 = r_ole-&gt;s_ole-locationnew.
            ENDIF .

            EXIT .
          ENDLOOP .
        ENDIF .

        r_ole-&gt;free_ole_object( &apos;locationnew&apos; ) .
        r_ole-&gt;free_ole_object( &apos;location&apos; ) .
        r_ole-&gt;free_ole_object( &apos;pagebreak&apos; ) .
      ENDDO .
      r_ole-&gt;free_ole_object( &apos;pagebreaks&apos; ) .

      r_ole-&gt;free_ole_object( &apos;activesheet&apos; ) .

*     restore cell selection
      r_ole-&gt;r_spreadsheet-&gt;set_selection(
            EXPORTING top     = lv_selection_top
                      left    = lv_selection_left
                      rows    = lv_selection_rows
                      columns = lv_selection_columns ) .
    ENDLOOP .

  ENDMETHOD .                    &quot;postpr_ole_nopgbrk
  METHOD postpr_ole_autofit .
    DATA:
      lv_selection_top      TYPE i ,
      lv_selection_left     TYPE i ,
      lv_selection_rows     TYPE i ,
      lv_selection_columns  TYPE i .
    FIELD-SYMBOLS:
      &lt;mergecells&gt;          TYPE ty_s_mergecells ,
      &lt;sheets&gt;              TYPE ty_s_sheets .

    LOOP AT s_model-t_sheets ASSIGNING &lt;sheets&gt;
      WHERE sheetdata_runtime-postprocessing_autofit IS NOT INITIAL .

      r_ole-&gt;r_spreadsheet-&gt;select_sheet(
            EXPORTING name = &lt;sheets&gt;-name ) .

*     keep actual cell selection
      r_ole-&gt;r_spreadsheet-&gt;get_selection(
            IMPORTING top     = lv_selection_top
                      left    = lv_selection_left
                      rows    = lv_selection_rows
                      columns = lv_selection_columns ) .

      GET PROPERTY OF r_ole-&gt;s_ole-application  &apos;Activesheet&apos; = r_ole-&gt;s_ole-activesheet no flush .

      LOOP AT &lt;sheets&gt;-sheetdata_runtime-t_mergecells ASSIGNING &lt;mergecells&gt;
        WHERE autofit_rows IS NOT INITIAL
           OR autofit_cols IS NOT INITIAL .

        CLEAR s_ole_variables .

*       get merged cell range which has to be resized (i.e.current range)
        conv_ref_nc( EXPORTING iv_beg_x = &lt;mergecells&gt;-beg_x
                               iv_beg_y = &lt;mergecells&gt;-beg_y
                               iv_end_x = &lt;mergecells&gt;-end_x
                               iv_end_y = &lt;mergecells&gt;-end_y
                     IMPORTING ev_ref   = s_ole_variables-ref ) .
        CALL METHOD OF r_ole-&gt;s_ole-activesheet &apos;Range&apos; = r_ole-&gt;s_ole-cur_range NO FLUSH EXPORTING #1 = s_ole_variables-ref.

*       check wrap text option
        GET PROPERTY OF r_ole-&gt;s_ole-cur_range &apos;WrapText&apos; = s_ole_variables-cur_wraptext .
        IF s_ole_variables-cur_wraptext NE 1 .
          r_ole-&gt;free_ole_object( &apos;cur_range&apos; ) .
          RETURN .
        ENDIF .

        conv_ref_nc( EXPORTING iv_beg_x = &lt;mergecells&gt;-beg_x
                               iv_beg_y = &lt;mergecells&gt;-beg_y
                               iv_end_x = &lt;mergecells&gt;-beg_x
                               iv_end_y = &lt;mergecells&gt;-beg_y
                     IMPORTING ev_ref   = s_ole_variables-ref1 ) .
        CALL METHOD OF r_ole-&gt;s_ole-activesheet &apos;Range&apos; = r_ole-&gt;s_ole-cur_rang1 NO FLUSH EXPORTING #1 = s_ole_variables-ref1.

*       calculate total height of rows in the current range
        s_ole_variables-cur_rows_count = &lt;mergecells&gt;-end_y - &lt;mergecells&gt;-beg_y + 1 .
        DO s_ole_variables-cur_rows_count TIMES .
          GET PROPERTY OF r_ole-&gt;s_ole-cur_range  &apos;Rows&apos; = r_ole-&gt;s_ole-cur_range_row no flush exporting #1 = sy-index .
          CLEAR s_ole_variables-height .
          GET PROPERTY OF r_ole-&gt;s_ole-cur_range_row  &apos;RowHeight&apos; = s_ole_variables-height .&quot;NO FLUSH .
          ADD s_ole_variables-height TO s_ole_variables-cur_rows_height .
          r_ole-&gt;free_ole_object( &apos;cur_range_row&apos; ) .
        ENDDO .

*       calculate total width of columns in the current range
        s_ole_variables-cur_cols_count = &lt;mergecells&gt;-end_x - &lt;mergecells&gt;-beg_x + 1 .
        DO s_ole_variables-cur_cols_count TIMES .
          GET PROPERTY OF r_ole-&gt;s_ole-cur_range  &apos;Columns&apos; = r_ole-&gt;s_ole-cur_range_col no flush
                exporting #1 = sy-index .
          CLEAR s_ole_variables-width .
          GET PROPERTY OF r_ole-&gt;s_ole-cur_range_col  &apos;ColumnWidth&apos; = s_ole_variables-width .&quot;NO FLUSH.
          ADD s_ole_variables-width TO s_ole_variables-cur_cols_width .
          r_ole-&gt;free_ole_object( &apos;cur_range_col&apos; ) .
        ENDDO .

*       copy Current range content to bottom-right corner of the worksheet (i.e.Temporary range)
        DATA lv_tmpx    TYPE ty_char100 .
        DATA lv_tmpy    TYPE ty_char100 .
        DATA lv_ref     TYPE ty_char100 .
        lv_tmpx = 16380   - s_ole_variables-cur_cols_count . CONDENSE lv_tmpx NO-GAPS .
        lv_tmpy = 1048570 - s_ole_variables-cur_rows_count . CONDENSE lv_tmpy NO-GAPS .

        conv_ref_nc( EXPORTING iv_beg_x = lv_tmpx
                               iv_beg_y = lv_tmpy
                               iv_end_x = lv_tmpx
                               iv_end_y = lv_tmpy
                     IMPORTING ev_ref   = s_ole_variables-ref2 ) .

        CALL METHOD OF r_ole-&gt;s_ole-activesheet &apos;Range&apos; = r_ole-&gt;s_ole-tmp_range NO FLUSH EXPORTING #1 = s_ole_variables-ref2 .

        CALL METHOD OF r_ole-&gt;s_ole-cur_rang1 &apos;Copy&apos; NO FLUSH .
        CALL METHOD OF r_ole-&gt;s_ole-tmp_range &apos;Select&apos; NO FLUSH .
        CALL METHOD OF r_ole-&gt;s_ole-activesheet &apos;Paste&apos; NO FLUSH .

*       disable cells merging in the temporary range
        SET PROPERTY OF r_ole-&gt;s_ole-tmp_range &apos;MergeCells&apos; = 0 no flush .
        cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 1 ) .

*       now all content of the temporary range is placed in a single cell (temporary cell)
        FREE OBJECT r_ole-&gt;s_ole-tmp_range .
        CLEAR r_ole-&gt;s_ole-tmp_range .
        CALL METHOD OF r_ole-&gt;s_ole-activesheet &apos;Range&apos; = r_ole-&gt;s_ole-tmp_range NO FLUSH EXPORTING #1 = s_ole_variables-ref2 .

        CASE abap_on .
          WHEN &lt;mergecells&gt;-autofit_rows .
*           set column width of the temporary cell equal to total width of current range
            SET PROPERTY OF r_ole-&gt;s_ole-tmp_range  &apos;ColumnWidth&apos; = s_ole_variables-cur_cols_width no flush .

*           auto fit row height of the temporary cell
            GET PROPERTY OF r_ole-&gt;s_ole-tmp_range  &apos;Rows&apos; = r_ole-&gt;s_ole-tmp_range_row no flush exporting #1 = 1 .
            CALL METHOD OF r_ole-&gt;s_ole-tmp_range_row &apos;AutoFit&apos; NO FLUSH.

*           get adjusted row height
            GET PROPERTY OF r_ole-&gt;s_ole-tmp_range_row  &apos;RowHeight&apos; = s_ole_variables-height no flush .

            cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 1 ) .
            r_ole-&gt;free_ole_object( &apos;tmp_range_row&apos; ) .

*           if the adjusted row height is greater than the total height of rows of current range, we resize it
            IF s_ole_variables-height GT s_ole_variables-cur_rows_height .
              GET PROPERTY OF r_ole-&gt;s_ole-cur_range  &apos;Rows&apos; = r_ole-&gt;s_ole-cur_range_rows no flush .
              s_ole_variables-cur_rows_height = s_ole_variables-height / s_ole_variables-cur_rows_count .
              SET PROPERTY OF r_ole-&gt;s_ole-cur_range_rows  &apos;RowHeight&apos; = s_ole_variables-cur_rows_height no flush .

              cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 1 ) .
              r_ole-&gt;free_ole_object( &apos;cur_range_rows&apos; ) .
            ENDIF .

          WHEN &lt;mergecells&gt;-autofit_cols .
*           set row height of the temporary cell equal to total height of current range
            SET PROPERTY OF r_ole-&gt;s_ole-tmp_range  &apos;RowHeight&apos; = s_ole_variables-cur_rows_height no flush.

*           auto fit column width of the temporary cell
            GET PROPERTY OF r_ole-&gt;s_ole-tmp_range  &apos;Columns&apos; = r_ole-&gt;s_ole-tmp_range_col no flush exporting #1 = 1 .
            CALL METHOD OF r_ole-&gt;s_ole-tmp_range_col &apos;AutoFit&apos; NO FLUSH.

*           get adjusted column width
            GET PROPERTY OF r_ole-&gt;s_ole-tmp_range_col  &apos;ColumnWidth&apos; = s_ole_variables-width no flush .

            cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 1 ) .
            r_ole-&gt;free_ole_object( &apos;tmp_range_col&apos; ) .

*           if the adjusted column width is greater than the total width of columns of current range, we resize it
            IF s_ole_variables-width GT s_ole_variables-cur_cols_width .
              GET PROPERTY OF r_ole-&gt;s_ole-cur_range  &apos;Columns&apos; = r_ole-&gt;s_ole-cur_range_cols no flush .
              s_ole_variables-cur_cols_width = s_ole_variables-width / s_ole_variables-cur_cols_count .
              SET PROPERTY OF r_ole-&gt;s_ole-cur_range_cols  &apos;ColumnWidth&apos; = s_ole_variables-cur_cols_width no flush .

              cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 1 ) .
              r_ole-&gt;free_ole_object( &apos;cur_range_cols&apos; ) .
            ENDIF .
        ENDCASE .

*       clear the temporary range
        CALL METHOD OF r_ole-&gt;s_ole-tmp_range &apos;Clear&apos; NO FLUSH .
        cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 1 ) .

        r_ole-&gt;free_ole_object( &apos;cur_range&apos; ) .
        r_ole-&gt;free_ole_object( &apos;cur_rang1&apos; ) .
        r_ole-&gt;free_ole_object( &apos;tmp_range&apos; ) .
      ENDLOOP .

      r_ole-&gt;free_ole_object( &apos;activesheet&apos; ) .

*     restore cell selection
      r_ole-&gt;r_spreadsheet-&gt;set_selection(
            EXPORTING top     = lv_selection_top
                      left    = lv_selection_left
                      rows    = lv_selection_rows
                      columns = lv_selection_columns ) .
    ENDLOOP .

  ENDMETHOD .                    &quot;postpr_ole_autofit
  METHOD postpr_vbs_autofit .
    CHECK v_postprocessing_autofit IS NOT INITIAL .

    DATA:
      lv_selection_top      TYPE i ,
      lv_selection_left     TYPE i ,
      lv_selection_rows     TYPE i ,
      lv_selection_columns  TYPE i ,
      lt_mergecells         TYPE ty_t_mergecells ,
      lr_table_coll         TYPE REF TO i_oi_table_collection ,
      lr_error              TYPE REF TO i_oi_error .
    FIELD-SYMBOLS:
      &lt;sheets&gt;              TYPE ty_s_sheets .

    msg_init( ) .

*   initialize table collection
    r_ole-&gt;r_control-&gt;get_table_collection( IMPORTING table_collection = lr_table_coll
                                                      error            = lr_error ).
    msg_io_catch( lr_error ) .
    CHECK v_retcode NE c_retcode-error .

*   create VBScript macros
    postpr_vbs_autofit_macros_add( ) .

    IF v_retcode NE c_retcode-error .
      LOOP AT s_model-t_sheets ASSIGNING &lt;sheets&gt;
        WHERE sheetdata_runtime-postprocessing_autofit IS NOT INITIAL .

        CHECK v_retcode NE c_retcode-error .

*       get merged cells, which needs autofit
        lt_mergecells[] = &lt;sheets&gt;-sheetdata_runtime-t_mergecells[] .
        DELETE lt_mergecells WHERE autofit_rows IS INITIAL
                               AND autofit_cols IS INITIAL .

        CHECK lt_mergecells[] IS NOT INITIAL .

        DO 1 TIMES .
*         send internal table T_MERGECELLS to MS Excel application
          lr_table_coll-&gt;add_table(  EXPORTING table_name = &apos;T_MERGECELLS&apos;
                                               table_type = i_oi_table_collection=&gt;table_type_output
                                     IMPORTING error      = lr_error
                                     CHANGING  data_table = lt_mergecells ) .
          msg_io_catch( lr_error ) .
          CHECK v_retcode NE c_retcode-error .

*         select actual worksheet
          r_ole-&gt;r_spreadsheet-&gt;select_sheet( EXPORTING name  = &lt;sheets&gt;-name
                                              IMPORTING error = lr_error ) .
          msg_io_catch( lr_error ) .
          CHECK v_retcode NE c_retcode-error .

*         keep actual cell selection
          r_ole-&gt;r_spreadsheet-&gt;get_selection(
                IMPORTING top     = lv_selection_top
                          left    = lv_selection_left
                          rows    = lv_selection_rows
                          columns = lv_selection_columns ) .

*         run VBScript macros
          CALL METHOD OF r_ole-&gt;s_ole-vbscript &apos;Run&apos; EXPORTING #1 = &apos;MergeCellsAutofit&apos; .

          IF sy-subrc NE 0 .
            MESSAGE e000(lp) WITH v_text-t283   &quot; text: Macros execution error
            INTO v_dummy .
            msg_syst_catch( ) .
          ENDIF .

*         restore cell selection
          r_ole-&gt;r_spreadsheet-&gt;set_selection(
                EXPORTING top     = lv_selection_top
                          left    = lv_selection_left
                          rows    = lv_selection_rows
                          columns = lv_selection_columns ) .
        ENDDO .

        lr_table_coll-&gt;remove_all_tables( ) .
      ENDLOOP .
    ENDIF .

*   free VBScript macros
    FREE OBJECT r_ole-&gt;s_ole-vbscript .
    CLEAR r_ole-&gt;s_ole-vbscript .

    lr_table_coll-&gt;remove_all_tables( ) .

  ENDMETHOD .                    &quot;postpr_vbs_autofit
  METHOD postpr_vbs_autofit_macros_add .
    cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .

*   add VBScript code
    CONCATENATE
    `Sub MergeCellsAutofit()`
    `  XLWB_Application.ScreenUpdating = False`

    `  Set XLWB_Table = XLWB_ActiveWorkbook.Container.Tables(&quot;T_MERGECELLS&quot;).Table`

    `  For i = 1 To XLWB_Table.Rows.Count`
    `    Set XLWB_TableRow = XLWB_Table.Rows(i)`
    `    Call MergeCellsAutofitProcess(XLWB_TableRow.Cell(1), _`
    `                                  XLWB_TableRow.Cell(2), _`
    `                                  XLWB_TableRow.Cell(3), _`
    `                                  XLWB_TableRow.Cell(4), _`
    `                                  XLWB_TableRow.Cell(5), _`
    `                                  XLWB_TableRow.Cell(6))`
    `  Next`
    `End Sub`

    `Sub MergeCellsAutofitProcess(beg_y, _`
    `                             beg_x, _`
    `                             end_y, _`
    `                             end_x, _`
    `                             autofit_rows, _`
    `                             autofit_cols)`

    `  Set MySheet = XLWB_ActiveWorkbook.ActiveSheet`

    `  &apos;get merged cell range which has to be resized (i.e.current range)`
    `  Set CurRange = MySheet.Range(MySheet.Cells(beg_y, beg_x), MySheet.Cells(end_y, end_x))`
    `  Set CurRang1 = MySheet.Range(MySheet.Cells(beg_y, beg_x), MySheet.Cells(beg_y, beg_x))`

    `  &apos;check wrap text option`
    `  If CurRange.WrapText = False Then`
    `    Exit Sub`
    `  End If`

    `  &apos;calculate total height of rows in the current range`
    `  For Each row In CurRange.Rows`
    `    CurH = CurH + row.RowHeight`
    `  Next`

    `  &apos;calculate total width of columns in the current range`
    `  For Each Col In CurRange.Columns`
    `    CurW = CurW + Col.ColumnWidth`
    `  Next`

    `  &apos;copy Current range content to bottom-right corner of the worksheet (i.e.Temporary range)`
    `  TmpX = MySheet.Columns.Count - CurRange.Columns.Count`
    `  TmpY = MySheet.Rows.Count - CurRange.Rows.Count`
    `  Set TmpRange = MySheet.Range(MySheet.Cells(TmpY, TmpX), MySheet.Cells(TmpY, TmpX))`

    `  CurRang1.Copy`
    `  TmpRange.Select`
    `  MySheet.Paste`

    `  &apos;disable cells merging in the temporary range`
    `  TmpRange.MergeCells = False`

    `  &apos;now all content of the temporary range is placed in a single cell &apos;A1&apos; (temporary cell)`
    `  Set TmpRange = MySheet.Range(MySheet.Cells(TmpY, TmpX), MySheet.Cells(TmpY, TmpX))`

    `  If autofit_rows = &quot;X&quot; Then`
    `    &apos;set column width of the temporary cell equal to total width of current range`
    `    TmpRange.ColumnWidth = CurW`

    `    &apos;auto fit row height of the temporary cell`
    `    TmpRange.Rows.AutoFit`

    `    &apos;get adjusted row height`
    `    NewH = TmpRange.RowHeight`

    `    &apos;if the adjusted row height is greater than the total height of rows of current range, we resize it`
    `    If NewH &gt; CurH Then`
    `       CurRange.RowHeight = NewH / CurRange.Rows.Count + 1`
    `    End If`

    `  ElseIf autofit_cols = &quot;X&quot; Then`
    `    &apos;set row height of the temporary cell equal to total height of current range`
    `    TmpRange.RowHeight = CurH`

    `    &apos;auto fit column width of the temporary cell`
    `    TmpRange.Columns.AutoFit`

    `    &apos;get adjusted column width`
    `    NewW = TmpRange.ColumnWidth`

    `    &apos;if the adjusted column width is greater than the total width of columns of current range, we resize it`
    `    If NewW &gt; CurW Then`
    `       CurRange.ColumnWidth = NewW / CurRange.Columns.Count + 1`
    `    End If`
    `  End If`

    `  XLWB_Application.Selection.EntireRow.Delete`
    `  XLWB_Application.Selection.EntireColumn.Delete`
    `End Sub`
    INTO s_ole_variables-vbscode SEPARATED BY cl_abap_char_utilities=&gt;cr_lf.

    CREATE OBJECT r_ole-&gt;s_ole-vbscript &apos;MSScriptControl.ScriptControl&apos; NO FLUSH .
    SET PROPERTY OF r_ole-&gt;s_ole-vbscript &apos;Language&apos; = &apos;VBScript&apos; no flush .
    CALL METHOD OF r_ole-&gt;s_ole-vbscript &apos;AddObject&apos; NO FLUSH EXPORTING #1 = &apos;XLWB_Application&apos; #2 = r_ole-&gt;s_ole-application .
    CALL METHOD OF r_ole-&gt;s_ole-vbscript &apos;AddObject&apos; NO FLUSH EXPORTING #1 = &apos;XLWB_ActiveWorkbook&apos; #2 = r_ole-&gt;s_ole-activeworkbook .
    CALL METHOD OF r_ole-&gt;s_ole-vbscript &apos;AddCode&apos; NO FLUSH EXPORTING #1 = s_ole_variables-vbscode .

    cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 1 ) .
    CHECK sy-subrc NE 0 .

    MESSAGE e000(lp) WITH v_text-t282   &quot; text: Macros initialization error
    INTO v_dummy .
    msg_syst_catch( ) .
  ENDMETHOD .                    &quot;postpr_vbs_autofit_macros_add
  METHOD postpr_vbs_nopgbrk .
    CHECK v_postprocessing_nopgbrk IS NOT INITIAL .

    TYPES:
      BEGIN OF ty_s_nopgbrk ,
        beg                 TYPE i ,
        end                 TYPE i ,
      END   OF ty_s_nopgbrk ,
      ty_t_nopgbrk          TYPE STANDARD TABLE OF ty_s_nopgbrk .
    DATA:
      lv_selection_top      TYPE i ,
      lv_selection_left     TYPE i ,
      lv_selection_rows     TYPE i ,
      lv_selection_columns  TYPE i ,
      lr_table_coll         TYPE REF TO i_oi_table_collection ,
      lr_error              TYPE REF TO i_oi_error ,
      ls_nopgbrk            TYPE ty_s_nopgbrk ,
      lt_nopgbrk_horizontal TYPE ty_t_nopgbrk ,
      lt_nopgbrk_vertical   TYPE ty_t_nopgbrk .
    FIELD-SYMBOLS:
      &lt;sheets&gt;              TYPE ty_s_sheets ,
      &lt;nopgbrk_range&gt;       TYPE ty_s_nopgbrk_range .

    msg_init( ) .

*   initialize table collection
    r_ole-&gt;r_control-&gt;get_table_collection( IMPORTING table_collection = lr_table_coll
                                                      error            = lr_error ).
    msg_io_catch( lr_error ) .
    CHECK v_retcode NE c_retcode-error .

*   create VBScript macros
    postpr_vbs_nopgbrk_macros_add( ) .

    IF v_retcode NE c_retcode-error .
      LOOP AT s_model-t_sheets ASSIGNING &lt;sheets&gt;
        WHERE sheetdata_runtime-postprocessing_nopgbrk IS NOT INITIAL .

        CHECK v_retcode NE c_retcode-error .

*       get merged cells, which needs autofit
        CLEAR lt_nopgbrk_horizontal .
        CLEAR lt_nopgbrk_vertical .

        LOOP AT &lt;sheets&gt;-sheetdata_runtime-t_nopgbrk_range ASSIGNING &lt;nopgbrk_range&gt; .
          CLEAR ls_nopgbrk .
          IF &lt;nopgbrk_range&gt;-top IS NOT INITIAL .
            ls_nopgbrk-beg = &lt;nopgbrk_range&gt;-beg_y .
            ls_nopgbrk-end = &lt;nopgbrk_range&gt;-end_y .
            CHECK ls_nopgbrk-beg IS NOT INITIAL
              AND ls_nopgbrk-end IS NOT INITIAL .
            COLLECT ls_nopgbrk INTO lt_nopgbrk_horizontal .
          ELSEIF &lt;nopgbrk_range&gt;-left IS NOT INITIAL .
            ls_nopgbrk-beg = &lt;nopgbrk_range&gt;-beg_x .
            ls_nopgbrk-end = &lt;nopgbrk_range&gt;-end_x .
            CHECK ls_nopgbrk-beg IS NOT INITIAL
              AND ls_nopgbrk-end IS NOT INITIAL .
            COLLECT ls_nopgbrk INTO lt_nopgbrk_vertical .
          ENDIF .
        ENDLOOP .

        CHECK lt_nopgbrk_horizontal[] IS NOT INITIAL
           OR lt_nopgbrk_vertical[]   IS NOT INITIAL .

        DO 1 TIMES .
*         send internal tables T_NOPGBRK_HORIZONTAL and T_NOPGBRK_VERTICAL to MS Excel application
          lr_table_coll-&gt;add_table(  EXPORTING table_name = &apos;T_NOPGBRK_HORIZONTAL&apos;
                                               table_type = i_oi_table_collection=&gt;table_type_output
                                     IMPORTING error      = lr_error
                                     CHANGING  data_table = lt_nopgbrk_horizontal ) .
          msg_io_catch( lr_error ) .
          CHECK v_retcode NE c_retcode-error .

          lr_table_coll-&gt;add_table(  EXPORTING table_name = &apos;T_NOPGBRK_VERTICAL&apos;
                                               table_type = i_oi_table_collection=&gt;table_type_output
                                     IMPORTING error      = lr_error
                                     CHANGING  data_table = lt_nopgbrk_vertical ) .
          msg_io_catch( lr_error ) .
          CHECK v_retcode NE c_retcode-error .

*         select actual worksheet
          r_ole-&gt;r_spreadsheet-&gt;select_sheet( EXPORTING name  = &lt;sheets&gt;-name
                                              IMPORTING error = lr_error ) .
          msg_io_catch( lr_error ) .
          CHECK v_retcode NE c_retcode-error .

*         keep actual cell selection
          r_ole-&gt;r_spreadsheet-&gt;get_selection(
                IMPORTING top     = lv_selection_top
                          left    = lv_selection_left
                          rows    = lv_selection_rows
                          columns = lv_selection_columns ) .

*         run VBScript macros
          CALL METHOD OF r_ole-&gt;s_ole-vbscript &apos;Run&apos; EXPORTING #1 = &apos;PreventingAutoPageBreaks&apos; .

          IF sy-subrc NE 0 .
            MESSAGE e000(lp) WITH v_text-t283   &quot; text: Macros execution error
            INTO v_dummy .
            msg_syst_catch( ) .
          ENDIF .

*         restore cell selection
          r_ole-&gt;r_spreadsheet-&gt;set_selection(
                EXPORTING top     = lv_selection_top
                          left    = lv_selection_left
                          rows    = lv_selection_rows
                          columns = lv_selection_columns ) .
        ENDDO .

        lr_table_coll-&gt;remove_all_tables( ) .
      ENDLOOP .
    ENDIF .

*   free VBS macros
    FREE OBJECT r_ole-&gt;s_ole-vbscript .
    CLEAR r_ole-&gt;s_ole-vbscript .

    lr_table_coll-&gt;remove_all_tables( ) .

  ENDMETHOD .                    &quot;postpr_vbs_nopgbrk
  METHOD postpr_vbs_nopgbrk_macros_add .
    cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .

*   add VBScript code
    CONCATENATE
    `Sub PreventingAutoPageBreaks()`
    `    Set MySheet = XLWB_ActiveWorkbook.ActiveSheet`

    `    XLWB_Application.ScreenUpdating = False`
    `    XLWB_Application.ActiveWindow.View = xlPageBreakPreview`

    `    &apos;revise Horizontal page breaks`
    `    Set XLWB_Table = XLWB_ActiveWorkbook.Container.Tables(&quot;T_NOPGBRK_HORIZONTAL&quot;).Table`
    `    If XLWB_Table.Rows.Count &gt; 0 Then`
    `        For i = 1 To XLWB_Table.Rows.Count`
    `            Set XLWB_TableRow = XLWB_Table.Rows(i)`
    `            For Each PgBrk In MySheet.HPageBreaks`
    `                If PgBrk.Type = xlPageBreakAutomatic Then`
    `                    If PgBrk.Row &gt; XLWB_TableRow.Cell(1) And PgBrk.Row &lt;= XLWB_TableRow.Cell(2) Then`
    `                        Set AnchorCell = MySheet.Cells(1, XLWB_TableRow.Cell(1))`
    `                        Set PgBrk.Location = Range(AnchorCell, AnchorCell)`
    `                    End If`
    `                End If`
    `            Next`
    `        Next`
    `    End If`

    `    &apos;revise Vertical page breaks`
    `    Set XLWB_Table = XLWB_ActiveWorkbook.Container.Tables(&quot;T_NOPGBRK_VERTICAL&quot;).Table`
    `    If XLWB_Table.Rows.Count &gt; 0 Then`
    `        For i = 1 To XLWB_Table.Rows.Count`
    `            Set XLWB_TableRow = XLWB_Table.Rows(i)`
    `            For Each PgBrk In MySheet.VPageBreaks`
    `                If PgBrk.Type = xlPageBreakAutomatic Then`
    `                    If PgBrk.Column &gt; XLWB_TableRow.Cell(1) And PgBrk.Column &lt;= XLWB_TableRow.Cell(2) Then`
    `                        Set AnchorCell = MySheet.Cells(XLWB_TableRow.Cell(1), 1)`
    `                        Set PgBrk.Location = Range(AnchorCell, AnchorCell)`
    `                    End If`
    `                End If`
    `            Next`
    `        Next`
    `    End If`
    `End Sub`
    INTO s_ole_variables-vbscode SEPARATED BY cl_abap_char_utilities=&gt;cr_lf.

    CREATE OBJECT r_ole-&gt;s_ole-vbscript &apos;MSScriptControl.ScriptControl&apos; NO FLUSH .
    SET PROPERTY OF r_ole-&gt;s_ole-vbscript &apos;Language&apos; = &apos;VBScript&apos; no flush .
    CALL METHOD OF r_ole-&gt;s_ole-vbscript &apos;AddObject&apos; NO FLUSH EXPORTING #1 = &apos;XLWB_Application&apos; #2 = r_ole-&gt;s_ole-application .
    CALL METHOD OF r_ole-&gt;s_ole-vbscript &apos;AddObject&apos; NO FLUSH EXPORTING #1 = &apos;XLWB_ActiveWorkbook&apos; #2 = r_ole-&gt;s_ole-activeworkbook .
    CALL METHOD OF r_ole-&gt;s_ole-vbscript &apos;AddCode&apos; NO FLUSH EXPORTING #1 = s_ole_variables-vbscode .

    cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 1 ) .
    CHECK sy-subrc NE 0 .

    MESSAGE e000(lp) WITH v_text-t282   &quot; text: Macros initialization error
    INTO v_dummy .
    msg_syst_catch( ) .
  ENDMETHOD .                    &quot;postpr_vbs_nopgbrk_macros_add
  METHOD postpr_vbs_final .
    CHECK cv_vbs_code IS NOT INITIAL .

    DATA:
      lr_table_coll         TYPE REF TO i_oi_table_collection ,
      lr_table_data_copy    TYPE REF TO data ,
      lr_error              TYPE REF TO i_oi_error .
    FIELD-SYMBOLS:
      &lt;ls_vbs_tables_tab&gt;   TYPE ty_s_vbs_tables_tab ,
      &lt;lt_table_data&gt;       TYPE ANY TABLE ,
      &lt;lt_table_data_copy&gt;  TYPE ANY TABLE .

    DO 1 TIMES .
      CHECK ct_vbs_tables_tab[] IS NOT INITIAL .

*     initialize table collection
      r_ole-&gt;r_control-&gt;get_table_collection( IMPORTING table_collection = lr_table_coll
                                                        error            = lr_error ) .
      msg_io_catch( lr_error ) .
      CHECK v_retcode NE c_retcode-error .

*     send internal tables to MS Excel application
      LOOP AT ct_vbs_tables_tab ASSIGNING &lt;ls_vbs_tables_tab&gt; .
        UNASSIGN &lt;lt_table_data&gt; .
        UNASSIGN &lt;lt_table_data_copy&gt; .
        FREE lr_table_data_copy .

        ASSIGN &lt;ls_vbs_tables_tab&gt;-table_data-&gt;* TO &lt;lt_table_data&gt; .
        CHECK &lt;lt_table_data&gt; IS ASSIGNED .

        CREATE DATA lr_table_data_copy LIKE &lt;lt_table_data&gt; .
        ASSIGN lr_table_data_copy-&gt;* TO &lt;lt_table_data_copy&gt; .
        &lt;lt_table_data_copy&gt; = &lt;lt_table_data&gt; .

        CHECK &lt;lt_table_data_copy&gt; IS ASSIGNED .

        lr_table_coll-&gt;add_table(  EXPORTING table_name = &lt;ls_vbs_tables_tab&gt;-table_name
                                             table_type = i_oi_table_collection=&gt;table_type_output
                                   IMPORTING error      = lr_error
                                   CHANGING  data_table = &lt;lt_table_data_copy&gt; ) .
        msg_io_catch( lr_error ) .
        CHECK v_retcode NE c_retcode-error .
        EXIT .
      ENDLOOP .
    ENDDO .

    DO 1 TIMES .
      CHECK v_retcode NE c_retcode-error .

*     add VBScript code
      cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .
      CREATE OBJECT r_ole-&gt;s_ole-vbscript &apos;MSScriptControl.ScriptControl&apos; NO FLUSH .
      SET PROPERTY OF r_ole-&gt;s_ole-vbscript &apos;Language&apos; = &apos;VBScript&apos; no flush .
      CALL METHOD OF r_ole-&gt;s_ole-vbscript &apos;AddObject&apos; NO FLUSH EXPORTING #1 = &apos;XLWB_Application&apos; #2 = r_ole-&gt;s_ole-application .
      CALL METHOD OF r_ole-&gt;s_ole-vbscript &apos;AddObject&apos; NO FLUSH EXPORTING #1 = &apos;XLWB_ActiveWorkbook&apos; #2 = r_ole-&gt;s_ole-activeworkbook .
      CALL METHOD OF r_ole-&gt;s_ole-vbscript &apos;AddCode&apos; NO FLUSH EXPORTING #1 = cv_vbs_code .
      cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 1 ) .
      IF sy-subrc NE 0 .
        MESSAGE e000(lp) WITH v_text-t282 INTO v_dummy .  &quot; text: Macros initialization error
        msg_syst_catch( ) .
        EXIT .
      ENDIF .

*     run VBScript macros
      CALL METHOD OF r_ole-&gt;s_ole-vbscript &apos;Run&apos; EXPORTING #1 = &apos;Entry&apos; .

      IF sy-subrc NE 0 .
        MESSAGE e000(lp) WITH v_text-t283 INTO v_dummy .  &quot; text: Macros execution error
        msg_syst_catch( ) .
        EXIT .
      ENDIF .
    ENDDO .

*   release objects
    IF r_ole-&gt;s_ole-vbscript IS NOT INITIAL .
      FREE OBJECT r_ole-&gt;s_ole-vbscript .
      CLEAR r_ole-&gt;s_ole-vbscript .
    ENDIF .
    IF lr_table_coll IS BOUND .
      lr_table_coll-&gt;remove_all_tables( ) .
    ENDIF .

  ENDMETHOD .                    &quot;postpr_vbs_final
  METHOD begin_drawing .

    APPEND is_drawings_tmp TO t_drawings_tmp .

  ENDMETHOD .                    &quot;begin_drawing
  METHOD begin_chart .

    APPEND is_drawings_tmp TO t_drawings_tmp .

  ENDMETHOD .                    &quot;begin_chart
  METHOD begin_pattern .

    s_patterns = is_patterns .
    CLEAR t_drawings_tmp .

  ENDMETHOD .                    &quot;begin_pattern
  METHOD finalize_pattern .

    DATA:
      ls_cells              TYPE ty_s_cells ,
      ls_sharedstrings      TYPE ty_s_sharedstrings ,
      ls_calcchain          TYPE ty_s_calcchain ,
      ls_mergecells_rel     TYPE ty_s_mergecells_rel ,
      ls_mergecells         TYPE ty_s_mergecells ,
      ls_patternarea        TYPE ty_s_coordinates ,
      ls_drawings_tmp       TYPE ty_s_drawings_tmp ,
      ls_drawings           TYPE ty_s_drawings ,
      ls_media              TYPE ty_s_media ,
      ls_charts             TYPE ty_s_charts ,
      ls_datavalid          TYPE ty_s_datavalid_rt .
    DATA:
      ls_colprop            TYPE ty_s_colprop ,
      ls_rowprop            TYPE ty_s_rowprop .
    FIELD-SYMBOLS:
      &lt;cells&gt;               TYPE ty_s_cells ,
      &lt;sharedstrings&gt;       TYPE ty_s_sharedstrings ,
      &lt;colprop&gt;             TYPE ty_s_colprop ,
      &lt;rowprop&gt;             TYPE ty_s_rowprop ,
      &lt;datavalid&gt;           TYPE ty_s_datavalid_rt ,
      &lt;coordinates&gt;         TYPE ty_s_coordinates .

*   calculate absolute coordinates of pattern margins
    ls_patternarea-beg_y = cv_top  + 1 .
    ls_patternarea-end_y = cv_top  + s_patterns-rows .
    ls_patternarea-beg_x = cv_left + 1 .
    ls_patternarea-end_x = cv_left + s_patterns-columns .

*   add cells with adjusting coordinates
    LOOP AT s_patterns-t_cells INTO ls_cells .
      ls_cells-y = ls_cells-y + cv_top  - s_patterns-top  + 1 .
      ls_cells-x = ls_cells-x + cv_left - s_patterns-left + 1 .

*     formula works
      DO 1 TIMES .
        CHECK ls_cells-formula IS NOT INITIAL .

*       correct the formula
        IF ls_cells-formula(1) EQ &apos;=&apos; .
          ls_cells-formula = ls_cells-formula+1 .
        ENDIF .
        CHECK ls_cells-formula IS NOT INITIAL .

*       convert formula notation: R1C1  to A1 (if required)
        conv_formula_r1c1_a1( EXPORTING iv_y       = ls_cells-y
                                        iv_x       = ls_cells-x
                              CHANGING  cv_formula = ls_cells-formula ) .

*       add formula to the calculation chain
        ls_calcchain-sheet_index  = s_sheets-index .
        ls_calcchain-y            = ls_cells-y .
        ls_calcchain-x            = ls_cells-x .
        APPEND ls_calcchain TO s_model-t_calcchain[] .
      ENDDO .

*     shared strings for textmark
      DO 1 TIMES .
        CHECK ls_cells-tmp_flag IS NOT INITIAL .

        READ TABLE s_model-t_sharedstrings ASSIGNING &lt;sharedstrings&gt;
        WITH TABLE KEY value = ls_cells-tmp_value_s .
        IF sy-subrc NE 0 .
          ls_sharedstrings-value    = ls_cells-tmp_value_s .
          ls_sharedstrings-key      = LINES( s_model-t_sharedstrings ) .
          ls_sharedstrings-si_node  = ls_cells-tmp_si_node .
          INSERT ls_sharedstrings INTO TABLE s_model-t_sharedstrings
          ASSIGNING &lt;sharedstrings&gt; .
        ENDIF .
        CHECK &lt;sharedstrings&gt; IS ASSIGNED .
        ls_cells-value = &lt;sharedstrings&gt;-key .
      ENDDO .

*     data validation info
      DO 1 TIMES .
        CHECK ls_cells-datavalidation-formula1 IS NOT INITIAL
           OR ls_cells-datavalidation-formula2 IS NOT INITIAL .

        READ TABLE s_sheets-sheetdata_runtime-t_datavalid ASSIGNING &lt;datavalid&gt;
          WITH KEY allowblank       = ls_cells-datavalidation-allowblank
                   error            = ls_cells-datavalidation-error
                   errorstyle       = ls_cells-datavalidation-errorstyle
                   errortitle       = ls_cells-datavalidation-errortitle
                   imemode          = ls_cells-datavalidation-imemode
                   operator         = ls_cells-datavalidation-operator
                   prompt           = ls_cells-datavalidation-prompt
                   prompttitle      = ls_cells-datavalidation-prompttitle
                   showdropdown     = ls_cells-datavalidation-showdropdown
                   showerrormessage = ls_cells-datavalidation-showerrormessage
                   showinputmessage = ls_cells-datavalidation-showinputmessage
                   type             = ls_cells-datavalidation-type
                   formula1         = ls_cells-datavalidation-formula1
                   formula1_dataset_id        = ls_cells-datavalidation-formula1_dataset_id
                   formula1_dataset_fld       = ls_cells-datavalidation-formula1_dataset_fld
                   formula1_dataset_rt_path_1 = ls_cells-datavalidation-formula1_dataset_rt_path_1
                   formula2         = ls_cells-datavalidation-formula2
                   BINARY SEARCH .
        IF sy-subrc NE 0 .
          CLEAR ls_datavalid .
          MOVE-CORRESPONDING ls_cells-datavalidation TO ls_datavalid .
          INSERT ls_datavalid INTO TABLE s_sheets-sheetdata_runtime-t_datavalid ASSIGNING &lt;datavalid&gt; .
        ENDIF .
        CHECK &lt;datavalid&gt; IS ASSIGNED .

        READ TABLE &lt;datavalid&gt;-t_coordinates TRANSPORTING NO FIELDS
          WITH KEY beg_x = ls_cells-x
                   beg_y = ls_cells-y .
        CHECK sy-subrc NE 0 .

        APPEND INITIAL LINE TO &lt;datavalid&gt;-t_coordinates ASSIGNING &lt;coordinates&gt; .
        &lt;coordinates&gt;-beg_x = ls_cells-x .
        &lt;coordinates&gt;-beg_y = ls_cells-y .
      ENDDO .


*     add cell to the sheet
      READ TABLE s_sheets-sheetdata_runtime-t_cells ASSIGNING &lt;cells&gt;
      WITH KEY y = ls_cells-y  x = ls_cells-x BINARY SEARCH .
      IF sy-subrc EQ 0 .
        &lt;cells&gt;-style   = ls_cells-style   .
        &lt;cells&gt;-type    = ls_cells-type    .
        &lt;cells&gt;-value   = ls_cells-value   .
        &lt;cells&gt;-formula = ls_cells-formula .
      ELSE .
        INSERT ls_cells INTO TABLE s_sheets-sheetdata_runtime-t_cells .
      ENDIF .
    ENDLOOP .

*   add info of the cells merging with adjusting coordinates
    LOOP AT s_patterns-t_mergecells INTO ls_mergecells_rel .
      ls_mergecells-beg_y = cv_top  + ls_mergecells_rel-top  - s_patterns-top  + 1 .
      ls_mergecells-end_y = cv_top  + ls_mergecells_rel-top  - s_patterns-top  + ls_mergecells_rel-rows .
      ls_mergecells-beg_x = cv_left + ls_mergecells_rel-left - s_patterns-left + 1 .
      ls_mergecells-end_x = cv_left + ls_mergecells_rel-left - s_patterns-left + ls_mergecells_rel-columns .
      ls_mergecells-autofit_rows = ls_mergecells_rel-autofit_rows .
      ls_mergecells-autofit_cols = ls_mergecells_rel-autofit_cols .
      IF iv_autofitmerged_r IS SUPPLIED .
        ls_mergecells-autofit_rows = iv_autofitmerged_r .
      ENDIF .
      IF iv_autofitmerged_c IS SUPPLIED .
        ls_mergecells-autofit_cols = iv_autofitmerged_c .
      ENDIF .
      INSERT ls_mergecells INTO TABLE s_sheets-sheetdata_runtime-t_mergecells .

      CHECK ls_mergecells-autofit_rows IS NOT INITIAL
         OR ls_mergecells-autofit_cols IS NOT INITIAL .

      v_postprocessing_autofit = abap_on .
      s_sheets-sheetdata_runtime-postprocessing_autofit = abap_on .
    ENDLOOP .

*   add info about Drawings
    LOOP AT t_drawings_tmp INTO ls_drawings_tmp .
      CLEAR ls_drawings .
      ls_drawings-drawing_type = ls_drawings_tmp-drawing_type .

      CASE ls_drawings-drawing_type .
        WHEN c_drawing_type-vector .
          ls_drawings-twocellanchor_node = ls_drawings_tmp-twocellanchor_node .

        WHEN c_drawing_type-bitmap .
          READ TABLE s_model-t_media INTO ls_media
          WITH TABLE KEY media_rawdata = ls_drawings_tmp-media_rawdata .
          IF sy-subrc NE 0 .
            ADD 1 TO s_model-v_refer_id . CONDENSE s_model-v_refer_id NO-GAPS .

            CLEAR ls_media .
            ls_media-media_rawdata  = ls_drawings_tmp-media_rawdata .
            ls_media-id             = s_model-v_refer_id .
            INSERT ls_media INTO TABLE s_model-t_media .
          ENDIF .
          ls_drawings-refer_id      = ls_media-id .

        WHEN c_drawing_type-chart .
          ADD 1 TO s_model-v_refer_id . CONDENSE s_model-v_refer_id NO-GAPS .

          CLEAR ls_charts .
          ls_charts-id                    = s_model-v_refer_id .
          ls_charts-chart_ixml_doc        = ls_drawings_tmp-chart_ixml_doc       .
          ls_charts-chartcolors_ixml_doc  = ls_drawings_tmp-chartcolors_ixml_doc .
          ls_charts-chartstyle_ixml_doc   = ls_drawings_tmp-chartstyle_ixml_doc  .
          ls_charts-chart_series_title    = ls_drawings_tmp-chart_series_title .
          ls_charts-chart_title           = ls_drawings_tmp-chart_title .
          ls_charts-chart_title_tx        = ls_drawings_tmp-chart_title_tx .
          ls_charts-chart_catax_title     = ls_drawings_tmp-chart_catax_title .
          ls_charts-chart_catax_title_tx  = ls_drawings_tmp-chart_catax_title_tx .
          ls_charts-chart_valax_title     = ls_drawings_tmp-chart_valax_title .
          ls_charts-chart_valax_title_tx  = ls_drawings_tmp-chart_valax_title_tx .
          ls_charts-dataset_series_tab[]  = ls_drawings_tmp-dataset_series_tab[] .
          ls_charts-dataset_id            = ls_drawings_tmp-dataset_id .
          ls_charts-dataset_rt_path_1     = ls_drawings_tmp-dataset_rt_path_1 .
          INSERT ls_charts INTO TABLE s_model-t_charts .

          ls_drawings-twocellanchor_node  = ls_drawings_tmp-twocellanchor_node   .
          ls_drawings-refer_id            = ls_charts-id .
      ENDCASE .

      ls_drawings-beg_y = cv_top  + ls_drawings_tmp-top  - s_patterns-top  .
      ls_drawings-beg_x = cv_left + ls_drawings_tmp-left - s_patterns-left .
      IF  ls_drawings_tmp-drawing_size_h GT 0
      AND ls_drawings_tmp-drawing_size_w GT 0 .
        ls_drawings-drawing_size_h = ls_drawings_tmp-drawing_size_h .
        ls_drawings-drawing_size_w = ls_drawings_tmp-drawing_size_w .
      ELSE .
        ls_drawings-end_y = cv_top  + ls_drawings_tmp-top  - s_patterns-top  + ls_drawings_tmp-rows .
        ls_drawings-end_x = cv_left + ls_drawings_tmp-left - s_patterns-left + ls_drawings_tmp-columns .
      ENDIF .

      APPEND ls_drawings TO s_sheets-sheetdata_runtime-t_drawings .
    ENDLOOP .

*   revise a dimension of data on the sheet
    IF s_sheets-sheetdata_runtime-beg_y IS INITIAL
    OR s_sheets-sheetdata_runtime-beg_y GT ls_patternarea-beg_y .
      s_sheets-sheetdata_runtime-beg_y = ls_patternarea-beg_y .
    ENDIF .
    IF s_sheets-sheetdata_runtime-beg_x IS INITIAL
    OR s_sheets-sheetdata_runtime-beg_x GT ls_patternarea-beg_x .
      s_sheets-sheetdata_runtime-beg_x = ls_patternarea-beg_x .
    ENDIF .
    IF s_sheets-sheetdata_runtime-end_y IS INITIAL
    OR s_sheets-sheetdata_runtime-end_y LT ls_patternarea-end_y .
      s_sheets-sheetdata_runtime-end_y = ls_patternarea-end_y .
    ENDIF .
    IF s_sheets-sheetdata_runtime-end_x IS INITIAL
    OR s_sheets-sheetdata_runtime-end_x LT ls_patternarea-end_x .
      s_sheets-sheetdata_runtime-end_x = ls_patternarea-end_x .
    ENDIF .

*   properties of the rows
    LOOP AT s_patterns-t_rowprop INTO ls_rowprop .
      ls_rowprop-y = ls_rowprop-y + cv_top - s_patterns-top + 1 .

      READ TABLE s_sheets-sheetdata_runtime-t_rowprop
      ASSIGNING &lt;rowprop&gt; WITH TABLE KEY y = ls_rowprop-y .
      IF sy-subrc EQ 0 .
        &lt;rowprop&gt;-s              = ls_rowprop-s           .
        &lt;rowprop&gt;-customformat   = ls_rowprop-customformat.
        &lt;rowprop&gt;-ht             = ls_rowprop-ht          .
        &lt;rowprop&gt;-customheight   = ls_rowprop-customheight.
        &lt;rowprop&gt;-hidden         = ls_rowprop-hidden      .
        IF ls_rowprop-outlinelevel IS NOT INITIAL .
          &lt;rowprop&gt;-collapsed    = ls_rowprop-collapsed   .
          &lt;rowprop&gt;-outlinelevel = ls_rowprop-outlinelevel.
        ENDIF .
      ELSE .
        INSERT ls_rowprop INTO TABLE s_sheets-sheetdata_runtime-t_rowprop .
      ENDIF .
    ENDLOOP .

*   properties of the columns
    LOOP AT s_patterns-t_colprop INTO ls_colprop .
      ls_colprop-x = ls_colprop-x + cv_left - s_patterns-left + 1 .

      READ TABLE s_sheets-sheetdata_runtime-t_colprop
      ASSIGNING &lt;colprop&gt; WITH KEY x = ls_colprop-x BINARY SEARCH .
      IF sy-subrc EQ 0 .
        &lt;colprop&gt;-width          = ls_colprop-width       .
        &lt;colprop&gt;-style          = ls_colprop-style       .
        &lt;colprop&gt;-hidden         = ls_colprop-hidden      .
        &lt;colprop&gt;-bestfit        = ls_colprop-bestfit     .
        &lt;colprop&gt;-customwidth    = ls_colprop-customwidth .
        IF ls_colprop-outlinelevel IS NOT INITIAL .
          &lt;colprop&gt;-collapsed    = ls_colprop-collapsed   .
          &lt;colprop&gt;-outlinelevel = ls_colprop-outlinelevel.
        ENDIF .
      ELSE .
        INSERT ls_colprop INTO TABLE s_sheets-sheetdata_runtime-t_colprop .
      ENDIF .
    ENDLOOP .

*   print titles: Rows
    IF iv_printtitles_r IS NOT INITIAL .
      s_sheets-sheetdata_runtime-printtitles-beg_y = ls_patternarea-beg_y .
      s_sheets-sheetdata_runtime-printtitles-end_y = ls_patternarea-end_y .
    ENDIF .
*   print titles: Columns
    IF iv_printtitles_c IS NOT INITIAL .
      s_sheets-sheetdata_runtime-printtitles-beg_x = ls_patternarea-beg_x .
      s_sheets-sheetdata_runtime-printtitles-end_x = ls_patternarea-end_x .
    ENDIF .

  ENDMETHOD .                    &quot;finalize_pattern
  METHOD finalize_respattern .

    DATA:
      ls_mergecells         TYPE ty_s_mergecells ,
      ls_drawings           TYPE ty_s_drawings ,
      ls_cells_src          TYPE ty_s_cells ,
      ls_cells_new          TYPE ty_s_cells .
    FIELD-SYMBOLS:
      &lt;mergecells&gt;          TYPE ty_s_mergecells ,
      &lt;drawings&gt;            TYPE ty_s_drawings .

    CASE abap_on .
*======================================================================
      WHEN iv_rowspan .
*======================================================================
        DO iv_columns TIMES .
          CLEAR ls_mergecells .
          ls_mergecells-beg_y = iv_top  + 1 .
          ls_mergecells-end_y = iv_top  + iv_rows .
          ls_mergecells-beg_x =
          ls_mergecells-end_x = iv_left + sy-index .
          IF iv_rows GT 1 .
            ls_mergecells-autofit_rows = iv_autofitmerged_r .
            ls_mergecells-autofit_cols = iv_autofitmerged_c .
            READ TABLE it_autofitmerged_r TRANSPORTING NO FIELDS
            WITH TABLE KEY table_line = sy-index .
            IF sy-subrc EQ 0 .
              ls_mergecells-autofit_rows = abap_on .
            ENDIF .
            ls_mergecells-autofit_cols = iv_autofitmerged_c .
            READ TABLE it_autofitmerged_c TRANSPORTING NO FIELDS
            WITH TABLE KEY table_line = sy-index .
            IF sy-subrc EQ 0 .
              ls_mergecells-autofit_cols = abap_on .
            ENDIF .
            LOOP AT s_sheets-sheetdata_runtime-t_mergecells ASSIGNING &lt;mergecells&gt;
              WHERE beg_y EQ ls_mergecells-beg_y
                AND beg_x LE ls_mergecells-beg_x
                AND end_x GE ls_mergecells-end_x .
              &lt;mergecells&gt;-end_y        = ls_mergecells-end_y .
              &lt;mergecells&gt;-autofit_rows = ls_mergecells-autofit_rows .
              &lt;mergecells&gt;-autofit_cols = ls_mergecells-autofit_cols .
            ENDLOOP .
            IF sy-subrc NE 0 .
              INSERT ls_mergecells INTO TABLE s_sheets-sheetdata_runtime-t_mergecells .
            ENDIF .
            IF ls_mergecells-autofit_rows IS NOT INITIAL
            OR ls_mergecells-autofit_cols IS NOT INITIAL .
              v_postprocessing_autofit = abap_on .
              s_sheets-sheetdata_runtime-postprocessing_autofit = abap_on .
            ENDIF .

            ls_drawings-beg_y = ls_mergecells-beg_y - 1 .
            ls_drawings-beg_x = ls_mergecells-beg_x - 1 .
            ls_drawings-end_x = ls_mergecells-end_x .
            ls_drawings-end_y = ls_mergecells-end_y .
            LOOP AT s_sheets-sheetdata_runtime-t_drawings ASSIGNING &lt;drawings&gt;
              WHERE drawing_size_h EQ 0
                AND drawing_size_w EQ 0
                AND beg_y EQ ls_drawings-beg_y
                AND beg_x LE ls_drawings-beg_x
                AND end_x GE ls_drawings-end_x .
              &lt;drawings&gt;-end_y = ls_drawings-end_y .
            ENDLOOP .
          ENDIF .

          READ TABLE s_sheets-sheetdata_runtime-t_cells INTO ls_cells_src
            WITH KEY y = ls_mergecells-beg_y
                     x = ls_mergecells-beg_x
                     BINARY SEARCH .
          IF sy-subrc EQ 0 .
            DO iv_rows TIMES .
              CHECK sy-index GT 1 .

              CLEAR ls_cells_new .
              ls_cells_new-y     = iv_top + sy-index .
              ls_cells_new-x     = ls_cells_src-x .
              ls_cells_new-style = ls_cells_src-style .
              INSERT ls_cells_new INTO TABLE s_sheets-sheetdata_runtime-t_cells .
            ENDDO .
          ENDIF .
        ENDDO .

*======================================================================
      WHEN iv_colspan .
*======================================================================
        DO iv_rows TIMES .
          CLEAR ls_mergecells .
          ls_mergecells-beg_y =
          ls_mergecells-end_y = iv_top  + sy-index .
          ls_mergecells-beg_x = iv_left + 1 .
          ls_mergecells-end_x = iv_left + iv_columns .
          IF iv_columns GT 1 .
            ls_mergecells-autofit_rows = iv_autofitmerged_r .
            ls_mergecells-autofit_cols = iv_autofitmerged_c .
            READ TABLE it_autofitmerged_r TRANSPORTING NO FIELDS
            WITH TABLE KEY table_line = sy-index .
            IF sy-subrc EQ 0 .
              ls_mergecells-autofit_rows = abap_on .
            ENDIF .
            ls_mergecells-autofit_cols = iv_autofitmerged_c .
            READ TABLE it_autofitmerged_c TRANSPORTING NO FIELDS
            WITH TABLE KEY table_line = sy-index .
            IF sy-subrc EQ 0 .
              ls_mergecells-autofit_cols = abap_on .
            ENDIF .
            LOOP AT s_sheets-sheetdata_runtime-t_mergecells ASSIGNING &lt;mergecells&gt;
              WHERE beg_x EQ ls_mergecells-beg_x
                AND beg_y LE ls_mergecells-beg_y
                AND end_y GE ls_mergecells-end_y .
              &lt;mergecells&gt;-end_x        = ls_mergecells-end_x .
              &lt;mergecells&gt;-autofit_rows = ls_mergecells-autofit_rows .
              &lt;mergecells&gt;-autofit_cols = ls_mergecells-autofit_cols .
            ENDLOOP .
            IF sy-subrc NE 0 .
              INSERT ls_mergecells INTO TABLE s_sheets-sheetdata_runtime-t_mergecells .
            ENDIF .
            IF ls_mergecells-autofit_rows IS NOT INITIAL
            OR ls_mergecells-autofit_cols IS NOT INITIAL .
              v_postprocessing_autofit = abap_on .
              s_sheets-sheetdata_runtime-postprocessing_autofit = abap_on .
            ENDIF .

            ls_drawings-beg_y = ls_mergecells-beg_y - 1 .
            ls_drawings-beg_x = ls_mergecells-beg_x - 1 .
            ls_drawings-end_x = ls_mergecells-end_x .
            ls_drawings-end_y = ls_mergecells-end_y .
            LOOP AT s_sheets-sheetdata_runtime-t_drawings ASSIGNING &lt;drawings&gt;
              WHERE drawing_size_h EQ 0
                AND drawing_size_w EQ 0
                AND beg_x EQ ls_drawings-beg_x
                AND beg_y LE ls_drawings-beg_y
                AND end_y GE ls_drawings-end_y .
              &lt;drawings&gt;-end_x = ls_drawings-end_x .
            ENDLOOP .
          ENDIF .

          READ TABLE s_sheets-sheetdata_runtime-t_cells INTO ls_cells_src
            WITH KEY y = ls_mergecells-beg_y
                     x = ls_mergecells-beg_x
                     BINARY SEARCH .
          IF sy-subrc EQ 0 .
            DO iv_columns TIMES .
              CHECK sy-index GT 1 .

              CLEAR ls_cells_new .
              ls_cells_new-y     = ls_cells_src-y .
              ls_cells_new-x     = iv_left + sy-index .
              ls_cells_new-style = ls_cells_src-style .
              INSERT ls_cells_new INTO TABLE s_sheets-sheetdata_runtime-t_cells .
            ENDDO .
          ENDIF .
        ENDDO .
    ENDCASE .

  ENDMETHOD .                    &quot;finalize_respattern
  METHOD finalize_grid .
    DATA:
      ls_datasets      TYPE ty_s_datasets ,
      ls_dataset_refs  TYPE ty_s_dataset_refs ,
      ls_ref_fields    TYPE ty_s_dataset_ref_fields .
    FIELD-SYMBOLS:
      &lt;datasets&gt;       TYPE ty_s_datasets .

*   dataset info
    IF it_ref_fields[] IS NOT INITIAL .
      READ TABLE s_model-t_datasets ASSIGNING &lt;datasets&gt; WITH TABLE KEY id = iv_form_id .
      IF sy-subrc NE 0 .
        ls_datasets-id = iv_form_id .
        INSERT ls_datasets INTO TABLE s_model-t_datasets ASSIGNING &lt;datasets&gt; .
      ENDIF .

      ls_dataset_refs-rt_path_1  = iv_rt_path_1 .   &quot; --&gt;&gt; runtime path (for dataset subordination)
      ls_dataset_refs-sheetname  = s_sheets-name .
      LOOP AT it_ref_fields INTO ls_ref_fields .
        conv_ref_nc( EXPORTING iv_beg_x      = ls_ref_fields-beg_x
                               iv_beg_y      = ls_ref_fields-beg_y
                               iv_end_x      = ls_ref_fields-end_x
                               iv_end_y      = ls_ref_fields-end_y
                               iv_prefix     = &apos;$&apos;
                               iv_sheetname  = s_sheets-name
                     IMPORTING ev_ref        = ls_ref_fields-ref
                               ev_ref_2      = ls_ref_fields-ref_2 ) .

        IF  ls_ref_fields-caption_x IS NOT INITIAL
        AND ls_ref_fields-caption_y IS NOT INITIAL .
          conv_ref_nc( EXPORTING iv_beg_x      = ls_ref_fields-caption_x
                                 iv_beg_y      = ls_ref_fields-caption_y
                                 iv_prefix     = &apos;$&apos;
                                 iv_sheetname  = s_sheets-name
                       IMPORTING ev_ref        = ls_ref_fields-caption_ref ) .
        ENDIF .

        APPEND ls_ref_fields TO ls_dataset_refs-t_fields .
      ENDLOOP .

      INSERT ls_dataset_refs INTO TABLE &lt;datasets&gt;-t_refs .
    ENDIF .

  ENDMETHOD .                    &quot;finalize_grid
ENDCLASS .                    &quot;lcl_excelruntime IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_exceltemplate DEFINITION
*----------------------------------------------------------------------*
*       excel template buffer
*----------------------------------------------------------------------*
CLASS lcl_exceltemplate DEFINITION INHERITING FROM lcl_excel.

  PUBLIC SECTION .

    METHODS:
      free    REDEFINITION ,
      bufferization_patterns
          IMPORTING value(it_patternarea) TYPE ty_t_patternarea OPTIONAL ,
      get_sheet
          IMPORTING iv_sheetname        TYPE any
          RETURNING value(rs_sheets)    TYPE ty_s_sheets ,
      get_pattern
          IMPORTING iv_sheetname        TYPE any
                    iv_id               TYPE any
          RETURNING value(rs_patterns)  TYPE ty_s_patterns ,
      get_drawing_static
          IMPORTING iv_sheetname        TYPE any
                    iv_drwstat_name     TYPE any
          RETURNING value(rs_drawings)  TYPE ty_s_drawings_tmp ,
      formparameters_struc_get
          IMPORTING iv_path             TYPE any
          CHANGING  cs_struc            TYPE any ,
      formparameters_struc_set
          IMPORTING iv_path             TYPE any
                    is_struc            TYPE any ,
      formparameters_table_get
          IMPORTING iv_path             TYPE any
          CHANGING  ct_tab              TYPE STANDARD TABLE ,
      formparameters_table_set
          IMPORTING iv_path             TYPE any
                    it_tab              TYPE STANDARD TABLE .

ENDCLASS .                    &quot;lcl_exceltemplate DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_exceltemplate IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_exceltemplate IMPLEMENTATION .
  METHOD free .
    super-&gt;free( ) .
  ENDMETHOD .                    &quot;FREE
  METHOD bufferization_patterns .

    TYPES:
      BEGIN OF ty_s_datavalid_tmp .
    INCLUDE               TYPE ty_s_coordinates .
    INCLUDE               TYPE ty_s_datavalidation .
    TYPES:
      END   OF ty_s_datavalid_tmp ,
      ty_t_datavalid_tmp  TYPE STANDARD TABLE OF ty_s_datavalid_tmp .
    DATA:
      ls_patternarea_abs  TYPE ty_s_coordinates ,
      ls_patterns         TYPE ty_s_patterns ,
      ls_cells            TYPE ty_s_cells ,
      lt_cells_tmp        TYPE ty_t_cells ,
      ls_coordinates      TYPE ty_s_coordinates .
    DATA:
      ls_mergecells_rel   TYPE ty_s_mergecells_rel ,
      ls_mergecells       TYPE ty_s_mergecells ,
      lt_mergecells       TYPE ty_t_mergecells ,
      lv_mgc_index        TYPE sy-index ,
      lv_mgc_ref          TYPE string ,
      lr_mgc_ncol         TYPE REF TO if_ixml_node_collection ,
      lr_mgc_node         TYPE REF TO if_ixml_node .
    DATA:
      lt_drawings         TYPE ty_t_drawings_tmp ,
      ls_vmldrawings      TYPE ty_s_vmldrawings ,
      lt_sheetrels        TYPE ty_t_relstab ,
      ls_sharedstrings    TYPE ty_s_sharedstrings ,
      lt_sharedstrings_tmp  TYPE HASHED TABLE OF ty_s_sharedstrings
                            WITH UNIQUE KEY key ,
      lv_str_index        TYPE sy-index ,
      lr_str_ncol         TYPE REF TO if_ixml_node_collection ,
      lr_str_node         TYPE REF TO if_ixml_node ,
      lr_str_elem         TYPE REF TO if_ixml_element ,
      lv_val_index        TYPE sy-index ,
      lr_val_ncol         TYPE REF TO if_ixml_node_collection ,
      lr_val_node         TYPE REF TO if_ixml_node ,
      lr_val_elem         TYPE REF TO if_ixml_element .
    DATA:
      lv_row_index        TYPE sy-index ,
      lv_row_ref          TYPE string ,
      lr_row_ncol         TYPE REF TO if_ixml_node_collection ,
      lr_row_node         TYPE REF TO if_ixml_node ,
      lr_row_elem         TYPE REF TO if_ixml_element .
    DATA:
      lr_cols_elem        TYPE REF TO if_ixml_element ,
      lv_col_index        TYPE sy-index ,
      lv_col_ref          TYPE string ,
      lr_col_ncol         TYPE REF TO if_ixml_node_collection ,
      lr_col_node         TYPE REF TO if_ixml_node ,
      lr_col_elem         TYPE REF TO if_ixml_element .
    DATA:
      lr_dvls_elem        TYPE REF TO if_ixml_element ,
      lv_dvl_index        TYPE sy-index ,
      lv_dvl_ref          TYPE string ,
      lr_dvl_ncol         TYPE REF TO if_ixml_node_collection ,
      lr_dvl_node         TYPE REF TO if_ixml_node ,
      lr_dvl_elem         TYPE REF TO if_ixml_element ,
      lr_dvlf_node        TYPE REF TO if_ixml_node ,
      lr_dvlf_elem        TYPE REF TO if_ixml_element .
    DATA:
      ls_rowprop          TYPE ty_s_rowprop ,
      lt_rowprop          TYPE ty_t_rowprop ,
      ls_colprop          TYPE ty_s_colprop ,
      lt_colprop          TYPE ty_t_colprop ,
      lv_stringtmp        TYPE string ,
      lv_min              TYPE string ,
      lv_max              TYPE string ,
      ls_datavalid_tmp    TYPE ty_s_datavalid_tmp ,
      lt_datavalid_tmp    TYPE ty_t_datavalid_tmp ,
      lv_attrname         TYPE string ,
      lv_sqref            TYPE string ,
      lt_sqref            TYPE STANDARD TABLE OF string ,
      lv_y                TYPE i ,
      lv_x                TYPE i .
    DATA:
      lr_attr_ndmap       TYPE REF TO if_ixml_named_node_map ,
      lr_attr_nditerator  TYPE REF TO if_ixml_node_iterator ,
      lr_attr_node        TYPE REF TO if_ixml_node .
    FIELD-SYMBOLS:
      &lt;patternarea&gt;       TYPE ty_s_patternarea ,
      &lt;sheets&gt;            TYPE ty_s_sheets ,
      &lt;cells&gt;             TYPE ty_s_cells ,
      &lt;field&gt;             TYPE ANY .


*======================================================================
*   initialization
*======================================================================
    CLEAR s_model-t_sharedstrings .
    FREE s_model-t_sharedstrings .
    LOOP AT s_model-t_sheets ASSIGNING &lt;sheets&gt; .
      lt_drawings[]  = &lt;sheets&gt;-sheetdata_template-t_drawings[] .
      lt_sheetrels[] = &lt;sheets&gt;-sheetdata_template-t_sheetrels[] .
      ls_vmldrawings = &lt;sheets&gt;-sheetdata_template-vmldrawings .

      CLEAR &lt;sheets&gt;-sheetdata_template .
      FREE  &lt;sheets&gt;-sheetdata_template .

      &lt;sheets&gt;-sheetdata_template-t_drawings[]  = lt_drawings[] .
      &lt;sheets&gt;-sheetdata_template-t_sheetrels[] = lt_sheetrels[] .
      &lt;sheets&gt;-sheetdata_template-vmldrawings   = ls_vmldrawings .
    ENDLOOP .

*======================================================================
*   pre-read all shared strings in the workbook
*======================================================================
    DO 1 TIMES .
      CHECK s_model-ixml_doc_sharedstrings IS BOUND .
      lr_str_ncol = s_model-ixml_doc_sharedstrings-&gt;get_elements_by_tag_name(
                                                    name  = c_tag-si
                                                    depth = 1 ) .
      CHECK lr_str_ncol IS BOUND .
      DO .
        lv_str_index = sy-index - 1 .
        lr_str_node = lr_str_ncol-&gt;get_item( index = lv_str_index ) .
        IF lr_str_node IS NOT BOUND. EXIT. ENDIF .
        lr_str_elem ?= lr_str_node-&gt;query_interface( ixml_iid_element ).
        lr_val_node = lr_str_elem-&gt;find_from_name( name = c_tag-t depth = 1 ) .

        CLEAR ls_sharedstrings .
        ls_sharedstrings-key   = lv_str_index .
        IF lr_val_node IS BOUND .
          ls_sharedstrings-value = lr_val_node-&gt;get_value( ) .
        ELSE . &quot; --&gt;&gt; extended cell formatting
          ls_sharedstrings-value = guid_create( ) .
          lr_val_ncol = lr_str_elem-&gt;get_elements_by_tag_name( name = c_tag-t ) .
          IF lr_val_ncol IS BOUND .
            DO .
              lv_val_index = sy-index - 1 .
              lr_val_node = lr_val_ncol-&gt;get_item( index = lv_val_index ) .
              IF lr_val_node IS NOT BOUND. EXIT. ENDIF .
              lv_stringtmp = lr_val_node-&gt;get_value( ) .
              CONCATENATE ls_sharedstrings-value lv_stringtmp INTO ls_sharedstrings-value .
            ENDDO .
          ENDIF .
          ls_sharedstrings-si_node = lr_str_node-&gt;clone( ) .
        ENDIF .
        INSERT ls_sharedstrings INTO TABLE lt_sharedstrings_tmp .
      ENDDO .
    ENDDO .


*======================================================================
*   extract pattern areas information for each sheet
*======================================================================
    SORT it_patternarea BY sheetname .
    LOOP AT it_patternarea ASSIGNING &lt;patternarea&gt; .
      AT NEW sheetname .

* Retrieve a current sheet from model
*======================================================================
        READ TABLE s_model-t_sheets ASSIGNING &lt;sheets&gt;
        WITH TABLE KEY name = &lt;patternarea&gt;-sheetname .
        CHECK sy-subrc EQ 0 .

* Collect information about all cells content on the sheet
*======================================================================
        CLEAR lt_cells_tmp. FREE lt_cells_tmp .
        CLEAR lt_rowprop .  FREE lt_rowprop .

*------------&gt;&gt; loop at ROWS
        lr_row_ncol =
        &lt;sheets&gt;-ixml_doc-&gt;get_elements_by_tag_name(
                           name  = c_tag-row
                           depth = 3 ) .
        IF lr_row_ncol IS BOUND .
          DO .
            lv_row_index = sy-index - 1 .
            lr_row_node = lr_row_ncol-&gt;get_item( index = lv_row_index ) .
            IF lr_row_node IS NOT BOUND. EXIT. ENDIF .

*           get attributes of row
            lr_attr_ndmap = lr_row_node-&gt;get_attributes( ) .
            lr_attr_nditerator  = lr_attr_ndmap-&gt;create_iterator( ) .
            lr_attr_node = lr_attr_nditerator-&gt;get_next( ) .

            CLEAR ls_rowprop .
            WHILE lr_attr_node IS NOT INITIAL .
              CASE lr_attr_node-&gt;get_name( ) .
                WHEN c_tag-r .            ls_rowprop-y = lv_row_ref = lr_attr_node-&gt;get_value( ) .
                WHEN c_tag-s .            ls_rowprop-s            = lr_attr_node-&gt;get_value( ) .
                WHEN c_tag-customformat . ls_rowprop-customformat = lr_attr_node-&gt;get_value( ) .
                WHEN c_tag-ht .           ls_rowprop-ht           = lr_attr_node-&gt;get_value( ) .
                WHEN c_tag-customheight . ls_rowprop-customheight = lr_attr_node-&gt;get_value( ) .
                WHEN c_tag-hidden .       ls_rowprop-hidden       = lr_attr_node-&gt;get_value( ) .
                WHEN c_tag-outlinelevel . ls_rowprop-outlinelevel = lr_attr_node-&gt;get_value( ) .
                WHEN c_tag-collapsed .    ls_rowprop-collapsed    = lr_attr_node-&gt;get_value( ) .
              ENDCASE .
              lr_attr_node = lr_attr_nditerator-&gt;get_next( ) .
            ENDWHILE .
            INSERT ls_rowprop INTO TABLE lt_rowprop .


*------------&gt;&gt; loop at COLUMNS of the current row
            lr_row_elem ?= lr_row_node-&gt;query_interface( ixml_iid_element ).
            lr_col_ncol = lr_row_elem-&gt;get_elements_by_tag_name(
                                       name  = c_tag-c
                                       depth = 1 ) .
            CHECK lr_col_ncol IS BOUND .
            DO .
              lv_col_index = sy-index - 1 .
              lr_col_node = lr_col_ncol-&gt;get_item( index = lv_col_index ) .
              IF lr_col_node IS NOT BOUND. EXIT. ENDIF .

              CLEAR ls_cells .
              ls_cells-y = lv_row_ref .

              xml_attrib_get( EXPORTING ir_node          = lr_col_node
                                        iv_attrib_name1  = c_tag-r
                                        iv_attrib_name2  = c_tag-t
                                        iv_attrib_name3  = c_tag-s
                              IMPORTING ev_attrib_value1 = lv_col_ref
                                        ev_attrib_value2 = ls_cells-type
                                        ev_attrib_value3 = ls_cells-style ) .

              conv_cn( EXPORTING iv_char   = lv_col_ref
                       IMPORTING ev_number = ls_cells-x ) .

*------------&gt;&gt; find a value for the current column (optional)
              lr_col_elem ?= lr_col_node-&gt;query_interface( ixml_iid_element ) .
              lr_val_node = lr_col_elem-&gt;find_from_name( c_tag-v ) .
              IF lr_val_node IS BOUND .
                ls_cells-value = lr_val_node-&gt;get_value( ) .
              ENDIF .

*------------&gt;&gt; check: is a cell style numeric?
              READ TABLE s_model-t_textformat_styles TRANSPORTING NO FIELDS
              WITH TABLE KEY s = ls_cells-style .
              IF sy-subrc EQ 0 .
                ls_cells-textformat_style = abap_on .
              ELSE .
*------------&gt;&gt; check: is a cell style date?
                READ TABLE s_model-t_dateformat_styles TRANSPORTING NO FIELDS
                WITH TABLE KEY s = ls_cells-style .
                IF sy-subrc EQ 0 .
                  ls_cells-dateformat_style = abap_on .
                ENDIF .
              ENDIF .


              INSERT ls_cells INTO TABLE lt_cells_tmp .
            ENDDO .
          ENDDO .
        ENDIF .


* Read all merged cells on the sheet
*======================================================================
        CLEAR lt_mergecells. FREE lt_mergecells .

        lr_mgc_ncol =
        &lt;sheets&gt;-ixml_doc-&gt;get_elements_by_tag_name(
                           name  = c_tag-mergecell
                           depth = 3 ) .
        IF lr_mgc_ncol IS BOUND .
          DO .
            lv_mgc_index = sy-index - 1 .
            lr_mgc_node = lr_mgc_ncol-&gt;get_item( index = lv_mgc_index ) .
            IF lr_mgc_node IS NOT BOUND. EXIT. ENDIF .

            xml_attrib_get( EXPORTING ir_node           = lr_mgc_node
                                      iv_attrib_name1   = c_tag-ref
                            IMPORTING ev_attrib_value1  = lv_mgc_ref ) .
            CHECK lv_mgc_ref IS NOT INITIAL .

            conv_ref_cn( EXPORTING iv_ref    = lv_mgc_ref
                         IMPORTING ev_beg_x  = ls_mergecells-beg_x
                                   ev_beg_y  = ls_mergecells-beg_y
                                   ev_end_x  = ls_mergecells-end_x
                                   ev_end_y  = ls_mergecells-end_y ) .
            INSERT ls_mergecells INTO TABLE lt_mergecells .
          ENDDO .
        ENDIF .

* Read properties of the all colunms on the sheet
*======================================================================
        CLEAR lt_colprop .  FREE lt_colprop .

        lr_cols_elem = &lt;sheets&gt;-ixml_doc-&gt;find_from_name(
                       name      = c_tag-cols
                       depth     = 2 ) .
        IF lr_cols_elem IS BOUND .
          lr_col_ncol = lr_cols_elem-&gt;get_elements_by_tag_name(
                                      name  = c_tag-col
                                      depth = 1 ) .
          IF lr_col_ncol IS BOUND .
            DO .
              lv_col_index = sy-index - 1 .
              lr_col_node = lr_col_ncol-&gt;get_item( index = lv_col_index ) .
              IF lr_col_node IS NOT BOUND. EXIT. ENDIF .

              lr_attr_ndmap = lr_col_node-&gt;get_attributes( ) .
              lr_attr_nditerator  = lr_attr_ndmap-&gt;create_iterator( ) .
              lr_attr_node = lr_attr_nditerator-&gt;get_next( ) .

              CLEAR ls_colprop .
              CLEAR lv_min .
              CLEAR lv_max .
              WHILE lr_attr_node IS NOT INITIAL .
                CASE lr_attr_node-&gt;get_name( ) .
                  WHEN c_tag-min .          lv_min                  = lr_attr_node-&gt;get_value( ) .
                  WHEN c_tag-max .          lv_max                  = lr_attr_node-&gt;get_value( ) .
                  WHEN c_tag-width .        ls_colprop-width        = lr_attr_node-&gt;get_value( ) .
                  WHEN c_tag-style .        ls_colprop-style        = lr_attr_node-&gt;get_value( ) .
                  WHEN c_tag-hidden .       ls_colprop-hidden       = lr_attr_node-&gt;get_value( ) .
                  WHEN c_tag-bestfit .      ls_colprop-bestfit      = lr_attr_node-&gt;get_value( ) .
                  WHEN c_tag-customwidth .  ls_colprop-customwidth  = lr_attr_node-&gt;get_value( ) .
                  WHEN c_tag-outlinelevel . ls_colprop-outlinelevel = lr_attr_node-&gt;get_value( ) .
                  WHEN c_tag-collapsed .    ls_colprop-collapsed    = lr_attr_node-&gt;get_value( ) .
                ENDCASE .
                lr_attr_node = lr_attr_nditerator-&gt;get_next( ) .
              ENDWHILE .

              IF  lv_min IS NOT INITIAL
              AND lv_max IS NOT INITIAL .
                ls_colprop-x = lv_min .
                WHILE ls_colprop-x LE lv_max .
                  INSERT ls_colprop INTO TABLE lt_colprop .
                  ADD 1 TO ls_colprop-x .
                ENDWHILE .
              ENDIF .
            ENDDO .
          ENDIF .
        ENDIF .


* Read data validation info on the sheet
*======================================================================
        CLEAR lt_datavalid_tmp .  FREE lt_datavalid_tmp .

        lr_dvls_elem = &lt;sheets&gt;-ixml_doc-&gt;find_from_name(
                       name      = c_tag-datavalidations
                       depth     = 2 ) .
        IF lr_dvls_elem IS BOUND .
          lr_dvl_ncol = lr_dvls_elem-&gt;get_elements_by_tag_name(
                                      name  = c_tag-datavalidation
                                      depth = 1 ) .
          IF lr_dvl_ncol IS BOUND .
            DO .
*             element: dataValidation
              lv_dvl_index = sy-index - 1 .
              lr_dvl_node = lr_dvl_ncol-&gt;get_item( index = lv_dvl_index ) .
              IF lr_dvl_node IS NOT BOUND. EXIT. ENDIF .
              lr_dvl_elem ?= lr_dvl_node-&gt;query_interface( ixml_iid_element ).

              CLEAR ls_datavalid_tmp .
              CLEAR lv_sqref .
              CLEAR lt_sqref .

*             element: formula1
              lr_dvlf_elem = lr_dvl_elem-&gt;find_from_name(
                       name      = c_tag-formula1
                       depth     = 1 ) .
              IF lr_dvlf_elem IS BOUND .
                ls_datavalid_tmp-formula1 = lr_dvlf_elem-&gt;get_value( ) .
              ENDIF .
*             element: formula2
              lr_dvlf_elem = lr_dvl_elem-&gt;find_from_name(
                       name      = c_tag-formula2
                       depth     = 1 ) .
              IF lr_dvlf_elem IS BOUND .
                ls_datavalid_tmp-formula2 = lr_dvlf_elem-&gt;get_value( ) .
              ENDIF .

*             attributes
              lr_attr_ndmap = lr_dvl_node-&gt;get_attributes( ) .
              lr_attr_nditerator  = lr_attr_ndmap-&gt;create_iterator( ) .
              lr_attr_node = lr_attr_nditerator-&gt;get_next( ) .

              WHILE lr_attr_node IS NOT INITIAL .
                lv_attrname = lr_attr_node-&gt;get_name( ) .
                CASE lv_attrname .
                  WHEN c_tag-sqref .
                    lv_sqref = lr_attr_node-&gt;get_value( ) .
                  WHEN OTHERS .
                    TRANSLATE lv_attrname TO UPPER CASE .
                    ASSIGN COMPONENT lv_attrname OF STRUCTURE ls_datavalid_tmp TO &lt;field&gt; .
                    IF &lt;field&gt; IS ASSIGNED .
                      &lt;field&gt; = lr_attr_node-&gt;get_value( ) .
                    ENDIF .
                ENDCASE .
                lr_attr_node = lr_attr_nditerator-&gt;get_next( ) .
              ENDWHILE .

*             convert attribute &apos;sqref&apos; to coordinates
              SPLIT lv_sqref AT space INTO TABLE lt_sqref .
              LOOP AT lt_sqref INTO lv_sqref .
                CHECK lv_sqref IS NOT INITIAL .

                conv_ref_cn( EXPORTING iv_ref    = lv_sqref
                             IMPORTING ev_beg_x  = ls_datavalid_tmp-beg_x
                                       ev_beg_y  = ls_datavalid_tmp-beg_y
                                       ev_end_x  = ls_datavalid_tmp-end_x
                                       ev_end_y  = ls_datavalid_tmp-end_y ) .
                IF ls_datavalid_tmp-end_x IS INITIAL .
                  ls_datavalid_tmp-end_x = ls_datavalid_tmp-beg_x .
                ENDIF .
                IF ls_datavalid_tmp-end_y IS INITIAL .
                  ls_datavalid_tmp-end_y = ls_datavalid_tmp-beg_y .
                ENDIF .
                APPEND ls_datavalid_tmp TO lt_datavalid_tmp .
              ENDLOOP .
            ENDDO .
          ENDIF .
        ENDIF .

      ENDAT .  &quot; NEW sheetname.


* Grouping of the found cells content per pattern areas
*======================================================================
      CLEAR ls_patterns .
      ls_patterns-id       = &lt;patternarea&gt;-areaid .
      ls_patterns-top      = &lt;patternarea&gt;-top .
      ls_patterns-left     = &lt;patternarea&gt;-left .
      ls_patterns-rows     = &lt;patternarea&gt;-rows .
      ls_patterns-columns  = &lt;patternarea&gt;-columns .

      ls_patternarea_abs-beg_y = &lt;patternarea&gt;-top .
      ls_patternarea_abs-end_y = &lt;patternarea&gt;-top  + &lt;patternarea&gt;-rows - 1 .
      ls_patternarea_abs-beg_x = &lt;patternarea&gt;-left .
      ls_patternarea_abs-end_x = &lt;patternarea&gt;-left + &lt;patternarea&gt;-columns - 1 .

      LOOP AT lt_cells_tmp INTO ls_cells
        WHERE y GE ls_patternarea_abs-beg_y
          AND y LE ls_patternarea_abs-end_y
          AND x GE ls_patternarea_abs-beg_x
          AND x LE ls_patternarea_abs-end_x .

*       shared string processing
*         (substitution the temporary Key with another that used in model )
        IF ls_cells-type EQ c_tag-s .
          READ TABLE lt_sharedstrings_tmp INTO ls_sharedstrings
          WITH TABLE KEY key = ls_cells-value .
          CHECK sy-subrc EQ 0 .

          READ TABLE s_model-t_sharedstrings INTO ls_sharedstrings
          WITH TABLE KEY value = ls_sharedstrings-value .
          IF sy-subrc NE 0 .
*           save the new shared string into model (using a new Key)
            ls_sharedstrings-key = LINES( s_model-t_sharedstrings ) .
            INSERT ls_sharedstrings INTO TABLE s_model-t_sharedstrings .
          ENDIF .
          ls_cells-value_s = ls_sharedstrings-value .
          ls_cells-value   = ls_sharedstrings-key .
        ENDIF .

        INSERT ls_cells INTO TABLE ls_patterns-t_cells .
      ENDLOOP .


*     data validation info
      LOOP AT lt_datavalid_tmp INTO ls_datavalid_tmp
        WHERE end_y GE ls_patternarea_abs-beg_y
          AND beg_y LE ls_patternarea_abs-end_y
          AND end_x GE ls_patternarea_abs-beg_x
          AND beg_x LE ls_patternarea_abs-end_x .

        CLEAR ls_coordinates .
        MOVE-CORRESPONDING ls_datavalid_tmp TO ls_coordinates .

        IF ls_coordinates-beg_y LT ls_patternarea_abs-beg_y .
          ls_coordinates-beg_y = ls_patternarea_abs-beg_y .
        ENDIF .
        IF ls_coordinates-beg_x LT ls_patternarea_abs-beg_x .
          ls_coordinates-beg_x = ls_patternarea_abs-beg_x .
        ENDIF .
        IF ls_coordinates-end_y GT ls_patternarea_abs-end_y .
          ls_coordinates-end_y = ls_patternarea_abs-end_y .
        ENDIF .
        IF ls_coordinates-end_x GT ls_patternarea_abs-end_x .
          ls_coordinates-end_x = ls_patternarea_abs-end_x .
        ENDIF .

        lv_y = ls_coordinates-beg_y .
        lv_x = ls_coordinates-beg_x .
        DO .
          DO .
            READ TABLE ls_patterns-t_cells ASSIGNING &lt;cells&gt;
              WITH KEY y = lv_y x = lv_x .
            IF sy-subrc NE 0 .
              CLEAR ls_cells .
              ls_cells-y = lv_y .
              ls_cells-x = lv_x .
              INSERT ls_cells INTO TABLE ls_patterns-t_cells ASSIGNING &lt;cells&gt; .
            ENDIF .
            MOVE-CORRESPONDING ls_datavalid_tmp TO &lt;cells&gt;-datavalidation .

            ADD 1 TO lv_x .
            IF lv_x GE ls_coordinates-end_x .
              EXIT .
            ENDIF .
          ENDDO .

          ADD 1 TO lv_y .
          IF lv_y GE ls_coordinates-end_y .
            EXIT .
          ENDIF .
        ENDDO .
      ENDLOOP .


* Grouping of the found merged cells per pattern areas
*======================================================================
      LOOP AT lt_mergecells INTO ls_mergecells
        WHERE beg_y LE ls_patternarea_abs-end_y
          AND end_y GE ls_patternarea_abs-beg_y
          AND beg_x LE ls_patternarea_abs-end_x
          AND end_x GE ls_patternarea_abs-beg_x .

        IF ls_mergecells-beg_y LT ls_patternarea_abs-beg_y .
          ls_mergecells-beg_y = ls_patternarea_abs-beg_y .
        ENDIF .
        IF ls_mergecells-end_y GT ls_patternarea_abs-end_y .
          ls_mergecells-end_y = ls_patternarea_abs-end_y .
        ENDIF .
        IF ls_mergecells-beg_x LT ls_patternarea_abs-beg_x .
          ls_mergecells-beg_x = ls_patternarea_abs-beg_x .
        ENDIF .
        IF ls_mergecells-end_x GT ls_patternarea_abs-end_x .
          ls_mergecells-end_x = ls_patternarea_abs-end_x .
        ENDIF .

        CHECK ls_mergecells-beg_y NE ls_mergecells-end_y
           OR ls_mergecells-beg_x NE ls_mergecells-end_x .

*       convert absolute coordinates into relative ones
        ls_mergecells_rel-top     = ls_mergecells-beg_y .
        ls_mergecells_rel-left    = ls_mergecells-beg_x .
        ls_mergecells_rel-rows    = ls_mergecells-end_y - ls_mergecells-beg_y + 1 .
        ls_mergecells_rel-columns = ls_mergecells-end_x - ls_mergecells-beg_x + 1 .
        INSERT ls_mergecells_rel INTO TABLE ls_patterns-t_mergecells .
      ENDLOOP .

* Grouping the found properties of column/row per pattern areas
*======================================================================
      IF &lt;patternarea&gt;-colprop IS NOT INITIAL .
        LOOP AT lt_colprop INTO ls_colprop
                          WHERE x BETWEEN ls_patternarea_abs-beg_x
                                      AND ls_patternarea_abs-end_x .
          INSERT ls_colprop INTO TABLE ls_patterns-t_colprop .
        ENDLOOP .
      ENDIF .

      IF &lt;patternarea&gt;-rowprop IS NOT INITIAL .
        LOOP AT lt_rowprop INTO ls_rowprop
                          WHERE y BETWEEN ls_patternarea_abs-beg_y
                                      AND ls_patternarea_abs-end_y .
          INSERT ls_rowprop INTO TABLE ls_patterns-t_rowprop .
        ENDLOOP .
      ENDIF .

*======================================================================

      INSERT ls_patterns INTO TABLE &lt;sheets&gt;-sheetdata_template-t_patterns .
    ENDLOOP .  &quot; it_patternareas

  ENDMETHOD .                    &quot;bufferization_patterns
  METHOD get_sheet .
    CLEAR rs_sheets .
    READ TABLE s_model-t_sheets INTO rs_sheets
    WITH TABLE KEY name = iv_sheetname .
  ENDMETHOD .                    &quot;get_sheet
  METHOD get_pattern .
    FIELD-SYMBOLS:
      &lt;sheets&gt;            TYPE ty_s_sheets .

    CLEAR rs_patterns .
    READ TABLE s_model-t_sheets ASSIGNING &lt;sheets&gt;
    WITH TABLE KEY name = iv_sheetname .
    CHECK sy-subrc EQ 0 .

    READ TABLE &lt;sheets&gt;-sheetdata_template-t_patterns INTO rs_patterns
    WITH TABLE KEY id = iv_id .
  ENDMETHOD .                    &quot;get_pattern
  METHOD get_drawing_static .
    FIELD-SYMBOLS:
      &lt;sheets&gt;            TYPE ty_s_sheets .

    CLEAR rs_drawings .
    READ TABLE s_model-t_sheets ASSIGNING &lt;sheets&gt;
    WITH TABLE KEY name = iv_sheetname .
    CHECK sy-subrc EQ 0 .

    READ TABLE &lt;sheets&gt;-sheetdata_template-t_drawings INTO rs_drawings
    WITH TABLE KEY name = iv_drwstat_name .
  ENDMETHOD .                    &quot;get_drawing_static
  METHOD formparameters_struc_get .
    DATA:
      lr_ixml_document    TYPE REF TO if_ixml_document ,
      lr_row_node         TYPE REF TO if_ixml_node ,
      lr_fld_ndmap        TYPE REF TO if_ixml_named_node_map ,
      lr_fld_nditerator   TYPE REF TO if_ixml_node_iterator ,
      lr_fld_attrib       TYPE REF TO if_ixml_node ,
      lv_fld_name         TYPE string ,
      lv_fld_value        TYPE string .
    FIELD-SYMBOLS:
      &lt;fld&gt;               TYPE ANY .

    CLEAR cs_struc .
    FREE  cs_struc .

    lr_ixml_document  = xml_load( iv_path = iv_path ) .
    CHECK lr_ixml_document IS BOUND .

    lr_row_node = lr_ixml_document-&gt;find_from_name( c_tag-row ) .
    CHECK lr_row_node IS BOUND .

    lr_fld_ndmap      = lr_row_node-&gt;get_attributes( ) .
    lr_fld_nditerator = lr_fld_ndmap-&gt;create_iterator( ) .
    lr_fld_attrib     = lr_fld_nditerator-&gt;get_next( ) .
    WHILE lr_fld_attrib IS NOT INITIAL .
      lv_fld_name  = lr_fld_attrib-&gt;get_name( ) .
      lv_fld_value = lr_fld_attrib-&gt;get_value( ) .

      ASSIGN COMPONENT lv_fld_name OF STRUCTURE cs_struc TO &lt;fld&gt; .
      IF &lt;fld&gt; IS ASSIGNED .
        &lt;fld&gt; = lv_fld_value .
      ENDIF .

      lr_fld_attrib = lr_fld_nditerator-&gt;get_next( ) .
    ENDWHILE .
  ENDMETHOD .                    &quot;formparameters_struc_get
  METHOD formparameters_struc_set .
    DATA:
      lr_ixml             TYPE REF TO if_ixml ,
      lr_ixml_document    TYPE REF TO if_ixml_document ,
      lr_ixml_element     TYPE REF TO if_ixml_element ,
      lv_string_fname     TYPE string ,
      lv_string_value     TYPE string ,
      lr_descr_line       TYPE REF TO cl_abap_structdescr .
    FIELD-SYMBOLS:
      &lt;components&gt;        TYPE abap_compdescr ,
      &lt;value&gt;             TYPE ANY .

    lr_descr_line  ?= cl_abap_structdescr=&gt;describe_by_data( is_struc ) .

    lr_ixml = cl_ixml=&gt;create( ) .
    lr_ixml_document = lr_ixml-&gt;create_document( ) .

    lr_ixml_element =
    lr_ixml_document-&gt;create_simple_element( name    = c_tag-row
                                             parent  = lr_ixml_document ) .
    LOOP AT lr_descr_line-&gt;components ASSIGNING &lt;components&gt;.
      ASSIGN COMPONENT &lt;components&gt;-name OF STRUCTURE is_struc TO &lt;value&gt; .
      CHECK &lt;value&gt; IS ASSIGNED .

      lv_string_fname = &lt;components&gt;-name .
      lv_string_value = &lt;value&gt; .
      lr_ixml_element-&gt;set_attribute( name  = lv_string_fname
                                      value = lv_string_value ) .
    ENDLOOP .

    xml_save( iv_ixml_doc = lr_ixml_document
              iv_path     = iv_path ) .
  ENDMETHOD .                    &quot;formparameters_struc_set
  METHOD formparameters_table_get .
    DATA:
      lr_ixml_document    TYPE REF TO if_ixml_document ,
      lv_row_index        TYPE sy-index ,
      lr_row_ncol         TYPE REF TO if_ixml_node_collection ,
      lr_row_node         TYPE REF TO if_ixml_node ,
      lr_fld_ndmap        TYPE REF TO if_ixml_named_node_map ,
      lr_fld_nditerator   TYPE REF TO if_ixml_node_iterator ,
      lr_fld_attrib       TYPE REF TO if_ixml_node ,
      lv_fld_name         TYPE string ,
      lv_fld_value        TYPE string .
    FIELD-SYMBOLS:
      &lt;row&gt;               TYPE ANY ,
      &lt;fld&gt;               TYPE ANY .

    CLEAR ct_tab .
    FREE  ct_tab .

    lr_ixml_document  = xml_load( iv_path = iv_path ) .
    CHECK lr_ixml_document IS BOUND .

    lr_row_ncol =
    lr_ixml_document-&gt;get_elements_by_tag_name( name  = c_tag-row
                                                depth = 1 ) .
    CHECK lr_row_ncol IS BOUND .
    DO .
      lv_row_index = sy-index - 1 .
      lr_row_node = lr_row_ncol-&gt;get_item( index = lv_row_index ) .
      IF lr_row_node IS INITIAL. EXIT. ENDIF .

      APPEND INITIAL LINE TO ct_tab ASSIGNING &lt;row&gt; .
      IF &lt;row&gt; IS NOT ASSIGNED.  EXIT. ENDIF .

      lr_fld_ndmap      = lr_row_node-&gt;get_attributes( ) .
      lr_fld_nditerator = lr_fld_ndmap-&gt;create_iterator( ) .
      lr_fld_attrib     = lr_fld_nditerator-&gt;get_next( ) .

      WHILE lr_fld_attrib IS NOT INITIAL .
        lv_fld_name  = lr_fld_attrib-&gt;get_name( ) .
        lv_fld_value = lr_fld_attrib-&gt;get_value( ) .

        ASSIGN COMPONENT lv_fld_name OF STRUCTURE &lt;row&gt; TO &lt;fld&gt; .
        IF &lt;fld&gt; IS ASSIGNED .
          &lt;fld&gt; = lv_fld_value .
        ENDIF .

        lr_fld_attrib = lr_fld_nditerator-&gt;get_next( ) .
      ENDWHILE .
    ENDDO .
  ENDMETHOD .                    &quot;formparameters_table_get
  METHOD formparameters_table_set .
    DATA:
      lr_ixml             TYPE REF TO if_ixml ,
      lr_ixml_document    TYPE REF TO if_ixml_document ,
      lr_tab_element      TYPE REF TO if_ixml_element ,
      lr_row_element      TYPE REF TO if_ixml_element ,
      lv_string_fname     TYPE string ,
      lv_string_value     TYPE string ,
      lr_descr_tab        TYPE REF TO cl_abap_tabledescr ,
      lr_descr_line       TYPE REF TO cl_abap_structdescr .
    FIELD-SYMBOLS:
      &lt;components&gt;        TYPE abap_compdescr ,
      &lt;row&gt;               TYPE ANY ,
      &lt;value&gt;             TYPE ANY .

    lr_descr_tab ?= cl_abap_tabledescr=&gt;describe_by_data( it_tab ) .
    lr_descr_line  ?= lr_descr_tab-&gt;get_table_line_type( ) .

    lr_ixml = cl_ixml=&gt;create( ) .
    lr_ixml_document = lr_ixml-&gt;create_document( ) .

    lr_tab_element =
    lr_ixml_document-&gt;create_simple_element( name    = c_tag-table
                                             parent  = lr_ixml_document ) .

    LOOP AT it_tab ASSIGNING &lt;row&gt; .
      lr_row_element =
      lr_ixml_document-&gt;create_simple_element( name    = c_tag-row
                                               parent  = lr_tab_element ) .
      LOOP AT lr_descr_line-&gt;components ASSIGNING &lt;components&gt; .
        ASSIGN COMPONENT &lt;components&gt;-name OF STRUCTURE &lt;row&gt; TO &lt;value&gt; .
        CHECK &lt;value&gt; IS ASSIGNED .

        lv_string_fname = &lt;components&gt;-name .
        lv_string_value = &lt;value&gt; .
        lr_row_element-&gt;set_attribute( name  = lv_string_fname
                                       value = lv_string_value ) .
      ENDLOOP .
    ENDLOOP .

    xml_save( iv_ixml_doc = lr_ixml_document
              iv_path     = iv_path ) .
  ENDMETHOD .                    &quot;formparameters_table_set
ENDCLASS .                    &quot;lcl_exceltemplate IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_form DEFINITION
*----------------------------------------------------------------------*
*       form structure descriptor (buffer)
*----------------------------------------------------------------------*
CLASS lcl_form DEFINITION INHERITING FROM lcl_root .

  PUBLIC SECTION .
    CLASS-DATA:
      v_dcpfm               TYPE usr01-dcpfm .
    TYPES:
      ty_s_hierarchy        TYPE snodetext ,
      ty_t_hierarchy        TYPE STANDARD TABLE OF ty_s_hierarchy .
    TYPES:
      BEGIN OF ty_s_properties ,
        id                  TYPE ty_s_hierarchy-id ,
        comp_type           TYPE ty_comp_type ,
        comp_name           TYPE ty_comp_name ,
        comp_descr          TYPE ddtext ,

        cb_loop_from        TYPE i ,            &quot; --&gt;&gt; loopstep: from row
        cb_loop_to          TYPE i ,            &quot; --&gt;&gt; loopstep: to row

        cb_relpath          TYPE ty_comp_path , &quot; --&gt;&gt; alias path (binding with context)

        cb_apr_relpath      TYPE ty_comp_path , &quot; --&gt;&gt; appearance path (binding with context)
        cb_apr_offset       TYPE i ,            &quot; --&gt;&gt; appearance: chars offset
        cb_apr_match        TYPE i ,            &quot; --&gt;&gt; appearance: chars number

        cb_cellrng_relpath  TYPE ty_comp_path , &quot; --&gt;&gt; cell range name: path (binding with context)
        cb_cellrng_offset   TYPE i ,            &quot; --&gt;&gt; cell range name: chars offset
        cb_cellrng_match    TYPE i ,            &quot; --&gt;&gt; cell range name: chars number

        cb_val_relpath      TYPE ty_comp_path , &quot; --&gt;&gt; value path (binding with context)
        cb_val_sub_req      TYPE flag ,         &quot; --&gt;&gt; value Sub.Required (binding with table)
        cb_val_sub_col      TYPE ty_char30 ,    &quot; --&gt;&gt; value Sub.Column (binding with table)
        cb_val_sub_row      TYPE i ,            &quot; --&gt;&gt; value Sub.Row (binding with table)
        cb_val_offset       TYPE i ,            &quot; --&gt;&gt; value: chars offset to output
        cb_val_match        TYPE i ,            &quot; --&gt;&gt; value: chars number to output
        cb_val_convert      TYPE flag ,         &quot; --&gt;&gt; value: conversion to ext.format

        cb_valvld_attr_relpath     TYPE ty_comp_path ,     &quot; --&gt;&gt; value: data validation: context path of table (name-value) for attributes substitution
        cb_valvld_for1_dataset_id  TYPE ty_s_hierarchy-id ,&quot; --&gt;&gt; value: data validation: Formula1: Dataset ID (Grid)
        cb_valvld_for1_dataset_fld TYPE string ,           &quot; --&gt;&gt; value: data validation: Formula1: Field of Dataset ID (Grid)
        cb_valvld_for1_relpath     TYPE ty_comp_path ,     &quot; --&gt;&gt; value: data validation: Formula1: context path
        cb_valvld_for2_relpath     TYPE ty_comp_path ,     &quot; --&gt;&gt; value: data validation: Formula2: context path

        tb_val_formula      TYPE flag ,         &quot; --&gt;&gt; value: as formula

        tb_val_matrix       TYPE flag ,         &quot; --&gt;&gt; value: matrix layout (one char per cell)
        tb_val_matr_r       TYPE i ,            &quot; --&gt;&gt;        matrix layout: interval berween rows
        tb_val_matr_c       TYPE i ,            &quot; --&gt;&gt;        matrix layout: interval berween columns

        tb_area_textmark    TYPE string ,       &quot; --&gt;&gt; value: substring-bookmark (binding with template)

        tb_area_top         TYPE i ,            &quot; --&gt;&gt; range (binding with template)
        tb_area_left        TYPE i ,
        tb_area_rows        TYPE i ,
        tb_area_columns     TYPE i ,

        tb_sheetname        TYPE ty_char31 ,    &quot; --&gt;&gt; name of the sheet
        tb_sheetstate       TYPE ty_char1 ,     &quot; --&gt;&gt; state of the sheet ( &apos;space&apos;=Visible / &apos;X&apos;=Hidden )
        tb_sheetprotection  TYPE string ,       &quot; --&gt;&gt; sheet protection options
        tb_direction        TYPE ty_char1 ,     &quot; --&gt;&gt; place relative to the previous element
        tb_rowprop          TYPE flag ,         &quot; --&gt;&gt; flag: copy the properties of rows
        tb_colprop          TYPE flag ,         &quot; --&gt;&gt; flag: copy the properties of columns
        tb_rowgroup         TYPE flag ,         &quot; --&gt;&gt; flag: grouping rows
        tb_rowgroup_clp     TYPE flag ,         &quot; --&gt;&gt; flag: collapse
        tb_colgroup         TYPE flag ,         &quot; --&gt;&gt; flag: grouping columns
        tb_colgroup_clp     TYPE flag ,         &quot; --&gt;&gt; flag: collapse
        tb_drwstat_flag     TYPE flag ,         &quot; --&gt;&gt; flag: static drawing
        tb_drwstat_name     TYPE ty_char100 ,   &quot; --&gt;&gt; name of static drawing/chart
        tb_nopgbrk_top      TYPE flag ,         &quot; --&gt;&gt; preventing Vert. autopagebreaks: shift beyond Up
        tb_nopgbrk_top_shift  TYPE i ,          &quot; --&gt;&gt; preventing Vert. autopagebreaks: number of rows for shifting
        tb_nopgbrk_left       TYPE flag ,       &quot; --&gt;&gt; preventing Horiz.autopagebreaks: shift beyond Left
        tb_nopgbrk_left_shift TYPE i ,          &quot; --&gt;&gt; preventing Horiz.autopagebreaks: number of rows for shifting
        tb_pgbrk_top        TYPE flag ,         &quot; --&gt;&gt; insert Horiz.pagebreak UP
        tb_pgbrk_left       TYPE flag ,         &quot; --&gt;&gt; insert Vert. pagebreak LEFT
        tb_printtitles_r    TYPE snode-id ,     &quot; --&gt;&gt; print titles: rows (Pattern id using for)
        tb_printtitles_c    TYPE snode-id ,     &quot; --&gt;&gt; print titles: columns (Pattern id using for)
        tb_autofitmerged_r  TYPE flag ,         &quot; --&gt;&gt; AutoFit rows in merged cells
        tb_autofitmerged_c  TYPE flag ,         &quot; --&gt;&gt; AutoFit columns in merged cells
        tb_mergecells       TYPE ty_char1 ,     &quot; --&gt;&gt; merge rows (rowspan) or merge columns (colspan)
        tb_respattern_place TYPE ty_char1 ,     &quot; --&gt;&gt; resizable pattern: place before/after it&apos;s subarea
        tree_layout         TYPE ty_char30 ,    &quot; --&gt;&gt; Tree layout properties
        grid_layout         TYPE ty_char30 ,    &quot; --&gt;&gt; Grid layout properties
        grid_fldseq         TYPE string ,       &quot; --&gt;&gt; Grid columns sequence
        grid_fldprop        TYPE string ,       &quot; --&gt;&gt; Grid columns properties
        draft_subtree       TYPE ty_char1 ,     &quot; --&gt;&gt; subtree haven&apos;t to be processed
        dataset_id          TYPE ty_s_hierarchy-id , &quot; --&gt;&gt; chart -&gt; Dataset ID (Grid)
        dataset_series      TYPE string ,       &quot; --&gt;&gt; chart -&gt; Series (Columns of the Grid)
        chart_series_title  TYPE flag ,         &quot; --&gt;&gt; chart -&gt; Series title mode (static / from dataset column captions)
        chart_title         TYPE flag ,         &quot; --&gt;&gt; chart title mode (static / from context field )
        chart_title_relpath TYPE ty_comp_path , &quot; --&gt;&gt; chart title: context field path
        chart_catax_title         TYPE flag ,         &quot; --&gt;&gt; chart Category Axis title mode (static / from context field )
        chart_catax_title_relpath TYPE ty_comp_path , &quot; --&gt;&gt; chart Category Axis title: context field path
        chart_valax_title         TYPE flag ,         &quot; --&gt;&gt; chart Value Axis title mode (static / from context field )
        chart_valax_title_relpath TYPE ty_comp_path , &quot; --&gt;&gt; chart Value Axis title: context field path
        drawing_size              TYPE ty_char1 ,     &quot; --&gt;&gt; drawing: type of resizing (Fit within area / From context field path)
        drawing_size_h_relpath    TYPE ty_comp_path , &quot; --&gt;&gt; drawing: context field path (Height)
        drawing_size_w_relpath    TYPE ty_comp_path , &quot; --&gt;&gt; drawing: context field path (Width)
        postproc_vbs_code   TYPE string ,       &quot; --&gt;&gt; post-processing: VBScript code
        postproc_vbs_tables TYPE string ,       &quot; --&gt;&gt; post-processing: Context tables are being provided to VBScript code
        definednames_dont_remove  TYPE flag ,         &quot; --&gt;&gt; do not remove defined range names from template, pass them to resultant file
      END   OF ty_s_properties ,
      ty_t_properties       TYPE STANDARD TABLE OF ty_s_properties .
    TYPES:
      BEGIN OF ty_s_exceptions ,
        id                  TYPE ty_s_hierarchy-id ,
        comp_type           TYPE sysubrc ,
        comp_name           TYPE sysubrc ,
        comp_descr          TYPE sysubrc ,
        cb_relpath          TYPE sysubrc ,
        cb_apr_relpath      TYPE sysubrc ,
        cb_val_relpath      TYPE sysubrc ,
        tb_area             TYPE sysubrc ,
        tb_sheetname        TYPE sysubrc ,
        tb_drawing          TYPE sysubrc ,
        dataset             TYPE sysubrc ,
        postprocessing      TYPE sysubrc ,
        t_retmess           TYPE bapiret2_t ,
      END   OF ty_s_exceptions ,
      ty_t_exceptions       TYPE STANDARD TABLE OF ty_s_exceptions .
    TYPES:
      BEGIN OF ty_s_check_data ,
        exceptions          TYPE ty_s_exceptions ,
        properties          TYPE ty_s_properties ,
        hierarchy           TYPE ty_s_hierarchy ,
      END   OF ty_s_check_data .
    TYPES:
      BEGIN OF ty_s_check_legacy_info ,
        exceptions          TYPE ty_s_exceptions ,
        cb_fullpath         TYPE ty_comp_path ,
        tb_sheetname        TYPE ty_s_properties-tb_sheetname ,
        tb_chartsheet       TYPE flag ,
        tb_sheet_exists     TYPE flag ,
        tb_area_top         TYPE ty_s_properties-tb_area_top     ,  &quot; --&gt;&gt; template binding
        tb_area_left        TYPE ty_s_properties-tb_area_left    ,
        tb_area_rows        TYPE ty_s_properties-tb_area_rows    ,
        tb_area_columns     TYPE ty_s_properties-tb_area_columns ,
        summarybelow        TYPE flag ,
        summaryright        TYPE flag ,
        real_level          TYPE i ,
        comp_level          TYPE i ,
        draft_subtree       TYPE ty_char1 ,
      END   OF ty_s_check_legacy_info .
    TYPES:
      BEGIN OF ty_s_head ,
        formname            TYPE string ,
        formdescr           TYPE string ,
        contextname         TYPE lcl_context=&gt;ty_contextname ,
        active              TYPE flag ,
        root_id             TYPE snode-id ,
        created_uname       TYPE syuname ,
        created_datum       TYPE sydatum ,
        changed_uname       TYPE syuname ,
        changed_datum       TYPE sydatum ,
      END   OF ty_s_head .
    TYPES:
      ty_t_comp_type_rng    TYPE RANGE OF ty_s_properties-comp_type ,
      ty_s_comp_type_rng    TYPE LINE OF ty_t_comp_type_rng .
    TYPES:
      BEGIN OF ty_s_grid_fldseq ,
        field               TYPE string ,
      END   OF ty_s_grid_fldseq ,
      ty_t_grid_fldseq      TYPE STANDARD TABLE OF ty_s_grid_fldseq WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_grid_fldprop ,
        field               TYPE string ,
        autofitmerged_r     TYPE flag ,
        autofitmerged_c     TYPE flag ,
      END   OF ty_s_grid_fldprop ,
      ty_t_grid_fldprop     TYPE STANDARD TABLE OF ty_s_grid_fldprop WITH DEFAULT KEY .

    DATA:
      v_formname            TYPE string READ-ONLY ,
      v_formdescr           TYPE wwwdatatab-text READ-ONLY ,
      v_devclass            TYPE tadir-devclass READ-ONLY ,
      v_active              TYPE flag READ-ONLY ,
      v_root_id             TYPE snode-id READ-ONLY ,
      v_created_uname       TYPE syuname READ-ONLY ,
      v_created_datum       TYPE sydatum READ-ONLY ,
      v_changed_uname       TYPE syuname READ-ONLY ,
      v_changed_datum       TYPE sydatum READ-ONLY ,
      r_context             TYPE REF TO lcl_context READ-ONLY ,
      r_exceltemplate       TYPE REF TO lcl_exceltemplate READ-ONLY ,
      t_properties          TYPE ty_t_properties READ-ONLY ,
      t_exceptions          TYPE ty_t_exceptions READ-ONLY ,
      t_hierarchy           TYPE ty_t_hierarchy READ-ONLY ,
      t_patternarea         TYPE ty_t_patternarea READ-ONLY .

    CLASS-METHODS:
      class_constructor ,
      conv_formname_ie
          IMPORTING value(iv_objid)       TYPE any
          RETURNING value(rv_formname)    TYPE wwwdatatab-objid ,
      conv_formname_ei
          IMPORTING iv_formname           TYPE any
          RETURNING value(rv_objid)       TYPE wwwdatatab-objid ,
      conv_sheetprotection_st
          IMPORTING iv_sheetprotection    TYPE ty_s_properties-tb_sheetprotection
          RETURNING value(rs_sheetprotection) TYPE ty_s_sheetprotection ,
      conv_sheetprotection_ts
          IMPORTING is_sheetprotection    TYPE ty_s_sheetprotection
          RETURNING value(rv_sheetprotection) TYPE ty_s_properties-tb_sheetprotection ,
      conv_vbs_tables_st
          IMPORTING iv_vbs_tables         TYPE ty_s_properties-postproc_vbs_tables
          RETURNING value(rt_vbs_tables_tab) TYPE ty_t_vbs_tables_tab ,
      conv_vbs_tables_ts
          IMPORTING it_vbs_tables_tab     TYPE ty_t_vbs_tables_tab
          RETURNING value(rv_vbs_tables)  TYPE ty_s_properties-postproc_vbs_tables ,
      conv_dataset_series_st
          IMPORTING iv_dataset_series     TYPE ty_s_properties-dataset_series
          RETURNING value(rt_dataset_series_tab) TYPE ty_t_dataset_series_tab ,
      conv_dataset_series_ts
          IMPORTING it_dataset_series_tab TYPE ty_t_dataset_series_tab
          RETURNING value(rv_dataset_series) TYPE ty_s_properties-dataset_series ,
      conv_grid_fldseq_st
          IMPORTING iv_grid_fldseq        TYPE ty_s_properties-grid_fldseq
          RETURNING value(rt_grid_fldseq_tab) TYPE ty_t_grid_fldseq ,
      conv_grid_fldseq_ts
          IMPORTING it_grid_fldseq_tab    TYPE ty_t_grid_fldseq
          RETURNING value(rv_grid_fldseq) TYPE ty_s_properties-grid_fldseq ,
      conv_grid_fldprop_st
          IMPORTING iv_grid_fldprop       TYPE ty_s_properties-grid_fldprop
          RETURNING value(rt_grid_fldprop_tab) TYPE ty_t_grid_fldprop ,
      conv_grid_fldprop_ts
          IMPORTING it_grid_fldprop_tab   TYPE ty_t_grid_fldprop
          RETURNING value(rv_grid_fldprop) TYPE ty_s_properties-grid_fldprop ,
      conv_container_fs
          IMPORTING value(iv_field)       TYPE csequence
          EXPORTING es_structure          TYPE any ,
      conv_container_sf
          IMPORTING is_structure          TYPE any
          EXPORTING ev_field              TYPE csequence ,
      get_devclass
          IMPORTING iv_formname           TYPE any
          RETURNING value(rv_devclass)    TYPE tadir-devclass ,
      enq_lock
          IMPORTING iv_formname           TYPE any
          RETURNING value(rv_foreign_lock) TYPE flag ,
      enq_unlock
          IMPORTING iv_formname           TYPE any ,
      enq_check
          IMPORTING iv_formname           TYPE any
          RETURNING value(rv_foreign_lock) TYPE flag ,
      is_val_convert_relevant
          IMPORTING is_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties
          RETURNING value(rv_is_relevant) TYPE flag ,
      vbs_code_default_get
          RETURNING value(rv_vbs_code)    TYPE string ,
      vbs_code_validate
          CHANGING  cv_vbs_code           TYPE string .
    CLASS-DATA:
      t_comp_types        TYPE ty_t_comp_types READ-ONLY .

    CONSTANTS:
      BEGIN OF c_comp_type ,
        root                TYPE ty_comp_type VALUE &apos;R&apos; ,
        sheet               TYPE ty_comp_type VALUE &apos;S&apos; ,
        loopstep            TYPE ty_comp_type VALUE &apos;L&apos; ,
        pattern             TYPE ty_comp_type VALUE &apos;P&apos; ,
        respattern          TYPE ty_comp_type VALUE &apos;Q&apos; ,
        field               TYPE ty_comp_type VALUE &apos;F&apos; ,
        folder              TYPE ty_comp_type VALUE &apos;E&apos; ,
        drawing             TYPE ty_comp_type VALUE &apos;D&apos; ,
        tree                TYPE ty_comp_type VALUE &apos;T&apos; ,
        grid                TYPE ty_comp_type VALUE &apos;G&apos; ,
        chart               TYPE ty_comp_type VALUE &apos;C&apos; ,
      END   OF c_comp_type ,
      BEGIN OF c_comp_icon ,
        root                TYPE icon_d VALUE icon_object_list ,
        sheet               TYPE icon_d VALUE icon_xls ,
        loopstep            TYPE icon_d VALUE icon_businav_objects ,
        pattern             TYPE icon_d VALUE icon_alv_variants ,
        respattern          TYPE icon_d VALUE icon_wd_toolbar ,
        field               TYPE icon_d VALUE icon_change_text ,
        folder              TYPE icon_d VALUE icon_open ,
        drawing             TYPE icon_d VALUE icon_tif ,
        tree                TYPE icon_d VALUE icon_display_tree ,
        grid                TYPE icon_d VALUE icon_table_settings ,
        chart               TYPE icon_d VALUE icon_graphics ,
      END   OF c_comp_icon ,
      BEGIN OF c_tb_direction ,
        up2down             TYPE ty_char1 VALUE space ,
        left2right          TYPE ty_char1 VALUE abap_on ,
      END   OF c_tb_direction ,
      BEGIN OF c_tb_mergecells ,
        rows                TYPE ty_char1  VALUE space ,
        cols                TYPE ty_char1  VALUE abap_on ,
      END   OF c_tb_mergecells ,
      BEGIN OF c_draft_subtree ,
        no                  TYPE ty_char1  VALUE space ,
        yes                 TYPE ty_char1  VALUE abap_on ,
        legacy              TYPE ty_char1  VALUE &apos;+&apos; ,
      END   OF c_draft_subtree ,
      BEGIN OF c_stru_exp_coll ,
        dynamic             TYPE ty_char1  VALUE space ,
        collapsed           TYPE ty_char1  VALUE &apos;-&apos; ,
        expanded            TYPE ty_char1  VALUE &apos;+&apos; ,
      END   OF c_stru_exp_coll ,
      BEGIN OF c_head_titles ,
        tech_descr          TYPE ty_char1 VALUE space ,
        tech                TYPE ty_char1 VALUE &apos;1&apos; ,
        descr               TYPE ty_char1 VALUE &apos;2&apos; ,
      END   OF c_head_titles ,
      BEGIN OF c_drawing_size ,
        fit_within_area     TYPE ty_char1 VALUE space ,
        from_context        TYPE ty_char1 VALUE &apos;C&apos; ,
      END   OF c_drawing_size ,
      BEGIN OF c_respattern_place ,
        before_subarea      TYPE ty_char1 VALUE space ,
        after_subarea       TYPE ty_char1 VALUE &apos;X&apos; ,
      END   OF c_respattern_place ,

      c_objid_prefix        TYPE wwwdatatab-objid VALUE &apos;ZXLWB_&apos; ,
      c_relid               TYPE wwwdatatab-relid VALUE &apos;MI&apos; ,
      c_pgmid               TYPE tadir-pgmid      VALUE &apos;R3TR&apos; ,
      c_object              TYPE tadir-object     VALUE &apos;W3MI&apos; ,
      c_mimetype            TYPE ty_char15        VALUE &apos;excel/xlsx&apos; .

    METHODS:
      constructor
          IMPORTING iv_formname           TYPE any
                    iv_create_new         TYPE flag   DEFAULT abap_off
                    iv_editor             TYPE flag   DEFAULT abap_off
                    iv_template_path      TYPE string OPTIONAL
          EXCEPTIONS process_terminated ,
      free ,
      set_context
          IMPORTING iv_contextname        TYPE any ,
      set_template
          IMPORTING iv_rawdata            TYPE any OPTIONAL
                    it_document_table     TYPE tsfmime OPTIONAL
                    iv_document_size      TYPE i OPTIONAL ,
      get_relevant_child_comptypes
          IMPORTING is_properties         TYPE ty_s_properties
          RETURNING value(rt_child_types) TYPE ty_t_comp_types ,
      is_comptype_allowed
          IMPORTING iv_id                 TYPE any
                    iv_child_type         TYPE ty_comp_type
          RETURNING value(rv_allowed)     TYPE flag,
      node_get_properties
          IMPORTING iv_id                 TYPE any
          RETURNING value(rs_properties)  TYPE ty_s_properties ,
      node_get_exceptions
          IMPORTING iv_id                 TYPE any
          RETURNING value(rs_exceptions)  TYPE ty_s_exceptions ,
      node_get_parent
          IMPORTING iv_id                 TYPE any
          RETURNING value(rv_id_parent)   TYPE ty_s_hierarchy-parent ,
      node_get_skipfolders
          IMPORTING iv_id                 TYPE any
          RETURNING value(rs_properties)  TYPE ty_s_properties ,
      node_get_legacy_info
          IMPORTING iv_id                 TYPE any
          EXPORTING es_exceptions         TYPE ty_s_exceptions
                    ev_cb_fullpath        TYPE any
                    ev_tb_sheet_exists    TYPE any
                    ev_tb_sheet_compname  TYPE any
                    ev_tb_sheetname       TYPE any
                    ev_tb_chartsheet      TYPE any
                    ev_tb_area_top        TYPE any
                    ev_tb_area_left       TYPE any
                    ev_tb_area_rows       TYPE any
                    ev_tb_area_columns    TYPE any
                    ev_real_level         TYPE any
                    ev_comp_level         TYPE any
                    ev_draft_subtree      TYPE any ,
      node_get_retcode_severity
          IMPORTING iv_id                 TYPE any
          RETURNING value(rv_retcode)     TYPE sysubrc ,
      node_get_protab_relevance
          IMPORTING iv_id                 TYPE any OPTIONAL
                    is_properties         TYPE ty_s_properties OPTIONAL
          EXPORTING ev_rt_show            TYPE any
                    ev_cm_show            TYPE any
                    ev_pr_show            TYPE any
                    ev_ms_show            TYPE any ,
      check_subtree
          IMPORTING value(iv_id)          TYPE any OPTIONAL ,
      get_grid_fldseqprop
          IMPORTING iv_id                 TYPE any
          EXPORTING et_ctxt_hier          TYPE lcl_context=&gt;ty_t_hierarchy
                    et_ctxt_prop          TYPE lcl_context=&gt;ty_t_properties
                    et_fldseq             TYPE ty_t_grid_fldseq
                    et_fldprop            TYPE ty_t_grid_fldprop
                    ev_grid_fldseq        TYPE any
                    ev_grid_fldprop       TYPE any ,
      get_sub_ctxt
          IMPORTING value(iv_cb_fullpath) TYPE any OPTIONAL
                    is_form_prop          TYPE ty_s_properties
          RETURNING value(rs_ctxt_prop)   TYPE lcl_context=&gt;ty_s_properties ,
      get_relevant_datasets
          IMPORTING iv_id                 TYPE any
                    iv_same_sheet         TYPE flag OPTIONAL
          RETURNING value(rt_datasets)    TYPE ty_t_nodetab ,
      get_relevant_vbs_tables
          RETURNING value(rt_vbs_tables_tab) TYPE ty_t_vbs_tables_tab .

  PRIVATE SECTION .
    DATA:
      v_editor            TYPE flag .
    METHODS:
      check_recurs
          IMPORTING is_data_parent        TYPE ty_s_check_data
                    is_legacy_parent      TYPE ty_s_check_legacy_info ,
      check_process
          IMPORTING is_data_parent        TYPE ty_s_check_data
                    is_legacy_parent      TYPE ty_s_check_legacy_info
          CHANGING  cs_legacy             TYPE ty_s_check_legacy_info
                    cs_data               TYPE ty_s_check_data ,
      check_process_root ,
      check_process_component
          IMPORTING is_data_parent        TYPE ty_s_check_data
          CHANGING  cs_legacy             TYPE ty_s_check_legacy_info
                    cs_data               TYPE ty_s_check_data ,
      check_process_cb
          IMPORTING is_data_parent        TYPE ty_s_check_data
          CHANGING  cs_legacy             TYPE ty_s_check_legacy_info
                    cs_data               TYPE ty_s_check_data ,
      check_process_cb_appearance
          IMPORTING is_data_parent        TYPE ty_s_check_data
          CHANGING  cs_legacy             TYPE ty_s_check_legacy_info
                    cs_data               TYPE ty_s_check_data ,
      check_process_cb_value
          IMPORTING is_data_parent        TYPE ty_s_check_data
          CHANGING  cs_legacy             TYPE ty_s_check_legacy_info
                    cs_data               TYPE ty_s_check_data ,
      check_process_cb_valvld
          IMPORTING is_data_parent        TYPE ty_s_check_data
          CHANGING  cs_legacy             TYPE ty_s_check_legacy_info
                    cs_data               TYPE ty_s_check_data ,
      check_process_tb_drawing
          IMPORTING is_data_parent        TYPE ty_s_check_data
          CHANGING  cs_legacy             TYPE ty_s_check_legacy_info
                    cs_data               TYPE ty_s_check_data ,
      check_process_chart
          IMPORTING is_data_parent        TYPE ty_s_check_data
          CHANGING  cs_legacy             TYPE ty_s_check_legacy_info
                    cs_data               TYPE ty_s_check_data ,
      check_process_tree
          IMPORTING is_data_parent        TYPE ty_s_check_data
          CHANGING  cs_legacy             TYPE ty_s_check_legacy_info
                    cs_data               TYPE ty_s_check_data ,
      check_process_grid
          IMPORTING is_data_parent        TYPE ty_s_check_data
          CHANGING  cs_legacy             TYPE ty_s_check_legacy_info
                    cs_data               TYPE ty_s_check_data ,
      check_process_tb_sheet
          IMPORTING is_data_parent        TYPE ty_s_check_data
          CHANGING  cs_legacy             TYPE ty_s_check_legacy_info
                    cs_data               TYPE ty_s_check_data ,
      check_process_tb_area
          IMPORTING is_data_parent        TYPE ty_s_check_data
          CHANGING  cs_legacy             TYPE ty_s_check_legacy_info
                    cs_data               TYPE ty_s_check_data .


ENDCLASS .                    &quot;lcl_form DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_form IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_form IMPLEMENTATION .
  METHOD class_constructor .
    DATA ls_comp_types TYPE ty_s_comp_types .

    ls_comp_types-comp_type   = c_comp_type-root .
    ls_comp_types-icon        = c_comp_icon-root .
    ls_comp_types-description = &apos;ROOT&apos; .
    INSERT ls_comp_types INTO TABLE t_comp_types .

    ls_comp_types-comp_type   = c_comp_type-sheet .
    ls_comp_types-icon        = c_comp_icon-sheet .
    ls_comp_types-description = v_text-t008 . &quot; text: Sheet
    INSERT ls_comp_types INTO TABLE t_comp_types .

    ls_comp_types-comp_type   = c_comp_type-loopstep .
    ls_comp_types-icon        = c_comp_icon-loopstep .
    ls_comp_types-description = v_text-t009 . &quot; text: Loop
    INSERT ls_comp_types INTO TABLE t_comp_types .

    ls_comp_types-comp_type   = c_comp_type-pattern .
    ls_comp_types-icon        = c_comp_icon-pattern .
    ls_comp_types-description = v_text-t010 . &quot; text: Pattern
    INSERT ls_comp_types INTO TABLE t_comp_types .

    ls_comp_types-comp_type   = c_comp_type-respattern .
    ls_comp_types-icon        = c_comp_icon-respattern .
    ls_comp_types-description = v_text-t175 . &quot; text: Pattern (resizable)
    INSERT ls_comp_types INTO TABLE t_comp_types .

    ls_comp_types-comp_type   = c_comp_type-field .
    ls_comp_types-icon        = c_comp_icon-field .
    ls_comp_types-description = v_text-t011 . &quot; text: Value
    INSERT ls_comp_types INTO TABLE t_comp_types .

    ls_comp_types-comp_type   = c_comp_type-folder .
    ls_comp_types-icon        = c_comp_icon-folder .
    ls_comp_types-description = v_text-t012 . &quot; text: Folder
    INSERT ls_comp_types INTO TABLE t_comp_types .

    ls_comp_types-comp_type   = c_comp_type-drawing .
    ls_comp_types-icon        = c_comp_icon-drawing .
    ls_comp_types-description = v_text-t139 . &quot; text: Drawing
    INSERT ls_comp_types INTO TABLE t_comp_types .

    ls_comp_types-comp_type   = c_comp_type-tree .
    ls_comp_types-icon        = c_comp_icon-tree .
    ls_comp_types-description = v_text-t174 . &quot; text: Tree
    INSERT ls_comp_types INTO TABLE t_comp_types .

    ls_comp_types-comp_type   = c_comp_type-grid .
    ls_comp_types-icon        = c_comp_icon-grid .
    ls_comp_types-description = v_text-t225 . &quot; text: Grid
    INSERT ls_comp_types INTO TABLE t_comp_types .

    ls_comp_types-comp_type   = c_comp_type-chart .
    ls_comp_types-icon        = c_comp_icon-chart .
    ls_comp_types-description = v_text-t232 . &quot; text: Chart
    INSERT ls_comp_types INTO TABLE t_comp_types .

  ENDMETHOD .                    &quot;class_constructor
  METHOD constructor .
    super-&gt;constructor( ) .

    DATA:
      ls_head               TYPE ty_s_head ,
      ls_key                TYPE wwwdatatab ,
      lv_value              TYPE wwwparams-value ,
      lt_document_table     TYPE tsfmime ,
      lv_document_size      TYPE i ,
      lv_template_ok        TYPE flag ,
      lv_formstructure_ok   TYPE flag .

    SELECT SINGLE dcpfm
      INTO v_dcpfm
      FROM usr01
     WHERE bname EQ sy-uname.

*======================================================================
*   presets and checks
*======================================================================
    CLEAR t_hierarchy[] .
    CLEAR t_properties[] .
    CLEAR t_exceptions[] .

    CLEAR v_active .
    CLEAR v_root_id .
    CLEAR v_formdescr .
    CLEAR v_created_uname .
    CLEAR v_created_datum .
    CLEAR v_changed_uname .
    CLEAR v_changed_datum .

    v_formname = iv_formname .
    v_editor   = iv_editor .

    IF v_formname IS INITIAL .
      MESSAGE i000(lp) WITH v_text-t013 &quot; text: Specify a name of the form
      RAISING process_terminated .
    ENDIF .

    v_devclass = get_devclass( iv_formname = v_formname ) .

    IF v_editor IS NOT INITIAL .
      IF abap_on EQ enq_lock( v_formname ) .
        RAISE process_terminated .
      ENDIF .

*     enq_check( v_formname ) .
    ENDIF .

*======================================================================
*   try to upload Form&apos;s rawdata from the repository
*     (Form is represented as XLSX-file)
*======================================================================
    ls_key-relid = c_relid .
    ls_key-objid = conv_formname_ei( v_formname ) .

    CALL FUNCTION &apos;WWWDATA_IMPORT&apos;
      EXPORTING
        key    = ls_key
      TABLES
        mime   = lt_document_table
      EXCEPTIONS
        OTHERS = 3.
    IF sy-subrc EQ 0 .
      IF iv_create_new IS NOT INITIAL .
        MESSAGE i000(lp)
        WITH v_text-t014  &quot; text: A form already exists with the name
             v_formname
        RAISING process_terminated .
      ENDIF .

      SELECT SINGLE text
        INTO v_formdescr
        FROM wwwdata
       WHERE relid EQ ls_key-relid
         AND objid EQ ls_key-objid
         AND srtf2 EQ 0 .

      CALL FUNCTION &apos;WWWPARAMS_READ&apos;
        EXPORTING
          relid  = ls_key-relid
          objid  = ls_key-objid
          name   = &apos;filesize&apos;
        IMPORTING
          value  = lv_value
        EXCEPTIONS
          OTHERS = 0.
      lv_document_size = lv_value .

      IF lv_document_size IS INITIAL
      OR lt_document_table[] IS INITIAL .
        MESSAGE i000(lp) WITH v_formname &apos;:&apos; v_text-t015 &quot; text: Form data is interupted
        INTO v_dummy .
        msg_syst_catch( ) .
      ELSE .
        lv_template_ok = abap_on .
      ENDIF .

    ELSEIF iv_create_new IS INITIAL .
      MESSAGE i000(lp) WITH v_formname  &apos;:&apos; v_text-t016 &quot; text: Form is not found
      RAISING process_terminated .
    ENDIF .


    IF  iv_editor IS NOT INITIAL
    AND iv_create_new IS NOT INITIAL .
*======================================================================
*   if the new form is creating,
*     we try to upload rawdata of an initial Excel template
*     (is represented as XLSX-file)
*======================================================================

*     from frontend
      IF iv_template_path IS NOT INITIAL .

        cl_gui_frontend_services=&gt;gui_upload(
          EXPORTING   filename   = iv_template_path
                      filetype   = &apos;BIN&apos;
          IMPORTING   filelength = lv_document_size
          CHANGING    data_tab   = lt_document_table
          EXCEPTIONS  OTHERS     = 0 ) .
      ENDIF .

*     from the repository
      IF lv_document_size  IS INITIAL
      OR lt_document_table IS INITIAL .
        CLEAR ls_key .
        CLEAR lt_document_table .
        CLEAR lv_document_size .

        ls_key-relid = c_relid .
        ls_key-objid = conv_formname_ei( &apos;&amp;TEMPLATE&amp;&apos; ) .

        CALL FUNCTION &apos;WWWDATA_IMPORT&apos;
          EXPORTING
            key    = ls_key
          TABLES
            mime   = lt_document_table
          EXCEPTIONS
            OTHERS = 3.
        IF sy-subrc EQ 0 .
          CALL FUNCTION &apos;WWWPARAMS_READ&apos;
            EXPORTING
              relid  = ls_key-relid
              objid  = ls_key-objid
              name   = &apos;filesize&apos;
            IMPORTING
              value  = lv_value
            EXCEPTIONS
              OTHERS = 0.
          lv_document_size = lv_value .
        ENDIF .
      ENDIF .
    ENDIF .


*======================================================================
*   parse XLSX-file (or create the new one)
*======================================================================
    set_template( it_document_table = lt_document_table
                  iv_document_size  = lv_document_size ) .
    IF v_retcode EQ c_retcode-error .
      MESSAGE e000(lp) WITH v_text-t336   &quot; text: Error while reading template file
      RAISING process_terminated .
    ENDIF .

*======================================================================
*   try to find form parameters and structure in the XLSX-file
*======================================================================
    IF lv_template_ok EQ abap_on .

      r_exceltemplate-&gt;formparameters_struc_get(
                  EXPORTING iv_path  = r_exceltemplate-&gt;c_path-formhead
                  CHANGING  cs_struc = ls_head ) .
      r_exceltemplate-&gt;formparameters_table_get(
                  EXPORTING iv_path  = r_exceltemplate-&gt;c_path-formproperties
                  CHANGING  ct_tab   = t_properties ) .
      r_exceltemplate-&gt;formparameters_table_get(
                  EXPORTING iv_path  = r_exceltemplate-&gt;c_path-formhierarchy
                  CHANGING  ct_tab   = t_hierarchy ) .

      v_formdescr                 = ls_head-formdescr .
      v_active                    = ls_head-active .
      v_root_id                   = ls_head-root_id .
      v_created_uname             = ls_head-created_uname .
      v_created_datum             = ls_head-created_datum .
      v_changed_uname             = ls_head-changed_uname .
      v_changed_datum             = ls_head-changed_datum .

      IF t_hierarchy[]  IS INITIAL
      OR t_properties[] IS INITIAL .
        MESSAGE i000(lp) WITH v_formname &apos;:&apos; v_text-t015 &quot; text: Form data is interupted
        INTO v_dummy .
        msg_syst_catch( ) .
      ELSE .
        lv_formstructure_ok = abap_on .
      ENDIF .
    ENDIF .


*======================================================================
*   if form parameters/structure does not exist,
*     we create the init form structure
*======================================================================
    IF lv_formstructure_ok IS INITIAL .
      CALL FUNCTION &apos;RS_TREE_CREATE&apos;
        EXPORTING
          root_name = v_formname
        IMPORTING
          root_id   = v_root_id.

      CALL FUNCTION &apos;RS_TREE_GET_CURRENT_TREE&apos;
        TABLES
          nodeinfo = t_hierarchy.

      DATA ls_properties TYPE ty_s_properties .
      ls_properties-id        = v_root_id .
      ls_properties-comp_type = c_comp_type-root .
      ls_properties-comp_name = v_formname .
      APPEND ls_properties TO t_properties .
    ENDIF .

    IF iv_create_new IS NOT INITIAL .
      v_created_uname = sy-uname .
      v_created_datum = sy-datum .
      CLEAR:  v_changed_uname ,
              v_changed_datum .
    ENDIF .

    CALL FUNCTION &apos;RS_TREE_SET_CURRENT_TREE&apos; .

*======================================================================
*   context initialization
*======================================================================
    set_context( ls_head-contextname ) .
  ENDMETHOD .                    &quot;constructor
  METHOD free .
    CLEAR:
    v_formname ,
    v_active ,
    v_root_id ,
    t_properties ,
    t_exceptions ,
    t_hierarchy ,
    t_patternarea .

    IF r_context IS BOUND .
      r_context-&gt;free( ) .
      CLEAR r_context .
      FREE  r_context .
    ENDIF .
    IF r_exceltemplate IS BOUND .
      r_exceltemplate-&gt;free( ) .
      CLEAR r_exceltemplate .
      FREE  r_exceltemplate .
    ENDIF .

    IF v_editor IS NOT INITIAL .
      enq_unlock( v_formname ) .
    ENDIF .
  ENDMETHOD .                    &quot;free
  METHOD conv_formname_ie .
    DATA lv_offset  TYPE i .
    lv_offset = STRLEN( lcl_form=&gt;c_objid_prefix ) .
    SHIFT iv_objid LEFT BY lv_offset PLACES .
    rv_formname = iv_objid .
  ENDMETHOD .                    &quot;conv_formname_ie
  METHOD conv_formname_ei .
    CONCATENATE c_objid_prefix iv_formname INTO rv_objid .
    CONDENSE rv_objid .
  ENDMETHOD .                    &quot;conv_formname_ei
  METHOD conv_sheetprotection_st .
    CLEAR rs_sheetprotection .
    CHECK iv_sheetprotection IS NOT INITIAL .

    SPLIT iv_sheetprotection AT &apos;;&apos;
     INTO rs_sheetprotection-mode
          rs_sheetprotection-password
          rs_sheetprotection-cb_val_relpath
          rs_sheetprotection-selectlockedcells
          rs_sheetprotection-selectunlockedcells
          rs_sheetprotection-formatcells
          rs_sheetprotection-formatcolumns
          rs_sheetprotection-formatrows
          rs_sheetprotection-insertcolumns
          rs_sheetprotection-insertrows
          rs_sheetprotection-inserthyperlinks
          rs_sheetprotection-deletecolumns
          rs_sheetprotection-deleterows
          rs_sheetprotection-sort
          rs_sheetprotection-autofilter
          rs_sheetprotection-pivottables
          rs_sheetprotection-objects
          rs_sheetprotection-scenarios .
  ENDMETHOD .                    &quot;conv_sheetprotection_st
  METHOD conv_sheetprotection_ts .
    CLEAR rv_sheetprotection .
    CHECK is_sheetprotection IS NOT INITIAL .

    CONCATENATE
          is_sheetprotection-mode
          is_sheetprotection-password
          is_sheetprotection-cb_val_relpath
          is_sheetprotection-selectlockedcells
          is_sheetprotection-selectunlockedcells
          is_sheetprotection-formatcells
          is_sheetprotection-formatcolumns
          is_sheetprotection-formatrows
          is_sheetprotection-insertcolumns
          is_sheetprotection-insertrows
          is_sheetprotection-inserthyperlinks
          is_sheetprotection-deletecolumns
          is_sheetprotection-deleterows
          is_sheetprotection-sort
          is_sheetprotection-autofilter
          is_sheetprotection-pivottables
          is_sheetprotection-objects
          is_sheetprotection-scenarios
     INTO rv_sheetprotection SEPARATED BY &apos;;&apos; .
  ENDMETHOD .                    &quot;conv_sheetprotection_ts
  METHOD conv_vbs_tables_st .
    DATA:
      lv_line               TYPE string ,
      lt_table              TYPE ty_t_string_tab ,
      ls_vbs_tables_tab     TYPE ty_s_vbs_tables_tab .
    CLEAR rt_vbs_tables_tab[] .

    SPLIT iv_vbs_tables AT &apos;|&apos; INTO TABLE lt_table .
    LOOP AT lt_table INTO lv_line .
      CLEAR ls_vbs_tables_tab .
      SPLIT lv_line AT &apos;;&apos;
       INTO ls_vbs_tables_tab-cb_relpath
            ls_vbs_tables_tab-table_name .
      APPEND ls_vbs_tables_tab TO rt_vbs_tables_tab .
    ENDLOOP .
  ENDMETHOD .                    &quot;conv_vbs_tables_st
  METHOD conv_vbs_tables_ts .
    DATA:
      lv_line               TYPE string ,
      ls_vbs_tables_tab     TYPE ty_s_vbs_tables_tab .
    CLEAR rv_vbs_tables .

    LOOP AT it_vbs_tables_tab INTO ls_vbs_tables_tab .
      CONCATENATE ls_vbs_tables_tab-cb_relpath
                  ls_vbs_tables_tab-table_name
             INTO lv_line SEPARATED BY &apos;;&apos; .
      IF sy-tabix EQ 1 .
        rv_vbs_tables = lv_line .
      ELSE .
        CONCATENATE rv_vbs_tables
                    lv_line
               INTO rv_vbs_tables SEPARATED BY &apos;|&apos; .
      ENDIF .
    ENDLOOP .
  ENDMETHOD .                    &quot;conv_vbs_tables_ts
  METHOD conv_dataset_series_st .
    DATA:
      lv_line               TYPE string ,
      lt_table              TYPE ty_t_string_tab ,
      ls_dataset_series_tab TYPE ty_s_dataset_series_tab .
    CLEAR rt_dataset_series_tab[] .

    SPLIT iv_dataset_series AT &apos;|&apos; INTO TABLE lt_table .
    LOOP AT lt_table INTO lv_line .
      CLEAR ls_dataset_series_tab .
      SPLIT lv_line AT &apos;;&apos;
       INTO ls_dataset_series_tab-seridx
            ls_dataset_series_tab-sercap
            ls_dataset_series_tab-dtsfld .
      APPEND ls_dataset_series_tab TO rt_dataset_series_tab .
    ENDLOOP .
  ENDMETHOD .                    &quot;conv_dataset_series_st
  METHOD conv_dataset_series_ts .
    DATA:
      lv_line               TYPE string ,
      ls_dataset_series_tab TYPE ty_s_dataset_series_tab .
    CLEAR rv_dataset_series .

    LOOP AT it_dataset_series_tab INTO ls_dataset_series_tab .
      CONCATENATE ls_dataset_series_tab-seridx
                  ls_dataset_series_tab-sercap
                  ls_dataset_series_tab-dtsfld
             INTO lv_line SEPARATED BY &apos;;&apos; .
      IF sy-tabix EQ 1 .
        rv_dataset_series = lv_line .
      ELSE .
        CONCATENATE rv_dataset_series
                    lv_line
               INTO rv_dataset_series SEPARATED BY &apos;|&apos; .
      ENDIF .
    ENDLOOP .
  ENDMETHOD .                    &quot;conv_dataset_series_ts
  METHOD conv_grid_fldseq_st .
    DATA:
      lv_line               TYPE string ,
      lt_table              TYPE ty_t_string_tab ,
      ls_grid_fldseq_tab    TYPE ty_s_grid_fldseq .
    CLEAR rt_grid_fldseq_tab[] .

    SPLIT iv_grid_fldseq AT c_fldseq_separator INTO TABLE lt_table .
    LOOP AT lt_table INTO lv_line .
      CLEAR ls_grid_fldseq_tab .
      ls_grid_fldseq_tab-field = lv_line .
      APPEND ls_grid_fldseq_tab TO rt_grid_fldseq_tab .
    ENDLOOP .
  ENDMETHOD .                    &quot;conv_grid_fldseq_st
  METHOD conv_grid_fldseq_ts .
    DATA:
      lv_line               TYPE string ,
      ls_grid_fldseq_tab    TYPE ty_s_grid_fldseq .
    CLEAR rv_grid_fldseq .

    LOOP AT it_grid_fldseq_tab INTO ls_grid_fldseq_tab .
      IF rv_grid_fldseq IS INITIAL .
        rv_grid_fldseq = ls_grid_fldseq_tab-field .
      ELSE .
        CONCATENATE rv_grid_fldseq
                    ls_grid_fldseq_tab-field
               INTO rv_grid_fldseq SEPARATED BY c_fldseq_separator .
      ENDIF .
    ENDLOOP .
  ENDMETHOD .                    &quot;conv_grid_fldseq_ts
  METHOD conv_grid_fldprop_st .
    DATA:
      lv_line               TYPE string ,
      lt_table              TYPE ty_t_string_tab ,
      ls_grid_fldprop_tab   TYPE ty_s_grid_fldprop .
    CLEAR rt_grid_fldprop_tab[] .

    SPLIT iv_grid_fldprop AT c_fldseq_separator INTO TABLE lt_table .
    LOOP AT lt_table INTO lv_line .
      CLEAR ls_grid_fldprop_tab .
      SPLIT lv_line AT &apos;;&apos;
       INTO ls_grid_fldprop_tab-field
            ls_grid_fldprop_tab-autofitmerged_r
            ls_grid_fldprop_tab-autofitmerged_c .
      APPEND ls_grid_fldprop_tab TO rt_grid_fldprop_tab .
    ENDLOOP .
  ENDMETHOD .                    &quot;conv_grid_fldprop_st
  METHOD conv_grid_fldprop_ts .
    DATA:
      lv_line               TYPE string ,
      ls_grid_fldprop_tab   TYPE ty_s_grid_fldprop .
    CLEAR rv_grid_fldprop .

    LOOP AT it_grid_fldprop_tab INTO ls_grid_fldprop_tab .
      CONCATENATE ls_grid_fldprop_tab-field
                  ls_grid_fldprop_tab-autofitmerged_r
                  ls_grid_fldprop_tab-autofitmerged_c
             INTO lv_line SEPARATED BY &apos;;&apos; .
      IF sy-tabix EQ 1 .
        rv_grid_fldprop = lv_line .
      ELSE .
        CONCATENATE rv_grid_fldprop
                    lv_line
               INTO rv_grid_fldprop SEPARATED BY c_fldseq_separator .
      ENDIF .
    ENDLOOP .
  ENDMETHOD .                    &quot;conv_grid_fldprop_ts
  METHOD conv_container_fs .
    CLEAR es_structure .
    CHECK iv_field IS NOT INITIAL .

    DATA lv_length TYPE i .

    DESCRIBE FIELD es_structure .
    lv_length = sy-folen .

    CONSTANTS lc_sym_x TYPE x VALUE &apos;00&apos;.
    FIELD-SYMBOLS &lt;sym_x&gt; TYPE x  .
    DATA lv_sym_c TYPE char1 .

    ASSIGN lv_sym_c TO &lt;sym_x&gt; CASTING .
    &lt;sym_x&gt; = lc_sym_x .
    REPLACE ALL OCCURRENCES OF lv_sym_c IN iv_field WITH &apos; &apos; .

    CLEAR es_structure .
    cl_abap_container_utilities=&gt;read_container_c(
        EXPORTING im_container  = iv_field(lv_length)
        IMPORTING ex_value      = es_structure
        EXCEPTIONS OTHERS       = 0 ) .
  ENDMETHOD .                    &quot;conv_container_fs
  METHOD conv_container_sf .
    DATA lv_length TYPE i .
    DESCRIBE FIELD is_structure .
    lv_length = sy-folen .

    CLEAR ev_field .
    cl_abap_container_utilities=&gt;fill_container_c(
        EXPORTING im_value      = is_structure
        IMPORTING ex_container  = ev_field(lv_length)
        EXCEPTIONS OTHERS       = 0 ) .
  ENDMETHOD .                    &quot;conv_container_sf
  METHOD get_devclass .
    DATA  lv_objid TYPE wwwdatatab-objid .

    lv_objid = conv_formname_ei( iv_formname ) .
    CLEAR rv_devclass .

    SELECT SINGLE p~devclass
      INTO rv_devclass
      FROM wwwdata    AS f
     INNER JOIN tadir AS p
        ON f~objid    EQ p~obj_name
     WHERE f~relid    EQ c_relid
       AND f~objid    EQ lv_objid
       AND f~srtf2    EQ 0
       AND p~pgmid    EQ c_pgmid
       AND p~object   EQ c_object .
  ENDMETHOD .                    &quot;get_devclass
  METHOD enq_lock .
    DATA:
      lv_objid          TYPE wwwdatatab-objid ,
      lv_uname          TYPE syuname ,
      lv_msg_dummy      TYPE dummy .

    enq_unlock( iv_formname ) .

    lv_objid = conv_formname_ei( iv_formname ) .
    CALL FUNCTION &apos;ENQUEUE_E_WWW_HTML&apos;
      EXPORTING
        mode_wwwdata = &apos;E&apos;
        relid        = c_relid
        objid        = lv_objid
        srtf2        = 0
      EXCEPTIONS
        foreign_lock = 1.
    IF sy-subrc EQ 0 .
      rv_foreign_lock = abap_off .
    ELSE .
      rv_foreign_lock = abap_on .
      lv_uname = sy-msgv1 .
      MESSAGE i000(lp)
      WITH v_text-t017 iv_formname &quot; text: Form
           v_text-t018 lv_uname    &quot; text: is locked by the user
           INTO lv_msg_dummy .
    ENDIF .
  ENDMETHOD .                    &quot;enq_lock
  METHOD enq_unlock .
    DATA  lv_objid      TYPE wwwdatatab-objid .
    lv_objid = conv_formname_ei( iv_formname ) .

    CALL FUNCTION &apos;DEQUEUE_E_WWW_HTML&apos;
      EXPORTING
        mode_wwwdata = &apos;E&apos;
        relid        = c_relid
        objid        = lv_objid
        srtf2        = 0.
  ENDMETHOD .                    &quot;enq_unlock
  METHOD enq_check .
    DATA:
      lv_objid          TYPE wwwdatatab-objid ,
      lv_garg           TYPE seqg3-garg ,
      ls_enq            TYPE seqg3 ,
      lt_enq            TYPE STANDARD TABLE OF seqg3 ,
      lv_msg_dummy      TYPE dummy .
    rv_foreign_lock = abap_off .

    lv_objid = conv_formname_ei( iv_formname ) .
    CONCATENATE c_relid lv_objid INTO lv_garg .

    CALL FUNCTION &apos;ENQUEUE_READ&apos;
      EXPORTING
        gname  = &apos;WWWDATA&apos;
        garg   = lv_garg
        guname = space
      TABLES
        enq    = lt_enq
      EXCEPTIONS
        OTHERS = 0.
    CHECK lt_enq[] IS NOT INITIAL .
    READ TABLE lt_enq INTO ls_enq INDEX 1 .

    rv_foreign_lock = abap_on .
    MESSAGE i000(lp)
    WITH v_text-t017 iv_formname    &quot; text: Form
         v_text-t018 ls_enq-guname  &quot; text: is locked by the user
         INTO lv_msg_dummy .
  ENDMETHOD .                    &quot;enq_check
  METHOD is_val_convert_relevant .
    IF is_ctxt_prop-type_edit_mask IS NOT INITIAL
    OR is_ctxt_prop-type_kind EQ cl_abap_typedescr=&gt;typekind_date
    OR is_ctxt_prop-type_kind EQ cl_abap_typedescr=&gt;typekind_time .
      rv_is_relevant = abap_on .
    ELSE .
      rv_is_relevant = abap_off .
    ENDIF .
  ENDMETHOD .                    &quot;is_val_convert_relevant
  METHOD vbs_code_default_get .
    CONCATENATE `Sub Entry()`
                `&apos; use object XLWB_Application instead Application`
                `&apos; use object XLWB_ActiveWorkbook instead ActiveWorkbook` space space space
                `End Sub`
           INTO rv_vbs_code
           SEPARATED BY cl_abap_char_utilities=&gt;cr_lf .
  ENDMETHOD .                     &quot;vbs_code_default_get
  METHOD vbs_code_validate .
    DATA:
      lv_vbs_code_default     TYPE string ,
      lv_vbs_code_current     TYPE string .

    lv_vbs_code_default = vbs_code_default_get( ) .
    lv_vbs_code_current = cv_vbs_code .

    REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=&gt;cr_lf IN lv_vbs_code_default WITH space .
    CONDENSE  lv_vbs_code_default NO-GAPS .
    TRANSLATE lv_vbs_code_default TO UPPER CASE .

    REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=&gt;cr_lf IN lv_vbs_code_current WITH space .
    CONDENSE  lv_vbs_code_current NO-GAPS .
    TRANSLATE lv_vbs_code_current TO UPPER CASE .

    CHECK lv_vbs_code_current EQ &apos;SUBENTRY()ENDSUB&apos;
       OR lv_vbs_code_current EQ lv_vbs_code_default .

    CLEAR cv_vbs_code .
  ENDMETHOD .                     &quot;vbs_code_validate
  METHOD check_subtree .

    DATA ls_data    TYPE ty_s_check_data.
    DATA ls_legacy  TYPE ty_s_check_legacy_info .
    DATA lv_id      TYPE snode-id .

    IF iv_id IS INITIAL .
      lv_id = v_root_id .
    ELSE .
      lv_id = iv_id .
    ENDIF.

*------ find a parent node properties
    IF lv_id EQ v_root_id.
      CLEAR t_exceptions.  FREE t_exceptions.
      CLEAR t_patternarea. FREE t_patternarea.

      ls_data-hierarchy-child = v_root_id.
    ELSE.
      lv_id = node_get_parent( lv_id ).
      ls_data-properties = node_get_skipfolders( lv_id ).
      lv_id = ls_data-properties-id.
      READ TABLE t_hierarchy INTO ls_data-hierarchy WITH KEY id = lv_id.

      ls_data-exceptions = node_get_exceptions( lv_id ).
    ENDIF.


    node_get_legacy_info( EXPORTING iv_id               = lv_id
                          IMPORTING es_exceptions       = ls_legacy-exceptions
                                    ev_cb_fullpath      = ls_legacy-cb_fullpath
                                    ev_tb_sheetname     = ls_legacy-tb_sheetname
                                    ev_tb_sheet_exists  = ls_legacy-tb_sheet_exists
                                    ev_tb_area_top      = ls_legacy-tb_area_top
                                    ev_tb_area_left     = ls_legacy-tb_area_left
                                    ev_tb_area_rows     = ls_legacy-tb_area_rows
                                    ev_tb_area_columns  = ls_legacy-tb_area_columns
                                    ev_real_level       = ls_legacy-real_level
                                    ev_comp_level       = ls_legacy-comp_level
                                    ev_draft_subtree    = ls_legacy-draft_subtree ).


*------ start a recursive check process of child.nodes
    check_recurs( is_data_parent   = ls_data
                  is_legacy_parent = ls_legacy ).


*------ the whole form checks (check for Root node)
    check_process_root( ) .

  ENDMETHOD .                    &quot;check_subtree
  METHOD check_recurs .

    DATA:
      ls_data             TYPE ty_s_check_data ,
      ls_legacy           TYPE ty_s_check_legacy_info ,
      lv_id_next          TYPE snode-id .
    FIELD-SYMBOLS:
      &lt;properties&gt;        TYPE ty_s_properties .

    lv_id_next = is_data_parent-hierarchy-child .

    DO .
      CLEAR ls_data .

*     read a next node
      READ TABLE t_hierarchy INTO ls_data-hierarchy
      WITH KEY parent = is_data_parent-hierarchy-id
               id     = lv_id_next .
      IF sy-subrc NE 0 .
        EXIT .
      ENDIF .

      READ TABLE t_properties ASSIGNING &lt;properties&gt;
      WITH KEY id = ls_data-hierarchy-id .
      CHECK sy-subrc EQ 0 .
      ls_data-properties = &lt;properties&gt; .

*     check and validate an actual component
      check_process( EXPORTING is_data_parent   = is_data_parent
                               is_legacy_parent = is_legacy_parent
                     CHANGING  cs_data   = ls_data
                               cs_legacy = ls_legacy ) .
*     update a properties record
      &lt;properties&gt; = ls_data-properties .

*     update an exceptions record
      DELETE t_exceptions WHERE id EQ ls_data-exceptions-id .
      APPEND ls_data-exceptions TO t_exceptions .

      IF ls_data-hierarchy-child IS NOT INITIAL .
*       recursive check of child components
        check_recurs( is_data_parent   = ls_data
                      is_legacy_parent = ls_legacy ) .
      ENDIF .

      IF ls_data-hierarchy-next IS INITIAL .
        EXIT .
      ELSE .
        lv_id_next = ls_data-hierarchy-next .
      ENDIF .
    ENDDO .

  ENDMETHOD .                    &quot;check_recurs
  METHOD check_process .

    CLEAR cs_data-exceptions .
    cs_data-exceptions-id = cs_data-properties-id .

*------ prepare legacy data
    CLEAR cs_legacy .
    cs_legacy-exceptions      = is_legacy_parent-exceptions .
    cs_legacy-cb_fullpath     = is_legacy_parent-cb_fullpath .
    cs_legacy-tb_sheetname    = is_legacy_parent-tb_sheetname .
    cs_legacy-tb_chartsheet   = is_legacy_parent-tb_chartsheet .
    cs_legacy-tb_sheet_exists = is_legacy_parent-tb_sheet_exists .
    cs_legacy-tb_area_top     = is_legacy_parent-tb_area_top .
    cs_legacy-tb_area_left    = is_legacy_parent-tb_area_left .
    cs_legacy-tb_area_rows    = is_legacy_parent-tb_area_rows .
    cs_legacy-tb_area_columns = is_legacy_parent-tb_area_columns .
    cs_legacy-summarybelow    = is_legacy_parent-summarybelow .
    cs_legacy-summaryright    = is_legacy_parent-summaryright .
    cs_legacy-real_level      = is_legacy_parent-real_level + 1 .
    IF cs_data-properties-comp_type NE c_comp_type-folder .
      cs_legacy-comp_level    = is_legacy_parent-comp_level + 1 .
    ENDIF .

    CASE is_legacy_parent-draft_subtree .
      WHEN c_draft_subtree-yes .    cs_legacy-draft_subtree = c_draft_subtree-legacy .
      WHEN c_draft_subtree-legacy . cs_legacy-draft_subtree = c_draft_subtree-legacy .
      WHEN OTHERS .                 cs_legacy-draft_subtree = c_draft_subtree-no .
    ENDCASE .

    CHECK cs_data-properties-id NE v_root_id .

*------ check process
    check_process_component(        &quot; --&gt;&gt; check for name &amp; type of component
        EXPORTING is_data_parent    = is_data_parent
        CHANGING  cs_data           = cs_data
                  cs_legacy         = cs_legacy ) .

    check_process_cb(               &quot; --&gt;&gt; check for general context binding
        EXPORTING is_data_parent    = is_data_parent
        CHANGING  cs_data           = cs_data
                  cs_legacy         = cs_legacy ) .

    check_process_cb_appearance(    &quot; --&gt;&gt; check for context binding which controls an Appearance of component
        EXPORTING is_data_parent    = is_data_parent
        CHANGING  cs_data           = cs_data
                  cs_legacy         = cs_legacy ) .

    check_process_cb_value(         &quot; --&gt;&gt; check for context binding which define a field Value
        EXPORTING is_data_parent    = is_data_parent
        CHANGING  cs_data           = cs_data
                  cs_legacy         = cs_legacy ) .

    check_process_cb_valvld(        &quot; --&gt;&gt; check for data validation option
        EXPORTING is_data_parent    = is_data_parent
        CHANGING  cs_data           = cs_data
                  cs_legacy         = cs_legacy ) .

    check_process_tb_sheet(         &quot; --&gt;&gt; check for template Sheet binding:
        EXPORTING is_data_parent    = is_data_parent
        CHANGING  cs_data           = cs_data
                  cs_legacy         = cs_legacy ) .

    check_process_tb_area(          &quot; --&gt;&gt; check for template Area binding
        EXPORTING is_data_parent    = is_data_parent
        CHANGING  cs_data           = cs_data
                  cs_legacy         = cs_legacy ) .

    check_process_tb_drawing(       &quot; --&gt;&gt; check for Drawing
        EXPORTING is_data_parent    = is_data_parent
        CHANGING  cs_data           = cs_data
                  cs_legacy         = cs_legacy ) .

    check_process_chart(            &quot; --&gt;&gt; check for Chart
        EXPORTING is_data_parent    = is_data_parent
        CHANGING  cs_data           = cs_data
                  cs_legacy         = cs_legacy ) .

    check_process_tree(             &quot; --&gt;&gt; check for Tree
        EXPORTING is_data_parent    = is_data_parent
        CHANGING  cs_data           = cs_data
                  cs_legacy         = cs_legacy ) .

    check_process_grid(             &quot; --&gt;&gt; check for Grid
        EXPORTING is_data_parent    = is_data_parent
        CHANGING  cs_data           = cs_data
                  cs_legacy         = cs_legacy ) .

*------ check grouping for Folders
    IF cs_data-properties-comp_type NE c_comp_type-folder .
      CLEAR cs_data-properties-tb_rowgroup .
      CLEAR cs_data-properties-tb_colgroup .
    ENDIF .
    IF cs_data-properties-tb_rowgroup IS INITIAL .
      CLEAR cs_data-properties-tb_rowgroup_clp .
    ENDIF .
    IF cs_data-properties-tb_colgroup IS INITIAL .
      CLEAR cs_data-properties-tb_colgroup_clp .
    ENDIF .

*------ set legacy data about exceptions
    DEFINE mk_set_legacy_exception .
      if  &amp;1 ne c_retcode-error
      and &amp;2 ne c_retcode-okey
      and &amp;2 ne c_retcode-legacy .
        &amp;1 = &amp;2 .
      endif .
    END-OF-DEFINITION .

    IF  cs_data-properties-draft_subtree EQ c_draft_subtree-yes
    AND cs_data-properties-comp_type     NE c_comp_type-folder .
      cs_data-properties-draft_subtree = c_draft_subtree-no .
    ENDIF .
    IF cs_data-properties-draft_subtree EQ c_draft_subtree-yes .
      cs_legacy-draft_subtree = c_draft_subtree-legacy .
    ELSE .
      cs_data-properties-draft_subtree = cs_legacy-draft_subtree .
    ENDIF .

    mk_set_legacy_exception:
    cs_legacy-exceptions-comp_type       cs_data-exceptions-comp_type ,
    cs_legacy-exceptions-comp_name       cs_data-exceptions-comp_name ,
    cs_legacy-exceptions-cb_relpath      cs_data-exceptions-cb_relpath ,
    cs_legacy-exceptions-cb_apr_relpath  cs_data-exceptions-cb_apr_relpath ,
    cs_legacy-exceptions-cb_val_relpath  cs_data-exceptions-cb_val_relpath ,
    cs_legacy-exceptions-tb_area         cs_data-exceptions-tb_area ,
    cs_legacy-exceptions-tb_sheetname    cs_data-exceptions-tb_sheetname ,
    cs_legacy-exceptions-dataset         cs_data-exceptions-dataset .


*------ collect data about sheets including pattern areas
    IF cs_data-properties-comp_type EQ c_comp_type-pattern
    OR cs_data-properties-comp_type EQ c_comp_type-respattern
    OR cs_data-properties-comp_type EQ c_comp_type-tree
    OR cs_data-properties-comp_type EQ c_comp_type-grid .
      FIELD-SYMBOLS &lt;patternarea&gt; TYPE ty_s_patternarea .

      READ TABLE t_patternarea ASSIGNING &lt;patternarea&gt;
      WITH KEY areaid = cs_data-properties-id .
      IF sy-subrc NE 0 .
        APPEND INITIAL LINE TO t_patternarea ASSIGNING &lt;patternarea&gt; .
        &lt;patternarea&gt;-areaid    = cs_data-properties-id .
      ENDIF .
      &lt;patternarea&gt;-sheetname = cs_legacy-tb_sheetname .
      &lt;patternarea&gt;-areaid    = cs_data-properties-id .
      &lt;patternarea&gt;-areaname  = cs_data-properties-comp_name .
      &lt;patternarea&gt;-top       = cs_data-properties-tb_area_top .
      &lt;patternarea&gt;-left      = cs_data-properties-tb_area_left .
      &lt;patternarea&gt;-rows      = cs_data-properties-tb_area_rows .
      &lt;patternarea&gt;-columns   = cs_data-properties-tb_area_columns .
      &lt;patternarea&gt;-colprop   = cs_data-properties-tb_colprop .
      &lt;patternarea&gt;-rowprop   = cs_data-properties-tb_rowprop .
    ENDIF .

  ENDMETHOD .                    &quot;check_process
  METHOD check_process_root . &quot;the whole form checks (check for Root node)
    DATA:
      lv_vbs_code_tmp       TYPE string ,
      lt_vbs_tables_tab_s   TYPE ty_t_vbs_tables_tab ,
      lt_vbs_tables_tab_r   TYPE ty_t_vbs_tables_tab .
    FIELD-SYMBOLS:
      &lt;ls_properties&gt;       TYPE ty_s_properties ,
      &lt;ls_exceptions&gt;       TYPE ty_s_exceptions ,
      &lt;ls_vbs_tables_tab_s&gt; TYPE ty_s_vbs_tables_tab .

*------ initialize a root exceptions record
    DELETE t_exceptions WHERE id EQ v_root_id .
    APPEND INITIAL LINE TO t_exceptions ASSIGNING &lt;ls_exceptions&gt; .
    &lt;ls_exceptions&gt;-id = v_root_id .

*------ read root node
    READ TABLE t_properties ASSIGNING &lt;ls_properties&gt;
      WITH KEY id = v_root_id .
    CHECK &lt;ls_properties&gt; IS NOT INITIAL .

*------ check availability of the sheets
    READ TABLE t_properties TRANSPORTING NO FIELDS
      WITH KEY comp_type = c_comp_type-sheet .
    IF sy-subrc NE 0 .
      MESSAGE e000(lp) WITH v_text-t151 INTO v_dummy .  &quot; text: Form must contain at less one sheet
      msg_syst_catch2( CHANGING ct_retmess = &lt;ls_exceptions&gt;-t_retmess ) .
      &lt;ls_exceptions&gt;-tb_sheetname = c_retcode-error .
    ENDIF .

*------ check post-processing procedure
    vbs_code_validate( CHANGING cv_vbs_code = &lt;ls_properties&gt;-postproc_vbs_code ) .

    IF &lt;ls_properties&gt;-postproc_vbs_code IS NOT INITIAL .

      lv_vbs_code_tmp = &lt;ls_properties&gt;-postproc_vbs_code .
      REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=&gt;cr_lf IN lv_vbs_code_tmp WITH space .
      CONDENSE  lv_vbs_code_tmp NO-GAPS .
      TRANSLATE lv_vbs_code_tmp TO UPPER CASE .

      IF NOT lv_vbs_code_tmp CP &apos;*SUBENTRY*ENDSUB*&apos; .
        SPLIT v_text-t290 AT &apos;|&apos; INTO sy-msgv1 sy-msgv2 .   &quot; text: Sub procedure &quot;Entry&quot; is not found or incorrect |in the final post-processing VBScript
        MESSAGE e000(lp) WITH sy-msgv1 sy-msgv2 INTO v_dummy .
        msg_syst_catch2( CHANGING ct_retmess = &lt;ls_exceptions&gt;-t_retmess ) .
        &lt;ls_exceptions&gt;-postprocessing = c_retcode-error .
      ENDIF .
    ENDIF .

    IF &lt;ls_properties&gt;-postproc_vbs_code IS INITIAL .
      CLEAR &lt;ls_properties&gt;-postproc_vbs_tables .
    ENDIF .

*------ check tables, which have to be provided from Context to post-processing routine
    IF &lt;ls_properties&gt;-postproc_vbs_tables IS NOT INITIAL .
      lt_vbs_tables_tab_s = conv_vbs_tables_st( &lt;ls_properties&gt;-postproc_vbs_tables ) .
      lt_vbs_tables_tab_r = get_relevant_vbs_tables( ) .  &quot; --&gt;&gt; relevant context nested tables (on root level)

      LOOP AT lt_vbs_tables_tab_s ASSIGNING &lt;ls_vbs_tables_tab_s&gt; .
        READ TABLE lt_vbs_tables_tab_r TRANSPORTING NO FIELDS
          WITH KEY cb_relpath = &lt;ls_vbs_tables_tab_s&gt;-cb_relpath .
        CHECK sy-subrc NE 0 .
        DELETE lt_vbs_tables_tab_s .
      ENDLOOP .

      LOOP AT lt_vbs_tables_tab_s ASSIGNING &lt;ls_vbs_tables_tab_s&gt; .
        IF &lt;ls_vbs_tables_tab_s&gt;-table_name IS INITIAL .
          MESSAGE e000(lp)
             WITH v_text-t287 &apos;:&apos;                     &quot; text: Final post-processing
                  v_text-t292                         &quot; text: Specify Table name
                  &lt;ls_vbs_tables_tab_s&gt;-cb_relpath INTO v_dummy .
          msg_syst_catch2( CHANGING ct_retmess = &lt;ls_exceptions&gt;-t_retmess ) .
          &lt;ls_exceptions&gt;-postprocessing = c_retcode-error .

        ELSE .
          LOOP AT lt_vbs_tables_tab_s TRANSPORTING NO FIELDS
            WHERE table_name EQ &lt;ls_vbs_tables_tab_s&gt;-table_name
              AND cb_relpath NE &lt;ls_vbs_tables_tab_s&gt;-cb_relpath .
            EXIT .
          ENDLOOP .
          IF sy-subrc EQ 0 .
            MESSAGE e000(lp)
               WITH v_text-t287 &apos;:&apos;                     &quot; text: Final post-processing
                    v_text-t293                         &quot; text: Table name is not unique
                    &lt;ls_vbs_tables_tab_s&gt;-table_name INTO v_dummy .
            msg_syst_catch2( CHANGING ct_retmess = &lt;ls_exceptions&gt;-t_retmess ) .
            &lt;ls_exceptions&gt;-postprocessing = c_retcode-error .
          ENDIF .
        ENDIF .
      ENDLOOP .

      &lt;ls_properties&gt;-postproc_vbs_tables = conv_vbs_tables_ts( lt_vbs_tables_tab_s ) .
    ENDIF .

  ENDMETHOD .                    &quot;check_process_root
  METHOD check_process_component . &quot;check the name &amp; type of component

*------ check the type of component
    IF space EQ is_comptype_allowed(
                      iv_id = is_data_parent-properties-id
                      iv_child_type = cs_data-properties-comp_type ) .
      APPEND LINES OF t_retmess TO cs_data-exceptions-t_retmess .
      cs_data-exceptions-comp_type = c_retcode-error .
    ENDIF .

*------ check the name of component
    LOOP AT t_properties TRANSPORTING NO FIELDS
      WHERE id NE cs_data-properties-id
        AND id NE v_root_id
        AND comp_name EQ cs_data-properties-comp_name .
      EXIT .
    ENDLOOP .
    IF sy-subrc EQ 0 .
      MESSAGE w000(lp)
         WITH v_text-t019 &quot; text: a name of the component is not unique
              cs_data-properties-comp_name  INTO v_dummy .
      msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
      cs_data-exceptions-comp_name = c_retcode-warning .
    ENDIF .

  ENDMETHOD .                    &quot;check_process_component
  METHOD check_process_cb .  &quot;check for general context binding

    DATA ls_ctxt_prop  TYPE lcl_context=&gt;ty_s_properties .

*------ set a legacy error (if occurs)
    IF cs_data-exceptions-cb_relpath NE c_retcode-legacy .
      CASE cs_legacy-exceptions-cb_relpath .
        WHEN c_retcode-error
          OR c_retcode-legacy .

          MESSAGE e000(lp) WITH v_text-t020                &quot; text: Context binding is incorrect
                                v_text-t021 INTO v_dummy . &quot; text: on the upper levels
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-cb_relpath = c_retcode-legacy .
      ENDCASE .
    ENDIF .

*------ validate
    IF  cs_data-properties-comp_type NE c_comp_type-loopstep
    AND cs_data-properties-comp_type NE c_comp_type-folder .
      CLEAR cs_data-properties-cb_relpath .
    ENDIF .

    IF cs_data-properties-comp_type EQ c_comp_type-loopstep .
      IF cs_data-properties-cb_loop_from LE 0 .
        cs_data-properties-cb_loop_from = 1 .
      ENDIF .
      IF  cs_data-properties-cb_loop_to IS NOT INITIAL
      AND cs_data-properties-cb_loop_to LT cs_data-properties-cb_loop_from .
        cs_data-properties-cb_loop_to = cs_data-properties-cb_loop_from .
      ENDIF .
    ELSE  .
      CLEAR cs_data-properties-cb_loop_from .
      CLEAR cs_data-properties-cb_loop_to   .
    ENDIF .

*------ check a path
    IF cs_data-properties-cb_relpath IS INITIAL .
      IF cs_data-properties-comp_type EQ c_comp_type-loopstep .
        MESSAGE e000(lp) WITH v_text-t022  INTO v_dummy . &quot; text: Context binding is missing
        msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
        cs_data-exceptions-cb_relpath = c_retcode-error .
      ENDIF .

    ELSE .
      ls_ctxt_prop = r_context-&gt;node_get_by_path(
                          iv_relpath  = cs_data-properties-cb_relpath
                          iv_fullpath_parent = cs_legacy-cb_fullpath ) .
      IF r_context-&gt;v_retcode EQ c_retcode-error
      OR ( cs_data-properties-comp_type EQ c_comp_type-loopstep AND
           ls_ctxt_prop-comp_type  NE lcl_context=&gt;c_comp_type-table )
      OR ( cs_data-properties-comp_type EQ c_comp_type-field AND
           ls_ctxt_prop-comp_type  NE lcl_context=&gt;c_comp_type-element ) .

        MESSAGE e000(lp) WITH v_text-t020 INTO v_dummy . &quot; text: Context binding is incorrect
        msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
        cs_data-exceptions-cb_relpath = c_retcode-error .
        EXIT .
      ENDIF .

      cs_legacy-cb_fullpath = get_fullpath( iv_parent_fullpath  = cs_legacy-cb_fullpath
                                            iv_relpath          = cs_data-properties-cb_relpath ) .
    ENDIF .



  ENDMETHOD .                    &quot;check_process_cb
  METHOD check_process_cb_appearance . &quot;check for context binding, which controls an Appearance of component
    DATA:
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      lv_length             TYPE i .

*------ relevance of the property
    CASE cs_data-properties-comp_type .
      WHEN c_comp_type-sheet
        OR c_comp_type-pattern
        OR c_comp_type-respattern
        OR c_comp_type-folder
        OR c_comp_type-drawing .
      WHEN OTHERS .
        CLEAR cs_data-properties-cb_apr_relpath .
    ENDCASE .

*------ validate
    IF cs_data-properties-cb_apr_relpath IS INITIAL .
      CLEAR cs_data-properties-cb_apr_offset .
      CLEAR cs_data-properties-cb_apr_match .
    ENDIF .

    CHECK cs_data-properties-cb_apr_relpath IS NOT INITIAL .

*------ set a legacy error (if occurs)
    IF cs_data-exceptions-cb_relpath NE c_retcode-legacy .
      CASE cs_legacy-exceptions-cb_relpath .
        WHEN c_retcode-error
          OR c_retcode-legacy .

          MESSAGE e000(lp) WITH v_text-t020                &quot; text: Context binding is incorrect
                                v_text-t021 INTO v_dummy . &quot; text: on the upper levels
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-cb_relpath = c_retcode-legacy .

          EXIT .
      ENDCASE .

    ELSE .
      EXIT .
    ENDIF .

*------
    ls_ctxt_prop = r_context-&gt;node_get_by_path(
                        iv_relpath  = cs_data-properties-cb_apr_relpath
                        iv_fullpath_parent = cs_legacy-cb_fullpath ) .
    IF r_context-&gt;v_retcode EQ c_retcode-error .
      MESSAGE e000(lp)
         WITH v_text-t079                   &quot; text: Appearance in runtime:
              v_text-t020  INTO v_dummy .   &quot; text: Context binding is incorrect
      msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
      cs_data-exceptions-cb_apr_relpath = c_retcode-error .

    ELSEIF ls_ctxt_prop-type_kind   EQ cl_abap_typedescr=&gt;typekind_char
       AND ls_ctxt_prop-type_length GT 1 .
      lv_length = cs_data-properties-cb_apr_offset + cs_data-properties-cb_apr_match .
      IF lv_length GT ls_ctxt_prop-type_length .
        MESSAGE i000(lp)
        WITH v_text-t024 lv_length                  &quot; text: Chars number
             v_text-t025 ls_ctxt_prop-type_length   &quot; text: overlap the field length
        INTO v_dummy .
        msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
        cs_data-exceptions-cb_apr_relpath = c_retcode-error .
      ENDIF .
    ELSE .
      CLEAR cs_data-properties-cb_apr_offset .
      CLEAR cs_data-properties-cb_apr_match .
    ENDIF .

  ENDMETHOD .                    &quot;check_process_cb_appearance
  METHOD check_process_cb_value .  &quot;check for context binding which define a field Value
    DATA:
      ls_ctxt_prop        TYPE lcl_context=&gt;ty_s_properties ,
      lv_length           TYPE i .

*------ relevance of the property
    CASE cs_data-properties-comp_type .
      WHEN c_comp_type-sheet .

      WHEN c_comp_type-field .
        IF cs_data-properties-cb_val_relpath IS INITIAL .
          MESSAGE w000(lp)
             WITH v_text-t011 &apos;:&apos;             &quot; text: Value
                  v_text-t022  INTO v_dummy . &quot; text: Context binding is missing
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-cb_val_relpath = c_retcode-warning .
        ENDIF .

      WHEN c_comp_type-drawing .
        CLEAR cs_data-properties-cb_val_offset  .
        CLEAR cs_data-properties-cb_val_match   .
        CLEAR cs_data-properties-cb_val_convert .

        IF cs_data-properties-tb_drwstat_flag IS INITIAL .
          IF cs_data-properties-cb_val_relpath IS INITIAL .
            MESSAGE e000(lp)
               WITH v_text-t011 &apos;:&apos;             &quot; text: Value
                    v_text-t022  INTO v_dummy . &quot; text: Context binding is missing
            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-cb_val_relpath = c_retcode-error .
          ENDIF .
        ELSE .
          CLEAR cs_data-properties-cb_val_relpath .
        ENDIF .

      WHEN c_comp_type-tree
        OR c_comp_type-grid .
        CLEAR cs_data-properties-cb_val_offset  .
        CLEAR cs_data-properties-cb_val_match   .
        CLEAR cs_data-properties-cb_val_convert .
        CLEAR cs_data-properties-cb_val_sub_req .
        CLEAR cs_data-properties-cb_val_sub_row .
        CLEAR cs_data-properties-cb_val_sub_col .

        IF cs_data-properties-cb_val_relpath IS INITIAL .
          MESSAGE e000(lp)
             WITH v_text-t011 &apos;:&apos;             &quot; text: Value
                  v_text-t022  INTO v_dummy . &quot; text: Context binding is missing
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-cb_val_relpath = c_retcode-error .
        ENDIF .

      WHEN OTHERS .
        CLEAR cs_data-properties-cb_val_relpath .
    ENDCASE .

*------ validate
    IF cs_data-properties-cb_val_relpath IS INITIAL .
      CLEAR cs_data-properties-cb_val_offset  .
      CLEAR cs_data-properties-cb_val_match   .
      CLEAR cs_data-properties-cb_val_convert .
      CLEAR cs_data-properties-cb_val_sub_req .
      CLEAR cs_data-properties-cb_val_sub_row .
      CLEAR cs_data-properties-cb_val_sub_col .

      EXIT .
    ENDIF .

*------ set a legacy error (if occurs)
    IF cs_data-exceptions-cb_relpath NE c_retcode-legacy .
      CASE cs_legacy-exceptions-cb_relpath .
        WHEN c_retcode-error
          OR c_retcode-legacy .

          MESSAGE e000(lp) WITH v_text-t020                &quot; text: Context binding is incorrect
                                v_text-t021 INTO v_dummy . &quot; text: on the upper levels
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-cb_relpath = c_retcode-legacy .

          EXIT .
      ENDCASE .
    ELSE .
      EXIT .
    ENDIF .

*------ try to read context properties
    ls_ctxt_prop = r_context-&gt;node_get_by_path(
                        iv_relpath  = cs_data-properties-cb_val_relpath
                        iv_fullpath_parent = cs_legacy-cb_fullpath ) .
    IF r_context-&gt;v_retcode EQ c_retcode-error .
      MESSAGE e000(lp)
         WITH v_text-t011 &apos;:&apos;             &quot; text: Value
              v_text-t020  INTO v_dummy . &quot; text: Context binding is incorrect
      msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
      cs_data-exceptions-cb_val_relpath = c_retcode-error .
      EXIT .
    ENDIF .

*------ check, if Context component type is allowed for the Form component
    DO 1 TIMES .
      CASE cs_data-properties-comp_type .
        WHEN c_comp_type-sheet
          OR c_comp_type-field
          OR c_comp_type-drawing .
          CHECK ls_ctxt_prop-comp_type NE lcl_context=&gt;c_comp_type-element
            AND ls_ctxt_prop-comp_type NE lcl_context=&gt;c_comp_type-table .
        WHEN c_comp_type-grid .
          CHECK ls_ctxt_prop-comp_type NE lcl_context=&gt;c_comp_type-table .
        WHEN c_comp_type-tree .
          CHECK ls_ctxt_prop-comp_type NE lcl_context=&gt;c_comp_type-tree
            AND ls_ctxt_prop-comp_type NE lcl_context=&gt;c_comp_type-tree_s .
        WHEN OTHERS . EXIT . &quot; --&gt;&gt; do
      ENDCASE .

      MESSAGE e000(lp) WITH v_text-t020 INTO v_dummy . &quot; text: Context binding is incorrect
      msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
      cs_data-exceptions-cb_val_relpath = c_retcode-error .
    ENDDO .

*------ Offset, Match, Convert option
    CHECK cs_data-properties-comp_type EQ c_comp_type-sheet
       OR cs_data-properties-comp_type EQ c_comp_type-field
       OR cs_data-properties-comp_type EQ c_comp_type-drawing .

    CASE ls_ctxt_prop-comp_type .
      WHEN lcl_context=&gt;c_comp_type-element .
        cs_data-properties-cb_val_sub_req = abap_off .

      WHEN lcl_context=&gt;c_comp_type-table .
        cs_data-properties-cb_val_sub_req = abap_on .

        IF cs_data-properties-cb_val_sub_row IS INITIAL .
          MESSAGE e000(lp)
             WITH v_text-t236       &quot; text: Table row
                  v_text-t031       &quot; text: is missing
                  &apos;:&apos;
                  v_text-t020  INTO v_dummy . &quot; text: Context binding is incorrect
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-cb_val_relpath = c_retcode-error .
          EXIT .
        ENDIF .

        IF cs_data-properties-cb_val_sub_col IS INITIAL .
          MESSAGE e000(lp)
             WITH v_text-t237       &quot; text: Column
                  v_text-t031       &quot; text: is missing
                  &apos;:&apos;
                  v_text-t020  INTO v_dummy . &quot; text: Context binding is incorrect
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-cb_val_relpath = c_retcode-error .
          EXIT .
        ENDIF .

        ls_ctxt_prop =
        get_sub_ctxt( iv_cb_fullpath = cs_legacy-cb_fullpath
                      is_form_prop   = cs_data-properties ) .

        IF r_context-&gt;v_retcode EQ c_retcode-error .
          MESSAGE e000(lp)
             WITH cs_data-properties-cb_val_relpath &apos;-&apos;
                  cs_data-properties-cb_val_sub_col
                  v_text-t020  INTO v_dummy . &quot; text: Context binding is incorrect
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-cb_val_relpath = c_retcode-error .
          EXIT .
        ENDIF .
    ENDCASE .

    CHECK cs_data-properties-comp_type NE c_comp_type-drawing .

    IF  ls_ctxt_prop-type_kind   EQ cl_abap_typedescr=&gt;typekind_char
    AND ls_ctxt_prop-type_length GT 1 .
      lv_length = cs_data-properties-cb_val_offset + cs_data-properties-cb_val_match .
      IF lv_length GT ls_ctxt_prop-type_length .
        MESSAGE i000(lp)
        WITH v_text-t024 lv_length                  &quot; text: Chars number
             v_text-t025 ls_ctxt_prop-type_length   &quot; text: overlap the field length
        INTO v_dummy .
        msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
        cs_data-exceptions-cb_val_relpath = c_retcode-error .
      ENDIF .
    ELSE .
      CLEAR cs_data-properties-cb_val_offset .
      CLEAR cs_data-properties-cb_val_match .
    ENDIF .

    IF is_val_convert_relevant( ls_ctxt_prop ) EQ space .
      CLEAR cs_data-properties-cb_val_convert .
    ENDIF .

  ENDMETHOD .                    &quot;check_process_cb_value
  METHOD check_process_cb_valvld .  &quot;check for data validation option
    DATA:
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      lt_dtsets             TYPE ty_t_nodetab ,
      ls_dtset_fldseq       TYPE ty_s_grid_fldseq ,
      lt_dtset_fldseq       TYPE ty_t_grid_fldseq ,
      ls_dtset_ctxt_prop    TYPE lcl_context=&gt;ty_s_properties ,
      lt_dtset_ctxt_prop    TYPE lcl_context=&gt;ty_t_properties ,
      lv_msg_prefix         TYPE string ,
      lv_error_flag         TYPE flag ,
      lr_typedescr          TYPE REF TO cl_abap_typedescr ,
      lr_tabledescr         TYPE REF TO cl_abap_tabledescr ,
      lr_structdescr        TYPE REF TO cl_abap_structdescr .
    FIELD-SYMBOLS:
      &lt;components&gt;          TYPE abap_compdescr .

*------ relevance of the property
    CASE cs_data-properties-comp_type .
      WHEN c_comp_type-field .

*------ set a legacy error (if occurs)
        IF cs_data-exceptions-cb_relpath NE c_retcode-legacy .
          CASE cs_legacy-exceptions-cb_relpath .
            WHEN c_retcode-error
              OR c_retcode-legacy .

              MESSAGE e000(lp) WITH v_text-t020                &quot; text: Context binding is incorrect
                                    v_text-t021 INTO v_dummy . &quot; text: on the upper levels
              msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
              cs_data-exceptions-cb_relpath = c_retcode-legacy .

              EXIT .
          ENDCASE .
        ELSE .
          EXIT .
        ENDIF .

*------ attributes
        IF cs_data-properties-cb_valvld_attr_relpath IS NOT INITIAL .
          DO 1 TIMES .
            ls_ctxt_prop = r_context-&gt;node_get_by_path(
                            iv_relpath  = cs_data-properties-cb_valvld_attr_relpath
                            iv_fullpath_parent = cs_legacy-cb_fullpath ) .

*           check: it must be table
            IF r_context-&gt;v_retcode EQ c_retcode-error
            OR ls_ctxt_prop-comp_type NE lcl_context=&gt;c_comp_type-table .
              lv_error_flag = abap_on .
              EXIT .
            ENDIF .

*           check: the table must contain two leading fields with char/string type
            cl_abap_datadescr=&gt;describe_by_name(
                 EXPORTING  p_name         = ls_ctxt_prop-type_absname_t
                 RECEIVING  p_descr_ref    = lr_typedescr
                 EXCEPTIONS type_not_found = 4 ) .
            IF sy-subrc NE 0 .
              lv_error_flag = abap_on .
              EXIT .
            ENDIF .

            TRY .
                lr_tabledescr  ?=  lr_typedescr .
                lr_structdescr ?=  lr_tabledescr-&gt;get_table_line_type( ) .
              CATCH cx_sy_move_cast_error .
                lv_error_flag = abap_on .
                EXIT .
            ENDTRY .

            DO 2 TIMES .
              READ TABLE lr_structdescr-&gt;components ASSIGNING &lt;components&gt; INDEX sy-index .
              IF sy-subrc NE 0 .
                lv_error_flag = abap_on .
                EXIT .
              ENDIF .
              CASE &lt;components&gt;-type_kind .
                WHEN cl_abap_datadescr=&gt;typekind_clike
                  OR cl_abap_datadescr=&gt;typekind_string
                  OR cl_abap_datadescr=&gt;typekind_csequence
                  OR cl_abap_datadescr=&gt;typekind_char .
                WHEN OTHERS .
                  lv_error_flag = abap_on .
                  EXIT .
              ENDCASE .
            ENDDO .
          ENDDO .

          IF lv_error_flag IS NOT INITIAL .
            MESSAGE e000(lp)
               WITH v_text-t348       &quot; text: Data validation
                    v_text-t350       &quot; text: Table for dynamic substitution (attribute/value)
                    &apos;:&apos;
                    v_text-t020  INTO v_dummy . &quot; text: Context binding is incorrect

            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-cb_val_relpath = c_retcode-error .
          ENDIF .
        ENDIF .

*------ formula1
        CONCATENATE v_text-t348       &quot; text: Data validation
                    v_text-t351       &quot; text: Value (Formula)
                    &apos;[1] :&apos;
               INTO lv_msg_prefix SEPARATED BY space .

*       binding with context field by relpath
        IF cs_data-properties-cb_valvld_for1_relpath IS NOT INITIAL .
          CLEAR cs_data-properties-cb_valvld_for1_dataset_id .
          CLEAR cs_data-properties-cb_valvld_for1_dataset_fld .

          ls_ctxt_prop = r_context-&gt;node_get_by_path(
                              iv_relpath  = cs_data-properties-cb_valvld_for1_relpath
                              iv_fullpath_parent = cs_legacy-cb_fullpath ) .
          IF r_context-&gt;v_retcode EQ c_retcode-error
          OR ls_ctxt_prop-comp_type NE lcl_context=&gt;c_comp_type-element .
            MESSAGE e000(lp)
               WITH lv_msg_prefix
                    v_text-t020  INTO v_dummy . &quot; text: Context binding is incorrect

            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-cb_val_relpath = c_retcode-error .
          ENDIF .
        ENDIF .

*       binding with template dataset (grid)
        DO 1 TIMES .
          IF cs_data-properties-cb_valvld_for1_dataset_id IS INITIAL .
            cs_data-properties-cb_valvld_for1_dataset_fld = space .
            EXIT .
          ENDIF .

*         check dataset
          lt_dtsets = get_relevant_datasets( cs_data-properties-id ) .

          READ TABLE lt_dtsets TRANSPORTING NO FIELDS
            WITH KEY id = cs_data-properties-cb_valvld_for1_dataset_id .
          IF sy-subrc EQ 0 .
            CASE node_get_retcode_severity( cs_data-properties-cb_valvld_for1_dataset_id ) .
              WHEN c_retcode-legacy OR c_retcode-error .
                MESSAGE e000(lp)
                WITH lv_msg_prefix
                     v_text-t234                    &quot; text: Dataset
                     v_text-t248 INTO v_dummy .     &quot; text: has problems
                msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
                cs_data-exceptions-tb_drawing = c_retcode-error .
                EXIT .
            ENDCASE .
          ELSE .
            MESSAGE e000(lp)
               WITH lv_msg_prefix
                    v_text-t244 INTO v_dummy .      &quot; text: Incorrect Dataset is specified
            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-tb_drawing = c_retcode-error .
            EXIT .
          ENDIF .

*         check field of dataset
          IF cs_data-properties-cb_valvld_for1_dataset_fld IS INITIAL .
            MESSAGE e000(lp)
               WITH lv_msg_prefix
                    v_text-t353 INTO v_dummy .      &quot; text: Field of Dataset is missing
            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-tb_drawing = c_retcode-error .
          ELSE .
            get_grid_fldseqprop( EXPORTING iv_id        = cs_data-properties-cb_valvld_for1_dataset_id
                                 IMPORTING et_ctxt_prop = lt_dtset_ctxt_prop[]
                                           et_fldseq    = lt_dtset_fldseq[] ) .

            READ TABLE lt_dtset_fldseq TRANSPORTING NO FIELDS
              WITH KEY field = cs_data-properties-cb_valvld_for1_dataset_fld .
            IF sy-subrc NE 0 .
              READ TABLE lt_dtset_ctxt_prop INTO ls_dtset_ctxt_prop
                WITH KEY comp_fullpath = cs_data-properties-cb_valvld_for1_dataset_fld .
              IF sy-subrc EQ 0 .
                MESSAGE e000(lp)
                   WITH lv_msg_prefix
                        v_text-t249               &quot; text: Dataset: Grid has hidden column
                        ls_dtset_ctxt_prop-comp_name
                   INTO v_dummy .
                msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
                cs_data-exceptions-tb_drawing = c_retcode-error .
              ELSE .
                MESSAGE e000(lp)
                   WITH lv_msg_prefix
                        v_text-t354 INTO v_dummy .      &quot; text: Field of Dataset is incorrect
                msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
                cs_data-exceptions-tb_drawing = c_retcode-error .
              ENDIF .
            ENDIF .
          ENDIF .

        ENDDO .

*------ formula2
        CONCATENATE v_text-t348       &quot; text: Data validation
                    v_text-t351       &quot; text: Value (Formula)
                    &apos;[2] :&apos;
               INTO lv_msg_prefix SEPARATED BY space .

*       binding with context field by relpath
        IF cs_data-properties-cb_valvld_for2_relpath IS NOT INITIAL .
          ls_ctxt_prop = r_context-&gt;node_get_by_path(
                              iv_relpath  = cs_data-properties-cb_valvld_for2_relpath
                              iv_fullpath_parent = cs_legacy-cb_fullpath ) .
          IF r_context-&gt;v_retcode EQ c_retcode-error
          OR ls_ctxt_prop-comp_type NE lcl_context=&gt;c_comp_type-element .
            MESSAGE e000(lp)
               WITH lv_msg_prefix
                    v_text-t020  INTO v_dummy . &quot; text: Context binding is incorrect

            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-cb_val_relpath = c_retcode-error .
          ENDIF .
        ENDIF .

      WHEN OTHERS .
        CLEAR cs_data-properties-cb_valvld_attr_relpath     .
        CLEAR cs_data-properties-cb_valvld_for1_dataset_id  .
        CLEAR cs_data-properties-cb_valvld_for1_dataset_fld .
        CLEAR cs_data-properties-cb_valvld_for1_relpath     .
        CLEAR cs_data-properties-cb_valvld_for2_relpath     .
    ENDCASE .

  ENDMETHOD .                    &quot;check_process_cb_valvld
  METHOD check_process_tb_sheet . &quot; check for template Sheet binding

*------ set a legacy error (if occurs)
    CASE cs_legacy-exceptions-tb_sheetname .
      WHEN c_retcode-error
        OR c_retcode-legacy .

        MESSAGE e000(lp)
           WITH v_text-t026                 &quot; text: problem occurs with component
                v_text-t008                 &quot; text: Sheet
                v_text-t021 INTO v_dummy .  &quot; text: on the upper levels
        msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
        cs_data-exceptions-tb_sheetname = c_retcode-legacy .
    ENDCASE .

*------ validate
    CASE cs_data-properties-comp_type .
      WHEN c_comp_type-sheet .
      WHEN OTHERS .
        CLEAR cs_data-properties-tb_sheetname .
        CLEAR cs_data-properties-tb_sheetstate .
        CLEAR cs_data-properties-tb_sheetprotection .
    ENDCASE .

*------ check
    CASE cs_data-properties-comp_type .
      WHEN c_comp_type-loopstep
        OR c_comp_type-folder .

      WHEN c_comp_type-sheet .
        IF cs_legacy-tb_sheet_exists IS NOT INITIAL .
          MESSAGE e000(lp)
             WITH v_text-t027               &quot; text: A component
                  v_text-t008               &quot; text: Sheet
                  v_text-t028               &quot; text: already presents
                  v_text-t021 INTO v_dummy .&quot; text: on the upper levels
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-tb_sheetname = c_retcode-error .
        ENDIF .

        IF cs_data-properties-tb_sheetname IS INITIAL .
          MESSAGE e000(lp)
             WITH v_text-t029 &quot; text: Binding with Sheet of the template missing
             INTO v_dummy .
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-tb_sheetname = c_retcode-error .
        ELSE .
          DATA ls_sheets  TYPE lcl_excel=&gt;ty_s_sheets .
          ls_sheets =
          r_exceltemplate-&gt;get_sheet( iv_sheetname = cs_data-properties-tb_sheetname ) .

          IF ls_sheets IS INITIAL .
            MESSAGE e000(lp)
               WITH v_text-t030     &quot; text: Template does not contain a Sheet
                    &apos;[&apos; cs_data-properties-tb_sheetname &apos;]&apos; INTO v_dummy .
            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-tb_sheetname = c_retcode-error .
          ELSE .
            cs_legacy-tb_chartsheet = ls_sheets-chartsheet .
            cs_legacy-tb_sheetname  = cs_data-properties-tb_sheetname .
            cs_legacy-summarybelow  = ls_sheets-summarybelow .
            cs_legacy-summaryright  = ls_sheets-summaryright .
          ENDIF .
        ENDIF .

        cs_legacy-tb_sheet_exists = abap_on .

*------&gt;&gt; sheet protection
        DATA:
          ls_sheetprotection    TYPE lcl_form=&gt;ty_s_sheetprotection ,
          ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
          lv_relpath            TYPE string ,
          lv_password           TYPE string .

        ls_sheetprotection = conv_sheetprotection_st( cs_data-properties-tb_sheetprotection ) .

        CASE ls_sheetprotection-mode .
          WHEN c_sheetprotection_mode-off .
            CLEAR ls_sheetprotection .

          WHEN c_sheetprotection_mode-from_template .
            CLEAR ls_sheetprotection .
            ls_sheetprotection-mode           = c_sheetprotection_mode-from_template.

          WHEN c_sheetprotection_mode-from_context .
            lv_relpath  = ls_sheetprotection-cb_val_relpath .
            lv_password = ls_sheetprotection-password .
            CLEAR ls_sheetprotection .
            ls_sheetprotection-mode           = c_sheetprotection_mode-from_context .
            ls_sheetprotection-cb_val_relpath = lv_relpath .
            ls_sheetprotection-password       = lv_password .

            DO 1 TIMES .
              IF ls_sheetprotection-cb_val_relpath IS INITIAL .
                MESSAGE e000(lp)
                   WITH v_text-t298 &apos;:&apos;             &quot; text: Sheet protection
                        v_text-t022  INTO v_dummy . &quot; text: Context binding is missing
                msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
                cs_data-exceptions-cb_val_relpath = c_retcode-error .
                EXIT .
              ENDIF .

              CHECK cs_data-exceptions-cb_relpath NE c_retcode-legacy .
              CASE cs_legacy-exceptions-cb_relpath .
                WHEN c_retcode-error
                  OR c_retcode-legacy .

                  MESSAGE e000(lp) WITH v_text-t020                &quot; text: Context binding is incorrect
                                        v_text-t021 INTO v_dummy . &quot; text: on the upper levels
                  msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
                  cs_data-exceptions-cb_relpath = c_retcode-legacy .
                  EXIT .
              ENDCASE .

              ls_ctxt_prop = r_context-&gt;node_get_by_path(
                                  iv_relpath         = ls_sheetprotection-cb_val_relpath
                                  iv_fullpath_parent = cs_legacy-cb_fullpath ) .
              IF r_context-&gt;v_retcode EQ c_retcode-error .
                MESSAGE e000(lp)
                   WITH v_text-t298 &apos;:&apos;             &quot; text: Sheet protection
                        v_text-t020  INTO v_dummy . &quot; text: Context binding is incorrect
                msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
                cs_data-exceptions-cb_val_relpath = c_retcode-error .
                EXIT .
              ENDIF .
            ENDDO .

          WHEN c_sheetprotection_mode-static .
            CLEAR ls_sheetprotection-cb_val_relpath .
        ENDCASE .

        cs_data-properties-tb_sheetprotection = lcl_form=&gt;conv_sheetprotection_ts( ls_sheetprotection ) .
*&lt;&lt;------ sheet protection

      WHEN OTHERS .
        IF cs_legacy-tb_sheet_exists IS INITIAL .
          MESSAGE e000(lp)
             WITH v_text-t027               &quot; text: A component
                  v_text-t008               &quot; text: Sheet
                  v_text-t031               &quot; text: is missing
                  v_text-t021 INTO v_dummy .&quot; text: on the upper levels
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-tb_sheetname = c_retcode-error .

        ELSE .
          IF  cs_legacy-tb_chartsheet IS NOT INITIAL
          AND cs_data-properties-comp_type NE c_comp_type-chart .
            MESSAGE e000(lp)
               WITH v_text-t274 INTO v_dummy .&quot; text: Chart Sheet can contain the Charts only&apos; .
            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-tb_sheetname = c_retcode-error .
          ENDIF .
        ENDIF .

    ENDCASE .

    IF  cs_data-properties-comp_type EQ c_comp_type-tree
    AND ( cs_legacy-summarybelow IS NOT INITIAL ) .
*      OR cs_legacy-summaryright IS NOT INITIAL ) .

      MESSAGE e000(lp)
         WITH v_text-t182                   &quot; text: follow to Excel menu: DATA-&gt;OUTLINE
              v_text-t183                   &quot; text: and uncheck SUMMARY ROWS BELOW DETAIL
         INTO v_dummy .
      msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
      cs_data-exceptions-comp_type = c_retcode-error .
    ENDIF .

  ENDMETHOD .                    &quot;check_process_tb_sheet
  METHOD check_process_tb_area . &quot; check for template Area binding
    DATA:
      lv_top            TYPE i ,
      lv_left           TYPE i ,
      lv_bottom         TYPE i ,
      lv_right          TYPE i .
    DATA:
      lv_parent_top     TYPE i ,
      lv_parent_left    TYPE i ,
      lv_parent_bottom  TYPE i ,
      lv_parent_right   TYPE i .

*   [template binding area] option
    CASE cs_data-properties-comp_type .
      WHEN c_comp_type-sheet
        OR c_comp_type-loopstep
        OR c_comp_type-folder .

        CLEAR:
          cs_data-properties-tb_area_top ,
          cs_data-properties-tb_area_left ,
          cs_data-properties-tb_area_rows ,
          cs_data-properties-tb_area_columns .

      WHEN c_comp_type-field .
        IF  cs_data-properties-tb_area_textmark IS INITIAL
        AND cs_data-properties-tb_area_top      IS INITIAL
        AND cs_data-properties-tb_area_left     IS INITIAL
        AND cs_data-properties-tb_area_rows     IS INITIAL
        AND cs_data-properties-tb_area_columns  IS INITIAL .
          MESSAGE e000(lp)
             WITH v_text-t032 INTO v_dummy .  &quot; text: An area is not specified in the template
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-tb_area = c_retcode-error .
        ENDIF .

      WHEN OTHERS .
        IF  cs_data-properties-tb_area_top     IS INITIAL
        AND cs_data-properties-tb_area_left    IS INITIAL
        AND cs_data-properties-tb_area_rows    IS INITIAL
        AND cs_data-properties-tb_area_columns IS INITIAL .
          MESSAGE e000(lp)
             WITH v_text-t032 INTO v_dummy .  &quot; text: An area is not specified in the template
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-tb_area = c_retcode-error .
        ENDIF .
    ENDCASE .

    CASE is_data_parent-exceptions-tb_area .
      WHEN c_retcode-error
        OR c_retcode-legacy .

        MESSAGE e000(lp)
           WITH v_text-t033                 &quot; text: A problem with area determination occurs
                v_text-t021 INTO v_dummy .  &quot; text: on the upper levels
        msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
        cs_data-exceptions-tb_area = c_retcode-legacy .

      WHEN OTHERS .
        IF  is_data_parent-properties-comp_type EQ c_comp_type-respattern
        AND cs_data-properties-comp_type        NE c_comp_type-field .

        ELSE .
          IF  (  is_data_parent-properties-tb_area_top     IS NOT INITIAL
              OR is_data_parent-properties-tb_area_left    IS NOT INITIAL
              OR is_data_parent-properties-tb_area_rows    IS NOT INITIAL
              OR is_data_parent-properties-tb_area_columns IS NOT INITIAL )
          AND (  cs_data-properties-tb_area_top     IS NOT INITIAL
              OR cs_data-properties-tb_area_left    IS NOT INITIAL
              OR cs_data-properties-tb_area_rows    IS NOT INITIAL
              OR cs_data-properties-tb_area_columns IS NOT INITIAL ) .

            lv_top    = cs_data-properties-tb_area_top .
            lv_left   = cs_data-properties-tb_area_left .
            lv_bottom = lv_top  + cs_data-properties-tb_area_rows .
            lv_right  = lv_left + cs_data-properties-tb_area_columns .

            lv_parent_top    = is_data_parent-properties-tb_area_top .
            lv_parent_left   = is_data_parent-properties-tb_area_left .
            lv_parent_bottom = lv_parent_top  + is_data_parent-properties-tb_area_rows .
            lv_parent_right  = lv_parent_left + is_data_parent-properties-tb_area_columns .

            IF lv_top    LT lv_parent_top
            OR lv_left   LT lv_parent_left
            OR lv_bottom GT lv_parent_bottom
            OR lv_right  GT lv_parent_right .
              MESSAGE e000(lp)
                 WITH v_text-t034   &quot; text: An area is beyond the scope of upper-level areas
                 INTO v_dummy .
              msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
              cs_data-exceptions-tb_area = c_retcode-error .
            ENDIF .
          ENDIF .
        ENDIF .

        IF cs_data-properties-tb_area_top     IS NOT INITIAL
        OR cs_data-properties-tb_area_left    IS NOT INITIAL
        OR cs_data-properties-tb_area_rows    IS NOT INITIAL
        OR cs_data-properties-tb_area_columns IS NOT INITIAL .
          cs_legacy-tb_area_top     = cs_data-properties-tb_area_top     .
          cs_legacy-tb_area_left    = cs_data-properties-tb_area_left    .
          cs_legacy-tb_area_rows    = cs_data-properties-tb_area_rows    .
          cs_legacy-tb_area_columns = cs_data-properties-tb_area_columns .
        ENDIF .
    ENDCASE .

*   [matrix layout] option for fields
    IF  cs_data-properties-comp_type EQ c_comp_type-field
    AND cs_data-properties-tb_area_textmark IS INITIAL .
    ELSE .
      CLEAR cs_data-properties-tb_val_matrix .
    ENDIF .
    IF cs_data-properties-tb_val_matrix IS INITIAL .
      CLEAR cs_data-properties-tb_val_matr_c .
      CLEAR cs_data-properties-tb_val_matr_r .
    ENDIF .

*   [copy of columns/rows properties] option
    CASE cs_data-properties-comp_type .
      WHEN c_comp_type-pattern
        OR c_comp_type-respattern .
      WHEN c_comp_type-tree
        OR c_comp_type-grid .
        cs_data-properties-tb_rowprop = abap_on .
        cs_data-properties-tb_colprop = abap_on .
      WHEN OTHERS .
        CLEAR cs_data-properties-tb_rowprop .
        CLEAR cs_data-properties-tb_colprop .
    ENDCASE .

*   [merge cells] option
    CASE cs_data-properties-comp_type .
      WHEN c_comp_type-respattern .
        IF  cs_data-properties-tb_mergecells EQ c_tb_mergecells-rows
        AND cs_data-properties-tb_area_rows  GT 1 .
          MESSAGE e000(lp)
             WITH v_text-t179   &quot; text: Specify area inside single row
             INTO v_dummy .
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-tb_area = c_retcode-error .

        ELSEIF cs_data-properties-tb_mergecells EQ c_tb_mergecells-cols
           AND cs_data-properties-tb_area_columns  GT 1 .
          MESSAGE e000(lp)
             WITH v_text-t180   &quot; text: Specify area inside single column
             INTO v_dummy .
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-tb_area = c_retcode-error .
        ENDIF .

      WHEN OTHERS .
        CLEAR cs_data-properties-tb_mergecells .

    ENDCASE .

*   [AutoFit for merged cells] option
    CASE cs_data-properties-comp_type .
      WHEN c_comp_type-pattern
        OR c_comp_type-respattern .
        IF cs_data-properties-tb_autofitmerged_r IS NOT INITIAL .
          CLEAR cs_data-properties-tb_autofitmerged_c .
        ENDIF .

      WHEN OTHERS .
        CLEAR cs_data-properties-tb_autofitmerged_r .
        CLEAR cs_data-properties-tb_autofitmerged_c .
    ENDCASE .

  ENDMETHOD .                    &quot;check_process_tb_area
  METHOD check_process_tb_drawing .

*------ validate
    CASE cs_data-properties-comp_type .
      WHEN c_comp_type-drawing .
        CLEAR: cs_data-properties-cb_val_convert .
      WHEN c_comp_type-chart .
        CLEAR: cs_data-properties-cb_val_convert .
        EXIT .
      WHEN OTHERS .
        CLEAR: cs_data-properties-tb_drwstat_flag ,
               cs_data-properties-tb_drwstat_name ,
               cs_data-properties-drawing_size ,
               cs_data-properties-drawing_size_h_relpath ,
               cs_data-properties-drawing_size_w_relpath .
        EXIT .
    ENDCASE .

*------ checks
    CASE cs_data-properties-tb_drwstat_flag .
      WHEN abap_on .
        IF cs_data-properties-tb_drwstat_name IS INITIAL .
          MESSAGE e000(lp)
             WITH v_text-t145 INTO v_dummy .  &quot; text: Name of the drawing is not specified
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-tb_drawing = c_retcode-error .

        ELSEIF cs_data-exceptions-tb_sheetname NE c_retcode-legacy
           AND cs_data-exceptions-tb_sheetname NE c_retcode-error .

          DATA ls_drawings  TYPE lcl_excel=&gt;ty_s_drawings_tmp .
          ls_drawings =
          r_exceltemplate-&gt;get_drawing_static( iv_sheetname = cs_legacy-tb_sheetname
                                               iv_drwstat_name = cs_data-properties-tb_drwstat_name ) .
          IF ls_drawings IS INITIAL
          OR ( ls_drawings-drawing_type NE r_exceltemplate-&gt;c_drawing_type-vector AND
               ls_drawings-drawing_type NE r_exceltemplate-&gt;c_drawing_type-bitmap ) .
            MESSAGE e000(lp)
               WITH v_text-t008               &quot; text: Sheet
                    cs_legacy-tb_sheetname
                    v_text-t146               &quot; text: does not contain any drawings
                    cs_data-properties-tb_drwstat_name INTO v_dummy .
            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-tb_drawing = c_retcode-error .
          ENDIF .
        ENDIF .

      WHEN abap_off .
        CLEAR:
        cs_data-properties-tb_drwstat_name .
    ENDCASE .

*------ checks 2
    DATA:
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties .
    CASE cs_data-properties-drawing_size .
      WHEN c_drawing_size-fit_within_area .
        CLEAR:
          cs_data-properties-drawing_size_h_relpath ,
          cs_data-properties-drawing_size_w_relpath .

      WHEN c_drawing_size-from_context .
        IF  cs_data-exceptions-cb_relpath NE c_retcode-legacy
        AND ( cs_legacy-exceptions-cb_relpath EQ c_retcode-error OR
              cs_legacy-exceptions-cb_relpath EQ c_retcode-legacy ) .
          &quot; set a legacy error (if occurs)
          MESSAGE e000(lp) WITH v_text-t020                &quot; text: Context binding is incorrect
                                v_text-t021 INTO v_dummy . &quot; text: on the upper levels
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-cb_relpath = c_retcode-legacy .

        ELSE .
*         --- Height
          IF cs_data-properties-drawing_size_h_relpath IS INITIAL .
            MESSAGE e000(lp)
               WITH v_text-t139                 &quot; text: Drawing
                    v_text-t340 &apos;:&apos;             &quot; text: Height
                    v_text-t022  INTO v_dummy . &quot; text: Context binding is missing
            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-cb_val_relpath = c_retcode-error .

          ELSE .
            &quot; check relpath for chart title
            ls_ctxt_prop = r_context-&gt;node_get_by_path(
                                iv_relpath  = cs_data-properties-drawing_size_h_relpath
                                iv_fullpath_parent = cs_legacy-cb_fullpath ) .
            IF r_context-&gt;v_retcode EQ c_retcode-error .
              MESSAGE e000(lp)
                 WITH v_text-t139                 &quot; text: Drawing
                      v_text-t340 &apos;:&apos;             &quot; text: Height
                      v_text-t020  INTO v_dummy . &quot; text: Context binding is incorrect
              msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
              cs_data-exceptions-tb_drawing = c_retcode-error .
            ENDIF .
          ENDIF .
*         --- Width
          IF cs_data-properties-drawing_size_w_relpath IS INITIAL .
            MESSAGE e000(lp)
               WITH v_text-t139                 &quot; text: Drawing
                    v_text-t341 &apos;:&apos;             &quot; text: Width
                    v_text-t022  INTO v_dummy . &quot; text: Context binding is missing
            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-cb_val_relpath = c_retcode-error .

          ELSE .
            &quot; check relpath for chart title
            ls_ctxt_prop = r_context-&gt;node_get_by_path(
                                iv_relpath  = cs_data-properties-drawing_size_w_relpath
                                iv_fullpath_parent = cs_legacy-cb_fullpath ) .
            IF r_context-&gt;v_retcode EQ c_retcode-error .
              MESSAGE e000(lp)
                 WITH v_text-t139                 &quot; text: Drawing
                      v_text-t341 &apos;:&apos;             &quot; text: Width
                      v_text-t020  INTO v_dummy . &quot; text: Context binding is incorrect
              msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
              cs_data-exceptions-tb_drawing = c_retcode-error .
            ENDIF .
          ENDIF .
        ENDIF .
    ENDCASE .

  ENDMETHOD .                    &quot;check_process_tb_drawing
  METHOD check_process_chart .
    DATA:
      ls_drawings           TYPE lcl_excel=&gt;ty_s_drawings_tmp ,
      ls_chart_series       TYPE lcl_excel=&gt;ty_s_chart_series ,
      lt_dtsets             TYPE ty_t_nodetab ,
      ls_dtset_fldseq       TYPE ty_s_grid_fldseq ,
      lt_dtset_fldseq       TYPE ty_t_grid_fldseq ,
      ls_dtset_series_tab   TYPE ty_s_dataset_series_tab ,
      lt_dtset_series_tab   TYPE ty_t_dataset_series_tab ,
      lt_dtset_series_tab_tmp TYPE ty_t_dataset_series_tab ,
      lv_dtset_series_n_a   TYPE ty_char10 ,
      lv_dtset_series_all   TYPE ty_char10 ,
      ls_dtset_ctxt_prop    TYPE lcl_context=&gt;ty_s_properties ,
      lt_dtset_ctxt_prop    TYPE lcl_context=&gt;ty_t_properties ,
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      lv_msg_tmp            TYPE string .

    CHECK cs_data-properties-comp_type EQ c_comp_type-chart .
    cs_data-properties-tb_drwstat_flag = abap_on .

*======================================================================
*   Model
*======================================================================
    IF cs_data-properties-tb_drwstat_name IS INITIAL .
      MESSAGE e000(lp)
         WITH v_text-t241 INTO v_dummy .      &quot; text: Name of the Chart model is not specified
      msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
      cs_data-exceptions-tb_drawing = c_retcode-error .

    ELSEIF cs_data-exceptions-tb_sheetname NE c_retcode-legacy
       AND cs_data-exceptions-tb_sheetname NE c_retcode-error .

      ls_drawings =
      r_exceltemplate-&gt;get_drawing_static( iv_sheetname = cs_legacy-tb_sheetname
                                           iv_drwstat_name = cs_data-properties-tb_drwstat_name ) .
      IF ls_drawings IS INITIAL
      OR ls_drawings-drawing_type NE r_exceltemplate-&gt;c_drawing_type-chart .
        MESSAGE e000(lp)
           WITH v_text-t008                   &quot; text: Sheet
                cs_legacy-tb_sheetname
                v_text-t242                   &quot; text: does not contain any Charts
                cs_data-properties-tb_drwstat_name INTO v_dummy .
        msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
        cs_data-exceptions-tb_drawing = c_retcode-error .
      ENDIF .
    ENDIF .


    CASE cs_data-properties-chart_title .
      WHEN space .
        CLEAR cs_data-properties-chart_title_relpath .

      WHEN OTHERS .
        IF cs_data-properties-chart_title_relpath IS INITIAL .
          MESSAGE w000(lp)
             WITH v_text-t251 &apos;:&apos;             &quot; text: Chart title
                  v_text-t022  INTO v_dummy . &quot; text: Context binding is missing
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-tb_drawing = c_retcode-error .

        ELSE .

          IF  cs_data-exceptions-cb_relpath NE c_retcode-legacy
          AND ( cs_legacy-exceptions-cb_relpath EQ c_retcode-error OR
                cs_legacy-exceptions-cb_relpath EQ c_retcode-legacy ) .
            &quot; set a legacy error (if occurs)
            MESSAGE e000(lp) WITH v_text-t020                &quot; text: Context binding is incorrect
                                  v_text-t021 INTO v_dummy . &quot; text: on the upper levels
            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-cb_relpath = c_retcode-legacy .
          ELSE .
            &quot; check relpath for chart title
            ls_ctxt_prop = r_context-&gt;node_get_by_path(
                                iv_relpath  = cs_data-properties-chart_title_relpath
                                iv_fullpath_parent = cs_legacy-cb_fullpath ) .
            IF r_context-&gt;v_retcode EQ c_retcode-error .
              MESSAGE e000(lp)
                 WITH v_text-t251 &apos;:&apos;               &quot; text: Chart title
                      v_text-t020  INTO v_dummy .   &quot; text: Context binding is incorrect
              msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
              cs_data-exceptions-tb_drawing = c_retcode-error .
            ENDIF .
          ENDIF .
        ENDIF .
    ENDCASE .


    CASE cs_data-properties-chart_catax_title .
      WHEN space
        OR &apos;1&apos; . &quot; --&gt;&gt; From header of grid column
        CLEAR cs_data-properties-chart_catax_title_relpath .

      WHEN OTHERS .
        IF cs_data-properties-chart_catax_title_relpath IS INITIAL .
          MESSAGE w000(lp)
             WITH v_text-t232                 &quot; text: Chart
                  v_text-t343 &apos;:&apos;             &quot; text: Value Axis title
                  v_text-t022  INTO v_dummy . &quot; text: Context binding is missing
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-tb_drawing = c_retcode-error .

        ELSE .

          IF  cs_data-exceptions-cb_relpath NE c_retcode-legacy
          AND ( cs_legacy-exceptions-cb_relpath EQ c_retcode-error OR
                cs_legacy-exceptions-cb_relpath EQ c_retcode-legacy ) .
            &quot; set a legacy error (if occurs)
            MESSAGE e000(lp) WITH v_text-t020                &quot; text: Context binding is incorrect
                                  v_text-t021 INTO v_dummy . &quot; text: on the upper levels
            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-cb_relpath = c_retcode-legacy .
          ELSE .
            &quot; check relpath for chart title
            ls_ctxt_prop = r_context-&gt;node_get_by_path(
                                iv_relpath  = cs_data-properties-chart_catax_title_relpath
                                iv_fullpath_parent = cs_legacy-cb_fullpath ) .
            IF r_context-&gt;v_retcode EQ c_retcode-error .
              MESSAGE w000(lp)
                 WITH v_text-t232                 &quot; text: Chart
                      v_text-t343 &apos;:&apos;             &quot; text: Value Axis title
                      v_text-t022  INTO v_dummy . &quot; text: Context binding is missing
              msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
              cs_data-exceptions-tb_drawing = c_retcode-error .
            ENDIF .
          ENDIF .
        ENDIF .
    ENDCASE .


    CASE cs_data-properties-chart_valax_title .
      WHEN space .
        CLEAR cs_data-properties-chart_valax_title_relpath .

      WHEN OTHERS .
        IF cs_data-properties-chart_valax_title_relpath IS INITIAL .
          MESSAGE w000(lp)
             WITH v_text-t232                 &quot; text: Chart
                  v_text-t343 &apos;:&apos;             &quot; text: Value Axis title
                  v_text-t022  INTO v_dummy . &quot; text: Context binding is missing
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-tb_drawing = c_retcode-error .

        ELSE .

          IF  cs_data-exceptions-cb_relpath NE c_retcode-legacy
          AND ( cs_legacy-exceptions-cb_relpath EQ c_retcode-error OR
                cs_legacy-exceptions-cb_relpath EQ c_retcode-legacy ) .
            &quot; set a legacy error (if occurs)
            MESSAGE e000(lp) WITH v_text-t020                &quot; text: Context binding is incorrect
                                  v_text-t021 INTO v_dummy . &quot; text: on the upper levels
            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-cb_relpath = c_retcode-legacy .
          ELSE .
            &quot; check relpath for chart title
            ls_ctxt_prop = r_context-&gt;node_get_by_path(
                                iv_relpath  = cs_data-properties-chart_valax_title_relpath
                                iv_fullpath_parent = cs_legacy-cb_fullpath ) .
            IF r_context-&gt;v_retcode EQ c_retcode-error .
              MESSAGE w000(lp)
                 WITH v_text-t232                 &quot; text: Chart
                      v_text-t343 &apos;:&apos;             &quot; text: Value Axis title
                      v_text-t022  INTO v_dummy . &quot; text: Context binding is missing
              msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
              cs_data-exceptions-tb_drawing = c_retcode-error .
            ENDIF .
          ENDIF .
        ENDIF .
    ENDCASE .



*======================================================================
*   Dataset
*======================================================================
    IF cs_data-properties-dataset_id IS INITIAL .
      MESSAGE e000(lp)
         WITH v_text-t243 INTO v_dummy .      &quot; text: Dataset is not specified
      msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
      cs_data-exceptions-tb_drawing = c_retcode-error .
      EXIT .
    ENDIF .

    lt_dtsets = get_relevant_datasets( cs_data-properties-id ) .
    READ TABLE lt_dtsets TRANSPORTING NO FIELDS
      WITH KEY id = cs_data-properties-dataset_id .
    IF sy-subrc EQ 0 .
      CASE node_get_retcode_severity( cs_data-properties-dataset_id ) .
        WHEN c_retcode-legacy OR c_retcode-error .
          MESSAGE e000(lp)
          WITH v_text-t234                    &quot; text: Dataset
               v_text-t248 INTO v_dummy .     &quot; text: has problems
          msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
          cs_data-exceptions-tb_drawing = c_retcode-error .
          EXIT .
      ENDCASE .
    ELSE .
      MESSAGE e000(lp)
         WITH v_text-t244 INTO v_dummy .      &quot; text: Incorrect Dataset is specified
      msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
      cs_data-exceptions-tb_drawing = c_retcode-error .
      EXIT .
    ENDIF .

*======================================================================
*   Series
*======================================================================
    CHECK cs_data-exceptions-tb_drawing NE c_retcode-error
      AND cs_data-exceptions-tb_drawing NE c_retcode-legacy .

    CHECK ls_drawings-chart_series[] IS NOT INITIAL .

*   Get Link between Chart series and Dataset fields
    lt_dtset_series_tab_tmp[] = conv_dataset_series_st( cs_data-properties-dataset_series ) .

*   Get Available Dataset fields
    get_grid_fldseqprop( EXPORTING iv_id        = cs_data-properties-dataset_id
                         IMPORTING et_ctxt_prop = lt_dtset_ctxt_prop[]
                                   et_fldseq    = lt_dtset_fldseq[] ) .

    CLEAR ls_chart_series .
    ls_chart_series-idx       = c_chart_category_idx .
    ls_chart_series-caption   = v_text-t250 .     &quot;  text: Horizontal (Category) axis labels
    APPEND ls_chart_series TO ls_drawings-chart_series .

    LOOP AT ls_drawings-chart_series INTO ls_chart_series .
      CLEAR ls_dtset_series_tab .
      READ TABLE lt_dtset_series_tab_tmp INTO ls_dtset_series_tab
        WITH KEY seridx = ls_chart_series-idx .
      IF sy-subrc NE 0 .
        ls_dtset_series_tab-seridx = ls_chart_series-idx .
      ENDIF .
      ls_dtset_series_tab-sercap = ls_chart_series-caption .
      IF ls_dtset_series_tab-dtsfld IS NOT INITIAL .
        READ TABLE lt_dtset_fldseq TRANSPORTING NO FIELDS
          WITH KEY field = ls_dtset_series_tab-dtsfld.
        IF sy-subrc NE 0 .
          READ TABLE lt_dtset_ctxt_prop INTO ls_dtset_ctxt_prop
            WITH KEY comp_fullpath = ls_dtset_series_tab-dtsfld.
          IF sy-subrc EQ 0 .
            MESSAGE e000(lp)
               WITH v_text-t249               &quot; text: Dataset: Grid has hidden column
                    ls_dtset_ctxt_prop-comp_name
               INTO v_dummy .
            msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
            cs_data-exceptions-tb_drawing = c_retcode-error .
          ELSE .
            CLEAR ls_dtset_series_tab-dtsfld .
          ENDIF .
        ENDIF .
      ENDIF .
      APPEND ls_dtset_series_tab TO lt_dtset_series_tab .

      CHECK ls_chart_series-idx NE c_chart_category_idx .

      IF ls_dtset_series_tab-dtsfld IS INITIAL .
        ADD 1 TO lv_dtset_series_n_a .
      ENDIF .
      ADD 1 TO lv_dtset_series_all .
    ENDLOOP .

    IF lv_dtset_series_n_a EQ lv_dtset_series_all .
      MESSAGE e000(lp)
         WITH v_text-t235               &quot; text: Series
              &apos;:&apos;
              v_text-t247               &quot; text: assignment
              v_text-t031               &quot; text: is missing
         INTO v_dummy .
      msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
      cs_data-exceptions-tb_drawing = c_retcode-error .

    ELSEIF lv_dtset_series_n_a IS NOT INITIAL .
      CONCATENATE &apos;(&apos; lv_dtset_series_n_a
                  &apos;~&apos; v_text-t246       &quot; text: from
                  &apos;~&apos; lv_dtset_series_all &apos;) :&apos; INTO lv_msg_tmp .
      TRANSLATE lv_msg_tmp USING &apos;~ &apos; . CONDENSE lv_msg_tmp .

      MESSAGE e000(lp)
         WITH v_text-t235               &quot; text: Series
              lv_msg_tmp
              v_text-t247               &quot; text: assignment
              v_text-t031               &quot; text: is missing
         INTO v_dummy .
      msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
      cs_data-exceptions-tb_drawing = c_retcode-error .
    ENDIF .

*   Set Link between Chart series and Dataset fields
    cs_data-properties-dataset_series = conv_dataset_series_ts( lt_dtset_series_tab[] ) .

  ENDMETHOD .                    &quot;check_process_chart
  METHOD check_process_tree .
    DATA ls_tree_layout TYPE ty_s_tree_layout .
    DATA ls_ctxt_prop   TYPE lcl_context=&gt;ty_s_properties .

    CASE cs_data-properties-comp_type .
      WHEN c_comp_type-tree .
      WHEN OTHERS .
        CLEAR cs_data-properties-tree_layout .
        EXIT .
    ENDCASE .

    conv_container_fs(
        EXPORTING iv_field      = cs_data-properties-tree_layout
        IMPORTING es_structure  = ls_tree_layout ) .

    ls_ctxt_prop = r_context-&gt;node_get_by_path(
                        iv_relpath  = cs_data-properties-cb_val_relpath
                        iv_fullpath_parent = cs_legacy-cb_fullpath ) .

*------ validate
    IF ls_tree_layout-stru IS INITIAL .
      CLEAR ls_tree_layout-stru_exp_coll .

    ELSEIF ls_ctxt_prop-comp_type EQ lcl_context=&gt;c_comp_type-tree_s
       AND ls_tree_layout-stru_exp_coll EQ lcl_form=&gt;c_stru_exp_coll-dynamic .
      ls_tree_layout-stru_exp_coll = lcl_form=&gt;c_stru_exp_coll-collapsed .
    ENDIF .

    IF ls_tree_layout-col_hier IS INITIAL .
      CLEAR ls_tree_layout-col_hier_shift .
      CLEAR ls_tree_layout-col_hier_after .
    ENDIF .

    IF ls_tree_layout-col_othr IS INITIAL .
      CLEAR ls_tree_layout-col_othr_width .
      CLEAR ls_tree_layout-allow_formulas .
    ENDIF .

*------ checks
    IF cs_data-exceptions-tb_area NE c_retcode-error
    AND ( cs_data-properties-tb_area_rows LT 2 OR cs_data-properties-tb_area_columns LT 2 ) .
      SPLIT v_text-t196     &quot; text: As area specify 2x2(or more) |cell range (see documentation)
         AT &apos;|&apos;
       INTO sy-msgv1 sy-msgv2 .

      MESSAGE e000(lp)
         WITH sy-msgv1 sy-msgv2
         INTO v_dummy .
      msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
      cs_data-exceptions-tb_area = c_retcode-error .
    ENDIF .

    IF  ls_tree_layout-stru     IS INITIAL
    AND ls_tree_layout-col_hier IS INITIAL
    AND ls_tree_layout-col_othr IS INITIAL .
      MESSAGE e000(lp)
         WITH v_text-t203    &quot; text: Nothing to output (structure/ hier.col/ other cols)
              INTO v_dummy .
      msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
      cs_data-exceptions-tb_area = c_retcode-error .
    ENDIF .

    conv_container_sf(
        EXPORTING is_structure  = ls_tree_layout
        IMPORTING ev_field      = cs_data-properties-tree_layout ) .

  ENDMETHOD .                    &quot;check_process_tree
  METHOD check_process_grid .
    DATA ls_grid_layout TYPE ty_s_grid_layout .

    CASE cs_data-properties-comp_type .
      WHEN c_comp_type-grid .
      WHEN OTHERS .
        CLEAR cs_data-properties-grid_layout .
        CLEAR cs_data-properties-grid_fldseq .
        CLEAR cs_data-properties-grid_fldprop .
        EXIT .
    ENDCASE .

    conv_container_fs(
        EXPORTING iv_field      = cs_data-properties-grid_layout
        IMPORTING es_structure  = ls_grid_layout ) .

*------ validate
    IF cs_data-properties-cb_val_relpath IS INITIAL .
      CLEAR cs_data-properties-grid_fldseq .
      CLEAR cs_data-properties-grid_fldprop .
    ELSE .
      get_grid_fldseqprop(
          EXPORTING iv_id           = cs_data-properties-id
          IMPORTING ev_grid_fldseq  = cs_data-properties-grid_fldseq
                    ev_grid_fldprop = cs_data-properties-grid_fldprop ) .
    ENDIF .

*------ checks
    IF cs_data-properties-grid_fldseq IS INITIAL .
      MESSAGE e000(lp)
         WITH v_text-t231   &quot; text: No column list is specified
         INTO v_dummy .
      msg_syst_catch2( CHANGING ct_retmess = cs_data-exceptions-t_retmess ) .
      cs_data-exceptions-cb_val_relpath = c_retcode-error .
    ENDIF .

*   IF cs_data-exceptions-tb_area NE c_retcode-error
*   AND ( cs_data-properties-tb_area_rows LT 2 OR cs_data-properties-tb_area_columns LT 2 ) .
*
*   ENDIF .

    conv_container_sf(
        EXPORTING is_structure  = ls_grid_layout
        IMPORTING ev_field      = cs_data-properties-grid_layout ) .

  ENDMETHOD .                    &quot;check_process_grid
  METHOD set_context .
    msg_init( ) .

    IF r_context IS BOUND .
      cl_abap_datadescr=&gt;describe_by_name(
                EXPORTING  p_name   = iv_contextname
                EXCEPTIONS OTHERS   = 4 ) .
      IF sy-subrc NE 0 .
        MESSAGE e000(lp)
           WITH v_text-t004 INTO v_dummy .  &quot; text: Specify valid name of the context
        msg_syst_catch( ) .
        CHECK v_retcode NE c_retcode-error .
      ENDIF .

      CLEAR r_context .
      FREE r_context .
    ENDIF .

    CREATE OBJECT r_context
      EXPORTING
        iv_contextname = iv_contextname.
    CHECK v_retcode NE c_retcode-error .

    FIELD-SYMBOLS &lt;properties&gt;  TYPE ty_s_properties .
    READ TABLE t_properties ASSIGNING &lt;properties&gt; WITH KEY id = v_root_id .
    IF sy-subrc EQ 0 .
      &lt;properties&gt;-cb_relpath = iv_contextname .
    ENDIF.

    check_subtree( ) .

  ENDMETHOD .                    &quot;set_context
  METHOD set_template .
    msg_init( ) .

    IF r_exceltemplate IS BOUND .
      r_exceltemplate-&gt;free( ) .
      CLEAR r_exceltemplate .
      FREE  r_exceltemplate .
    ENDIF .

    CREATE OBJECT r_exceltemplate
      EXPORTING
        iv_rawdata         = iv_rawdata
        it_document_table  = it_document_table
        iv_document_size   = iv_document_size
      EXCEPTIONS
        error_file_reading = 1.
    CASE sy-subrc .
      WHEN 1 .
        v_retcode = c_retcode-error .

    ENDCASE .

  ENDMETHOD .                    &quot;set_template
  METHOD get_relevant_child_comptypes .
    msg_init( ) .

    CLEAR rt_child_types[] .

    DATA ls_comp_types  TYPE ty_s_comp_types .
    DATA ls_sheets      TYPE lcl_excel=&gt;ty_s_sheets .

    IF  is_properties-comp_type EQ c_comp_type-sheet
    AND is_properties-tb_sheetname IS NOT INITIAL .
      ls_sheets = r_exceltemplate-&gt;get_sheet( iv_sheetname = is_properties-tb_sheetname ) .
    ENDIF .

    LOOP AT t_comp_types INTO ls_comp_types .

      CASE is_properties-comp_type .
        WHEN c_comp_type-root .
          CHECK ls_comp_types-comp_type EQ c_comp_type-sheet
             OR ls_comp_types-comp_type EQ c_comp_type-loopstep
             OR ls_comp_types-comp_type EQ c_comp_type-folder .
        WHEN c_comp_type-sheet .
          CASE ls_sheets-chartsheet .
            WHEN space .
              CHECK ls_comp_types-comp_type EQ c_comp_type-loopstep
                 OR ls_comp_types-comp_type EQ c_comp_type-pattern
                 OR ls_comp_types-comp_type EQ c_comp_type-respattern
                 OR ls_comp_types-comp_type EQ c_comp_type-tree
                 OR ls_comp_types-comp_type EQ c_comp_type-grid
                 OR ls_comp_types-comp_type EQ c_comp_type-folder .
            WHEN OTHERS .
              CHECK ls_comp_types-comp_type EQ c_comp_type-chart .
          ENDCASE .
        WHEN c_comp_type-loopstep .
          CHECK ls_comp_types-comp_type EQ c_comp_type-sheet
             OR ls_comp_types-comp_type EQ c_comp_type-loopstep
             OR ls_comp_types-comp_type EQ c_comp_type-pattern
             OR ls_comp_types-comp_type EQ c_comp_type-respattern
             OR ls_comp_types-comp_type EQ c_comp_type-tree
             OR ls_comp_types-comp_type EQ c_comp_type-grid
             OR ls_comp_types-comp_type EQ c_comp_type-folder .
        WHEN c_comp_type-pattern .
          CHECK ls_comp_types-comp_type EQ c_comp_type-field
             OR ls_comp_types-comp_type EQ c_comp_type-drawing
             OR ls_comp_types-comp_type EQ c_comp_type-chart .
        WHEN c_comp_type-folder .
          CHECK ls_comp_types-comp_type EQ c_comp_type-sheet
             OR ls_comp_types-comp_type EQ c_comp_type-loopstep
             OR ls_comp_types-comp_type EQ c_comp_type-pattern
             OR ls_comp_types-comp_type EQ c_comp_type-respattern
             OR ls_comp_types-comp_type EQ c_comp_type-folder
             OR ls_comp_types-comp_type EQ c_comp_type-tree
             OR ls_comp_types-comp_type EQ c_comp_type-grid .
        WHEN c_comp_type-respattern .
          CHECK ls_comp_types-comp_type EQ c_comp_type-field
             OR ls_comp_types-comp_type EQ c_comp_type-drawing
             OR ls_comp_types-comp_type EQ c_comp_type-loopstep
             OR ls_comp_types-comp_type EQ c_comp_type-pattern
             OR ls_comp_types-comp_type EQ c_comp_type-respattern
             OR ls_comp_types-comp_type EQ c_comp_type-folder
             OR ls_comp_types-comp_type EQ c_comp_type-tree
             OR ls_comp_types-comp_type EQ c_comp_type-grid .

        WHEN OTHERS .
*       WHEN c_comp_type-field
*         OR c_comp_type-drawing
*         OR c_comp_type-tree
*         OR c_comp_type-grid
*         OR c_comp_type-chart .
          CONTINUE .
      ENDCASE .

      INSERT ls_comp_types INTO TABLE rt_child_types .
    ENDLOOP .
  ENDMETHOD .                    &quot;get_relevant_child_comptypes
  METHOD is_comptype_allowed .
    msg_init( ) .
    DATA:
      ls_properties     TYPE ty_s_properties ,
      lt_child_types    TYPE ty_t_comp_types ,
      ls_child_type     TYPE ty_s_comp_types ,
      ls_comp_type      TYPE ty_s_comp_types .

    rv_allowed = abap_off .

    ls_properties = node_get_skipfolders( iv_id ) .
    CHECK v_retcode NE c_retcode-error .
    lt_child_types = get_relevant_child_comptypes( ls_properties ) .

    READ TABLE lt_child_types TRANSPORTING NO FIELDS
    WITH KEY comp_type = iv_child_type BINARY SEARCH .
    CASE sy-subrc .
      WHEN 0 .
        rv_allowed = abap_on .
      WHEN OTHERS .
        rv_allowed = abap_off .
        READ TABLE t_comp_types INTO ls_comp_type
        WITH KEY comp_type = ls_properties-comp_type .
        READ TABLE t_comp_types INTO ls_child_type
        WITH KEY comp_type = iv_child_type .

        MESSAGE e000(lp)
        WITH v_text-t027                &quot; text: A component
             ls_child_type-description
             v_text-t035                &quot; text: is inappropriate under the component
             ls_comp_type-description INTO v_dummy .
        msg_syst_catch( ) .
    ENDCASE .
  ENDMETHOD .                    &quot;is_comptype_allowed
  METHOD node_get_properties .
    msg_init( ) .

    CLEAR rs_properties .
    READ TABLE t_properties INTO rs_properties WITH KEY id = iv_id .
    IF sy-subrc NE 0 .
      MESSAGE e000(lp) WITH v_text-t005   &quot; text: Requested node was not found in the structure
      INTO v_dummy .
      msg_syst_catch( ) .
    ENDIF .
    CHECK v_retcode NE c_retcode-error .
  ENDMETHOD .                    &quot; node_get_properties
  METHOD node_get_exceptions .
    msg_init( ) .

    CLEAR rs_exceptions .
    READ TABLE t_exceptions INTO rs_exceptions WITH KEY id = iv_id .
    CHECK sy-subrc NE 0 .
    rs_exceptions-id = iv_id .
  ENDMETHOD .                    &quot; node_get_exceptions
  METHOD node_get_parent .
    msg_init( ) .

    DATA ls_hierarchy   TYPE ty_s_hierarchy .
*
    CLEAR rv_id_parent .

    READ TABLE t_hierarchy INTO ls_hierarchy WITH KEY id = iv_id .
    IF sy-subrc EQ 0 .
      rv_id_parent = ls_hierarchy-parent .
    ELSE .
      MESSAGE e000(lp) WITH v_text-t005   &quot; text: Requested node was not found in the structure
      INTO v_dummy .
      msg_syst_catch( ) .
    ENDIF .
  ENDMETHOD .                    &quot;node_get_parent
  METHOD node_get_skipfolders .
    msg_init( ) .

    DATA ls_hierarchy   TYPE ty_s_hierarchy .
*
    CLEAR rs_properties .
    rs_properties-id = iv_id .
    DO .
      rs_properties = node_get_properties( rs_properties-id ) .
      IF v_retcode EQ c_retcode-error .
        CLEAR rs_properties .
        EXIT .
      ENDIF .
      IF rs_properties-comp_type NE c_comp_type-folder .
        EXIT .
      ENDIF .

      READ TABLE t_hierarchy INTO ls_hierarchy WITH KEY id = rs_properties-id .
      IF sy-subrc NE 0 .
        EXIT .
      ENDIF .

      CLEAR rs_properties .
      rs_properties-id = ls_hierarchy-parent .
    ENDDO .
  ENDMETHOD .                    &quot; node_get_skipfolders
  METHOD node_get_legacy_info .

    DATA ls_properties TYPE lcl_form=&gt;ty_s_properties .
    DATA ls_exceptions TYPE lcl_form=&gt;ty_s_exceptions .

    CLEAR es_exceptions .
    CLEAR ev_cb_fullpath .
    CLEAR ev_tb_sheetname .
    CLEAR ev_tb_sheet_exists .
    CLEAR ev_tb_area_top .
    CLEAR ev_tb_area_left .
    CLEAR ev_tb_area_rows .
    CLEAR ev_tb_area_columns .
    CLEAR ev_real_level .
    CLEAR ev_comp_level .
    CLEAR ev_draft_subtree .
    ls_properties-id = iv_id .

    DEFINE mk_set_legacy_exception .
      if &amp;1 eq c_retcode-okey  and &amp;2 eq c_retcode-warning .
        &amp;1 = c_retcode-warning .
      elseif  &amp;1 eq c_retcode-okey  and &amp;2 eq c_retcode-error .
        &amp;1 = c_retcode-error .
      elseif  &amp;1 eq c_retcode-warning  and &amp;2 eq c_retcode-error .
        &amp;1 = c_retcode-error .
      endif .
    END-OF-DEFINITION .

    DO .
*------ level
      ADD 1 TO ev_real_level .
      ADD 1 TO ev_comp_level .

*------
*     IF ls_properties-id EQ v_root_id.
*       EXIT.
*     ENDIF.
      ls_properties = node_get_properties( ls_properties-id ) .
      ls_exceptions = node_get_exceptions( ls_properties-id ) .

*------ context binding fullpath
      IF ls_properties-id NE v_root_id .
        ev_cb_fullpath = get_fullpath( iv_parent_fullpath  = ls_properties-cb_relpath &quot; &lt;&lt;--| because a direction is reversed
                                       iv_relpath          = ev_cb_fullpath ) .       &quot; &lt;&lt;--|
      ENDIF .

*------ name of sheet and sheets existing flag
      IF ls_properties-comp_type EQ c_comp_type-sheet .
        ev_tb_sheet_exists = abap_on .

        IF  ls_properties-tb_sheetname IS NOT INITIAL
        AND ev_tb_sheetname IS INITIAL .
          ev_tb_sheetname = ls_properties-tb_sheetname .
          ev_tb_sheet_compname = ls_properties-comp_name .

          DATA ls_sheets  TYPE lcl_excel=&gt;ty_s_sheets .
          ls_sheets = r_exceltemplate-&gt;get_sheet( iv_sheetname = ls_properties-tb_sheetname ) .
          ev_tb_chartsheet = ls_sheets-chartsheet .
        ENDIF .
      ENDIF .

*------ draft ?
      IF  ls_properties-comp_type EQ c_comp_type-folder
      AND ls_properties-draft_subtree EQ c_draft_subtree-yes .
        IF ls_properties-id EQ iv_id .
          ev_draft_subtree = c_draft_subtree-yes .
        ELSE .
          ev_draft_subtree = c_draft_subtree-legacy .
        ENDIF .
      ENDIF .

*------ exceptions
      mk_set_legacy_exception:
      es_exceptions-comp_type       ls_exceptions-comp_type ,
      es_exceptions-comp_name       ls_exceptions-comp_name ,
      es_exceptions-cb_relpath      ls_exceptions-cb_relpath ,
      es_exceptions-cb_apr_relpath  ls_exceptions-cb_apr_relpath ,
      es_exceptions-cb_val_relpath  ls_exceptions-cb_val_relpath ,
      es_exceptions-tb_area         ls_exceptions-tb_area ,
      es_exceptions-tb_sheetname    ls_exceptions-tb_sheetname ,
      es_exceptions-tb_drawing      ls_exceptions-tb_drawing ,
      es_exceptions-dataset         ls_exceptions-dataset .
      IF ls_properties-id EQ v_root_id .
        EXIT .
      ENDIF .

*------
      ls_properties-id = node_get_parent( ls_properties-id ) .
    ENDDO .

  ENDMETHOD .                    &quot;node_get_legacy_info
  METHOD node_get_retcode_severity .
    DATA ls_exceptions TYPE ty_s_exceptions .
    ls_exceptions = node_get_exceptions( iv_id ) .
    rv_retcode = c_retcode-okey .

    IF ls_exceptions-comp_type      EQ c_retcode-error
    OR ls_exceptions-comp_name      EQ c_retcode-error
    OR ls_exceptions-cb_relpath     EQ c_retcode-error
    OR ls_exceptions-cb_apr_relpath EQ c_retcode-error
    OR ls_exceptions-cb_val_relpath EQ c_retcode-error
    OR ls_exceptions-tb_area        EQ c_retcode-error
    OR ls_exceptions-tb_sheetname   EQ c_retcode-error
    OR ls_exceptions-tb_drawing     EQ c_retcode-error
    OR ls_exceptions-dataset        EQ c_retcode-error
    OR ls_exceptions-postprocessing EQ c_retcode-error .
      rv_retcode = c_retcode-error .
    ELSEIF ls_exceptions-comp_type       EQ c_retcode-legacy
        OR ls_exceptions-comp_name       EQ c_retcode-legacy
        OR ls_exceptions-cb_relpath      EQ c_retcode-legacy
        OR ls_exceptions-cb_apr_relpath  EQ c_retcode-legacy
        OR ls_exceptions-cb_val_relpath  EQ c_retcode-legacy
        OR ls_exceptions-tb_area         EQ c_retcode-legacy
        OR ls_exceptions-tb_sheetname    EQ c_retcode-legacy
        OR ls_exceptions-tb_drawing      EQ c_retcode-legacy
        OR ls_exceptions-dataset         EQ c_retcode-legacy
        OR ls_exceptions-postprocessing  EQ c_retcode-legacy .
      rv_retcode = c_retcode-legacy .
    ELSEIF ls_exceptions-comp_type       EQ c_retcode-warning
        OR ls_exceptions-comp_name       EQ c_retcode-warning
        OR ls_exceptions-cb_relpath      EQ c_retcode-warning
        OR ls_exceptions-cb_apr_relpath  EQ c_retcode-warning
        OR ls_exceptions-cb_val_relpath  EQ c_retcode-warning
        OR ls_exceptions-tb_area         EQ c_retcode-warning
        OR ls_exceptions-tb_sheetname    EQ c_retcode-warning
        OR ls_exceptions-tb_drawing      EQ c_retcode-warning
        OR ls_exceptions-dataset         EQ c_retcode-warning
        OR ls_exceptions-postprocessing  EQ c_retcode-warning .
      rv_retcode = c_retcode-warning .
    ENDIF .
  ENDMETHOD .                    &quot;node_get_retcode_severity
  METHOD node_get_protab_relevance .
    msg_init( ) .

    DATA ls_properties  TYPE ty_s_properties .
    DATA ls_exceptions  TYPE ty_s_exceptions .

    IF is_properties IS INITIAL .
      ls_properties = node_get_properties( iv_id ) .
      CHECK v_retcode NE c_retcode-error .
    ELSE .
      ls_properties = is_properties .
    ENDIF .

    CASE ls_properties-comp_type .
      WHEN c_comp_type-root .
        ev_rt_show = abap_on .
        ev_cm_show = abap_off .
        ev_pr_show = abap_off .
      WHEN OTHERS .
        ev_rt_show = abap_off .
        ev_pr_show = abap_on .
        ev_cm_show = abap_on .
    ENDCASE .

    IF ev_ms_show IS REQUESTED .
      ls_exceptions = node_get_exceptions( ls_properties-id ) .
      IF  v_retcode NE c_retcode-error
      AND ls_exceptions-t_retmess[] IS NOT INITIAL .
        ev_ms_show = abap_on .
      ELSE .
        ev_ms_show = abap_off .
      ENDIF .
    ENDIF .
  ENDMETHOD .                    &quot;node_get_protab_relevance

  METHOD get_grid_fldseqprop .
    msg_init( ) .

    DATA:
      ls_form_prop          TYPE ty_s_properties ,
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      lv_begin_fullpath     TYPE ty_comp_path ,
      ls_fldseq             TYPE ty_s_grid_fldseq ,
      ls_fldprop            TYPE ty_s_grid_fldprop ,
      lt_fldprop_tmp        TYPE ty_t_grid_fldprop ,
      lv_tabix              TYPE sytabix ,
      lv_fldseq             TYPE ty_s_properties-grid_fldseq ,
      lv_fldprop            TYPE ty_s_properties-grid_fldprop .

    ls_form_prop = node_get_properties( iv_id ) .
    CHECK v_retcode NE c_retcode-error .

    node_get_legacy_info(
          EXPORTING iv_id              = ls_form_prop-id
          IMPORTING ev_cb_fullpath     = lv_begin_fullpath ) .

    lv_begin_fullpath =
    get_fullpath(   iv_parent_fullpath = lv_begin_fullpath
                    iv_relpath         = ls_form_prop-cb_val_relpath ) .

    r_context-&gt;gridfld_get(
          EXPORTING iv_begin_fullpath  = lv_begin_fullpath
          IMPORTING et_hierarchy       = et_ctxt_hier
                    et_properties      = et_ctxt_prop ) .

    CLEAR ev_grid_fldseq .
    CLEAR ev_grid_fldprop .
    CLEAR et_fldseq .
    CLEAR et_fldprop .

*   field sequence
    et_fldseq = conv_grid_fldseq_st( iv_grid_fldseq = ls_form_prop-grid_fldseq ) .

    LOOP AT et_fldseq INTO ls_fldseq .
      lv_tabix = sy-tabix + 1 .
      DELETE et_fldseq FROM lv_tabix WHERE field EQ ls_fldseq-field .

      READ TABLE et_ctxt_prop INTO ls_ctxt_prop WITH KEY comp_fullpath = ls_fldseq-field .
      CHECK sy-subrc NE 0 .

      DELETE et_fldseq .
    ENDLOOP .

    ev_grid_fldseq = lv_fldseq = conv_grid_fldseq_ts( et_fldseq ) .

*   field properties
    lt_fldprop_tmp = conv_grid_fldprop_st( iv_grid_fldprop = ls_form_prop-grid_fldprop ) .

    LOOP AT et_fldseq INTO ls_fldseq .
      CLEAR ls_fldprop .
      READ TABLE lt_fldprop_tmp INTO ls_fldprop
        WITH KEY field = ls_fldseq-field .
      IF sy-subrc NE 0 .
        ls_fldprop-field = ls_fldseq-field .
      ENDIF .
      APPEND ls_fldprop TO et_fldprop .
    ENDLOOP .

    ev_grid_fldprop = lv_fldprop = conv_grid_fldprop_ts( et_fldprop ) .

  ENDMETHOD .                    &quot;get_grid_fldseqprop

  METHOD get_sub_ctxt .
    msg_init( ) .

    DATA:
      lv_cb_fullpath_sub    TYPE ty_comp_path ,
      lv_cb_relpath_sub     TYPE ty_comp_path .

    IF iv_cb_fullpath IS NOT SUPPLIED .
      node_get_legacy_info( EXPORTING iv_id = is_form_prop-id
                            IMPORTING ev_cb_fullpath = iv_cb_fullpath ) .
    ENDIF .

    lv_cb_fullpath_sub = get_fullpath( iv_parent_fullpath  = iv_cb_fullpath
                                       iv_relpath          = is_form_prop-cb_val_relpath ) .

    CONCATENATE &apos;LINE-&apos; is_form_prop-cb_val_sub_col INTO lv_cb_relpath_sub .

    rs_ctxt_prop =
    r_context-&gt;node_get_by_path( iv_relpath  = lv_cb_relpath_sub
                                 iv_fullpath_parent = lv_cb_fullpath_sub ) .

  ENDMETHOD .                    &quot;get_sub_ctxt

  METHOD get_relevant_datasets .
    DATA:
      ls_properties       TYPE ty_s_properties ,
      ls_datasets         TYPE ty_s_nodetab ,
      lv_cb_fullpath      TYPE ty_comp_path ,
      lv_cb_fullpath_ds   TYPE ty_comp_path ,
      lv_tb_sheetname     TYPE string ,
      lv_tb_sheetname_ds  TYPE string .

    node_get_legacy_info( EXPORTING iv_id           = iv_id
                          IMPORTING ev_cb_fullpath  = lv_cb_fullpath
                                    ev_tb_sheetname = lv_tb_sheetname ) .

    LOOP AT t_properties INTO ls_properties WHERE comp_type EQ c_comp_type-grid .
      CLEAR lv_cb_fullpath_ds .
      node_get_legacy_info( EXPORTING iv_id = ls_properties-id
                            IMPORTING ev_cb_fullpath  = lv_cb_fullpath_ds
                                      ev_tb_sheetname = lv_tb_sheetname_ds ) .
      CHECK lv_cb_fullpath EQ lv_cb_fullpath_ds .

      IF iv_same_sheet IS NOT INITIAL .
        CHECK lv_tb_sheetname EQ lv_tb_sheetname_ds .
      ENDIF .

      ls_datasets-id = ls_properties-id .
      APPEND ls_datasets TO rt_datasets .
    ENDLOOP .
  ENDMETHOD .                    &quot;get_relevant_datasets

  METHOD get_relevant_vbs_tables .
    DATA:
      lt_ctxt_hier          TYPE lcl_context=&gt;ty_t_hierarchy ,
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties .
    FIELD-SYMBOLS:
      &lt;ls_ctxt_hier&gt;        TYPE lcl_context=&gt;ty_s_hierarchy ,
      &lt;ls_vbs_tables_tab&gt;   TYPE ty_s_vbs_tables_tab .

    CLEAR rt_vbs_tables_tab .

*------ get a subtree of relevant context nested tables (on root level)
    r_context-&gt;subtree_get(
        EXPORTING iv_begin_fullpath = space
                  iv_f4_strategy    = r_context-&gt;c_f4_strategy-loopstep
        IMPORTING et_hierarchy      = lt_ctxt_hier ) .
    CHECK lt_ctxt_hier[] IS NOT INITIAL .

*------ relevant tables list
    LOOP AT lt_ctxt_hier ASSIGNING &lt;ls_ctxt_hier&gt; .
      CLEAR ls_ctxt_prop .
      ls_ctxt_prop = r_context-&gt;node_get( &lt;ls_ctxt_hier&gt;-hide ) .
      CHECK v_retcode NE c_retcode-error .
      CHECK ls_ctxt_prop-comp_type EQ r_context-&gt;c_comp_type-table .

      APPEND INITIAL LINE TO rt_vbs_tables_tab ASSIGNING &lt;ls_vbs_tables_tab&gt; .
      &lt;ls_vbs_tables_tab&gt;-cb_relpath     = ls_ctxt_prop-comp_fullpath .
      &lt;ls_vbs_tables_tab&gt;-cb_shortdescr  = ls_ctxt_prop-comp_shortdescr .
    ENDLOOP .

  ENDMETHOD .                    &quot;get_relevant_vbs_tables
ENDCLASS .                    &quot;lcl_form IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_formruntime DEFINITION
*----------------------------------------------------------------------*
*       Runtime form composer
*----------------------------------------------------------------------*
CLASS lcl_formruntime DEFINITION INHERITING FROM lcl_form .
  PUBLIC SECTION .
    TYPES:
      BEGIN OF ty_s_compose_data ,
        properties          TYPE ty_s_properties ,
        shift_relpath       TYPE ty_comp_path ,
        shift_apr_relpath   TYPE ty_comp_path ,
        shift_val_relpath   TYPE ty_comp_path ,
        shift_cellrng_relpath     TYPE ty_comp_path ,
        hierarchy           TYPE ty_s_hierarchy ,
      END   OF ty_s_compose_data .
    TYPES:
      BEGIN OF ty_s_compose_legacy_info ,
        cb_fullpath         TYPE ty_comp_path ,
        shift_fullpath      TYPE ty_comp_path ,
        rt_path_1           TYPE ty_comp_path ,
        tb_sheetname        TYPE ty_s_properties-tb_sheetname ,
        tb_area_top         TYPE ty_s_properties-tb_area_top ,
        tb_area_left        TYPE ty_s_properties-tb_area_left ,
        tb_area_rows        TYPE ty_s_properties-tb_area_rows ,
        tb_area_columns     TYPE ty_s_properties-tb_area_columns ,
        tb_area_prew_top    TYPE i ,
        tb_area_prew_left   TYPE i ,
        tb_area_prew_rows     TYPE i ,
        tb_area_prew_columns  TYPE i ,
        tb_rowgroup_level     TYPE i ,
        tb_colgroup_level     TYPE i ,
        real_level            TYPE i ,
        comp_level            TYPE i ,
        tb_printtitles_r    TYPE snode-id ,
        tb_printtitles_c    TYPE snode-id ,
        summarybelow        TYPE flag ,
        summaryright        TYPE flag ,
      END   OF ty_s_compose_legacy_info .
    TYPES:
      BEGIN OF ty_s_buffer_icon ,
        id                  TYPE icon-id ,
        name                TYPE icon-name ,
        rawdata             TYPE xstring ,
      END   OF ty_s_buffer_icon ,
      ty_t_buffer_icon      TYPE HASHED TABLE OF ty_s_buffer_icon
                                 WITH UNIQUE KEY id .
    TYPES:
      BEGIN OF ty_s_tree_subtotals ,
        nodekey             TYPE lvc_nkey ,
        fieldname           TYPE lvc_fname ,
        fieldvalue          TYPE string ,
      END   OF ty_s_tree_subtotals ,
      ty_t_tree_subtotals   TYPE HASHED TABLE OF ty_s_tree_subtotals
                            WITH UNIQUE KEY nodekey  fieldname .
    TYPES:
      BEGIN OF ty_s_grid_rowvalues ,
        index               TYPE i ,
        position            TYPE i ,
        position_rel        TYPE i ,
        value_fullpath      TYPE string ,
        value_relpath       TYPE string ,
        ctxt_prop           TYPE lcl_context=&gt;ty_s_properties ,
        autofitmerged_r     TYPE flag , &quot; --&gt;&gt; for res.pattern
        autofitmerged_c     TYPE flag , &quot; --&gt;&gt; for res.pattern
      END   OF ty_s_grid_rowvalues ,
      ty_t_grid_rowvalues   TYPE STANDARD TABLE OF ty_s_grid_rowvalues
                            WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_grid_rowpattrens ,
        position            TYPE i ,
        position_rel        TYPE i ,
        columns             TYPE i ,
        t_autofitmerged_r   TYPE ty_t_int_tab ,
        t_autofitmerged_c   TYPE ty_t_int_tab ,
        patterns            TYPE lcl_excel=&gt;ty_t_patterns ,
        rowvalues           TYPE ty_t_grid_rowvalues ,
      END   OF ty_s_grid_rowpattrens ,
      ty_t_grid_rowpattrens TYPE STANDARD TABLE OF ty_s_grid_rowpattrens
                            WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_grid_rowstructure ,
        level               TYPE i ,
        loop_fullpath       TYPE string ,
        loop_relpath        TYPE string ,
        rowvalues           TYPE ty_t_grid_rowvalues ,
        rowpattrens         TYPE ty_t_grid_rowpattrens ,
      END   OF ty_s_grid_rowstructure ,
      ty_t_grid_rowstructure TYPE STANDARD TABLE OF ty_s_grid_rowstructure
                            WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_s_grid_rowstructure_buf ,
        form_id             TYPE ty_s_hierarchy-id ,
        maxlevel            TYPE i ,
        maxsubpattern       TYPE i ,
        maxposition         TYPE i ,
        rowvalues           TYPE ty_t_grid_rowvalues ,
        patterns_h          TYPE lcl_excel=&gt;ty_s_patterns ,
        rowstructure        TYPE ty_t_grid_rowstructure ,
      END   OF ty_s_grid_rowstructure_buf ,
      ty_t_grid_rowstructure_buf
                            TYPE HASHED TABLE OF ty_s_grid_rowstructure_buf
                                 WITH UNIQUE KEY form_id .
    METHODS:
      constructor
          IMPORTING iv_formname           TYPE any
                    iv_context_ref        TYPE any
                    iv_protect            TYPE any OPTIONAL
                    iv_startup_macro      TYPE any OPTIONAL
                    it_docproperties      TYPE ckf_field_value_table OPTIONAL
          EXCEPTIONS process_terminated ,
      free REDEFINITION ,
      get_rawdata
          RETURNING value(rv_rawdata)     TYPE xstring ,
      get_extension
          RETURNING value(rv_extension)   TYPE ty_char10 ,
      pbo .

    DATA:
      r_excelruntime        TYPE REF TO lcl_excelruntime READ-ONLY .

  PROTECTED SECTION .
    DATA:
      v_proc                TYPE i ,
      v_step                TYPE i ,
      t_buffer_icon         TYPE ty_t_buffer_icon ,
      t_buffer_rs           TYPE ty_t_grid_rowstructure_buf .

    METHODS:
      postprocessing
          IMPORTING iv_context_ref        TYPE any
                    iv_startup_macro      TYPE any ,
      compose_recurs
          IMPORTING is_parent_data        TYPE ty_s_compose_data
                    is_parent_context_ref TYPE any
                    it_comp_type_filter   TYPE ty_t_comp_type_rng OPTIONAL
          CHANGING  cs_parent_legacy      TYPE ty_s_compose_legacy_info ,
      compose_process
          IMPORTING is_parent_data        TYPE ty_s_compose_data
                    is_parent_context_ref TYPE any
          CHANGING  cs_data               TYPE ty_s_compose_data
                    cs_parent_legacy      TYPE ty_s_compose_legacy_info ,
      compose_process_sheet
          IMPORTING is_parent_data        TYPE ty_s_compose_data
                    is_parent_context_ref TYPE any
                    is_data               TYPE ty_s_compose_data
          CHANGING  cs_legacy             TYPE ty_s_compose_legacy_info
                    cs_parent_legacy      TYPE ty_s_compose_legacy_info ,
      compose_process_loopstep
          IMPORTING is_parent_data        TYPE ty_s_compose_data
                    is_parent_context_ref TYPE any
                    is_data               TYPE ty_s_compose_data
          CHANGING  cs_legacy             TYPE ty_s_compose_legacy_info
                    cs_parent_legacy      TYPE ty_s_compose_legacy_info ,
      compose_process_pattern
          IMPORTING is_parent_data        TYPE ty_s_compose_data
                    is_parent_context_ref TYPE any
                    is_data               TYPE ty_s_compose_data
          CHANGING  cs_legacy             TYPE ty_s_compose_legacy_info
                    cs_parent_legacy      TYPE ty_s_compose_legacy_info ,
      compose_process_respattern_a
          IMPORTING is_parent_data        TYPE ty_s_compose_data
                    is_parent_context_ref TYPE any
                    is_data               TYPE ty_s_compose_data
          CHANGING  cs_legacy             TYPE ty_s_compose_legacy_info
                    cs_parent_legacy      TYPE ty_s_compose_legacy_info ,
      compose_process_respattern_b
          IMPORTING is_parent_data        TYPE ty_s_compose_data
                    is_parent_context_ref TYPE any
                    is_data               TYPE ty_s_compose_data
          CHANGING  cs_legacy             TYPE ty_s_compose_legacy_info
                    cs_parent_legacy      TYPE ty_s_compose_legacy_info ,
      compose_process_folder
          IMPORTING is_parent_data        TYPE ty_s_compose_data
                    is_parent_context_ref TYPE any
                    is_data               TYPE ty_s_compose_data
          CHANGING  cs_legacy             TYPE ty_s_compose_legacy_info
                    cs_parent_legacy      TYPE ty_s_compose_legacy_info ,
      compose_process_field
          IMPORTING is_parent_data        TYPE ty_s_compose_data
                    is_parent_context_ref TYPE any
                    is_data               TYPE ty_s_compose_data
          CHANGING  cs_legacy             TYPE ty_s_compose_legacy_info
                    cs_parent_legacy      TYPE ty_s_compose_legacy_info ,
      compose_process_drawing
          IMPORTING is_parent_data        TYPE ty_s_compose_data
                    is_parent_context_ref TYPE any
                    is_data               TYPE ty_s_compose_data
          CHANGING  cs_legacy             TYPE ty_s_compose_legacy_info
                    cs_parent_legacy      TYPE ty_s_compose_legacy_info ,
      compose_process_chart
          IMPORTING is_parent_data        TYPE ty_s_compose_data
                    is_parent_context_ref TYPE any
                    is_data               TYPE ty_s_compose_data
          CHANGING  cs_legacy             TYPE ty_s_compose_legacy_info
                    cs_parent_legacy      TYPE ty_s_compose_legacy_info ,
      compose_process_tree
          IMPORTING is_parent_data        TYPE ty_s_compose_data
                    is_parent_context_ref TYPE any
                    is_data               TYPE ty_s_compose_data
          CHANGING  cs_legacy             TYPE ty_s_compose_legacy_info
                    cs_parent_legacy      TYPE ty_s_compose_legacy_info ,
      compose_process_tree_recurs
          IMPORTING iv_parent_node_key    TYPE lvc_nkey
                    iv_parent_level       TYPE i
                    is_parent_patterns_a  TYPE lcl_excel=&gt;ty_s_patterns
                    is_parent_patterns_b  TYPE lcl_excel=&gt;ty_s_patterns
                    it_patterns_a         TYPE lcl_excel=&gt;ty_t_patterns
                    it_patterns_b         TYPE lcl_excel=&gt;ty_t_patterns
                    it_fcat_lvc           TYPE lvc_t_fcat
                    is_tree_layout        TYPE ty_s_tree_layout
                    it_expanded_nodes     TYPE lvc_t_nkey
                    it_subtotals          TYPE ty_t_tree_subtotals
           CHANGING cr_alvtree            TYPE ty_r_tree
                    cs_outtab_line        TYPE any
                    cs_legacy             TYPE ty_s_compose_legacy_info
                    cv_top                TYPE i
                    cv_left               TYPE i
                    cv_firstrow           TYPE flag ,
      compose_process_tree_recsub
          IMPORTING iv_parent_node_key    TYPE lvc_nkey
                    it_fcat_lvc           TYPE lvc_t_fcat
          EXPORTING ev_leaf               TYPE flag
           CHANGING cr_alvtree            TYPE ty_r_tree
                    cs_outtab_line        TYPE any
                    ct_subtotals          TYPE ty_t_tree_subtotals ,
      compose_process_tree_s
          IMPORTING is_parent_data        TYPE ty_s_compose_data
                    is_parent_context_ref TYPE any
                    is_data               TYPE ty_s_compose_data
          CHANGING  cs_legacy             TYPE ty_s_compose_legacy_info
                    cs_parent_legacy      TYPE ty_s_compose_legacy_info ,
      compose_process_tree_s_recurs
          IMPORTING ir_salv_node_parent   TYPE REF TO cl_salv_node
                    iv_parent_level       TYPE i
                    is_parent_patterns_a  TYPE lcl_excel=&gt;ty_s_patterns
                    is_parent_patterns_b  TYPE lcl_excel=&gt;ty_s_patterns
                    it_patterns_a         TYPE lcl_excel=&gt;ty_t_patterns
                    it_patterns_b         TYPE lcl_excel=&gt;ty_t_patterns
                    it_fcat_lvc           TYPE lvc_t_fcat
                    is_tree_layout        TYPE ty_s_tree_layout
                    it_expanded_nodes     TYPE lvc_t_nkey
                    it_subtotals          TYPE ty_t_tree_subtotals
           CHANGING cr_salvtree           TYPE REF TO cl_salv_tree
                    cs_legacy             TYPE ty_s_compose_legacy_info
                    cv_top                TYPE i
                    cv_left               TYPE i
                    cv_firstrow           TYPE flag ,
      compose_process_tree_s_recsub
          IMPORTING ir_salv_node_parent   TYPE REF TO cl_salv_node
                    it_fcat_lvc           TYPE lvc_t_fcat
          EXPORTING ev_leaf               TYPE flag
           CHANGING cs_outtab_line        TYPE any
                    cr_salvtree           TYPE REF TO cl_salv_tree
                    ct_subtotals          TYPE ty_t_tree_subtotals ,
      compose_process_grid
          IMPORTING is_parent_data        TYPE ty_s_compose_data
                    is_parent_context_ref TYPE any
                    is_data               TYPE ty_s_compose_data
          CHANGING  cs_legacy             TYPE ty_s_compose_legacy_info
                    cs_parent_legacy      TYPE ty_s_compose_legacy_info ,
      compose_process_grid_r
          IMPORTING iv_parent_level       TYPE any
                    ir_parent_context     TYPE any
                    iv_maxlevel           TYPE any
                    iv_maxsubpattern      TYPE any
                    is_grid_layout        TYPE ty_s_grid_layout
           CHANGING ct_rowstructure       TYPE ty_t_grid_rowstructure
                    cs_legacy             TYPE ty_s_compose_legacy_info
                    cv_top                TYPE i
                    cv_left               TYPE i
                    cv_subpattern         TYPE any
                    cv_firstcall          TYPE flag ,
      get_appearance_req
          IMPORTING is_parent_context_ref TYPE any
                    iv_apr_relpath        TYPE any
                    iv_apr_offset         TYPE any
                    iv_apr_match          TYPE any
          RETURNING value(rv_required)    TYPE flag ,
      get_value_simple
          IMPORTING is_parent_context_ref TYPE any
                    iv_relpath            TYPE any
                    iv_offset             TYPE any
                    iv_match              TYPE any
          EXPORTING ev_value              TYPE any ,
      get_value
          IMPORTING is_parent_context_ref TYPE any
                    iv_shift_val_relpath  TYPE any
                    iv_val_relpath        TYPE any
                    iv_val_sub_req        TYPE any DEFAULT space
                    iv_val_sub_col        TYPE any DEFAULT space
                    iv_val_sub_row        TYPE any DEFAULT 0
                    iv_val_offset         TYPE any DEFAULT 0
                    iv_val_match          TYPE any DEFAULT 0
                    iv_val_convert        TYPE any
                    iv_fullpath           TYPE any
                    value(is_ctxt_prop)   TYPE lcl_context=&gt;ty_s_properties OPTIONAL
          RETURNING value(rv_value)       TYPE string ,
      get_icon_rawdata
          IMPORTING iv_icon               TYPE any &quot;icon_d
          RETURNING value(rv_rawdata)     TYPE xstring ,
      shift_relpath
          CHANGING  cv_relpath            TYPE any ,
      salv_node_get_children
          IMPORTING ir_salv_node          TYPE REF TO cl_salv_node
          RETURNING value(rt_nodes)       TYPE salv_t_nodes .

ENDCLASS .                    &quot;lcl_formruntime DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_formruntime IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_formruntime IMPLEMENTATION .
  METHOD constructor .
    super-&gt;constructor( EXPORTING  iv_formname        = iv_formname
                        EXCEPTIONS process_terminated = 1 ) .
    IF sy-subrc NE 0 .
      RAISE process_terminated .
    ENDIF .
    IF v_active IS INITIAL .
      MESSAGE i000(lp) WITH v_text-t036   &quot; text: Form is inactive
      RAISING process_terminated .
    ENDIF .

    tech_presets_rt_load( ) .

    CREATE OBJECT r_excelruntime
      EXCEPTIONS
        error_file_reading = 1.
    IF sy-subrc NE 0 .
      RAISE process_terminated .
    ENDIF .

    r_exceltemplate-&gt;bufferization_patterns( t_patternarea ) .


    DATA:
      ls_properties          TYPE ty_s_properties .

    READ TABLE t_properties INTO ls_properties
      WITH KEY id = v_root_id .

    r_excelruntime-&gt;begin_model( is_model     = r_exceltemplate-&gt;s_model
                                 iv_extension = r_exceltemplate-&gt;v_extension
                                 ir_zipfolder = r_exceltemplate-&gt;r_zipfolder
                                 iv_protect   = iv_protect
                                 iv_definednames_dont_remove = ls_properties-definednames_dont_remove ) .
    DATA:
      ls_data           TYPE ty_s_compose_data ,
      ls_legacy         TYPE ty_s_compose_legacy_info .

    ls_data-hierarchy-child = v_root_id .

    msg_init( ) .
    compose_recurs( EXPORTING is_parent_data        = ls_data
                              is_parent_context_ref = iv_context_ref
                    CHANGING  cs_parent_legacy      = ls_legacy ) .
    msg_show( ) .

    progressbar( iv_percentage = 80
                 iv_text       = v_text-t197 ) .  &quot; --&gt;&gt; text: Writing of data to XLSX-file

    r_excelruntime-&gt;finalize_model( EXPORTING  it_docproperties   = it_docproperties
                                    EXCEPTIONS process_terminated = 1 ) .
    IF sy-subrc NE 0 .
      RAISE process_terminated .
    ENDIF .

*   OLE/VBScript post-processing (if required)
    postprocessing( iv_context_ref   = iv_context_ref
                    iv_startup_macro = iv_startup_macro ) .

  ENDMETHOD .                    &quot;constructor
  METHOD free .
    super-&gt;free( ).
  ENDMETHOD .                    &quot;free
  METHOD get_rawdata .
    rv_rawdata = r_excelruntime-&gt;rawdata_get( ) .
  ENDMETHOD .                    &quot;get_rawdata
  METHOD get_extension .
    rv_extension = r_excelruntime-&gt;v_extension .
  ENDMETHOD .                    &quot;get_extension
  METHOD pbo .

  ENDMETHOD .                    &quot;pbo
  METHOD postprocessing .
    DATA:
      ls_properties       TYPE ty_s_properties ,
      lt_vbs_tables_tab   TYPE ty_t_vbs_tables_tab .
    FIELD-SYMBOLS:
      &lt;ls_vbs_tables_tab&gt; TYPE ty_s_vbs_tables_tab ,
      &lt;lt_context_tab&gt;    TYPE ANY TABLE .

*------ read root node
    ls_properties = node_get_properties( v_root_id ) .

*------ get tables list
    lt_vbs_tables_tab = conv_vbs_tables_st( ls_properties-postproc_vbs_tables ) .

*------ get tables data
    LOOP AT lt_vbs_tables_tab ASSIGNING &lt;ls_vbs_tables_tab&gt; .

*     get data from context nested table
      shift_relpath( CHANGING cv_relpath = &lt;ls_vbs_tables_tab&gt;-cb_relpath ) .

      IF &lt;ls_vbs_tables_tab&gt;-cb_relpath IS INITIAL .
        ASSIGN iv_context_ref TO &lt;lt_context_tab&gt; .
      ELSE .
        ASSIGN COMPONENT &lt;ls_vbs_tables_tab&gt;-cb_relpath
        OF STRUCTURE iv_context_ref TO &lt;lt_context_tab&gt; .
        CHECK &lt;lt_context_tab&gt; IS ASSIGNED .
      ENDIF .

      GET REFERENCE OF &lt;lt_context_tab&gt;
                  INTO &lt;ls_vbs_tables_tab&gt;-table_data .
    ENDLOOP .

*------ process
    r_excelruntime-&gt;postprocessing( EXPORTING iv_startup_macro  = iv_startup_macro
                                     CHANGING cv_vbs_code       = ls_properties-postproc_vbs_code
                                              ct_vbs_tables_tab = lt_vbs_tables_tab ) .
  ENDMETHOD .                    &quot;postprocessing
  METHOD compose_recurs .
    DATA:
      ls_data             TYPE ty_s_compose_data ,
      lv_id_next          TYPE snode-id .

    lv_id_next = is_parent_data-hierarchy-child .

    DO .
      CLEAR ls_data .

*     read a next node
      READ TABLE t_hierarchy INTO ls_data-hierarchy
        WITH KEY parent = is_parent_data-hierarchy-id
                 id     = lv_id_next .
      IF sy-subrc NE 0 .
        EXIT .
      ENDIF .

      IF c_retcode-error NE node_get_retcode_severity( ls_data-hierarchy-id ) .

        READ TABLE t_properties INTO ls_data-properties
          WITH KEY id = ls_data-hierarchy-id .
        IF sy-subrc NE 0 .
          EXIT .
        ENDIF .

        IF ls_data-properties-comp_type IN it_comp_type_filter[] .

*         process an actual component
          compose_process( EXPORTING is_parent_data         = is_parent_data
                                     is_parent_context_ref  = is_parent_context_ref
                            CHANGING cs_data                = ls_data
                                     cs_parent_legacy       = cs_parent_legacy ) .
        ENDIF .
      ENDIF .

      IF ls_data-hierarchy-next IS INITIAL .
        EXIT .
      ELSE .
        lv_id_next = ls_data-hierarchy-next .
      ENDIF .
    ENDDO .

  ENDMETHOD .                    &quot;compose_recurs
  METHOD compose_process .
    DATA:
      ls_legacy             TYPE ty_s_compose_legacy_info ,
      lv_progress_text      TYPE ty_char100 .

*   progress indicator
    IF v_step GE 654 .
      v_step = 0 .
      lv_progress_text = v_proc .
      CONDENSE lv_progress_text NO-GAPS .

      CONCATENATE v_text-t184   &quot; text: Preparing of form data. Step:
                  lv_progress_text INTO lv_progress_text SEPARATED BY space .

      progressbar( iv_percentage = 0
                   iv_text       = lv_progress_text ) .
    ENDIF .
    ADD 1 TO v_step .
    ADD 1 TO v_proc .

*   check: is this component (and subcomponents) not a draft ?
    CHECK cs_data-properties-draft_subtree EQ c_draft_subtree-no .

*   preset runtime path
    ls_legacy-rt_path_1   = cs_parent_legacy-rt_path_1 .

*   preset a fullpath
    ls_legacy-cb_fullpath = get_fullpath( iv_parent_fullpath = cs_parent_legacy-cb_fullpath
                                          iv_relpath         = cs_data-properties-cb_relpath ) .
*   preset shifted values
    cs_data-shift_relpath         = cs_data-properties-cb_relpath .
    cs_data-shift_apr_relpath     = cs_data-properties-cb_apr_relpath .
    cs_data-shift_val_relpath     = cs_data-properties-cb_val_relpath .
    cs_data-shift_cellrng_relpath = cs_data-properties-cb_cellrng_relpath .
    shift_relpath( CHANGING cv_relpath = cs_data-shift_relpath ) .
    shift_relpath( CHANGING cv_relpath = cs_data-shift_apr_relpath ) .
    shift_relpath( CHANGING cv_relpath = cs_data-shift_val_relpath ) .
    shift_relpath( CHANGING cv_relpath = cs_data-shift_cellrng_relpath ) .

    ls_legacy-shift_fullpath = get_fullpath( iv_parent_fullpath  = cs_parent_legacy-shift_fullpath
                                             iv_relpath = cs_data-shift_relpath ) .
*   preset other legacy data
    ls_legacy-tb_area_top           = cs_parent_legacy-tb_area_top  .
    ls_legacy-tb_area_left          = cs_parent_legacy-tb_area_left .
    ls_legacy-tb_area_rows          = cs_parent_legacy-tb_area_rows .
    ls_legacy-tb_area_columns       = cs_parent_legacy-tb_area_columns .
    ls_legacy-tb_area_prew_left     = cs_parent_legacy-tb_area_prew_left .
    ls_legacy-tb_area_prew_top      = cs_parent_legacy-tb_area_prew_top .
    ls_legacy-tb_area_prew_rows     = cs_parent_legacy-tb_area_prew_rows .
    ls_legacy-tb_area_prew_columns  = cs_parent_legacy-tb_area_prew_columns .
    ls_legacy-tb_sheetname          = cs_parent_legacy-tb_sheetname .
    ls_legacy-tb_rowgroup_level     = cs_parent_legacy-tb_rowgroup_level .
    ls_legacy-tb_colgroup_level     = cs_parent_legacy-tb_colgroup_level .
    ls_legacy-tb_printtitles_r      = cs_parent_legacy-tb_printtitles_r .
    ls_legacy-tb_printtitles_c      = cs_parent_legacy-tb_printtitles_c .
    ls_legacy-summarybelow          = cs_parent_legacy-summarybelow .
    ls_legacy-summaryright          = cs_parent_legacy-summaryright .
    ls_legacy-comp_level            = cs_parent_legacy-comp_level + 1 .
    IF cs_data-properties-comp_type EQ c_comp_type-folder .
      ls_legacy-real_level = cs_parent_legacy-real_level .
    ELSE .
      ls_legacy-real_level = cs_parent_legacy-real_level + 1 .
    ENDIF .

*   check: is this component (and subcomponents) have to appear in runtime ?
    CHECK space NE
    get_appearance_req(
        is_parent_context_ref = is_parent_context_ref
        iv_apr_relpath = cs_data-shift_apr_relpath
        iv_apr_offset  = cs_data-properties-cb_apr_offset
        iv_apr_match   = cs_data-properties-cb_apr_match ) .

*   component processing
    CASE cs_data-properties-comp_type .
      WHEN c_comp_type-root .
        CLEAR ls_legacy-cb_fullpath .
        CLEAR ls_legacy-shift_fullpath .

        IF cs_data-hierarchy-child IS NOT INITIAL .
          compose_recurs( EXPORTING is_parent_data   = cs_data
                                    is_parent_context_ref = is_parent_context_ref
                          CHANGING  cs_parent_legacy = ls_legacy ) .
        ENDIF .

      WHEN c_comp_type-sheet .
        compose_process_sheet(
          EXPORTING
            is_parent_data        = is_parent_data
            is_parent_context_ref = is_parent_context_ref
            is_data               = cs_data
          CHANGING
            cs_legacy             = ls_legacy
            cs_parent_legacy      = cs_parent_legacy ).

      WHEN c_comp_type-loopstep .
        compose_process_loopstep(
          EXPORTING
            is_parent_data        = is_parent_data
            is_parent_context_ref = is_parent_context_ref
            is_data               = cs_data
          CHANGING
            cs_legacy             = ls_legacy
            cs_parent_legacy      = cs_parent_legacy ).

      WHEN c_comp_type-pattern .
        compose_process_pattern(
          EXPORTING
            is_parent_data        = is_parent_data
            is_parent_context_ref = is_parent_context_ref
            is_data               = cs_data
          CHANGING
            cs_legacy             = ls_legacy
            cs_parent_legacy      = cs_parent_legacy ).

      WHEN c_comp_type-respattern .
        CASE cs_data-properties-tb_respattern_place .
          WHEN c_respattern_place-before_subarea .
            compose_process_respattern_b(
              EXPORTING
                is_parent_data        = is_parent_data
                is_parent_context_ref = is_parent_context_ref
                is_data               = cs_data
              CHANGING
                cs_legacy             = ls_legacy
                cs_parent_legacy      = cs_parent_legacy ).

          WHEN c_respattern_place-after_subarea .
            compose_process_respattern_a(
              EXPORTING
                is_parent_data        = is_parent_data
                is_parent_context_ref = is_parent_context_ref
                is_data               = cs_data
              CHANGING
                cs_legacy             = ls_legacy
                cs_parent_legacy      = cs_parent_legacy ).
        ENDCASE .

      WHEN c_comp_type-field .
        compose_process_field(
          EXPORTING
            is_parent_data        = is_parent_data
            is_parent_context_ref = is_parent_context_ref
            is_data               = cs_data
          CHANGING
            cs_legacy             = ls_legacy
            cs_parent_legacy      = cs_parent_legacy ).

      WHEN c_comp_type-drawing .
        compose_process_drawing(
          EXPORTING
            is_parent_data        = is_parent_data
            is_parent_context_ref = is_parent_context_ref
            is_data               = cs_data
          CHANGING
            cs_legacy             = ls_legacy
            cs_parent_legacy      = cs_parent_legacy ).

      WHEN c_comp_type-chart .
        compose_process_chart(
          EXPORTING
            is_parent_data        = is_parent_data
            is_parent_context_ref = is_parent_context_ref
            is_data               = cs_data
          CHANGING
            cs_legacy             = ls_legacy
            cs_parent_legacy      = cs_parent_legacy ).

      WHEN c_comp_type-folder .
        compose_process_folder(
          EXPORTING
            is_parent_data        = is_parent_data
            is_parent_context_ref = is_parent_context_ref
            is_data               = cs_data
          CHANGING
            cs_legacy             = ls_legacy
            cs_parent_legacy      = cs_parent_legacy  ).

      WHEN c_comp_type-tree .
        compose_process_tree(
          EXPORTING
            is_parent_data        = is_parent_data
            is_parent_context_ref = is_parent_context_ref
            is_data               = cs_data
          CHANGING
            cs_legacy             = ls_legacy
            cs_parent_legacy      = cs_parent_legacy  ).

      WHEN c_comp_type-grid .
        compose_process_grid(
          EXPORTING
            is_parent_data        = is_parent_data
            is_parent_context_ref = is_parent_context_ref
            is_data               = cs_data
          CHANGING
            cs_legacy             = ls_legacy
            cs_parent_legacy      = cs_parent_legacy  ).
      WHEN OTHERS.
    ENDCASE.

    DATA:
      lv_new_rows       TYPE i ,
      lv_new_columns    TYPE i .

    lv_new_rows    = ls_legacy-tb_area_top  + ls_legacy-tb_area_rows    - cs_parent_legacy-tb_area_top .
    lv_new_columns = ls_legacy-tb_area_left + ls_legacy-tb_area_columns - cs_parent_legacy-tb_area_left .

    IF cs_parent_legacy-tb_area_rows LT lv_new_rows .
      cs_parent_legacy-tb_area_rows = lv_new_rows .
    ENDIF .
    IF cs_parent_legacy-tb_area_columns LT lv_new_columns .
      cs_parent_legacy-tb_area_columns = lv_new_columns .
    ENDIF .

  ENDMETHOD .                    &quot;compose_process
  METHOD compose_process_sheet .
    DATA:
      lv_sheetname_template     TYPE string ,
      lv_sheetname_target       TYPE string ,
      ls_sheets                 TYPE lcl_excel=&gt;ty_s_sheets ,
      lv_val_fullpath           TYPE string ,
      lv_shift_val_relpath      TYPE string ,
      lv_hidden                 TYPE flag ,
      ls_sheetprotection        TYPE ty_s_sheetprotection ,
      ls_sheetprotection_flags  TYPE ty_s_sheetprotection_flags ,
      lv_sheetprotection_flags  TYPE string .
    FIELD-SYMBOLS:
      &lt;context_ref&gt;             TYPE ANY .

*   binding with reference of context data
    IF is_data-shift_relpath IS INITIAL .
      ASSIGN is_parent_context_ref TO &lt;context_ref&gt; .
    ELSE .
      ASSIGN COMPONENT is_data-shift_relpath
      OF STRUCTURE is_parent_context_ref TO &lt;context_ref&gt; .
      CHECK &lt;context_ref&gt; IS ASSIGNED .
    ENDIF .

*   name of sheet in the template
    lv_sheetname_template  = is_data-properties-tb_sheetname .
    cs_legacy-tb_sheetname = is_data-properties-tb_sheetname .

*   name of sheet in the runtime form (may be not specified)
    lv_val_fullpath = get_fullpath( iv_parent_fullpath  = cs_legacy-cb_fullpath
                                    iv_relpath = is_data-properties-cb_val_relpath ) .

    lv_sheetname_target =
    get_value(
        is_parent_context_ref = is_parent_context_ref
        iv_shift_val_relpath  = is_data-shift_val_relpath
        iv_val_relpath  = is_data-properties-cb_val_relpath
        iv_val_sub_req  = is_data-properties-cb_val_sub_req
        iv_val_sub_col  = is_data-properties-cb_val_sub_col
        iv_val_sub_row  = is_data-properties-cb_val_sub_row
        iv_val_offset   = is_data-properties-cb_val_offset
        iv_val_match    = is_data-properties-cb_val_match
        iv_val_convert  = is_data-properties-cb_val_convert
        iv_fullpath     = lv_val_fullpath ) .

    IF lv_sheetname_target IS INITIAL .
      lv_sheetname_target = lv_sheetname_template .
    ENDIF .
    IF is_data-properties-tb_sheetstate IS NOT INITIAL .
      lv_hidden = abap_on .
    ENDIF .

*   sheet protection options
    ls_sheetprotection = lcl_form=&gt;conv_sheetprotection_st( is_data-properties-tb_sheetprotection ) .
    MOVE-CORRESPONDING ls_sheetprotection TO ls_sheetprotection_flags .

    DO 1 TIMES .
      CHECK ls_sheetprotection-mode EQ c_sheetprotection_mode-from_context
        AND ls_sheetprotection-cb_val_relpath IS NOT INITIAL .

      lv_val_fullpath = get_fullpath( iv_parent_fullpath  = cs_legacy-cb_fullpath
                                      iv_relpath = ls_sheetprotection-cb_val_relpath ) .

      lv_shift_val_relpath = ls_sheetprotection-cb_val_relpath .
      shift_relpath( CHANGING cv_relpath = lv_shift_val_relpath ) .

      lv_sheetprotection_flags =
      get_value(
          is_parent_context_ref = is_parent_context_ref
          iv_shift_val_relpath  = lv_shift_val_relpath
          iv_val_relpath        = ls_sheetprotection-cb_val_relpath
          iv_val_convert        = space
          iv_fullpath           = lv_val_fullpath ) .

      CLEAR ls_sheetprotection_flags .
      ls_sheetprotection_flags = lv_sheetprotection_flags .
    ENDDO .

    MOVE-CORRESPONDING ls_sheetprotection_flags TO ls_sheetprotection .

*   initialize a sheet in runtime form (based on the the template sheet)
    ls_sheets =
    r_exceltemplate-&gt;get_sheet( lv_sheetname_template ) .

    lv_sheetname_target =
    r_excelruntime-&gt;begin_sheet(
        iv_sheetname        = lv_sheetname_target
        iv_hidden           = lv_hidden
        iv_ixml_doc         = ls_sheets-ixml_doc
        it_sheetrels        = ls_sheets-sheetdata_template-t_sheetrels[]
        iv_summarybelow     = ls_sheets-summarybelow
        iv_summaryright     = ls_sheets-summaryright
        iv_active           = ls_sheets-active
        is_sheetprotection  = ls_sheetprotection
        is_vmldrawings      = ls_sheets-sheetdata_template-vmldrawings ) .


    cs_legacy-tb_area_top     = 0 .
    cs_legacy-tb_area_left    = 0 .
    cs_legacy-tb_area_rows    = 0 .
    cs_legacy-tb_area_columns = 0 .
    cs_legacy-tb_area_prew_left = 0 .
    cs_legacy-tb_area_prew_top  = 0 .
    cs_legacy-tb_area_prew_rows = 0 .
    cs_legacy-tb_area_prew_columns  = 0 .
    cs_legacy-tb_printtitles_r  = is_data-properties-tb_printtitles_r .
    cs_legacy-tb_printtitles_c  = is_data-properties-tb_printtitles_c .
    cs_legacy-summarybelow    = ls_sheets-summarybelow .
    cs_legacy-summaryright    = ls_sheets-summaryright .

*   recursive processing of child components (if one exists)
    IF is_data-hierarchy-child IS NOT INITIAL .
      compose_recurs( EXPORTING is_parent_data   = is_data
                                is_parent_context_ref = &lt;context_ref&gt;
                      CHANGING  cs_parent_legacy = cs_legacy  ) .
    ENDIF .

*   finalize the sheet in runtime form
    r_excelruntime-&gt;finalize_sheet( ) .

  ENDMETHOD .                    &quot;compose_process_sheet
  METHOD compose_process_loopstep .
    DATA:
      lv_lines              TYPE i ,
      lv_from               TYPE i ,
      lv_to                 TYPE i ,
      lv_tabix              TYPE i ,
      lv_seqnr              TYPE c LENGTH 20 ,
      lr_descr_tab          TYPE REF TO cl_abap_tabledescr .
    FIELD-SYMBOLS:
      &lt;cb_reftable_any&gt;     TYPE ANY TABLE ,
      &lt;cb_reftable_std&gt;     TYPE STANDARD TABLE ,
      &lt;context_ref&gt;         TYPE ANY .

*   check existence of child components
    CHECK is_data-hierarchy-child IS NOT INITIAL.

*   binding with reference of context data (it only can have a type of nested table)
    IF is_data-shift_relpath IS INITIAL .
      ASSIGN is_parent_context_ref TO &lt;cb_reftable_any&gt; .
    ELSE .
      ASSIGN COMPONENT is_data-shift_relpath
      OF STRUCTURE is_parent_context_ref TO &lt;cb_reftable_any&gt; .
      CHECK &lt;cb_reftable_any&gt; IS ASSIGNED .
    ENDIF .

    DEFINE mk_process .
*     preset runtime path
      add 1 to lv_seqnr . condense lv_seqnr no-gaps .
      concatenate cs_legacy-cb_fullpath &apos;(&apos; lv_seqnr &apos;)&apos; into cs_legacy-rt_path_1 .

      compose_recurs( exporting is_parent_data        = is_data
                                is_parent_context_ref = &lt;context_ref&gt;
                      changing  cs_parent_legacy      = cs_legacy ) .
      cs_parent_legacy-tb_area_prew_top     = cs_legacy-tb_area_prew_top      = cs_legacy-tb_area_top .
      cs_parent_legacy-tb_area_prew_rows    = cs_legacy-tb_area_prew_rows     = cs_legacy-tb_area_rows .
      cs_parent_legacy-tb_area_prew_left    = cs_legacy-tb_area_prew_left     = cs_legacy-tb_area_left .
      cs_parent_legacy-tb_area_prew_columns = cs_legacy-tb_area_prew_columns  = cs_legacy-tb_area_columns .
    END-OF-DEFINITION .


*   all records (without conditions)
    IF  is_data-properties-cb_loop_from BETWEEN 0 AND 1
    AND is_data-properties-cb_loop_to  EQ 0 .
      LOOP AT &lt;cb_reftable_any&gt; ASSIGNING &lt;context_ref&gt; .
        mk_process .
      ENDLOOP .
      EXIT . &quot; --&gt;&gt; RETURN
    ENDIF .


*   check and validate From and To conditions
    lv_lines = LINES( &lt;cb_reftable_any&gt; ) .
    CHECK lv_lines GT 0 .

    IF is_data-properties-cb_loop_from LE 1 .
      lv_from = 1 .
    ELSEIF is_data-properties-cb_loop_from BETWEEN 2 AND lv_lines .
      lv_from = is_data-properties-cb_loop_from .
    ELSE  .
      EXIT .
    ENDIF .

    IF is_data-properties-cb_loop_to BETWEEN lv_from AND lv_lines .
      lv_to  = is_data-properties-cb_loop_to .
    ELSE .
      lv_to  = lv_lines .
    ENDIF .


*   all records (without conditions)
    IF  lv_to   EQ 0
    AND lv_from LE 1 .

      LOOP AT &lt;cb_reftable_any&gt; ASSIGNING &lt;context_ref&gt; .
        mk_process .
      ENDLOOP .
      EXIT .  &quot; --&gt;&gt; RETURN
    ENDIF .


*   kind of table ?
    lr_descr_tab  ?= cl_abap_typedescr=&gt;describe_by_data( &lt;cb_reftable_any&gt; ) .

    IF  lr_descr_tab IS BOUND
    AND lr_descr_tab-&gt;table_kind EQ cl_abap_tabledescr=&gt;tablekind_std .
*     process Sorted table
      ASSIGN &lt;cb_reftable_any&gt; TO &lt;cb_reftable_std&gt; .
      LOOP AT &lt;cb_reftable_std&gt; ASSIGNING &lt;context_ref&gt; FROM lv_from TO lv_to .
        mk_process .
      ENDLOOP .
    ELSE .
*     process Other table
      LOOP AT &lt;cb_reftable_any&gt; ASSIGNING &lt;context_ref&gt; .
        ADD 1 TO lv_tabix .
        CHECK lv_tabix BETWEEN lv_from AND lv_to .
        mk_process .
      ENDLOOP .
    ENDIF .

  ENDMETHOD .                    &quot;compose_process_loopstep
  METHOD compose_process_pattern .
    DATA:
      ls_patterns           TYPE lcl_excel=&gt;ty_s_patterns ,
      lv_printtitles_r_flag TYPE flag ,
      lv_printtitles_c_flag TYPE flag .
    FIELD-SYMBOLS:
      &lt;context_ref&gt;         TYPE ANY .

*   binding with reference of context data
    IF is_data-shift_relpath IS INITIAL .
      ASSIGN is_parent_context_ref TO &lt;context_ref&gt; .
    ELSE .
      ASSIGN COMPONENT is_data-shift_relpath
      OF STRUCTURE is_parent_context_ref TO &lt;context_ref&gt; .
      CHECK &lt;context_ref&gt; IS ASSIGNED .
    ENDIF .

*   get a content of pattern area
    ls_patterns =
    r_exceltemplate-&gt;get_pattern( iv_sheetname = cs_parent_legacy-tb_sheetname
                                  iv_id = is_data-properties-id ) .

*   initialize a pattern in runtime form
    r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns ) .

*   recursive processing of child components (if one exists)
    IF is_data-hierarchy-child IS NOT INITIAL .
      compose_recurs( EXPORTING is_parent_data   = is_data
                                is_parent_context_ref = &lt;context_ref&gt;
                      CHANGING  cs_parent_legacy = cs_legacy ) .
    ENDIF .

*   finalize pattetn
    cs_legacy-tb_area_rows     = ls_patterns-rows .
    cs_legacy-tb_area_columns  = ls_patterns-columns .

    CASE is_data-properties-tb_direction .
      WHEN c_tb_direction-up2down .
        cs_legacy-tb_area_top  = cs_parent_legacy-tb_area_prew_top +
                                 cs_parent_legacy-tb_area_prew_rows .

        cs_legacy-tb_area_left = cs_parent_legacy-tb_area_prew_left .

      WHEN c_tb_direction-left2right .
        cs_legacy-tb_area_left = cs_parent_legacy-tb_area_prew_left +
                                 cs_parent_legacy-tb_area_prew_columns .

        cs_legacy-tb_area_top  = cs_parent_legacy-tb_area_prew_top .
    ENDCASE .

    cs_parent_legacy-tb_area_prew_top     = cs_legacy-tb_area_prew_top      = cs_legacy-tb_area_top .
    cs_parent_legacy-tb_area_prew_rows    = cs_legacy-tb_area_prew_rows     = cs_legacy-tb_area_rows .
    cs_parent_legacy-tb_area_prew_left    = cs_legacy-tb_area_prew_left     = cs_legacy-tb_area_left .
    cs_parent_legacy-tb_area_prew_columns = cs_legacy-tb_area_prew_columns  = cs_legacy-tb_area_columns .

*   finalize the pattern in runtime form
    IF is_data-properties-id EQ cs_legacy-tb_printtitles_r .
      lv_printtitles_r_flag = abap_on .
    ENDIF .
    IF is_data-properties-id EQ cs_legacy-tb_printtitles_c .
      lv_printtitles_c_flag = abap_on .
    ENDIF .
    r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r   = lv_printtitles_r_flag
                                                iv_printtitles_c   = lv_printtitles_c_flag
                                                iv_autofitmerged_r = is_data-properties-tb_autofitmerged_r
                                                iv_autofitmerged_c = is_data-properties-tb_autofitmerged_c
                                       CHANGING cv_top  = cs_legacy-tb_area_top
                                                cv_left = cs_legacy-tb_area_left ) .

  ENDMETHOD .                    &quot;compose_process_pattern
  METHOD compose_process_respattern_a .

*   place resizable pattern AFTER it&apos;s subarea

    DATA:
      ls_patterns           TYPE lcl_excel=&gt;ty_s_patterns ,
      lv_printtitles_r_flag TYPE flag ,
      lv_printtitles_c_flag TYPE flag ,
      ls_comp_type_filter   TYPE ty_s_comp_type_rng ,
      lt_comp_type_filter   TYPE ty_t_comp_type_rng ,
      lv_tb_area_top        TYPE i ,
      lv_tb_area_left       TYPE i ,
      lv_tb_area_rows       TYPE i ,
      lv_tb_area_columns    TYPE i ,
      lv_tb_mergecells      TYPE ty_char1 .
    FIELD-SYMBOLS:
      &lt;context_ref&gt;         TYPE ANY .

*   binding with reference of context data
    IF is_data-shift_relpath IS INITIAL .
      ASSIGN is_parent_context_ref TO &lt;context_ref&gt; .
    ELSE .
      ASSIGN COMPONENT is_data-shift_relpath
      OF STRUCTURE is_parent_context_ref TO &lt;context_ref&gt; .
      CHECK &lt;context_ref&gt; IS ASSIGNED .
    ENDIF .


    lv_tb_mergecells = is_data-properties-tb_mergecells .

*================================================================================
*   print Sub-patterns
*================================================================================
    cs_legacy-tb_area_rows    = 0 .
    cs_legacy-tb_area_columns = 0 .

    CASE is_data-properties-tb_direction .
      WHEN c_tb_direction-up2down .
        cs_legacy-tb_area_top  = cs_parent_legacy-tb_area_prew_top +
                                 cs_parent_legacy-tb_area_prew_rows .
        cs_legacy-tb_area_left = cs_parent_legacy-tb_area_prew_left .

      WHEN c_tb_direction-left2right .
        cs_legacy-tb_area_left = cs_parent_legacy-tb_area_prew_left +
                                 cs_parent_legacy-tb_area_prew_columns .
        cs_legacy-tb_area_top  = cs_parent_legacy-tb_area_prew_top  .
    ENDCASE .

    cs_legacy-tb_area_prew_left     = cs_legacy-tb_area_left .
    cs_legacy-tb_area_prew_top      = cs_legacy-tb_area_top .
    cs_legacy-tb_area_prew_rows     = cs_legacy-tb_area_rows .
    cs_legacy-tb_area_prew_columns  = cs_legacy-tb_area_columns .


*   recursive processing of child components (if one exists)
    IF is_data-hierarchy-child IS NOT INITIAL .
      CLEAR lt_comp_type_filter .
      ls_comp_type_filter-sign    = rs_c_range_sign-excluding .
      ls_comp_type_filter-option  = rs_c_range_opt-equal .
      ls_comp_type_filter-low     = c_comp_type-field .
      COLLECT ls_comp_type_filter INTO lt_comp_type_filter .

      compose_recurs( EXPORTING is_parent_data        = is_data
                                is_parent_context_ref = &lt;context_ref&gt;
                                it_comp_type_filter   = lt_comp_type_filter
                      CHANGING  cs_parent_legacy      = cs_legacy  ) .
    ENDIF .

    lv_tb_area_top      = cs_legacy-tb_area_top .
    lv_tb_area_left     = cs_legacy-tb_area_left .
    lv_tb_area_rows     = cs_legacy-tb_area_rows .
    lv_tb_area_columns  = cs_legacy-tb_area_columns .

*================================================================================
*   print a resizable (spanned) pattern
*================================================================================

*   get a content of pattern area
    ls_patterns =
    r_exceltemplate-&gt;get_pattern( iv_sheetname = cs_parent_legacy-tb_sheetname
                                  iv_id = is_data-properties-id ) .

*   initialize a pattern in runtime form
    r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns ) .

    CASE is_data-properties-tb_mergecells .
      WHEN c_tb_mergecells-cols .
        cs_legacy-tb_area_top  = cs_legacy-tb_area_top +
                                 cs_legacy-tb_area_rows .
      WHEN c_tb_mergecells-rows .
        cs_legacy-tb_area_left = cs_legacy-tb_area_left +
                                 cs_legacy-tb_area_columns .
    ENDCASE .

*   recursive processing of child components (Fields only)
    IF is_data-hierarchy-child IS NOT INITIAL .
      CLEAR lt_comp_type_filter .
      ls_comp_type_filter-sign    = rs_c_range_sign-including .
      ls_comp_type_filter-option  = rs_c_range_opt-equal .
      ls_comp_type_filter-low     = c_comp_type-field .
      COLLECT ls_comp_type_filter INTO lt_comp_type_filter .

      compose_recurs( EXPORTING is_parent_data   = is_data
                                is_parent_context_ref = &lt;context_ref&gt;
                                it_comp_type_filter = lt_comp_type_filter
                      CHANGING  cs_parent_legacy = cs_legacy ) .
    ENDIF .

*   finalize pattetn
    cs_legacy-tb_area_rows     = ls_patterns-rows .
    cs_legacy-tb_area_columns  = ls_patterns-columns .

*   finalize the pattern in runtime form
    IF is_data-properties-id EQ cs_legacy-tb_printtitles_r .
      lv_printtitles_r_flag = abap_on .
    ENDIF .
    IF is_data-properties-id EQ cs_legacy-tb_printtitles_c .
      lv_printtitles_c_flag = abap_on .
    ENDIF .
    r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r    = lv_printtitles_r_flag
                                                iv_printtitles_c    = lv_printtitles_c_flag
                                                iv_autofitmerged_r  = is_data-properties-tb_autofitmerged_r
                                                iv_autofitmerged_c  = is_data-properties-tb_autofitmerged_c
                                       CHANGING cv_top              = cs_legacy-tb_area_top
                                                cv_left             = cs_legacy-tb_area_left ) .

    CASE lv_tb_mergecells .
      WHEN c_tb_mergecells-cols . cs_legacy-tb_area_columns = cs_legacy-tb_area_columns + lv_tb_area_columns - 1 .
      WHEN c_tb_mergecells-rows . cs_legacy-tb_area_rows    = cs_legacy-tb_area_rows    + lv_tb_area_rows - 1 .
    ENDCASE .


    cs_parent_legacy-tb_area_prew_top     = cs_legacy-tb_area_prew_top     = cs_legacy-tb_area_top     .
    cs_parent_legacy-tb_area_prew_rows    = cs_legacy-tb_area_prew_rows    = cs_legacy-tb_area_rows    .
    cs_parent_legacy-tb_area_prew_left    = cs_legacy-tb_area_prew_left    = cs_legacy-tb_area_left    .
    cs_parent_legacy-tb_area_prew_columns = cs_legacy-tb_area_prew_columns = cs_legacy-tb_area_columns .


*================================================================================
*   merge Rows/Columns in the Spanned pattern
*================================================================================
    CASE lv_tb_mergecells .
      WHEN c_tb_mergecells-rows .
        r_excelruntime-&gt;finalize_respattern(
              EXPORTING iv_rowspan = abap_on
                        iv_top     = cs_legacy-tb_area_top
                        iv_left    = cs_legacy-tb_area_left
                        iv_rows    = lv_tb_area_rows
                        iv_columns = cs_legacy-tb_area_columns
                        iv_autofitmerged_r = is_data-properties-tb_autofitmerged_r
                        iv_autofitmerged_c = is_data-properties-tb_autofitmerged_c ) .

      WHEN c_tb_mergecells-cols .
        r_excelruntime-&gt;finalize_respattern(
              EXPORTING iv_colspan = abap_on
                        iv_top     = cs_legacy-tb_area_top
                        iv_left    = cs_legacy-tb_area_left
                        iv_rows    = cs_legacy-tb_area_rows
                        iv_columns = lv_tb_area_columns
                        iv_autofitmerged_r = is_data-properties-tb_autofitmerged_r
                        iv_autofitmerged_c = is_data-properties-tb_autofitmerged_c ) .
    ENDCASE .

  ENDMETHOD .                    &quot;compose_process_respattern_a
  METHOD compose_process_respattern_b .

*   place resizable pattern BEFORE it&apos;s subarea

    DATA:
      ls_patterns           TYPE lcl_excel=&gt;ty_s_patterns ,
      lv_printtitles_r_flag TYPE flag ,
      lv_printtitles_c_flag TYPE flag ,
      ls_comp_type_filter   TYPE ty_s_comp_type_rng ,
      lt_comp_type_filter   TYPE ty_t_comp_type_rng ,
      lv_tb_area_top        TYPE i ,
      lv_tb_area_left       TYPE i ,
      lv_tb_area_rows       TYPE i ,
      lv_tb_area_columns    TYPE i ,
      lv_tb_mergecells      TYPE ty_char1 .
    FIELD-SYMBOLS:
      &lt;context_ref&gt;         TYPE ANY .

*   binding with reference of context data
    IF is_data-shift_relpath IS INITIAL .
      ASSIGN is_parent_context_ref TO &lt;context_ref&gt; .
    ELSE .
      ASSIGN COMPONENT is_data-shift_relpath
      OF STRUCTURE is_parent_context_ref TO &lt;context_ref&gt; .
      CHECK &lt;context_ref&gt; IS ASSIGNED .
    ENDIF .

*================================================================================
*   print a resizable (spanned) pattern
*================================================================================

*   get a content of pattern area
    ls_patterns =
    r_exceltemplate-&gt;get_pattern( iv_sheetname = cs_parent_legacy-tb_sheetname
                                  iv_id = is_data-properties-id ) .

*   initialize a pattern in runtime form
    r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns ) .

*   recursive processing of child components (Fields only)
    IF is_data-hierarchy-child IS NOT INITIAL .
      CLEAR lt_comp_type_filter .
      ls_comp_type_filter-sign    = rs_c_range_sign-including .
      ls_comp_type_filter-option  = rs_c_range_opt-equal .
      ls_comp_type_filter-low     = c_comp_type-field .
      COLLECT ls_comp_type_filter INTO lt_comp_type_filter .

      compose_recurs( EXPORTING is_parent_data   = is_data
                                is_parent_context_ref = &lt;context_ref&gt;
                                it_comp_type_filter = lt_comp_type_filter
                      CHANGING  cs_parent_legacy = cs_legacy ) .
    ENDIF .

*   finalize pattetn
    cs_legacy-tb_area_rows     = ls_patterns-rows .
    cs_legacy-tb_area_columns  = ls_patterns-columns .

    CASE is_data-properties-tb_direction .
      WHEN c_tb_direction-up2down .
        cs_legacy-tb_area_top  = cs_parent_legacy-tb_area_prew_top +
                                 cs_parent_legacy-tb_area_prew_rows .
        cs_legacy-tb_area_left = cs_parent_legacy-tb_area_prew_left .

      WHEN c_tb_direction-left2right .
        cs_legacy-tb_area_left = cs_parent_legacy-tb_area_prew_left +
                                 cs_parent_legacy-tb_area_prew_columns .
        cs_legacy-tb_area_top  = cs_parent_legacy-tb_area_prew_top .
    ENDCASE .
    lv_tb_area_top      = cs_legacy-tb_area_top .
    lv_tb_area_left     = cs_legacy-tb_area_left .
    lv_tb_area_rows     = cs_legacy-tb_area_rows .
    lv_tb_area_columns  = cs_legacy-tb_area_columns .


*   finalize the pattern in runtime form
    IF is_data-properties-id EQ cs_legacy-tb_printtitles_r .
      lv_printtitles_r_flag = abap_on .
    ENDIF .
    IF is_data-properties-id EQ cs_legacy-tb_printtitles_c .
      lv_printtitles_c_flag = abap_on .
    ENDIF .
    r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r    = lv_printtitles_r_flag
                                                iv_printtitles_c    = lv_printtitles_c_flag
                                                iv_autofitmerged_r  = is_data-properties-tb_autofitmerged_r
                                                iv_autofitmerged_c  = is_data-properties-tb_autofitmerged_c
                                       CHANGING cv_top              = cs_legacy-tb_area_top
                                                cv_left             = cs_legacy-tb_area_left ) .


*================================================================================
*   print Sub-patterns
*================================================================================
    lv_tb_mergecells = is_data-properties-tb_mergecells .

    CASE is_data-properties-tb_mergecells .
      WHEN c_tb_mergecells-cols .
        cs_legacy-tb_area_top  = cs_legacy-tb_area_top +
                                 cs_legacy-tb_area_rows .
      WHEN c_tb_mergecells-rows .
        cs_legacy-tb_area_left = cs_legacy-tb_area_left +
                                 cs_legacy-tb_area_columns .
    ENDCASE .

    cs_legacy-tb_area_rows = 0 .
    cs_legacy-tb_area_columns = 0 .

    cs_legacy-tb_area_prew_left     = cs_legacy-tb_area_left .
    cs_legacy-tb_area_prew_top      = cs_legacy-tb_area_top .
    cs_legacy-tb_area_prew_rows     = cs_legacy-tb_area_rows .
    cs_legacy-tb_area_prew_columns  = cs_legacy-tb_area_columns .




*    CASE is_data-properties-tb_mergecells .
*      WHEN c_tb_mergecells-cols .
*        cs_legacy-tb_area_top  = cs_legacy-tb_area_top +
*                                 cs_legacy-tb_area_rows .
*        cs_legacy-tb_area_columns = 0 .
*
*      WHEN c_tb_mergecells-rows .
*        cs_legacy-tb_area_left = cs_legacy-tb_area_left +
*                                 cs_legacy-tb_area_columns .
*        cs_legacy-tb_area_rows = 0 .
*    ENDCASE .
*
*
*    cs_legacy-tb_area_prew_left     = cs_legacy-tb_area_left .
*    cs_legacy-tb_area_prew_top      = cs_legacy-tb_area_top .
*    cs_legacy-tb_area_prew_rows     = cs_legacy-tb_area_rows .
*    cs_legacy-tb_area_prew_columns  = cs_legacy-tb_area_columns .
*
*    cs_legacy-tb_area_rows = 0 .
*    cs_legacy-tb_area_columns = 0 .


*   recursive processing of child components (if one exists)
    IF is_data-hierarchy-child IS NOT INITIAL .
      CLEAR lt_comp_type_filter .
      ls_comp_type_filter-sign    = rs_c_range_sign-excluding .
      ls_comp_type_filter-option  = rs_c_range_opt-equal .
      ls_comp_type_filter-low     = c_comp_type-field .
      COLLECT ls_comp_type_filter INTO lt_comp_type_filter .

      compose_recurs( EXPORTING is_parent_data        = is_data
                                is_parent_context_ref = &lt;context_ref&gt;
                                it_comp_type_filter   = lt_comp_type_filter
                      CHANGING  cs_parent_legacy      = cs_legacy  ) .
    ENDIF .

    cs_legacy-tb_area_top     = lv_tb_area_top .
    cs_legacy-tb_area_left    = lv_tb_area_left .
    CASE lv_tb_mergecells .
      WHEN c_tb_mergecells-cols . ADD lv_tb_area_rows   TO cs_legacy-tb_area_rows .
      WHEN c_tb_mergecells-rows . ADD lv_tb_area_columns TO cs_legacy-tb_area_columns .
    ENDCASE .

    cs_parent_legacy-tb_area_prew_top     = cs_legacy-tb_area_prew_top     = cs_legacy-tb_area_top     .
    cs_parent_legacy-tb_area_prew_rows    = cs_legacy-tb_area_prew_rows    = cs_legacy-tb_area_rows    .
    cs_parent_legacy-tb_area_prew_left    = cs_legacy-tb_area_prew_left    = cs_legacy-tb_area_left    .
    cs_parent_legacy-tb_area_prew_columns = cs_legacy-tb_area_prew_columns = cs_legacy-tb_area_columns .


*================================================================================
*   merge Rows/Columns in the Spanned pattern
*================================================================================
    CASE lv_tb_mergecells .
      WHEN c_tb_mergecells-rows .
        r_excelruntime-&gt;finalize_respattern(
              EXPORTING iv_rowspan = abap_on
                        iv_top     = lv_tb_area_top
                        iv_left    = lv_tb_area_left
                        iv_rows    = cs_legacy-tb_area_prew_rows
                        iv_columns = lv_tb_area_columns
                        iv_autofitmerged_r = is_data-properties-tb_autofitmerged_r
                        iv_autofitmerged_c = is_data-properties-tb_autofitmerged_c ) .

      WHEN c_tb_mergecells-cols .
        r_excelruntime-&gt;finalize_respattern(
              EXPORTING iv_colspan = abap_on
                        iv_top     = lv_tb_area_top
                        iv_left    = lv_tb_area_left
                        iv_rows    = lv_tb_area_rows
                        iv_columns = cs_legacy-tb_area_prew_columns
                        iv_autofitmerged_r = is_data-properties-tb_autofitmerged_r
                        iv_autofitmerged_c = is_data-properties-tb_autofitmerged_c ) .
    ENDCASE .

  ENDMETHOD .                    &quot;compose_process_respattern_b

  METHOD compose_process_folder .

    DATA:
      lv_nopgbrk_beg_x        TYPE i ,
      lv_nopgbrk_end_x        TYPE i ,
      lv_nopgbrk_beg_y        TYPE i ,
      lv_nopgbrk_end_y        TYPE i ,
      lv_cellrng_name         TYPE string .
    FIELD-SYMBOLS:
      &lt;context_ref&gt;           TYPE ANY .

*   binding with reference of context data
    IF is_data-shift_relpath IS INITIAL .
      ASSIGN is_parent_context_ref TO &lt;context_ref&gt; .
    ELSE .
      ASSIGN COMPONENT is_data-shift_relpath
      OF STRUCTURE is_parent_context_ref TO &lt;context_ref&gt; .
      CHECK &lt;context_ref&gt; IS ASSIGNED .
    ENDIF .

    cs_legacy-tb_area_rows    = 0 .
    cs_legacy-tb_area_columns = 0 .

    CASE is_data-properties-tb_direction .
      WHEN c_tb_direction-up2down .
        cs_legacy-tb_area_top  = cs_parent_legacy-tb_area_prew_top +
                                 cs_parent_legacy-tb_area_prew_rows .
        cs_legacy-tb_area_left = cs_parent_legacy-tb_area_prew_left .

      WHEN c_tb_direction-left2right .
        cs_legacy-tb_area_left = cs_parent_legacy-tb_area_prew_left +
                                 cs_parent_legacy-tb_area_prew_columns .
        cs_legacy-tb_area_top  = cs_parent_legacy-tb_area_prew_top  .
    ENDCASE .

    cs_legacy-tb_area_prew_left     = cs_legacy-tb_area_left .
    cs_legacy-tb_area_prew_top      = cs_legacy-tb_area_top .
    cs_legacy-tb_area_prew_rows     = cs_legacy-tb_area_rows .
    cs_legacy-tb_area_prew_columns  = cs_legacy-tb_area_columns .

    IF is_data-properties-tb_rowgroup IS NOT INITIAL .
      ADD 1 TO cs_legacy-tb_rowgroup_level .
    ENDIF .
    IF is_data-properties-tb_colgroup IS NOT INITIAL .
      ADD 1 TO cs_legacy-tb_colgroup_level .
    ENDIF .

*   initialize a folder in runtime form
    r_excelruntime-&gt;begin_folder( ) .

*   recursive processing of child components (if one exists)
    IF is_data-hierarchy-child IS NOT INITIAL .
      compose_recurs( EXPORTING is_parent_data   = is_data
                                is_parent_context_ref = &lt;context_ref&gt;
                      CHANGING  cs_parent_legacy = cs_legacy  ) .
    ENDIF .

*   preventing page break settings
    IF is_data-properties-tb_nopgbrk_left IS INITIAL .
      CLEAR: lv_nopgbrk_beg_x ,
             lv_nopgbrk_end_x .
    ELSE .
      lv_nopgbrk_beg_x = cs_legacy-tb_area_left + 1 - is_data-properties-tb_nopgbrk_left_shift .
      lv_nopgbrk_end_x = cs_legacy-tb_area_left + cs_legacy-tb_area_columns .
    ENDIF .

    IF is_data-properties-tb_nopgbrk_top IS INITIAL .
      CLEAR: lv_nopgbrk_beg_y ,
             lv_nopgbrk_end_y .
    ELSE .
      lv_nopgbrk_beg_y = cs_legacy-tb_area_top + 1 - is_data-properties-tb_nopgbrk_top_shift .
      lv_nopgbrk_end_y = cs_legacy-tb_area_top + cs_legacy-tb_area_rows .
    ENDIF .

*   name if cell range
    IF is_data-properties-cb_cellrng_relpath IS NOT INITIAL .
      get_value_simple(
          EXPORTING is_parent_context_ref = &lt;context_ref&gt;
                    iv_relpath            = is_data-shift_cellrng_relpath
                    iv_offset             = is_data-properties-cb_cellrng_offset
                    iv_match              = is_data-properties-cb_cellrng_match
          IMPORTING ev_value              = lv_cellrng_name ) .
      IF lv_cellrng_name CA ` &apos;!@#$%^&amp;**()[]{}&lt;&gt;,./\~+-=` .
        MESSAGE e000(lp)
           WITH v_text-t331   &quot; text: Incorrect name of cell range
                &apos;:&apos; lv_cellrng_name
           INTO v_dummy .
        msg_syst_catch( ) .
        CLEAR lv_cellrng_name .
      ENDIF .
    ENDIF .

*   finalize folder
    r_excelruntime-&gt;finalize_folder(
        iv_left           = cs_legacy-tb_area_left
        iv_top            = cs_legacy-tb_area_top
        iv_rows           = cs_legacy-tb_area_rows
        iv_columns        = cs_legacy-tb_area_columns
        iv_rowgroup_level = cs_legacy-tb_rowgroup_level
        iv_colgroup_level = cs_legacy-tb_colgroup_level
        iv_rowgroup_clp   = is_data-properties-tb_rowgroup_clp
        iv_colgroup_clp   = is_data-properties-tb_colgroup_clp
        iv_nopgbrk_top    = is_data-properties-tb_nopgbrk_top
        iv_nopgbrk_left   = is_data-properties-tb_nopgbrk_left
        iv_nopgbrk_beg_x  = lv_nopgbrk_beg_x
        iv_nopgbrk_end_x  = lv_nopgbrk_end_x
        iv_nopgbrk_beg_y  = lv_nopgbrk_beg_y
        iv_nopgbrk_end_y  = lv_nopgbrk_end_y
        iv_pgbrk_top      = is_data-properties-tb_pgbrk_top
        iv_pgbrk_left     = is_data-properties-tb_pgbrk_left
        iv_cellrng_name   = lv_cellrng_name ) .

    cs_parent_legacy-tb_area_prew_top     = cs_legacy-tb_area_prew_top      = cs_legacy-tb_area_top .
    cs_parent_legacy-tb_area_prew_rows    = cs_legacy-tb_area_prew_rows     = cs_legacy-tb_area_rows .
    cs_parent_legacy-tb_area_prew_left    = cs_legacy-tb_area_prew_left     = cs_legacy-tb_area_left .
    cs_parent_legacy-tb_area_prew_columns = cs_legacy-tb_area_prew_columns  = cs_legacy-tb_area_columns .

  ENDMETHOD .                    &quot;compose_process_folder
  METHOD compose_process_field .

    DATA:
      lv_value                      TYPE string ,
      lv_val_fullpath               TYPE string ,
      lr_valvld_attr_table_dummy    TYPE REF TO data,
      lv_valvld_fullpath            TYPE string ,
      lv_valvld_relpath_shift       TYPE string ,
      lv_valvld_for1_value_x        TYPE flag ,
      lv_valvld_for1_value          TYPE string ,
      lv_valvld_for2_value_x        TYPE flag ,
      lv_valvld_for2_value          TYPE string .
    FIELD-SYMBOLS:
      &lt;valvld_attr_table&gt;           TYPE ANY TABLE .

    CHECK is_data-properties-cb_val_relpath IS NOT INITIAL
       OR is_data-properties-cb_valvld_attr_relpath     IS NOT INITIAL
       OR is_data-properties-cb_valvld_for1_dataset_id  IS NOT INITIAL
       OR is_data-properties-cb_valvld_for1_relpath     IS NOT INITIAL
       OR is_data-properties-cb_valvld_for2_relpath     IS NOT INITIAL .


    DO 1 TIMES .
      CHECK is_data-properties-cb_val_relpath IS NOT INITIAL .
      lv_val_fullpath = get_fullpath( iv_parent_fullpath  = cs_legacy-cb_fullpath
                                      iv_relpath = is_data-properties-cb_val_relpath ) .

      lv_value =
      get_value( is_parent_context_ref = is_parent_context_ref
                 iv_shift_val_relpath  = is_data-shift_val_relpath
                 iv_val_relpath  = is_data-properties-cb_val_relpath
                 iv_val_sub_req  = is_data-properties-cb_val_sub_req
                 iv_val_sub_col  = is_data-properties-cb_val_sub_col
                 iv_val_sub_row  = is_data-properties-cb_val_sub_row
                 iv_val_offset   = is_data-properties-cb_val_offset
                 iv_val_match    = is_data-properties-cb_val_match
                 iv_val_convert  = is_data-properties-cb_val_convert
                 iv_fullpath     = lv_val_fullpath ) .
    ENDDO .


    DO 1 TIMES .
      CHECK is_data-properties-cb_valvld_attr_relpath IS NOT INITIAL .

      lv_valvld_relpath_shift = is_data-properties-cb_valvld_attr_relpath .
      shift_relpath( CHANGING cv_relpath = lv_valvld_relpath_shift ) .

      IF lv_valvld_relpath_shift IS INITIAL .
        ASSIGN is_parent_context_ref TO &lt;valvld_attr_table&gt; .
      ELSE .
        ASSIGN COMPONENT lv_valvld_relpath_shift
        OF STRUCTURE is_parent_context_ref TO &lt;valvld_attr_table&gt; .
      ENDIF .
    ENDDO .
    IF &lt;valvld_attr_table&gt; IS NOT ASSIGNED .
      CREATE DATA lr_valvld_attr_table_dummy TYPE lvc_t_fcat .
      ASSIGN lr_valvld_attr_table_dummy-&gt;* TO &lt;valvld_attr_table&gt; .
    ENDIF .


    DO 1 TIMES .
      CHECK is_data-properties-cb_valvld_for1_relpath IS NOT INITIAL .
      lv_valvld_for1_value_x = abap_on .

      lv_valvld_fullpath =
      get_fullpath( iv_parent_fullpath  = cs_legacy-cb_fullpath
                    iv_relpath = is_data-properties-cb_valvld_for1_relpath ) .

      lv_valvld_relpath_shift = is_data-properties-cb_valvld_for1_relpath .
      shift_relpath( CHANGING cv_relpath = lv_valvld_relpath_shift ) .

      lv_valvld_for1_value =
      get_value( is_parent_context_ref  = is_parent_context_ref
                 iv_shift_val_relpath   = lv_valvld_relpath_shift
                 iv_val_relpath         = is_data-properties-cb_valvld_for1_relpath
                 iv_val_convert         = space
                 iv_fullpath            = lv_valvld_fullpath ) .
    ENDDO .

    DO 1 TIMES .
      CHECK is_data-properties-cb_valvld_for2_relpath IS NOT INITIAL .
      lv_valvld_for2_value_x = abap_on .

      lv_valvld_fullpath =
      get_fullpath( iv_parent_fullpath  = cs_legacy-cb_fullpath
                    iv_relpath = is_data-properties-cb_valvld_for2_relpath ) .

      lv_valvld_relpath_shift = is_data-properties-cb_valvld_for2_relpath .
      shift_relpath( CHANGING cv_relpath = lv_valvld_relpath_shift ) .

      lv_valvld_for2_value =
      get_value( is_parent_context_ref  = is_parent_context_ref
                 iv_shift_val_relpath   = lv_valvld_relpath_shift
                 iv_val_relpath         = is_data-properties-cb_valvld_for2_relpath
                 iv_val_convert         = space
                 iv_fullpath            = lv_valvld_fullpath ) .
    ENDDO .


    IF is_data-properties-tb_val_matrix IS NOT INITIAL .
      CHECK lv_value IS NOT INITIAL .

      DATA:
        lv_x                  TYPE i ,
        lv_y                  TYPE i ,
        lv_tb_area_top        TYPE i ,
        lv_tb_area_left       TYPE i ,
        lv_value_tmp          TYPE string ,
        lv_offset             TYPE i ,
        lv_strlen             TYPE i .

      lv_strlen = STRLEN( lv_value ) .

      lv_y = 1 .
      DO .
        lv_x = 1 .
        DO .
          lv_tb_area_top  = is_data-properties-tb_area_top  + lv_y - 1 .
          lv_tb_area_left = is_data-properties-tb_area_left + lv_x - 1 .

          lv_value_tmp = lv_value+lv_offset(1) .

          r_excelruntime-&gt;begin_field(
              iv_top    = lv_tb_area_top
              iv_left   = lv_tb_area_left
              iv_value  = lv_value_tmp ) .

          ADD 1 TO lv_offset .
          lv_x = lv_x + 1 + is_data-properties-tb_val_matr_c .

          IF lv_x GT is_data-properties-tb_area_columns
          OR lv_offset GE lv_strlen .
            EXIT . &quot; --&gt;&gt; do
          ENDIF .
        ENDDO .

        lv_y = lv_y + 1 + is_data-properties-tb_val_matr_r .

        IF lv_y GT is_data-properties-tb_area_rows
        OR lv_offset GE lv_strlen .
          EXIT . &quot; --&gt;&gt; do
        ENDIF .
      ENDDO .

    ELSEIF is_data-properties-tb_area_textmark IS NOT INITIAL .
      r_excelruntime-&gt;begin_field_textmark(
          iv_value    = lv_value
          iv_textmark = is_data-properties-tb_area_textmark
          iv_formula  = is_data-properties-tb_val_formula
          iv_rt_path_1                = cs_legacy-rt_path_1   &quot; --&gt;&gt; runtime path (for dataset subordination)
          it_valvld_attr_table        = &lt;valvld_attr_table&gt;
          iv_valvld_for1_dataset_id   = is_data-properties-cb_valvld_for1_dataset_id
          iv_valvld_for1_dataset_fld  = is_data-properties-cb_valvld_for1_dataset_fld
          iv_valvld_for1_value        = lv_valvld_for1_value
          iv_valvld_for1_value_x      = lv_valvld_for1_value_x
          iv_valvld_for2_value        = lv_valvld_for2_value
          iv_valvld_for2_value_x      = lv_valvld_for2_value_x  ) .

    ELSE .
      r_excelruntime-&gt;begin_field(
          iv_value    = lv_value
          iv_top      = is_data-properties-tb_area_top
          iv_left     = is_data-properties-tb_area_left
          iv_formula  = is_data-properties-tb_val_formula
          iv_rt_path_1                = cs_legacy-rt_path_1   &quot; --&gt;&gt; runtime path (for dataset subordination)
          it_valvld_attr_table        = &lt;valvld_attr_table&gt;
          iv_valvld_for1_dataset_id   = is_data-properties-cb_valvld_for1_dataset_id
          iv_valvld_for1_dataset_fld  = is_data-properties-cb_valvld_for1_dataset_fld
          iv_valvld_for1_value        = lv_valvld_for1_value
          iv_valvld_for1_value_x      = lv_valvld_for1_value_x
          iv_valvld_for2_value        = lv_valvld_for2_value
          iv_valvld_for2_value_x      = lv_valvld_for2_value_x  ) .
    ENDIF .
  ENDMETHOD .                    &quot;compose_process_field
  METHOD compose_process_drawing .

    DATA:
      ls_drawings_tmp   TYPE lcl_excel=&gt;ty_s_drawings_tmp ,
      lv_shift_relpath  TYPE string ,
      lv_fullpath       TYPE string .

    IF is_data-properties-tb_drwstat_flag IS INITIAL .
*     dynamic Drawing (Rawdata from context&apos;s field)
      CHECK is_data-properties-cb_val_relpath IS NOT INITIAL .

      lv_fullpath = get_fullpath( iv_parent_fullpath  = cs_legacy-cb_fullpath
                                  iv_relpath = is_data-properties-cb_val_relpath ) .

      ls_drawings_tmp-media_rawdata = get_value(
          is_parent_context_ref = is_parent_context_ref
          iv_shift_val_relpath  = is_data-shift_val_relpath
          iv_val_relpath  = is_data-properties-cb_val_relpath
          iv_val_sub_req  = is_data-properties-cb_val_sub_req
          iv_val_sub_col  = is_data-properties-cb_val_sub_col
          iv_val_sub_row  = is_data-properties-cb_val_sub_row
          iv_val_offset   = is_data-properties-cb_val_offset
          iv_val_match    = is_data-properties-cb_val_match
          iv_val_convert  = is_data-properties-cb_val_convert
          iv_fullpath     = lv_fullpath ) .
      CHECK ls_drawings_tmp-media_rawdata IS NOT INITIAL .
      ls_drawings_tmp-drawing_type = lcl_excel=&gt;c_drawing_type-bitmap .

    ELSE .
*     static Drawing (Presence in the template)
      CHECK is_data-properties-tb_drwstat_name IS NOT INITIAL .

      ls_drawings_tmp =
      r_exceltemplate-&gt;get_drawing_static(
                iv_sheetname    = cs_parent_legacy-tb_sheetname
                iv_drwstat_name = is_data-properties-tb_drwstat_name ) .
      CHECK ls_drawings_tmp IS NOT INITIAL .

    ENDIF .

    ls_drawings_tmp-top      = is_data-properties-tb_area_top .
    ls_drawings_tmp-left     = is_data-properties-tb_area_left .
    ls_drawings_tmp-rows     = is_data-properties-tb_area_rows .
    ls_drawings_tmp-columns  = is_data-properties-tb_area_columns .

    IF is_data-properties-drawing_size EQ c_drawing_size-from_context .
      lv_fullpath = get_fullpath( iv_parent_fullpath  = cs_legacy-cb_fullpath
                                  iv_relpath = is_data-properties-drawing_size_h_relpath ) .

      lv_shift_relpath = is_data-properties-drawing_size_h_relpath .
      shift_relpath( CHANGING cv_relpath = lv_shift_relpath  ) .

      ls_drawings_tmp-drawing_size_h = get_value(
          is_parent_context_ref = is_parent_context_ref
          iv_shift_val_relpath  = lv_shift_relpath
          iv_val_relpath        = is_data-properties-drawing_size_h_relpath
          iv_val_convert        = space
          iv_fullpath           = lv_fullpath ) .

      lv_fullpath = get_fullpath( iv_parent_fullpath  = cs_legacy-cb_fullpath
                                  iv_relpath = is_data-properties-drawing_size_w_relpath ) .

      lv_shift_relpath = is_data-properties-drawing_size_w_relpath .
      shift_relpath( CHANGING cv_relpath = lv_shift_relpath  ) .

      ls_drawings_tmp-drawing_size_w = get_value(
          is_parent_context_ref = is_parent_context_ref
          iv_shift_val_relpath  = lv_shift_relpath
          iv_val_relpath        = is_data-properties-drawing_size_w_relpath
          iv_val_convert        = space
          iv_fullpath           = lv_fullpath ) .

      IF  ls_drawings_tmp-drawing_size_h GT 0
      AND ls_drawings_tmp-drawing_size_w GT 0 .
        CLEAR ls_drawings_tmp-rows    .
        CLEAR ls_drawings_tmp-columns .
      ELSE .
        CLEAR ls_drawings_tmp-drawing_size_h .
        CLEAR ls_drawings_tmp-drawing_size_w .
      ENDIF .
    ENDIF .

    r_excelruntime-&gt;begin_drawing( is_drawings_tmp = ls_drawings_tmp ) .

  ENDMETHOD .                    &quot;compose_process_drawing
  METHOD compose_process_chart .

    DATA:
      ls_drawings_tmp               TYPE lcl_excel=&gt;ty_s_drawings_tmp ,
      lv_chart_title_fullpath       TYPE string ,
      lv_chart_title_relpath_shift  TYPE string ,
      lv_shift_relpath              TYPE string ,
      lv_fullpath                   TYPE string .
    FIELD-SYMBOLS:
      &lt;context_ref&gt;                 TYPE ANY .

    ls_drawings_tmp =
    r_exceltemplate-&gt;get_drawing_static(
              iv_sheetname    = cs_parent_legacy-tb_sheetname
              iv_drwstat_name = is_data-properties-tb_drwstat_name ) .
    CHECK ls_drawings_tmp IS NOT INITIAL .

*   dataset
    ls_drawings_tmp-chart_id          = is_data-properties-id .
    ls_drawings_tmp-dataset_id        = is_data-properties-dataset_id .
    ls_drawings_tmp-dataset_rt_path_1 = cs_legacy-rt_path_1 . &quot; --&gt;&gt; runtime path (for dataset subordination)
    ls_drawings_tmp-dataset_series_tab[] = conv_dataset_series_st( is_data-properties-dataset_series ) .

*   title: chart
    IF is_data-properties-chart_title IS NOT INITIAL .
      ls_drawings_tmp-chart_title       = is_data-properties-chart_title .

      lv_chart_title_fullpath =
      get_fullpath( iv_parent_fullpath  = cs_legacy-cb_fullpath
                    iv_relpath = is_data-properties-chart_title_relpath ) .

      lv_chart_title_relpath_shift = is_data-properties-chart_title_relpath .
      shift_relpath( CHANGING cv_relpath = lv_chart_title_relpath_shift ) .

      ls_drawings_tmp-chart_title_tx =
      get_value( is_parent_context_ref  = is_parent_context_ref
                 iv_shift_val_relpath   = lv_chart_title_relpath_shift
                 iv_val_relpath         = is_data-properties-chart_title_relpath
                 iv_val_convert         = space
                 iv_fullpath            = lv_chart_title_fullpath ) .
    ENDIF .

*   title: category axis
    IF is_data-properties-chart_catax_title IS NOT INITIAL .
      ls_drawings_tmp-chart_catax_title = is_data-properties-chart_catax_title .

      lv_chart_title_fullpath =
      get_fullpath( iv_parent_fullpath  = cs_legacy-cb_fullpath
                    iv_relpath = is_data-properties-chart_catax_title_relpath ) .

      lv_chart_title_relpath_shift = is_data-properties-chart_catax_title_relpath .
      shift_relpath( CHANGING cv_relpath = lv_chart_title_relpath_shift ) .

      ls_drawings_tmp-chart_catax_title_tx =
      get_value( is_parent_context_ref  = is_parent_context_ref
                 iv_shift_val_relpath   = lv_chart_title_relpath_shift
                 iv_val_relpath         = is_data-properties-chart_catax_title_relpath
                 iv_val_convert         = space
                 iv_fullpath            = lv_chart_title_fullpath ) .
    ENDIF .

*   title: value axis
    IF is_data-properties-chart_valax_title IS NOT INITIAL .
      ls_drawings_tmp-chart_valax_title = is_data-properties-chart_valax_title .

      lv_chart_title_fullpath =
      get_fullpath( iv_parent_fullpath  = cs_legacy-cb_fullpath
                    iv_relpath = is_data-properties-chart_valax_title_relpath ) .

      lv_chart_title_relpath_shift = is_data-properties-chart_valax_title_relpath .
      shift_relpath( CHANGING cv_relpath = lv_chart_title_relpath_shift ) .

      ls_drawings_tmp-chart_valax_title_tx =
      get_value( is_parent_context_ref  = is_parent_context_ref
                 iv_shift_val_relpath   = lv_chart_title_relpath_shift
                 iv_val_relpath         = is_data-properties-chart_valax_title_relpath
                 iv_val_convert         = space
                 iv_fullpath            = lv_chart_title_fullpath ) .
    ENDIF .

*   title: series
    ls_drawings_tmp-chart_series_title = is_data-properties-chart_series_title .

*   layout
    ls_drawings_tmp-top             = is_data-properties-tb_area_top .
    ls_drawings_tmp-left            = is_data-properties-tb_area_left .
    ls_drawings_tmp-rows            = is_data-properties-tb_area_rows .
    ls_drawings_tmp-columns         = is_data-properties-tb_area_columns .

    IF is_data-properties-drawing_size EQ c_drawing_size-from_context .
      lv_fullpath = get_fullpath( iv_parent_fullpath  = cs_legacy-cb_fullpath
                                  iv_relpath = is_data-properties-drawing_size_h_relpath ) .

      lv_shift_relpath = is_data-properties-drawing_size_h_relpath .
      shift_relpath( CHANGING cv_relpath = lv_shift_relpath  ) .

      ls_drawings_tmp-drawing_size_h = get_value(
          is_parent_context_ref = is_parent_context_ref
          iv_shift_val_relpath  = lv_shift_relpath
          iv_val_relpath        = is_data-properties-drawing_size_h_relpath
          iv_val_convert        = space
          iv_fullpath           = lv_fullpath ) .

      lv_fullpath = get_fullpath( iv_parent_fullpath  = cs_legacy-cb_fullpath
                                  iv_relpath = is_data-properties-drawing_size_w_relpath ) .

      lv_shift_relpath = is_data-properties-drawing_size_w_relpath .
      shift_relpath( CHANGING cv_relpath = lv_shift_relpath  ) .

      ls_drawings_tmp-drawing_size_w = get_value(
          is_parent_context_ref = is_parent_context_ref
          iv_shift_val_relpath  = lv_shift_relpath
          iv_val_relpath        = is_data-properties-drawing_size_w_relpath
          iv_val_convert        = space
          iv_fullpath           = lv_fullpath ) .

      IF  ls_drawings_tmp-drawing_size_h GT 0
      AND ls_drawings_tmp-drawing_size_w GT 0 .
        CLEAR ls_drawings_tmp-rows    .
        CLEAR ls_drawings_tmp-columns .
      ELSE .
        CLEAR ls_drawings_tmp-drawing_size_h .
        CLEAR ls_drawings_tmp-drawing_size_w .
      ENDIF .
    ENDIF .

*   pass to excel
    r_excelruntime-&gt;begin_chart( is_drawings_tmp = ls_drawings_tmp ) .

  ENDMETHOD .                    &quot;compose_process_chart
  METHOD compose_process_tree .
    DATA:
      ls_patterns           TYPE lcl_excel=&gt;ty_s_patterns ,
      ls_patterns_a         TYPE lcl_excel=&gt;ty_s_patterns ,
      lt_patterns_a         TYPE lcl_excel=&gt;ty_t_patterns ,
      ls_patterns_b         TYPE lcl_excel=&gt;ty_s_patterns ,
      lt_patterns_b         TYPE lcl_excel=&gt;ty_t_patterns ,
      ls_cells              TYPE lcl_excel=&gt;ty_s_cells ,
      ls_colprop            TYPE lcl_excel=&gt;ty_s_colprop ,
      ls_rowprop            TYPE lcl_excel=&gt;ty_s_rowprop ,
      ls_mergecells         TYPE ty_s_mergecells_rel ,
      lv_x                  TYPE i ,
      lv_y                  TYPE i ,
      lv_i                  TYPE i ,
      lv_times_row          TYPE i ,
      lv_index_row          TYPE i ,
      lv_times_col          TYPE i ,
      lv_index_col          TYPE i ,
      lv_index_rel          TYPE i ,
      lv_index_rel2         TYPE i ,
      lv_index              TYPE i ,
      ls_tree_layout        TYPE ty_s_tree_layout ,
      lv_value(30000)       TYPE c ,
      lv_subrc              TYPE sysubrc .
    DATA:
      lr_alvtree            TYPE ty_r_tree ,
      lt_fcat_lvc           TYPE lvc_t_fcat ,
      lr_outtab_table       TYPE REF TO data ,
      lr_outtab_line        TYPE REF TO data ,
      lt_subtotals          TYPE ty_t_tree_subtotals ,
      lv_top                TYPE i ,
      lv_left               TYPE i ,
      lv_value_top          TYPE i ,
      lv_value_left         TYPE i ,
      lt_expanded_nodes     TYPE lvc_t_nkey ,
      lv_hierarchy_column_width TYPE i ,
      lv_firstrow           TYPE flag VALUE abap_on .
    DATA:
      lv_fullpath           TYPE string ,
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties .
    FIELD-SYMBOLS:
      &lt;context_ref&gt;         TYPE ANY ,
      &lt;outtab_table&gt;        TYPE STANDARD TABLE ,
      &lt;outtab_line&gt;         TYPE ANY ,
      &lt;fcat_lvc&gt;            TYPE lvc_s_fcat .

*======================================================================
*   redirect to CL_SALV_TREE processing (if required)
*======================================================================
    lv_fullpath = get_fullpath( iv_parent_fullpath = cs_legacy-cb_fullpath
                                iv_relpath         = is_data-properties-cb_val_relpath ) .

    ls_ctxt_prop = r_context-&gt;node_get_by_path( iv_comp_fullpath = lv_fullpath ) .

    IF ls_ctxt_prop-comp_type EQ lcl_context=&gt;c_comp_type-tree_s .
      compose_process_tree_s(
        EXPORTING
          is_parent_data        = is_parent_data
          is_parent_context_ref = is_parent_context_ref
          is_data               = is_data
        CHANGING
          cs_legacy             = cs_legacy
          cs_parent_legacy      = cs_parent_legacy  ).

      RETURN .
    ENDIF .



*======================================================================
*   binding with reference of context data
*======================================================================
    IF is_data-shift_val_relpath IS INITIAL .
      ASSIGN is_parent_context_ref TO &lt;context_ref&gt; .
    ELSE .
      ASSIGN COMPONENT is_data-shift_val_relpath
      OF STRUCTURE is_parent_context_ref TO &lt;context_ref&gt; .
      CHECK &lt;context_ref&gt; IS ASSIGNED .
    ENDIF .

    CHECK &lt;context_ref&gt; IS BOUND .

    TRY .
        lr_alvtree ?= &lt;context_ref&gt; .

      CATCH cx_sy_move_cast_error
            cx_sy_dyn_call_illegal_method .
        EXIT .
    ENDTRY .

    conv_container_fs(
        EXPORTING iv_field      = is_data-properties-tree_layout
        IMPORTING es_structure  = ls_tree_layout ) .

*======================================================================
*   prepare expanded nodes, fieldcatalog, subtotals and coordinates
*======================================================================
    lr_outtab_table = lr_alvtree-&gt;get_outtab( ) .
    lr_alvtree-&gt;get_expanded_nodes( CHANGING ct_expanded_nodes = lt_expanded_nodes
                                    EXCEPTIONS OTHERS = 0 ) .
    SORT lt_expanded_nodes .

    lr_alvtree-&gt;get_frontend_fieldcatalog( IMPORTING et_fieldcatalog = lt_fcat_lvc ) .
    DELETE lt_fcat_lvc WHERE tech   IS NOT INITIAL .
    DELETE lt_fcat_lvc WHERE no_out IS NOT INITIAL .
    SORT lt_fcat_lvc BY col_pos ASCENDING .

    ASSIGN lr_outtab_table-&gt;* TO &lt;outtab_table&gt; .
    CREATE DATA lr_outtab_line LIKE LINE OF &lt;outtab_table&gt; .
    ASSIGN lr_outtab_line-&gt;*  TO &lt;outtab_line&gt; .

    compose_process_tree_recsub(
        EXPORTING iv_parent_node_key    = lr_alvtree-&gt;c_virtual_root_node
                  it_fcat_lvc           = lt_fcat_lvc
         CHANGING cr_alvtree            = lr_alvtree
                  cs_outtab_line        = &lt;outtab_line&gt;
                  ct_subtotals          = lt_subtotals ) .

    CASE is_data-properties-tb_direction .
      WHEN c_tb_direction-up2down .
        cs_legacy-tb_area_top  = cs_parent_legacy-tb_area_prew_top  +
                                 cs_parent_legacy-tb_area_prew_rows .
        cs_legacy-tb_area_left = cs_parent_legacy-tb_area_prew_left .

      WHEN c_tb_direction-left2right .
        cs_legacy-tb_area_left = cs_parent_legacy-tb_area_prew_left +
                                 cs_parent_legacy-tb_area_prew_columns .
        cs_legacy-tb_area_top  = cs_parent_legacy-tb_area_prew_top  .
    ENDCASE .

    cs_legacy-tb_area_rows     = 0 .
    cs_legacy-tb_area_columns  = 0 .

*======================================================================
*   prepare patterns (get a content of pattern area)
*======================================================================
    ls_patterns =
    r_exceltemplate-&gt;get_pattern( iv_sheetname = cs_parent_legacy-tb_sheetname
                                  iv_id = is_data-properties-id ) .
*   lr_alvtree-&gt;get_hierarchy_header_width( IMPORTING e_width = lv_hierarchy_column_width ) .
    cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .

    CASE ls_tree_layout-rotate .
      WHEN space  .
*  A-PATTERNS
        lv_times_row  = ls_patterns-rows .

        DO lv_times_row TIMES . &quot; --&gt;&gt; loop at ROWS
          lv_index_row = sy-index .

          CLEAR ls_patterns_a .
          ls_patterns_a-id      = lv_index_row - 1 .
          ls_patterns_a-left    = ls_patterns-left .
          ls_patterns_a-top     = ls_patterns-top + lv_index_row - 1 .
          ls_patterns_a-rows    = 1 .

          lv_x = ls_patterns-left .
          lv_y = ls_patterns-top + lv_index_row - 1 .

          CLEAR ls_cells .
          CLEAR ls_colprop .
          CLEAR ls_rowprop .

          READ TABLE ls_patterns-t_rowprop INTO ls_rowprop WITH TABLE KEY y = lv_y .
          IF sy-subrc EQ 0 .
            INSERT ls_rowprop INTO TABLE ls_patterns_a-t_rowprop .
          ENDIF .

          CLEAR ls_mergecells .
          READ TABLE ls_patterns-t_mergecells INTO ls_mergecells
            WITH KEY top  = lv_y  left = lv_x .
          IF sy-subrc EQ 0 .
            INSERT ls_mergecells INTO TABLE ls_patterns_a-t_mergecells .
          ELSE  .
            ls_mergecells-columns = 1 .
          ENDIF .

          DO ls_mergecells-columns TIMES .
            IF sy-index GT 1 .
              ADD 1 TO lv_x .
            ENDIF .

            READ TABLE ls_patterns-t_cells INTO ls_cells WITH KEY y = lv_y  x = lv_x BINARY SEARCH .
            IF sy-subrc NE 0 .
              ls_cells-y = lv_y .
              ls_cells-x = lv_x .
            ENDIF .
            INSERT ls_cells INTO TABLE ls_patterns_a-t_cells .

            CLEAR ls_colprop .
            READ TABLE ls_patterns-t_colprop INTO ls_colprop WITH KEY x = lv_x BINARY SEARCH .
            ls_colprop-x = lv_x .

            IF ls_tree_layout-col_othr_width EQ 0
            OR lv_hierarchy_column_width EQ 0 .
              IF sy-subrc EQ 0 .
                INSERT ls_colprop INTO TABLE ls_patterns_a-t_colprop .
              ENDIF .
            ELSE .
              ls_colprop-customwidth   = &apos;1&apos; .
              ls_colprop-width  = lv_i = ls_tree_layout-col_othr_width * lv_hierarchy_column_width .
              CONDENSE ls_colprop-width NO-GAPS .
              INSERT ls_colprop INTO TABLE ls_patterns_a-t_colprop .
            ENDIF .
          ENDDO .

          ls_patterns_a-columns = ls_mergecells-columns .
          APPEND ls_patterns_a TO lt_patterns_a .
        ENDDO .

*  B-PATTERNS
        lv_times_row  = ls_patterns-rows .
        lv_times_col  = LINES( lt_fcat_lvc ) .

        DO lv_times_row TIMES . &quot; --&gt;&gt; loop at ROWS
          lv_index_row = sy-index .
          lv_y = ls_patterns-top  + lv_index_row - 1 .

          CLEAR ls_patterns_b .
          ls_patterns_b-id      = lv_index_row - 1 .
          ls_patterns_b-left    = ls_patterns-left + ls_patterns_a-columns .
          ls_patterns_b-top     = ls_patterns-top  + lv_index_row - 1 .
          ls_patterns_b-rows    = 1 .

          CLEAR ls_cells .
          CLEAR ls_colprop .
          CLEAR ls_rowprop .

          READ TABLE ls_patterns-t_rowprop INTO ls_rowprop WITH TABLE KEY y = lv_y .
          IF sy-subrc EQ 0 .
            INSERT ls_rowprop INTO TABLE ls_patterns_b-t_rowprop .
          ENDIF .

          lv_index_col  = 0 .
          lv_index_rel  = 0 .
          lv_index_rel2 = ls_patterns_a-columns - 1  .
          lv_x          = ls_patterns-left + lv_index_rel2 .

          DO lv_times_col TIMES . &quot; --&gt;&gt; loop at COLUMNS
            ADD 1 TO lv_index_col .
            ADD 1 TO lv_index_rel .
            ADD 1 TO lv_index_rel2 .
            ADD 1 TO lv_x .

            READ TABLE lt_fcat_lvc ASSIGNING &lt;fcat_lvc&gt; INDEX lv_index_col .
            CHECK sy-subrc EQ 0 .
            &lt;fcat_lvc&gt;-indx_field = lv_index_rel .

            CLEAR ls_mergecells .
            READ TABLE ls_patterns-t_mergecells INTO ls_mergecells
              WITH KEY top  = lv_y  left = lv_x .
            IF sy-subrc EQ 0 .
              INSERT ls_mergecells INTO TABLE ls_patterns_b-t_mergecells .
            ELSE  .
              ls_mergecells-columns = 1 .
            ENDIF .

            DO ls_mergecells-columns TIMES .
              lv_index = sy-index .
              IF lv_index GT 1 .
                ADD 1 TO lv_index_rel .
                ADD 1 TO lv_index_rel2 .
                ADD 1 TO lv_x .
              ENDIF .

              IF lv_index_rel2 LT ls_patterns-columns .
                CLEAR ls_cells .
                READ TABLE ls_patterns-t_cells INTO ls_cells WITH KEY y = lv_y  x = lv_x BINARY SEARCH .
              ENDIF .
              ls_cells-y = lv_y .
              ls_cells-x = lv_x .
              INSERT ls_cells INTO TABLE ls_patterns_b-t_cells .

              IF lv_index_rel2 LT ls_patterns-columns .
                CLEAR ls_colprop .
                READ TABLE ls_patterns-t_colprop INTO ls_colprop WITH KEY x = lv_x BINARY SEARCH .
                lv_subrc = sy-subrc .
              ENDIF .
              IF lv_index GT 1
              OR ls_tree_layout-col_othr_width EQ 0
              OR &lt;fcat_lvc&gt;-outputlen EQ 0 .
                IF lv_subrc EQ 0 .
                  ls_colprop-x    = lv_x .
                  INSERT ls_colprop INTO TABLE ls_patterns_b-t_colprop .
                ENDIF .
              ELSE .
                ls_colprop-x      = lv_x .
                ls_colprop-customwidth   = &apos;1&apos; .
                ls_colprop-width  = lv_i = ls_tree_layout-col_othr_width * &lt;fcat_lvc&gt;-outputlen .
                CONDENSE ls_colprop-width NO-GAPS .
                INSERT ls_colprop INTO TABLE ls_patterns_b-t_colprop .
              ENDIF .
            ENDDO .

            ADD ls_mergecells-columns TO ls_patterns_b-columns .
          ENDDO .

          APPEND ls_patterns_b TO lt_patterns_b .
        ENDDO .

      WHEN OTHERS . &quot; == R O T A T E = T R E E =====================================

*  A-PATTERNS
        lv_times_row  = ls_patterns-columns .

        DO lv_times_row TIMES . &quot; --&gt;&gt; loop at ROWS
          lv_index_row = sy-index .

          CLEAR ls_patterns_a .
          ls_patterns_a-id      = lv_index_row - 1 .
          ls_patterns_a-left    = ls_patterns-left + lv_index_row - 1 .
          ls_patterns_a-top     = ls_patterns-top .
          ls_patterns_a-columns = 1 .

          lv_x = ls_patterns-left + lv_index_row - 1 .
          lv_y = ls_patterns-top .

          CLEAR ls_cells .
          CLEAR ls_colprop .
          CLEAR ls_rowprop .

          READ TABLE ls_patterns-t_colprop INTO ls_colprop WITH KEY x = lv_x BINARY SEARCH .
          IF sy-subrc EQ 0 .
            INSERT ls_colprop INTO TABLE ls_patterns_a-t_colprop .
          ENDIF .

          CLEAR ls_mergecells .
          READ TABLE ls_patterns-t_mergecells INTO ls_mergecells
            WITH KEY top  = lv_y  left = lv_x .
          IF sy-subrc EQ 0 .
            INSERT ls_mergecells INTO TABLE ls_patterns_a-t_mergecells .
          ELSE  .
            ls_mergecells-rows = 1 .
          ENDIF .

          DO ls_mergecells-rows TIMES .
            IF sy-index GT 1 .
              ADD 1 TO lv_y .
            ENDIF .

            READ TABLE ls_patterns-t_cells INTO ls_cells WITH KEY y = lv_y  x = lv_x BINARY SEARCH .
            IF sy-subrc NE 0 .
              ls_cells-y = lv_y .
              ls_cells-x = lv_x .
            ENDIF .
            INSERT ls_cells INTO TABLE ls_patterns_a-t_cells .

            CLEAR ls_rowprop .
            READ TABLE ls_patterns-t_rowprop INTO ls_rowprop WITH TABLE KEY y = lv_y .
            ls_rowprop-y = lv_y .

            IF ls_tree_layout-col_othr_width EQ 0
            OR lv_hierarchy_column_width EQ 0 .
              IF sy-subrc EQ 0 .
                INSERT ls_rowprop INTO TABLE ls_patterns_a-t_rowprop .
              ENDIF .
            ELSE .
              ls_rowprop-customheight = &apos;1&apos; .
              ls_rowprop-ht  = lv_i = ls_tree_layout-col_othr_width * lv_hierarchy_column_width .
              CONDENSE ls_rowprop-ht NO-GAPS .
              INSERT ls_rowprop INTO TABLE ls_patterns_a-t_rowprop .
            ENDIF .
          ENDDO .

          ls_patterns_a-rows = ls_mergecells-rows .
          APPEND ls_patterns_a TO lt_patterns_a .
        ENDDO .

*  B-PATTERNS
        lv_times_row  = ls_patterns-columns .
        lv_times_col  = LINES( lt_fcat_lvc ) .

        DO lv_times_row TIMES . &quot; --&gt;&gt; loop at ROWS
          lv_index_row = sy-index .
          lv_x = ls_patterns-left + lv_index_row - 1 .

          CLEAR ls_patterns_b .
          ls_patterns_b-id      = lv_index_row - 1 .
          ls_patterns_b-left    = ls_patterns-left + lv_index_row - 1 .
          ls_patterns_b-top     = ls_patterns-top  + ls_patterns_a-rows .
          ls_patterns_b-columns = 1 .

          CLEAR ls_cells .
          CLEAR ls_colprop .
          CLEAR ls_rowprop .

          READ TABLE ls_patterns-t_colprop INTO ls_colprop WITH KEY x = lv_x BINARY SEARCH .
          IF sy-subrc EQ 0 .
            INSERT ls_colprop INTO TABLE ls_patterns_b-t_colprop .
          ENDIF .

          lv_index_col  = 0 .
          lv_index_rel  = 0 .
          lv_index_rel2 = ls_patterns_a-rows - 1  .
          lv_y          = ls_patterns-top + lv_index_rel2 .

          DO lv_times_col TIMES . &quot; --&gt;&gt; loop at COLUMNS
            ADD 1 TO lv_index_col .
            ADD 1 TO lv_index_rel .
            ADD 1 TO lv_index_rel2 .
            ADD 1 TO lv_y .

            READ TABLE lt_fcat_lvc ASSIGNING &lt;fcat_lvc&gt; INDEX lv_index_col .
            CHECK sy-subrc EQ 0 .
            &lt;fcat_lvc&gt;-indx_field = lv_index_rel .

            CLEAR ls_mergecells .
            READ TABLE ls_patterns-t_mergecells INTO ls_mergecells
              WITH KEY top  = lv_y  left = lv_x .
            IF sy-subrc EQ 0 .
              INSERT ls_mergecells INTO TABLE ls_patterns_b-t_mergecells .
            ELSE  .
              ls_mergecells-rows = 1 .
            ENDIF .

            DO ls_mergecells-rows TIMES .
              lv_index = sy-index .
              IF lv_index GT 1 .
                ADD 1 TO lv_index_rel .
                ADD 1 TO lv_index_rel2 .
                ADD 1 TO lv_y .
              ENDIF .

              IF lv_index_rel2 LT ls_patterns-rows .
                CLEAR ls_cells .
                READ TABLE ls_patterns-t_cells INTO ls_cells WITH KEY y = lv_y  x = lv_x BINARY SEARCH .
              ENDIF .
              ls_cells-y = lv_y .
              ls_cells-x = lv_x .
              INSERT ls_cells INTO TABLE ls_patterns_b-t_cells .

              IF lv_index_rel2 LT ls_patterns-rows .
                CLEAR ls_rowprop .
                READ TABLE ls_patterns-t_rowprop INTO ls_rowprop WITH TABLE KEY y = lv_y .
                lv_subrc = sy-subrc .
              ENDIF .

              IF lv_index GT 1
              OR ls_tree_layout-col_othr_width EQ 0
              OR &lt;fcat_lvc&gt;-outputlen EQ 0 .
                IF lv_subrc EQ 0 .
                  ls_rowprop-y = lv_y .
                  INSERT ls_rowprop INTO TABLE ls_patterns_b-t_rowprop .
                ENDIF .
              ELSE .
                ls_rowprop-y   = lv_y .
                ls_rowprop-customheight = &apos;1&apos; .
                ls_rowprop-ht  = lv_i = ls_tree_layout-col_othr_width * &lt;fcat_lvc&gt;-outputlen .
                CONDENSE ls_rowprop-ht NO-GAPS .
                INSERT ls_rowprop INTO TABLE ls_patterns_b-t_rowprop .
              ENDIF .
            ENDDO .

            ADD ls_mergecells-rows TO ls_patterns_b-rows .
          ENDDO .

          APPEND ls_patterns_b TO lt_patterns_b .
        ENDDO .
    ENDCASE .


*======================================================================
*   header
*======================================================================
    lv_top  = cs_legacy-tb_area_top  - 1 .
    lv_left = cs_legacy-tb_area_left - 1 .

    IF ls_tree_layout-head IS NOT INITIAL .
      READ TABLE lt_patterns_a INTO ls_patterns_a WITH KEY id = 0 .
      READ TABLE lt_patterns_b INTO ls_patterns_b WITH KEY id = 0 .

      CASE ls_tree_layout-rotate .
        WHEN space  . ADD 1 TO lv_top  .
        WHEN OTHERS . ADD 1 TO lv_left .
      ENDCASE .

*     hierarchy column (BEFORE others)
      IF  ls_tree_layout-col_hier IS NOT INITIAL
      AND ls_tree_layout-col_hier_after IS INITIAL .
        r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns_a ) .

        CASE ls_tree_layout-rotate .
          WHEN space  .   ADD 1 TO lv_left .
          WHEN OTHERS .   ADD 1 TO lv_top  .
        ENDCASE .

*       lv_value_top    = ls_patterns_a-top  .
*       lv_value_left   = ls_patterns_a-left .
*
*       r_excelruntime-&gt;begin_field(
*           EXPORTING iv_top    = lv_value_top
*                     iv_left   = lv_value_left
*                     iv_value  = lv_value ) .

        r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r = space
                                                    iv_printtitles_c = space
                                           CHANGING cv_top  = lv_top
                                                    cv_left = lv_left ) .
        CASE ls_tree_layout-rotate .
          WHEN space  . lv_left = lv_left + ls_patterns_a-columns - 1 .
          WHEN OTHERS . lv_top  = lv_top  + ls_patterns_a-rows    - 1 .
        ENDCASE .
      ENDIF .

*     other columns
      IF ls_tree_layout-col_othr IS NOT INITIAL
      AND lt_fcat_lvc[] IS NOT INITIAL .
        r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns_b ) .

        LOOP AT lt_fcat_lvc ASSIGNING &lt;fcat_lvc&gt; .
          CASE ls_tree_layout-rotate .
            WHEN space  .
              lv_value_top  = ls_patterns_b-top  .
              lv_value_left = ls_patterns_b-left + &lt;fcat_lvc&gt;-indx_field - 1 .
            WHEN OTHERS .
              lv_value_left = ls_patterns_b-left .
              lv_value_top  = ls_patterns_b-top  + &lt;fcat_lvc&gt;-indx_field - 1 .
          ENDCASE .

          IF     &lt;fcat_lvc&gt;-scrtext_l IS NOT INITIAL .
            lv_value = &lt;fcat_lvc&gt;-scrtext_l .
          ELSEIF &lt;fcat_lvc&gt;-scrtext_m IS NOT INITIAL .
            lv_value = &lt;fcat_lvc&gt;-scrtext_m .
          ELSEIF &lt;fcat_lvc&gt;-scrtext_s IS NOT INITIAL .
            lv_value = &lt;fcat_lvc&gt;-scrtext_s .
          ELSEIF &lt;fcat_lvc&gt;-coltext   IS NOT INITIAL .
            lv_value = &lt;fcat_lvc&gt;-coltext .
          ELSEIF &lt;fcat_lvc&gt;-seltext   IS NOT INITIAL .
            lv_value = &lt;fcat_lvc&gt;-seltext .
          ELSE .
            lv_value = &lt;fcat_lvc&gt;-fieldname .
          ENDIF .
          r_excelruntime-&gt;begin_field( EXPORTING iv_top    = lv_value_top
                                                 iv_left   = lv_value_left
                                                 iv_value  = lv_value ) .
        ENDLOOP .

        CASE ls_tree_layout-rotate .
          WHEN space  .   ADD 1 TO lv_left .
          WHEN OTHERS .   ADD 1 TO lv_top  .
        ENDCASE .
        r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r = space
                                                    iv_printtitles_c = space
                                           CHANGING cv_top  = lv_top
                                                    cv_left = lv_left  ) .
        CASE ls_tree_layout-rotate .
          WHEN space  . lv_left = lv_left + ls_patterns_b-columns - 1 .
          WHEN OTHERS . lv_top  = lv_top  + ls_patterns_b-rows    - 1 .
        ENDCASE .
      ENDIF .

*     hierarchy column (AFTER others)
      IF  ls_tree_layout-col_hier IS NOT INITIAL
      AND ls_tree_layout-col_hier_after IS NOT INITIAL .
        r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns_a ) .

        CASE ls_tree_layout-rotate .
          WHEN space  .   ADD 1 TO lv_left .
          WHEN OTHERS .   ADD 1 TO lv_top  .
        ENDCASE .
        r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r = space
                                                    iv_printtitles_c = space
                                           CHANGING cv_top  = lv_top
                                                    cv_left = lv_left ) .
        CASE ls_tree_layout-rotate .
          WHEN space  . lv_left = lv_left + ls_patterns_a-columns - 1 .
          WHEN OTHERS . lv_top  = lv_top  + ls_patterns_a-rows    - 1 .
        ENDCASE .
      ENDIF .
    ENDIF .

*======================================================================
*   positions
*======================================================================
    compose_process_tree_recurs(
        EXPORTING iv_parent_node_key    = lr_alvtree-&gt;c_virtual_root_node
                  iv_parent_level       = 0
                  is_parent_patterns_a  = ls_patterns_a
                  is_parent_patterns_b  = ls_patterns_b
                  it_patterns_a         = lt_patterns_a
                  it_patterns_b         = lt_patterns_b
                  it_fcat_lvc           = lt_fcat_lvc
                  is_tree_layout        = ls_tree_layout
                  it_expanded_nodes     = lt_expanded_nodes
                  it_subtotals          = lt_subtotals
         CHANGING cr_alvtree            = lr_alvtree
                  cs_outtab_line        = &lt;outtab_line&gt;
                  cs_legacy             = cs_legacy
                  cv_top                = lv_top
                  cv_left               = lv_left
                  cv_firstrow           = lv_firstrow ) .

    cs_legacy-tb_area_rows    = lv_top  - cs_legacy-tb_area_top  + 1 .
    cs_legacy-tb_area_columns = lv_left - cs_legacy-tb_area_left + 1 .

    IF cs_legacy-tb_area_rows LT 0 .
      cs_legacy-tb_area_rows = 0 .
    ENDIF .
    IF cs_legacy-tb_area_columns LT 0 .
      cs_legacy-tb_area_columns = 0 .
    ENDIF .

    cs_parent_legacy-tb_area_prew_top     = cs_legacy-tb_area_prew_top      = cs_legacy-tb_area_top .
    cs_parent_legacy-tb_area_prew_rows    = cs_legacy-tb_area_prew_rows     = cs_legacy-tb_area_rows .
    cs_parent_legacy-tb_area_prew_left    = cs_legacy-tb_area_prew_left     = cs_legacy-tb_area_left .
    cs_parent_legacy-tb_area_prew_columns = cs_legacy-tb_area_prew_columns  = cs_legacy-tb_area_columns .                .

  ENDMETHOD .                    &quot;compose_process_tree
  METHOD compose_process_tree_recurs .

    DATA:
      lt_nodes              TYPE lvc_t_nkey ,
      lv_node_key           TYPE lvc_nkey ,
      lv_node_text          TYPE lvc_value ,
      ls_node_layout        TYPE lvc_s_layn ,
      lv_level              TYPE i ,
      lv_rows               TYPE i ,
      lv_columns            TYPE i ,
      lv_begin_top          TYPE i ,
      lv_begin_left         TYPE i ,
      lv_pattern_top        TYPE i ,
      lv_pattern_left       TYPE i ,
      lv_value_top          TYPE i ,
      lv_value_left         TYPE i ,
      lv_offset             TYPE i ,
      ls_patterns_a         TYPE lcl_excel=&gt;ty_s_patterns ,
      ls_patterns_b         TYPE lcl_excel=&gt;ty_s_patterns ,
      lv_rowgroup_level     TYPE i ,
      lv_colgroup_level     TYPE i ,
      lv_collapsed          TYPE flag ,
      lv_value(30000)       TYPE c ,
      lv_formula            TYPE flag ,
      ls_fcat_lvc           TYPE lvc_s_fcat ,
      lr_tdescr             TYPE REF TO cl_abap_typedescr ,
      ls_subtotals          TYPE ty_s_tree_subtotals ,
      ls_drawings           TYPE lcl_excel=&gt;ty_s_drawings_tmp .
    FIELD-SYMBOLS:
      &lt;value&gt;               TYPE ANY .

    lv_level = iv_parent_level + 1 .

*   prepare patterns
    READ TABLE it_patterns_a INTO ls_patterns_a WITH KEY id = lv_level .
    IF sy-subrc NE 0 .
      ls_patterns_a = is_parent_patterns_a .
    ENDIF .
    READ TABLE it_patterns_b INTO ls_patterns_b WITH KEY id = lv_level .
    IF sy-subrc NE 0 .
      ls_patterns_b = is_parent_patterns_b .
    ENDIF .

    IF cv_firstrow EQ abap_off .
      CASE is_tree_layout-rotate .
        WHEN space  .   CLEAR: ls_patterns_a-t_colprop[], ls_patterns_b-t_colprop[] .
        WHEN OTHERS .   CLEAR: ls_patterns_a-t_rowprop[], ls_patterns_b-t_rowprop[] .
      ENDCASE .
    ENDIF .

*   get current level nodes
    cr_alvtree-&gt;get_children(
        EXPORTING i_node_key  = iv_parent_node_key
        IMPORTING et_children = lt_nodes ) .

*   process nodes
    LOOP AT lt_nodes INTO lv_node_key .

      cr_alvtree-&gt;get_outtab_line(
          EXPORTING i_node_key      = lv_node_key
          IMPORTING e_outtab_line   = cs_outtab_line
                    e_node_text     = lv_node_text
                    es_node_layout  = ls_node_layout ) .

      CONCATENATE v_text-t198     &quot; --&gt;&gt; Building of tree, node:
                  lv_node_text
             INTO lv_value SEPARATED BY space .

      progressbar( iv_text = lv_value ) .

      CHECK ls_node_layout-hidden IS INITIAL .  &quot; by PH-WID

      CASE is_tree_layout-rotate .
        WHEN space  .
          ADD 1 TO cv_top  .
          cv_left = cs_legacy-tb_area_left - 1 .
          lv_begin_top  = cv_top  .
          lv_begin_left = cs_legacy-tb_area_left .
        WHEN OTHERS .
          cv_top  = cs_legacy-tb_area_top  - 1 .
          ADD 1 TO cv_left .
          lv_begin_top  = cs_legacy-tb_area_top  .
          lv_begin_left = cv_left .
      ENDCASE .

*     hierarchy column (BEFORE others)
      IF  is_tree_layout-col_hier IS NOT INITIAL
      AND is_tree_layout-col_hier_after IS INITIAL .
        r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns_a ) .

        CLEAR lv_value .
        IF lv_level GT 1 .
          lv_offset = ( lv_level - 1 ) * is_tree_layout-col_hier_shift .
          lv_value+lv_offset = lv_node_text .
        ELSE .
          lv_value = lv_node_text .
        ENDIF .

        lv_value_top    = ls_patterns_a-top  .
        lv_value_left   = ls_patterns_a-left .

        r_excelruntime-&gt;begin_field(
            EXPORTING iv_top    = lv_value_top
                      iv_left   = lv_value_left
                      iv_value  = lv_value ) .

        CASE is_tree_layout-rotate .
          WHEN space  .   ADD 1 TO cv_left .
          WHEN OTHERS .   ADD 1 TO cv_top .
        ENDCASE .
        r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r = space
                                                    iv_printtitles_c = space
                                          CHANGING  cv_top    = cv_top
                                                    cv_left   = cv_left ) .
        CASE is_tree_layout-rotate .
          WHEN space  . cv_left = cv_left + ls_patterns_a-columns - 1 .
          WHEN OTHERS . cv_top  = cv_top  + ls_patterns_a-rows    - 1 .
        ENDCASE .
      ENDIF .

*     other columns
      CLEAR lv_pattern_top .
      CLEAR lv_pattern_left .
      IF  is_tree_layout-col_othr IS NOT INITIAL
      AND it_fcat_lvc[] IS NOT INITIAL .
        r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns_b ) .

        LOOP AT it_fcat_lvc INTO ls_fcat_lvc .
          CASE is_tree_layout-rotate .
            WHEN space  .
              lv_value_top  = ls_patterns_b-top  .
              lv_value_left = ls_patterns_b-left + ls_fcat_lvc-indx_field - 1 .
            WHEN OTHERS .
              lv_value_left = ls_patterns_b-left .
              lv_value_top  = ls_patterns_b-top  + ls_fcat_lvc-indx_field - 1 .
          ENDCASE .

          ASSIGN COMPONENT ls_fcat_lvc-fieldname OF STRUCTURE cs_outtab_line TO &lt;value&gt; .
          CHECK &lt;value&gt; IS ASSIGNED .

          IF ls_fcat_lvc-icon IS INITIAL .
            READ TABLE it_subtotals INTO ls_subtotals
            WITH TABLE KEY nodekey   = lv_node_key
                           fieldname = ls_fcat_lvc-fieldname .
            IF sy-subrc EQ 0 .
              &lt;value&gt; = ls_subtotals-fieldvalue .
            ENDIF .

            lr_tdescr = cl_abap_datadescr=&gt;describe_by_data( p_data = &lt;value&gt; ) .

            CLEAR lv_value .
            cl_gui_alv_grid=&gt;cell_display(
                EXPORTING is_data     = cs_outtab_line
                          i_int_value = &lt;value&gt;
                IMPORTING e_ext_value = lv_value
                CHANGING  cs_fieldcat = ls_fcat_lvc ) .

            CASE lr_tdescr-&gt;type_kind .
              WHEN cl_abap_datadescr=&gt;typekind_packed
                OR cl_abap_datadescr=&gt;typekind_int .

                CASE v_dcpfm .
                  WHEN space .TRANSLATE lv_value USING &apos;. ,.&apos;.  &quot;1.234.567,89
                  WHEN &apos;X&apos; .  TRANSLATE lv_value USING &apos;, &apos;.    &quot;1,234,567.89
                  WHEN &apos;Y&apos; .  TRANSLATE lv_value USING &apos;,.&apos;.    &quot;1 234 567,89
                ENDCASE .

                CONDENSE lv_value NO-GAPS .

                IF &lt;value&gt; LT 0 .
                  REPLACE FIRST OCCURRENCE OF &apos;-&apos; IN lv_value WITH space .
                  CONCATENATE &apos;-&apos; lv_value INTO lv_value .
                ENDIF .

              WHEN OTHERS .
                CHECK lv_value IS NOT INITIAL .
                SHIFT lv_value LEFT DELETING LEADING space .
            ENDCASE .

            DO 1 TIMES .
              CLEAR lv_formula .
              CHECK is_tree_layout-allow_formulas IS NOT INITIAL .
              CHECK lv_value    IS NOT INITIAL .
              CHECK lv_value(1) EQ &apos;=&apos; .

              lv_formula = abap_on .
            ENDDO .

            r_excelruntime-&gt;begin_field(
                EXPORTING iv_top      = lv_value_top
                          iv_left     = lv_value_left
                          iv_value    = lv_value
                          iv_formula  = lv_formula ) .

          ELSEIF &lt;value&gt;(1) EQ &apos;@&apos;.
            CLEAR ls_drawings .
            ls_drawings-media_rawdata = get_icon_rawdata( &lt;value&gt; ) .
            CHECK ls_drawings-media_rawdata IS NOT INITIAL .
            ls_drawings-drawing_type = lcl_excel=&gt;c_drawing_type-bitmap .

            ls_drawings-top      = lv_value_top .
            ls_drawings-left     = lv_value_left .
            ls_drawings-rows     = 1 .
            ls_drawings-columns  = 1 .
            r_excelruntime-&gt;begin_drawing( is_drawings_tmp = ls_drawings ) .
          ENDIF .

        ENDLOOP .

        CASE is_tree_layout-rotate .
          WHEN space  .   ADD 1 TO cv_left .
          WHEN OTHERS .   ADD 1 TO cv_top  .
        ENDCASE .
        r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r = space
                                                    iv_printtitles_c = space
                                           CHANGING cv_top      = cv_top
                                                    cv_left     = cv_left ) .
        CASE is_tree_layout-rotate .
          WHEN space  . cv_left = cv_left + ls_patterns_b-columns - 1 .
          WHEN OTHERS . cv_top  = cv_top  + ls_patterns_b-rows    - 1 .
        ENDCASE .
      ENDIF .

*     hierarchy column (AFTER others)
      IF  is_tree_layout-col_hier IS NOT INITIAL
      AND is_tree_layout-col_hier_after IS NOT INITIAL .
        r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns_a ) .

        CLEAR lv_value .
        IF lv_level GT 1 .
          lv_offset = ( lv_level - 1 ) * is_tree_layout-col_hier_shift .
          lv_value+lv_offset = lv_node_text .
        ELSE .
          lv_value = lv_node_text .
        ENDIF .

        lv_value_top    = ls_patterns_a-top  .
        lv_value_left   = ls_patterns_a-left .

        r_excelruntime-&gt;begin_field(
            EXPORTING iv_top    = lv_value_top
                      iv_left   = lv_value_left
                      iv_value  = lv_value ) .

        CASE is_tree_layout-rotate .
          WHEN space  .   ADD 1 TO cv_left .
          WHEN OTHERS .   ADD 1 TO cv_top .
        ENDCASE .

        r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r = space
                                                    iv_printtitles_c = space
                                          CHANGING  cv_top    = cv_top
                                                    cv_left   = cv_left ) .
        CASE is_tree_layout-rotate .
          WHEN space  . cv_left = cv_left + ls_patterns_a-columns - 1 .
          WHEN OTHERS . cv_top  = cv_top  + ls_patterns_a-rows    - 1 .
        ENDCASE .
      ENDIF .

*----------------------------------------------
      IF cv_firstrow EQ abap_on .
        cv_firstrow = abap_off .
      ENDIF .

      CASE is_tree_layout-rotate .
        WHEN space  .
          IF cv_left LT cs_legacy-tb_area_left .
            cv_left = cs_legacy-tb_area_left .
          ENDIF .
        WHEN OTHERS .
          IF cv_top LT cs_legacy-tb_area_top .
            cv_top = cs_legacy-tb_area_top .
          ENDIF .
      ENDCASE .

*----------------------------------------------

*     recursive process children nodes
      compose_process_tree_recurs(
          EXPORTING iv_parent_node_key    = lv_node_key
                    iv_parent_level       = lv_level
                    is_parent_patterns_a  = ls_patterns_a
                    is_parent_patterns_b  = ls_patterns_b
                    it_patterns_a         = it_patterns_a
                    it_patterns_b         = it_patterns_b
                    it_fcat_lvc           = it_fcat_lvc
                    is_tree_layout        = is_tree_layout
                    it_expanded_nodes     = it_expanded_nodes
                    it_subtotals          = it_subtotals
           CHANGING cr_alvtree            = cr_alvtree
                    cs_outtab_line        = cs_outtab_line
                    cs_legacy             = cs_legacy
                    cv_top                = cv_top
                    cv_left               = cv_left
                    cv_firstrow           = cv_firstrow ) .

*     make structure (group rows/columns)
      DO 1 TIMES .
        CHECK is_tree_layout-stru IS NOT INITIAL .
        CHECK lv_level LT 8 . &quot; --&gt;&gt; Max Number of Outline Levels Excel can display

        lv_rows     = cv_top  - lv_begin_top  .
        lv_columns  = cv_left - lv_begin_left .

        CASE is_tree_layout-rotate .
          WHEN space  .
            CHECK lv_rows GE 1 .
            ADD 1 TO lv_begin_top .
            lv_rowgroup_level = lv_level .
          WHEN OTHERS .
            CHECK lv_columns GE 1 .
            ADD 1 TO lv_begin_left .
            lv_colgroup_level = lv_level .
        ENDCASE .

        CASE is_tree_layout-stru_exp_coll .
          WHEN c_stru_exp_coll-dynamic   .
            READ TABLE it_expanded_nodes TRANSPORTING NO FIELDS
            WITH KEY table_line = lv_node_key BINARY SEARCH .
            CASE sy-subrc .
              WHEN 0 .      lv_collapsed = abap_off .
              WHEN OTHERS . lv_collapsed = abap_on .
            ENDCASE .
          WHEN c_stru_exp_coll-collapsed .  lv_collapsed = abap_on  .
          WHEN c_stru_exp_coll-expanded  .  lv_collapsed = abap_off .
          WHEN OTHERS . EXIT .
        ENDCASE .

        r_excelruntime-&gt;finalize_folder(
           EXPORTING iv_left             = lv_begin_left
                     iv_top              = lv_begin_top
                     iv_rows             = lv_rows
                     iv_columns          = lv_columns
                     iv_rowgroup_level   = lv_rowgroup_level
                     iv_colgroup_level   = lv_colgroup_level
                     iv_rowgroup_clp     = lv_collapsed
                     iv_colgroup_clp     = lv_collapsed ) .
      ENDDO .
    ENDLOOP .

  ENDMETHOD .                    &quot;compose_process_tree_recurs
  METHOD compose_process_tree_recsub .

    DATA:
      lv_node_key           TYPE lvc_nkey ,
      lt_nodes              TYPE lvc_t_nkey ,
      lv_count              TYPE i ,
      l_dref_calc_tab       TYPE REF TO data ,
      l_dref_calc_wa        TYPE REF TO data ,
      l_dref_wa             TYPE REF TO data ,
      ls_subtotals          TYPE ty_s_tree_subtotals .
    FIELD-SYMBOLS:
      &lt;outtab_line&gt;         TYPE ANY ,
      &lt;calc_line&gt;           TYPE ANY ,
      &lt;calc_tab&gt;            TYPE STANDARD TABLE ,
      &lt;fcat_lvc&gt;            TYPE lvc_s_fcat ,
      &lt;f1&gt;                  TYPE ANY ,
      &lt;f2&gt;                  TYPE ANY ,
      &lt;f3&gt;                  TYPE ANY ,
      &lt;f4&gt;                  TYPE ANY .

*   assign local copy of initial &lt;tab1&gt; to &lt;calc_tab&gt;.
    CREATE DATA l_dref_calc_tab LIKE TABLE OF cs_outtab_line .
    ASSIGN l_dref_calc_tab-&gt;* TO &lt;calc_tab&gt; .
*   assign local copy of initial line of &lt;tab1&gt; to &lt;calc_wa&gt;.
    CREATE DATA l_dref_calc_wa LIKE cs_outtab_line .
    ASSIGN l_dref_calc_wa-&gt;* TO &lt;calc_line&gt; .
*   assign local copy of initial line of &lt;tab1&gt; to &lt;wa&gt;.
    CREATE DATA l_dref_wa LIKE cs_outtab_line .
    ASSIGN l_dref_wa-&gt;* TO &lt;outtab_line&gt; .


*   get current level nodes
    cr_alvtree-&gt;get_children(
        EXPORTING i_node_key  = iv_parent_node_key
        IMPORTING et_children = lt_nodes ) .

    IF lt_nodes IS INITIAL .
      ev_leaf = abap_on .

      cr_alvtree-&gt;get_outtab_line(
          EXPORTING i_node_key    = iv_parent_node_key
          IMPORTING e_outtab_line = cs_outtab_line ) .
      EXIT .

    ELSE .
      CLEAR ev_leaf .

*     process nodes
      LOOP AT lt_nodes INTO lv_node_key .

        compose_process_tree_recsub(
            EXPORTING iv_parent_node_key    = lv_node_key
                      it_fcat_lvc           = it_fcat_lvc
             CHANGING cr_alvtree            = cr_alvtree
                      cs_outtab_line        = &lt;calc_line&gt;
                      ct_subtotals          = ct_subtotals ) .
        APPEND &lt;calc_line&gt; TO &lt;calc_tab&gt; .
      ENDLOOP .
    ENDIF .

*   calculate level
    CLEAR cs_outtab_line .

    LOOP AT it_fcat_lvc ASSIGNING &lt;fcat_lvc&gt; WHERE do_sum IS NOT INITIAL.
      CLEAR lv_count .

      LOOP AT &lt;calc_tab&gt; ASSIGNING &lt;calc_line&gt; .
        ASSIGN COMPONENT &lt;fcat_lvc&gt;-fieldname OF STRUCTURE &lt;calc_line&gt;     TO &lt;f1&gt; .
        ASSIGN COMPONENT &lt;fcat_lvc&gt;-fieldname OF STRUCTURE cs_outtab_line  TO &lt;f2&gt; .

*       calculate column
        CATCH SYSTEM-EXCEPTIONS arithmetic_errors = 5
                                conversion_errors = 5 .
          CASE &lt;fcat_lvc&gt;-h_ftype .
            WHEN &apos;MIN&apos; . &quot; --&gt;&gt; minimum
              IF sy-tabix EQ 1
              OR &lt;f1&gt; LT &lt;f2&gt; .
                &lt;f2&gt; = &lt;f1&gt; .
              ENDIF .
            WHEN &apos;MAX&apos; . &quot; --&gt;&gt; maximum
              IF sy-tabix EQ 1
              OR &lt;f1&gt; GT &lt;f2&gt; .
                &lt;f2&gt; = &lt;f1&gt; .
              ENDIF .
            WHEN &apos;AVG&apos; . &quot; --&gt;&gt; average
              ADD &lt;f1&gt; TO &lt;f2&gt; .
              ADD 1    TO lv_count .
            WHEN &apos;SUM&apos;   &quot; --&gt;&gt; total
              OR space .
              ADD &lt;f1&gt; TO &lt;f2&gt; .
          ENDCASE .
        ENDCATCH .
        IF sy-subrc EQ 5 .
          CLEAR &lt;f2&gt; .
          EXIT .
        ENDIF .

*       get currency
        IF &lt;fcat_lvc&gt;-cfieldname IS NOT INITIAL .
          ASSIGN COMPONENT &lt;fcat_lvc&gt;-cfieldname OF STRUCTURE &lt;calc_line&gt;    TO &lt;f3&gt; .
          ASSIGN COMPONENT &lt;fcat_lvc&gt;-cfieldname OF STRUCTURE cs_outtab_line TO &lt;f4&gt; .
          IF &lt;f4&gt; IS INITIAL .
            MOVE &lt;f3&gt; TO &lt;f4&gt; .
          ELSE .
            IF  &lt;f4&gt; NE &lt;f3&gt;
            AND &lt;f3&gt; IS NOT INITIAL .
              MOVE &apos;***&apos; TO &lt;f4&gt; .
            ENDIF .
          ENDIF .
        ENDIF .

*       get quantity
        IF &lt;fcat_lvc&gt;-qfieldname IS NOT INITIAL .
          ASSIGN COMPONENT &lt;fcat_lvc&gt;-qfieldname OF STRUCTURE &lt;calc_line&gt;    TO &lt;f3&gt; .
          ASSIGN COMPONENT &lt;fcat_lvc&gt;-qfieldname OF STRUCTURE cs_outtab_line TO &lt;f4&gt; .
          IF &lt;f4&gt; IS INITIAL .
            MOVE &lt;f3&gt; TO &lt;f4&gt; .
          ELSE .
            IF  &lt;f4&gt; NE &lt;f3&gt;
            AND &lt;f3&gt; IS NOT INITIAL .
              MOVE &apos;***&apos; TO &lt;f4&gt; .
            ENDIF .
          ENDIF .
        ENDIF .
      ENDLOOP .

*     calcualte avg
      IF &lt;fcat_lvc&gt;-h_ftype EQ &apos;AVG&apos; .
        CATCH SYSTEM-EXCEPTIONS arithmetic_errors = 5
                                conversion_errors = 5 .
          &lt;f2&gt; = &lt;f2&gt; / lv_count .
        ENDCATCH .
      ENDIF .

*     subtotals
      DO 1 TIMES .
        ASSIGN COMPONENT &lt;fcat_lvc&gt;-fieldname OF STRUCTURE cs_outtab_line TO &lt;f2&gt; .
        CHECK &lt;f2&gt; IS ASSIGNED .
        CLEAR ls_subtotals .
        ls_subtotals-nodekey    = iv_parent_node_key .
        ls_subtotals-fieldname  = &lt;fcat_lvc&gt;-fieldname .
        ls_subtotals-fieldvalue = &lt;f2&gt; .
        INSERT ls_subtotals INTO TABLE ct_subtotals .
      ENDDO .
      DO 1 TIMES .
        CHECK &lt;fcat_lvc&gt;-cfieldname IS NOT INITIAL .
        ASSIGN COMPONENT &lt;fcat_lvc&gt;-cfieldname OF STRUCTURE cs_outtab_line TO &lt;f2&gt; .
        CHECK &lt;f2&gt; IS ASSIGNED .
        CLEAR ls_subtotals .
        ls_subtotals-nodekey    = iv_parent_node_key .
        ls_subtotals-fieldname  = &lt;fcat_lvc&gt;-cfieldname .
        ls_subtotals-fieldvalue = &lt;f2&gt; .
        INSERT ls_subtotals INTO TABLE ct_subtotals .
      ENDDO .
      DO 1 TIMES .
        CHECK &lt;fcat_lvc&gt;-qfieldname IS NOT INITIAL .
        ASSIGN COMPONENT &lt;fcat_lvc&gt;-qfieldname OF STRUCTURE cs_outtab_line TO &lt;f2&gt; .
        CHECK &lt;f2&gt; IS ASSIGNED .
        CLEAR ls_subtotals .
        ls_subtotals-nodekey    = iv_parent_node_key .
        ls_subtotals-fieldname  = &lt;fcat_lvc&gt;-qfieldname .
        ls_subtotals-fieldvalue = &lt;f2&gt; .
        INSERT ls_subtotals INTO TABLE ct_subtotals .
      ENDDO .
    ENDLOOP .
  ENDMETHOD .                    &quot;compose_process_tree_recsub
  METHOD compose_process_tree_s .
    DATA:
      ls_patterns           TYPE lcl_excel=&gt;ty_s_patterns ,
      ls_patterns_a         TYPE lcl_excel=&gt;ty_s_patterns ,
      lt_patterns_a         TYPE lcl_excel=&gt;ty_t_patterns ,
      ls_patterns_b         TYPE lcl_excel=&gt;ty_s_patterns ,
      lt_patterns_b         TYPE lcl_excel=&gt;ty_t_patterns ,
      ls_cells              TYPE lcl_excel=&gt;ty_s_cells ,
      ls_colprop            TYPE lcl_excel=&gt;ty_s_colprop ,
      ls_rowprop            TYPE lcl_excel=&gt;ty_s_rowprop ,
      ls_mergecells         TYPE ty_s_mergecells_rel ,
      lv_x                  TYPE i ,
      lv_y                  TYPE i ,
      lv_i                  TYPE i ,
      lv_times_row          TYPE i ,
      lv_index_row          TYPE i ,
      lv_times_col          TYPE i ,
      lv_index_col          TYPE i ,
      lv_index_rel          TYPE i ,
      lv_index_rel2         TYPE i ,
      lv_index              TYPE i ,
      ls_tree_layout        TYPE ty_s_tree_layout ,
      lv_value(30000)       TYPE c ,
      lv_subrc              TYPE sysubrc .
    DATA:
      lr_outtab_line        TYPE REF TO data ,
      lr_salvtree           TYPE REF TO cl_salv_tree ,
      lr_salv_nodes_all     TYPE REF TO cl_salv_nodes ,
      lr_salv_node_root     TYPE REF TO cl_salv_node ,
      lr_salv_columns_tree  TYPE REF TO cl_salv_columns_tree ,
      lr_salv_aggregations  TYPE REF TO cl_salv_aggregations ,
      lt_column_ref         TYPE salv_t_column_ref ,
      lt_nodes              TYPE salv_t_nodes ,
      lt_aggregation        TYPE salv_t_aggregation ,
      lt_fcat_lvc           TYPE lvc_t_fcat ,
      lt_subtotals          TYPE ty_t_tree_subtotals ,
      lv_top                TYPE i ,
      lv_left               TYPE i ,
      lv_value_top          TYPE i ,
      lv_value_left         TYPE i ,
      lt_expanded_nodes     TYPE lvc_t_nkey ,
      lv_hierarchy_column_width TYPE i ,
      lv_firstrow           TYPE flag VALUE abap_on .
    DATA:
      lv_fullpath           TYPE string ,
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties .
    FIELD-SYMBOLS:
      &lt;context_ref&gt;         TYPE ANY ,
      &lt;fcat_lvc&gt;            TYPE lvc_s_fcat ,
      &lt;outtab_line&gt;         TYPE ANY ,
      &lt;aggregation&gt;         TYPE salv_s_aggregation ,
      &lt;column_ref&gt;          TYPE salv_s_column_ref .

*======================================================================
*   binding with reference of context data
*======================================================================
    IF is_data-shift_val_relpath IS INITIAL .
      ASSIGN is_parent_context_ref TO &lt;context_ref&gt; .
    ELSE .
      ASSIGN COMPONENT is_data-shift_val_relpath
      OF STRUCTURE is_parent_context_ref TO &lt;context_ref&gt; .
      CHECK &lt;context_ref&gt; IS ASSIGNED .
    ENDIF .

    CHECK &lt;context_ref&gt; IS BOUND .

    TRY .
        lr_salvtree ?= &lt;context_ref&gt; .

      CATCH cx_sy_move_cast_error
            cx_sy_dyn_call_illegal_method .
        EXIT .
    ENDTRY .

    conv_container_fs(
        EXPORTING iv_field      = is_data-properties-tree_layout
        IMPORTING es_structure  = ls_tree_layout ) .

*======================================================================
*   prepare expanded nodes, fieldcatalog, subtotals and coordinates
*======================================================================

*   --&gt;&gt; root node object
    lr_salv_nodes_all = lr_salvtree-&gt;get_nodes( ) .
    lr_salv_node_root = lr_salv_nodes_all-&gt;get_node( node_key  = cl_alv_tree_base=&gt;c_virtual_root_node ) .

*   --&gt;&gt; fieldcatalog
    IF is_gui_available( ) IS NOT INITIAL .
      lr_salvtree-&gt;get_metadata( ) .
    ENDIF .
    lr_salv_columns_tree = lr_salvtree-&gt;get_columns( ) .
    lr_salv_aggregations = lr_salvtree-&gt;get_aggregations( ) .

    lt_fcat_lvc = cl_salv_controller_metadata=&gt;get_tree_fieldcatalog(
                            r_columns       = lr_salv_columns_tree
                            r_aggregations  = lr_salv_aggregations ) .

    lt_column_ref = lr_salv_columns_tree-&gt;get( ) .

    LOOP AT lt_column_ref ASSIGNING &lt;column_ref&gt; .
      READ TABLE lt_fcat_lvc ASSIGNING &lt;fcat_lvc&gt; WITH KEY fieldname = &lt;column_ref&gt;-columnname .
      CHECK sy-subrc EQ 0 .

      IF &lt;column_ref&gt;-r_column-&gt;is_visible( ) IS INITIAL .
        &lt;fcat_lvc&gt;-no_out = abap_on .
      ELSE  .
        &lt;fcat_lvc&gt;-no_out = abap_off .
      ENDIF .
      &lt;fcat_lvc&gt;-outputlen = &lt;column_ref&gt;-r_column-&gt;get_output_length( ) .
      &lt;fcat_lvc&gt;-tech      = &lt;column_ref&gt;-r_column-&gt;is_technical( ) .
      &lt;fcat_lvc&gt;-col_pos   = lr_salv_columns_tree-&gt;get_column_position( columnname = &lt;column_ref&gt;-columnname ) .
    ENDLOOP .
    DELETE lt_fcat_lvc WHERE tech   IS NOT INITIAL .
    DELETE lt_fcat_lvc WHERE no_out IS NOT INITIAL .

    lt_aggregation[] = lr_salv_aggregations-&gt;get( ) .
    LOOP AT lt_aggregation ASSIGNING &lt;aggregation&gt; .
      READ TABLE lt_fcat_lvc ASSIGNING &lt;fcat_lvc&gt; WITH KEY fieldname = &lt;column_ref&gt;-columnname .
      CHECK sy-subrc EQ 0 .

      CASE &lt;aggregation&gt;-r_aggregation-&gt;get( ) .
        WHEN if_salv_c_aggregation=&gt;total   .   &lt;fcat_lvc&gt;-h_ftype = &apos;SUM&apos; .  &lt;fcat_lvc&gt;-do_sum = abap_on .
        WHEN if_salv_c_aggregation=&gt;minimum .   &lt;fcat_lvc&gt;-h_ftype = &apos;MIN&apos; .  &lt;fcat_lvc&gt;-do_sum = abap_on .
        WHEN if_salv_c_aggregation=&gt;maximum .   &lt;fcat_lvc&gt;-h_ftype = &apos;MAX&apos; .  &lt;fcat_lvc&gt;-do_sum = abap_on .
        WHEN if_salv_c_aggregation=&gt;average .   &lt;fcat_lvc&gt;-h_ftype = &apos;AVG&apos; .  &lt;fcat_lvc&gt;-do_sum = abap_on .
        WHEN if_salv_c_aggregation=&gt;none    .   &lt;fcat_lvc&gt;-h_ftype = &apos;&apos; .     &lt;fcat_lvc&gt;-do_sum = abap_off .
      ENDCASE .
    ENDLOOP .

*   --&gt;&gt; subtotals
    lr_outtab_line = lr_salv_node_root-&gt;get_data_row( ) .
    ASSIGN lr_outtab_line-&gt;* TO &lt;outtab_line&gt; .

    compose_process_tree_s_recsub(
        EXPORTING ir_salv_node_parent   = lr_salv_node_root
                  it_fcat_lvc           = lt_fcat_lvc
         CHANGING cs_outtab_line        = &lt;outtab_line&gt;
                  cr_salvtree           = lr_salvtree
                  ct_subtotals          = lt_subtotals ) .

*   --&gt;&gt; expanded nodes list
*   lr_alvtree-&gt;get_expanded_nodes( CHANGING ct_expanded_nodes = lt_expanded_nodes
*                                   EXCEPTIONS OTHERS = 0 ) .
*   SORT lt_expanded_nodes .

*   --&gt;&gt; coordinates
    CASE is_data-properties-tb_direction .
      WHEN c_tb_direction-up2down .
        cs_legacy-tb_area_top  = cs_parent_legacy-tb_area_prew_top  +
                                 cs_parent_legacy-tb_area_prew_rows .
        cs_legacy-tb_area_left = cs_parent_legacy-tb_area_prew_left .

      WHEN c_tb_direction-left2right .
        cs_legacy-tb_area_left = cs_parent_legacy-tb_area_prew_left +
                                 cs_parent_legacy-tb_area_prew_columns .
        cs_legacy-tb_area_top  = cs_parent_legacy-tb_area_prew_top  .
    ENDCASE .

    cs_legacy-tb_area_rows     = 0 .
    cs_legacy-tb_area_columns  = 0 .

*======================================================================
*   prepare patterns (get a content of pattern area)
*======================================================================
    ls_patterns =
    r_exceltemplate-&gt;get_pattern( iv_sheetname = cs_parent_legacy-tb_sheetname
                                  iv_id        = is_data-properties-id ) .
*   lr_alvtree-&gt;get_hierarchy_header_width( IMPORTING e_width = lv_hierarchy_column_width ) .
    cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .

    CASE ls_tree_layout-rotate .
      WHEN space  .
*  A-PATTERNS
        lv_times_row  = ls_patterns-rows .

        DO lv_times_row TIMES . &quot; --&gt;&gt; loop at ROWS
          lv_index_row = sy-index .

          CLEAR ls_patterns_a .
          ls_patterns_a-id      = lv_index_row - 1 .
          ls_patterns_a-left    = ls_patterns-left .
          ls_patterns_a-top     = ls_patterns-top + lv_index_row - 1 .
          ls_patterns_a-rows    = 1 .

          lv_x = ls_patterns-left .
          lv_y = ls_patterns-top + lv_index_row - 1 .

          CLEAR ls_cells .
          CLEAR ls_colprop .
          CLEAR ls_rowprop .

          READ TABLE ls_patterns-t_rowprop INTO ls_rowprop WITH TABLE KEY y = lv_y .
          IF sy-subrc EQ 0 .
            INSERT ls_rowprop INTO TABLE ls_patterns_a-t_rowprop .
          ENDIF .

          CLEAR ls_mergecells .
          READ TABLE ls_patterns-t_mergecells INTO ls_mergecells
            WITH KEY top  = lv_y  left = lv_x .
          IF sy-subrc EQ 0 .
            INSERT ls_mergecells INTO TABLE ls_patterns_a-t_mergecells .
          ELSE  .
            ls_mergecells-columns = 1 .
          ENDIF .

          DO ls_mergecells-columns TIMES .
            IF sy-index GT 1 .
              ADD 1 TO lv_x .
            ENDIF .

            READ TABLE ls_patterns-t_cells INTO ls_cells WITH KEY y = lv_y  x = lv_x BINARY SEARCH .
            IF sy-subrc NE 0 .
              ls_cells-y = lv_y .
              ls_cells-x = lv_x .
            ENDIF .
            INSERT ls_cells INTO TABLE ls_patterns_a-t_cells .

            CLEAR ls_colprop .
            READ TABLE ls_patterns-t_colprop INTO ls_colprop WITH KEY x = lv_x BINARY SEARCH .
            ls_colprop-x = lv_x .

            IF ls_tree_layout-col_othr_width EQ 0
            OR lv_hierarchy_column_width EQ 0 .
              IF sy-subrc EQ 0 .
                INSERT ls_colprop INTO TABLE ls_patterns_a-t_colprop .
              ENDIF .
            ELSE .
              ls_colprop-customwidth   = &apos;1&apos; .
              ls_colprop-width  = lv_i = ls_tree_layout-col_othr_width * lv_hierarchy_column_width .
              CONDENSE ls_colprop-width NO-GAPS .
              INSERT ls_colprop INTO TABLE ls_patterns_a-t_colprop .
            ENDIF .
          ENDDO .

          ls_patterns_a-columns = ls_mergecells-columns .
          APPEND ls_patterns_a TO lt_patterns_a .
        ENDDO .

*  B-PATTERNS
        lv_times_row  = ls_patterns-rows .
        lv_times_col  = LINES( lt_fcat_lvc ) .

        DO lv_times_row TIMES . &quot; --&gt;&gt; loop at ROWS
          lv_index_row = sy-index .
          lv_y = ls_patterns-top  + lv_index_row - 1 .

          CLEAR ls_patterns_b .
          ls_patterns_b-id      = lv_index_row - 1 .
          ls_patterns_b-left    = ls_patterns-left + ls_patterns_a-columns .
          ls_patterns_b-top     = ls_patterns-top  + lv_index_row - 1 .
          ls_patterns_b-rows    = 1 .

          CLEAR ls_cells .
          CLEAR ls_colprop .
          CLEAR ls_rowprop .

          READ TABLE ls_patterns-t_rowprop INTO ls_rowprop WITH TABLE KEY y = lv_y .
          IF sy-subrc EQ 0 .
            INSERT ls_rowprop INTO TABLE ls_patterns_b-t_rowprop .
          ENDIF .

          lv_index_col  = 0 .
          lv_index_rel  = 0 .
          lv_index_rel2 = ls_patterns_a-columns - 1  .
          lv_x          = ls_patterns-left + lv_index_rel2 .

          DO lv_times_col TIMES . &quot; --&gt;&gt; loop at COLUMNS
            ADD 1 TO lv_index_col .
            ADD 1 TO lv_index_rel .
            ADD 1 TO lv_index_rel2 .
            ADD 1 TO lv_x .

            READ TABLE lt_fcat_lvc ASSIGNING &lt;fcat_lvc&gt; INDEX lv_index_col .
            CHECK sy-subrc EQ 0 .
            &lt;fcat_lvc&gt;-indx_field = lv_index_rel .

            CLEAR ls_mergecells .
            READ TABLE ls_patterns-t_mergecells INTO ls_mergecells
              WITH KEY top  = lv_y  left = lv_x .
            IF sy-subrc EQ 0 .
              INSERT ls_mergecells INTO TABLE ls_patterns_b-t_mergecells .
            ELSE  .
              ls_mergecells-columns = 1 .
            ENDIF .

            DO ls_mergecells-columns TIMES .
              lv_index = sy-index .
              IF lv_index GT 1 .
                ADD 1 TO lv_index_rel .
                ADD 1 TO lv_index_rel2 .
                ADD 1 TO lv_x .
              ENDIF .

              IF lv_index_rel2 LT ls_patterns-columns .
                CLEAR ls_cells .
                READ TABLE ls_patterns-t_cells INTO ls_cells WITH KEY y = lv_y  x = lv_x BINARY SEARCH .
              ENDIF .
              ls_cells-y = lv_y .
              ls_cells-x = lv_x .
              INSERT ls_cells INTO TABLE ls_patterns_b-t_cells .

              IF lv_index_rel2 LT ls_patterns-columns .
                CLEAR ls_colprop .
                READ TABLE ls_patterns-t_colprop INTO ls_colprop WITH KEY x = lv_x BINARY SEARCH .
                lv_subrc = sy-subrc .
              ENDIF .
              IF lv_index GT 1
              OR ls_tree_layout-col_othr_width EQ 0
              OR &lt;fcat_lvc&gt;-outputlen EQ 0 .
                IF lv_subrc EQ 0 .
                  ls_colprop-x    = lv_x .
                  INSERT ls_colprop INTO TABLE ls_patterns_b-t_colprop .
                ENDIF .
              ELSE .
                ls_colprop-x      = lv_x .
                ls_colprop-customwidth   = &apos;1&apos; .
                ls_colprop-width  = lv_i = ls_tree_layout-col_othr_width * &lt;fcat_lvc&gt;-outputlen .
                CONDENSE ls_colprop-width NO-GAPS .
                INSERT ls_colprop INTO TABLE ls_patterns_b-t_colprop .
              ENDIF .
            ENDDO .

            ADD ls_mergecells-columns TO ls_patterns_b-columns .
          ENDDO .

          APPEND ls_patterns_b TO lt_patterns_b .
        ENDDO .

      WHEN OTHERS . &quot; == R O T A T E = T R E E =====================================

*  A-PATTERNS
        lv_times_row  = ls_patterns-columns .

        DO lv_times_row TIMES . &quot; --&gt;&gt; loop at ROWS
          lv_index_row = sy-index .

          CLEAR ls_patterns_a .
          ls_patterns_a-id      = lv_index_row - 1 .
          ls_patterns_a-left    = ls_patterns-left + lv_index_row - 1 .
          ls_patterns_a-top     = ls_patterns-top .
          ls_patterns_a-columns = 1 .

          lv_x = ls_patterns-left + lv_index_row - 1 .
          lv_y = ls_patterns-top .

          CLEAR ls_cells .
          CLEAR ls_colprop .
          CLEAR ls_rowprop .

          READ TABLE ls_patterns-t_colprop INTO ls_colprop WITH KEY x = lv_x BINARY SEARCH .
          IF sy-subrc EQ 0 .
            INSERT ls_colprop INTO TABLE ls_patterns_a-t_colprop .
          ENDIF .

          CLEAR ls_mergecells .
          READ TABLE ls_patterns-t_mergecells INTO ls_mergecells
            WITH KEY top  = lv_y  left = lv_x .
          IF sy-subrc EQ 0 .
            INSERT ls_mergecells INTO TABLE ls_patterns_a-t_mergecells .
          ELSE  .
            ls_mergecells-rows = 1 .
          ENDIF .

          DO ls_mergecells-rows TIMES .
            IF sy-index GT 1 .
              ADD 1 TO lv_y .
            ENDIF .

            READ TABLE ls_patterns-t_cells INTO ls_cells WITH KEY y = lv_y  x = lv_x BINARY SEARCH .
            IF sy-subrc NE 0 .
              ls_cells-y = lv_y .
              ls_cells-x = lv_x .
            ENDIF .
            INSERT ls_cells INTO TABLE ls_patterns_a-t_cells .

            CLEAR ls_rowprop .
            READ TABLE ls_patterns-t_rowprop INTO ls_rowprop WITH TABLE KEY y = lv_y .
            ls_rowprop-y = lv_y .

            IF ls_tree_layout-col_othr_width EQ 0
            OR lv_hierarchy_column_width EQ 0 .
              IF sy-subrc EQ 0 .
                INSERT ls_rowprop INTO TABLE ls_patterns_a-t_rowprop .
              ENDIF .
            ELSE .
              ls_rowprop-customheight = &apos;1&apos; .
              ls_rowprop-ht  = lv_i = ls_tree_layout-col_othr_width * lv_hierarchy_column_width .
              CONDENSE ls_rowprop-ht NO-GAPS .
              INSERT ls_rowprop INTO TABLE ls_patterns_a-t_rowprop .
            ENDIF .
          ENDDO .

          ls_patterns_a-rows = ls_mergecells-rows .
          APPEND ls_patterns_a TO lt_patterns_a .
        ENDDO .

*  B-PATTERNS
        lv_times_row  = ls_patterns-columns .
        lv_times_col  = LINES( lt_fcat_lvc ) .

        DO lv_times_row TIMES . &quot; --&gt;&gt; loop at ROWS
          lv_index_row = sy-index .
          lv_x = ls_patterns-left + lv_index_row - 1 .

          CLEAR ls_patterns_b .
          ls_patterns_b-id      = lv_index_row - 1 .
          ls_patterns_b-left    = ls_patterns-left + lv_index_row - 1 .
          ls_patterns_b-top     = ls_patterns-top  + ls_patterns_a-rows .
          ls_patterns_b-columns = 1 .

          CLEAR ls_cells .
          CLEAR ls_colprop .
          CLEAR ls_rowprop .

          READ TABLE ls_patterns-t_colprop INTO ls_colprop WITH KEY x = lv_x BINARY SEARCH .
          IF sy-subrc EQ 0 .
            INSERT ls_colprop INTO TABLE ls_patterns_b-t_colprop .
          ENDIF .

          lv_index_col  = 0 .
          lv_index_rel  = 0 .
          lv_index_rel2 = ls_patterns_a-rows - 1  .
          lv_y          = ls_patterns-top + lv_index_rel2 .

          DO lv_times_col TIMES . &quot; --&gt;&gt; loop at COLUMNS
            ADD 1 TO lv_index_col .
            ADD 1 TO lv_index_rel .
            ADD 1 TO lv_index_rel2 .
            ADD 1 TO lv_y .

            READ TABLE lt_fcat_lvc ASSIGNING &lt;fcat_lvc&gt; INDEX lv_index_col .
            CHECK sy-subrc EQ 0 .
            &lt;fcat_lvc&gt;-indx_field = lv_index_rel .

            CLEAR ls_mergecells .
            READ TABLE ls_patterns-t_mergecells INTO ls_mergecells
              WITH KEY top  = lv_y  left = lv_x .
            IF sy-subrc EQ 0 .
              INSERT ls_mergecells INTO TABLE ls_patterns_b-t_mergecells .
            ELSE  .
              ls_mergecells-rows = 1 .
            ENDIF .

            DO ls_mergecells-rows TIMES .
              lv_index = sy-index .
              IF lv_index GT 1 .
                ADD 1 TO lv_index_rel .
                ADD 1 TO lv_index_rel2 .
                ADD 1 TO lv_y .
              ENDIF .

              IF lv_index_rel2 LT ls_patterns-rows .
                CLEAR ls_cells .
                READ TABLE ls_patterns-t_cells INTO ls_cells WITH KEY y = lv_y  x = lv_x BINARY SEARCH .
              ENDIF .
              ls_cells-y = lv_y .
              ls_cells-x = lv_x .
              INSERT ls_cells INTO TABLE ls_patterns_b-t_cells .

              IF lv_index_rel2 LT ls_patterns-rows .
                CLEAR ls_rowprop .
                READ TABLE ls_patterns-t_rowprop INTO ls_rowprop WITH TABLE KEY y = lv_y .
                lv_subrc = sy-subrc .
              ENDIF .

              IF lv_index GT 1
              OR ls_tree_layout-col_othr_width EQ 0
              OR &lt;fcat_lvc&gt;-outputlen EQ 0 .
                IF lv_subrc EQ 0 .
                  ls_rowprop-y = lv_y .
                  INSERT ls_rowprop INTO TABLE ls_patterns_b-t_rowprop .
                ENDIF .
              ELSE .
                ls_rowprop-y   = lv_y .
                ls_rowprop-customheight = &apos;1&apos; .
                ls_rowprop-ht  = lv_i = ls_tree_layout-col_othr_width * &lt;fcat_lvc&gt;-outputlen .
                CONDENSE ls_rowprop-ht NO-GAPS .
                INSERT ls_rowprop INTO TABLE ls_patterns_b-t_rowprop .
              ENDIF .
            ENDDO .

            ADD ls_mergecells-rows TO ls_patterns_b-rows .
          ENDDO .

          APPEND ls_patterns_b TO lt_patterns_b .
        ENDDO .
    ENDCASE .


*======================================================================
*   header
*======================================================================
    lv_top  = cs_legacy-tb_area_top  - 1 .
    lv_left = cs_legacy-tb_area_left - 1 .

    IF ls_tree_layout-head IS NOT INITIAL .
      READ TABLE lt_patterns_a INTO ls_patterns_a WITH KEY id = 0 .
      READ TABLE lt_patterns_b INTO ls_patterns_b WITH KEY id = 0 .

      CASE ls_tree_layout-rotate .
        WHEN space  . ADD 1 TO lv_top  .
        WHEN OTHERS . ADD 1 TO lv_left .
      ENDCASE .

*     hierarchy column (BEFORE others)
      IF  ls_tree_layout-col_hier IS NOT INITIAL
      AND ls_tree_layout-col_hier_after IS INITIAL .
        r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns_a ) .

        CASE ls_tree_layout-rotate .
          WHEN space  .   ADD 1 TO lv_left .
          WHEN OTHERS .   ADD 1 TO lv_top  .
        ENDCASE .

*       lv_value_top    = ls_patterns_a-top  .
*       lv_value_left   = ls_patterns_a-left .
*
*       r_excelruntime-&gt;begin_field(
*           EXPORTING iv_top    = lv_value_top
*                     iv_left   = lv_value_left
*                     iv_value  = lv_value ) .

        r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r = space
                                                    iv_printtitles_c = space
                                           CHANGING cv_top  = lv_top
                                                    cv_left = lv_left ) .
        CASE ls_tree_layout-rotate .
          WHEN space  . lv_left = lv_left + ls_patterns_a-columns - 1 .
          WHEN OTHERS . lv_top  = lv_top  + ls_patterns_a-rows    - 1 .
        ENDCASE .
      ENDIF .

*     other columns
      IF ls_tree_layout-col_othr IS NOT INITIAL
      AND lt_fcat_lvc[] IS NOT INITIAL .
        r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns_b ) .

        LOOP AT lt_fcat_lvc ASSIGNING &lt;fcat_lvc&gt; .
          CASE ls_tree_layout-rotate .
            WHEN space  .
              lv_value_top  = ls_patterns_b-top  .
              lv_value_left = ls_patterns_b-left + &lt;fcat_lvc&gt;-indx_field - 1 .
            WHEN OTHERS .
              lv_value_left = ls_patterns_b-left .
              lv_value_top  = ls_patterns_b-top  + &lt;fcat_lvc&gt;-indx_field - 1 .
          ENDCASE .

          IF     &lt;fcat_lvc&gt;-scrtext_l IS NOT INITIAL .
            lv_value = &lt;fcat_lvc&gt;-scrtext_l .
          ELSEIF &lt;fcat_lvc&gt;-scrtext_m IS NOT INITIAL .
            lv_value = &lt;fcat_lvc&gt;-scrtext_m .
          ELSEIF &lt;fcat_lvc&gt;-scrtext_s IS NOT INITIAL .
            lv_value = &lt;fcat_lvc&gt;-scrtext_s .
          ELSEIF &lt;fcat_lvc&gt;-coltext   IS NOT INITIAL .
            lv_value = &lt;fcat_lvc&gt;-coltext .
          ELSEIF &lt;fcat_lvc&gt;-seltext   IS NOT INITIAL .
            lv_value = &lt;fcat_lvc&gt;-seltext .
          ELSE .
            lv_value = &lt;fcat_lvc&gt;-fieldname .
          ENDIF .
          r_excelruntime-&gt;begin_field( EXPORTING iv_top    = lv_value_top
                                                 iv_left   = lv_value_left
                                                 iv_value  = lv_value ) .
        ENDLOOP .

        CASE ls_tree_layout-rotate .
          WHEN space  .   ADD 1 TO lv_left .
          WHEN OTHERS .   ADD 1 TO lv_top  .
        ENDCASE .
        r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r = space
                                                    iv_printtitles_c = space
                                           CHANGING cv_top  = lv_top
                                                    cv_left = lv_left  ) .
        CASE ls_tree_layout-rotate .
          WHEN space  . lv_left = lv_left + ls_patterns_b-columns - 1 .
          WHEN OTHERS . lv_top  = lv_top  + ls_patterns_b-rows    - 1 .
        ENDCASE .
      ENDIF .

*     hierarchy column (AFTER others)
      IF  ls_tree_layout-col_hier IS NOT INITIAL
      AND ls_tree_layout-col_hier_after IS NOT INITIAL .
        r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns_a ) .

        CASE ls_tree_layout-rotate .
          WHEN space  .   ADD 1 TO lv_left .
          WHEN OTHERS .   ADD 1 TO lv_top  .
        ENDCASE .
        r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r = space
                                                    iv_printtitles_c = space
                                           CHANGING cv_top  = lv_top
                                                    cv_left = lv_left ) .
        CASE ls_tree_layout-rotate .
          WHEN space  . lv_left = lv_left + ls_patterns_a-columns - 1 .
          WHEN OTHERS . lv_top  = lv_top  + ls_patterns_a-rows    - 1 .
        ENDCASE .
      ENDIF .
    ENDIF .

*======================================================================
*   positions
*======================================================================
    compose_process_tree_s_recurs(
          EXPORTING ir_salv_node_parent   = lr_salv_node_root
                    iv_parent_level       = 0
                    is_parent_patterns_a  = ls_patterns_a
                    is_parent_patterns_b  = ls_patterns_b
                    it_patterns_a         = lt_patterns_a
                    it_patterns_b         = lt_patterns_b
                    it_fcat_lvc           = lt_fcat_lvc
                    is_tree_layout        = ls_tree_layout
                    it_expanded_nodes     = lt_expanded_nodes
                    it_subtotals          = lt_subtotals
           CHANGING cr_salvtree           = lr_salvtree
                    cs_legacy             = cs_legacy
                    cv_top                = lv_top
                    cv_left               = lv_left
                    cv_firstrow           = lv_firstrow ) .

    cs_legacy-tb_area_rows    = lv_top  - cs_legacy-tb_area_top  + 1 .
    cs_legacy-tb_area_columns = lv_left - cs_legacy-tb_area_left + 1 .

    IF cs_legacy-tb_area_rows LT 0 .
      cs_legacy-tb_area_rows = 0 .
    ENDIF .
    IF cs_legacy-tb_area_columns LT 0 .
      cs_legacy-tb_area_columns = 0 .
    ENDIF .

    cs_parent_legacy-tb_area_prew_top     = cs_legacy-tb_area_prew_top      = cs_legacy-tb_area_top .
    cs_parent_legacy-tb_area_prew_rows    = cs_legacy-tb_area_prew_rows     = cs_legacy-tb_area_rows .
    cs_parent_legacy-tb_area_prew_left    = cs_legacy-tb_area_prew_left     = cs_legacy-tb_area_left .
    cs_parent_legacy-tb_area_prew_columns = cs_legacy-tb_area_prew_columns  = cs_legacy-tb_area_columns .                .

  ENDMETHOD .                    &quot;compose_process_tree_s
  METHOD compose_process_tree_s_recurs .

    DATA:
      ls_nodes              TYPE salv_s_nodes ,
      lt_nodes              TYPE salv_t_nodes ,
      lr_outtab_line        TYPE REF TO data ,
      lv_node_text          TYPE lvc_value ,
      lv_level              TYPE i ,
      lv_rows               TYPE i ,
      lv_columns            TYPE i ,
      lv_begin_top          TYPE i ,
      lv_begin_left         TYPE i ,
      lv_pattern_top        TYPE i ,
      lv_pattern_left       TYPE i ,
      lv_value_top          TYPE i ,
      lv_value_left         TYPE i ,
      lv_offset             TYPE i ,
      ls_patterns_a         TYPE lcl_excel=&gt;ty_s_patterns ,
      ls_patterns_b         TYPE lcl_excel=&gt;ty_s_patterns ,
      lv_rowgroup_level     TYPE i ,
      lv_colgroup_level     TYPE i ,
      lv_collapsed          TYPE flag ,
      lv_value(30000)       TYPE c ,
      lv_formula            TYPE flag ,
      ls_fcat_lvc           TYPE lvc_s_fcat ,
      lr_tdescr             TYPE REF TO cl_abap_typedescr ,
      ls_subtotals          TYPE ty_s_tree_subtotals ,
      ls_drawings           TYPE lcl_excel=&gt;ty_s_drawings_tmp .
    FIELD-SYMBOLS:
      &lt;value&gt;               TYPE ANY ,
      &lt;outtab_line&gt;         TYPE ANY .

    lv_level = iv_parent_level + 1 .

*   prepare patterns
    READ TABLE it_patterns_a INTO ls_patterns_a WITH KEY id = lv_level .
    IF sy-subrc NE 0 .
      ls_patterns_a = is_parent_patterns_a .
    ENDIF .
    READ TABLE it_patterns_b INTO ls_patterns_b WITH KEY id = lv_level .
    IF sy-subrc NE 0 .
      ls_patterns_b = is_parent_patterns_b .
    ENDIF .

    IF cv_firstrow EQ abap_off .
      CASE is_tree_layout-rotate .
        WHEN space  .   CLEAR: ls_patterns_a-t_colprop[], ls_patterns_b-t_colprop[] .
        WHEN OTHERS .   CLEAR: ls_patterns_a-t_rowprop[], ls_patterns_b-t_rowprop[] .
      ENDCASE .
    ENDIF .

*   get current level nodes
    TRY.
        lt_nodes = ir_salv_node_parent-&gt;get_children( ).
      CATCH cx_salv_msg .
    ENDTRY.


*   process nodes
    LOOP AT lt_nodes INTO ls_nodes .

      lv_node_text   = ls_nodes-node-&gt;get_text( ) .
      lr_outtab_line = ls_nodes-node-&gt;get_data_row( ) .
      ASSIGN lr_outtab_line-&gt;* TO &lt;outtab_line&gt; .

      CONCATENATE v_text-t198     &quot; --&gt;&gt; Building of tree, node:
                  lv_node_text
             INTO lv_value SEPARATED BY space .

      progressbar( iv_text = lv_value ) .

      CHECK ls_nodes-node-&gt;is_visible( ) IS NOT INITIAL .  &quot; by PH-WID

      CASE is_tree_layout-rotate .
        WHEN space  .
          ADD 1 TO cv_top  .
          cv_left = cs_legacy-tb_area_left - 1 .
          lv_begin_top  = cv_top  .
          lv_begin_left = cs_legacy-tb_area_left .
        WHEN OTHERS .
          cv_top  = cs_legacy-tb_area_top  - 1 .
          ADD 1 TO cv_left .
          lv_begin_top  = cs_legacy-tb_area_top  .
          lv_begin_left = cv_left .
      ENDCASE .

*     hierarchy column (BEFORE others)
      IF  is_tree_layout-col_hier IS NOT INITIAL
      AND is_tree_layout-col_hier_after IS INITIAL .
        r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns_a ) .

        CLEAR lv_value .
        IF lv_level GT 1 .
          lv_offset = ( lv_level - 1 ) * is_tree_layout-col_hier_shift .
          lv_value+lv_offset = lv_node_text .
        ELSE .
          lv_value = lv_node_text .
        ENDIF .

        lv_value_top    = ls_patterns_a-top  .
        lv_value_left   = ls_patterns_a-left .

        r_excelruntime-&gt;begin_field(
            EXPORTING iv_top     = lv_value_top
                      iv_left    = lv_value_left
                      iv_value   = lv_value ) .

        CASE is_tree_layout-rotate .
          WHEN space  .   ADD 1 TO cv_left .
          WHEN OTHERS .   ADD 1 TO cv_top .
        ENDCASE .
        r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r = space
                                                    iv_printtitles_c = space
                                          CHANGING  cv_top    = cv_top
                                                    cv_left   = cv_left ) .
        CASE is_tree_layout-rotate .
          WHEN space  . cv_left = cv_left + ls_patterns_a-columns - 1 .
          WHEN OTHERS . cv_top  = cv_top  + ls_patterns_a-rows    - 1 .
        ENDCASE .
      ENDIF .

*     other columns
      CLEAR lv_pattern_top .
      CLEAR lv_pattern_left .
      IF  is_tree_layout-col_othr IS NOT INITIAL
      AND it_fcat_lvc[] IS NOT INITIAL .
        r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns_b ) .

        LOOP AT it_fcat_lvc INTO ls_fcat_lvc .
          CASE is_tree_layout-rotate .
            WHEN space  .
              lv_value_top  = ls_patterns_b-top  .
              lv_value_left = ls_patterns_b-left + ls_fcat_lvc-indx_field - 1 .
            WHEN OTHERS .
              lv_value_left = ls_patterns_b-left .
              lv_value_top  = ls_patterns_b-top  + ls_fcat_lvc-indx_field - 1 .
          ENDCASE .

          ASSIGN COMPONENT ls_fcat_lvc-fieldname OF STRUCTURE &lt;outtab_line&gt; TO &lt;value&gt; .
          CHECK &lt;value&gt; IS ASSIGNED .

          IF ls_fcat_lvc-icon IS INITIAL .
            READ TABLE it_subtotals INTO ls_subtotals
            WITH TABLE KEY nodekey   = ls_nodes-key
                           fieldname = ls_fcat_lvc-fieldname .
            IF sy-subrc EQ 0 .
              &lt;value&gt; = ls_subtotals-fieldvalue .
            ENDIF .

            lr_tdescr = cl_abap_datadescr=&gt;describe_by_data( p_data = &lt;value&gt; ) .

            CLEAR lv_value .
            cl_gui_alv_grid=&gt;cell_display(
                EXPORTING is_data     = &lt;outtab_line&gt;
                          i_int_value = &lt;value&gt;
                IMPORTING e_ext_value = lv_value
                CHANGING  cs_fieldcat = ls_fcat_lvc ) .

            CASE lr_tdescr-&gt;type_kind .
              WHEN cl_abap_datadescr=&gt;typekind_packed
                OR cl_abap_datadescr=&gt;typekind_int .

                CASE v_dcpfm .
                  WHEN space .TRANSLATE lv_value USING &apos;. ,.&apos;.  &quot;1.234.567,89
                  WHEN &apos;X&apos; .  TRANSLATE lv_value USING &apos;, &apos;.    &quot;1,234,567.89
                  WHEN &apos;Y&apos; .  TRANSLATE lv_value USING &apos;,.&apos;.    &quot;1 234 567,89
                ENDCASE .

                CONDENSE lv_value NO-GAPS .

                IF &lt;value&gt; LT 0 .
                  REPLACE FIRST OCCURRENCE OF &apos;-&apos; IN lv_value WITH space .
                  CONCATENATE &apos;-&apos; lv_value INTO lv_value .
                ENDIF .

              WHEN OTHERS .
                CHECK lv_value IS NOT INITIAL .
                SHIFT lv_value LEFT DELETING LEADING space .
            ENDCASE .

            DO 1 TIMES .
              CLEAR lv_formula .
              CHECK is_tree_layout-allow_formulas IS NOT INITIAL .
              CHECK lv_value    IS NOT INITIAL .
              CHECK lv_value(1) EQ &apos;=&apos; .

              lv_formula = abap_on .
            ENDDO .

            r_excelruntime-&gt;begin_field(
                EXPORTING iv_top      = lv_value_top
                          iv_left     = lv_value_left
                          iv_value    = lv_value
                          iv_formula  = lv_formula ) .

          ELSEIF &lt;value&gt;(1) EQ &apos;@&apos; .
            CLEAR ls_drawings .
            ls_drawings-media_rawdata = get_icon_rawdata( &lt;value&gt; ) .
            CHECK ls_drawings-media_rawdata IS NOT INITIAL .
            ls_drawings-drawing_type = lcl_excel=&gt;c_drawing_type-bitmap .

            ls_drawings-top      = lv_value_top .
            ls_drawings-left     = lv_value_left .
            ls_drawings-rows     = 1 .
            ls_drawings-columns  = 1 .
            r_excelruntime-&gt;begin_drawing( is_drawings_tmp = ls_drawings ) .
          ENDIF .

        ENDLOOP .

        CASE is_tree_layout-rotate .
          WHEN space  .   ADD 1 TO cv_left .
          WHEN OTHERS .   ADD 1 TO cv_top  .
        ENDCASE .
        r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r = space
                                                    iv_printtitles_c = space
                                           CHANGING cv_top      = cv_top
                                                    cv_left     = cv_left ) .
        CASE is_tree_layout-rotate .
          WHEN space  . cv_left = cv_left + ls_patterns_b-columns - 1 .
          WHEN OTHERS . cv_top  = cv_top  + ls_patterns_b-rows    - 1 .
        ENDCASE .
      ENDIF .

*     hierarchy column (AFTER others)
      IF  is_tree_layout-col_hier IS NOT INITIAL
      AND is_tree_layout-col_hier_after IS NOT INITIAL .
        r_excelruntime-&gt;begin_pattern( is_patterns = ls_patterns_a ) .

        CLEAR lv_value .
        IF lv_level GT 1 .
          lv_offset = ( lv_level - 1 ) * is_tree_layout-col_hier_shift .
          lv_value+lv_offset = lv_node_text .
        ELSE .
          lv_value = lv_node_text .
        ENDIF .

        lv_value_top    = ls_patterns_a-top  .
        lv_value_left   = ls_patterns_a-left .

        r_excelruntime-&gt;begin_field(
            EXPORTING iv_top    = lv_value_top
                      iv_left   = lv_value_left
                      iv_value  = lv_value ) .

        CASE is_tree_layout-rotate .
          WHEN space  .   ADD 1 TO cv_left .
          WHEN OTHERS .   ADD 1 TO cv_top .
        ENDCASE .

        r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r = space
                                                    iv_printtitles_c = space
                                          CHANGING  cv_top    = cv_top
                                                    cv_left   = cv_left ) .
        CASE is_tree_layout-rotate .
          WHEN space  . cv_left = cv_left + ls_patterns_a-columns - 1 .
          WHEN OTHERS . cv_top  = cv_top  + ls_patterns_a-rows    - 1 .
        ENDCASE .
      ENDIF .

*----------------------------------------------
      IF cv_firstrow EQ abap_on .
        cv_firstrow = abap_off .
      ENDIF .

      CASE is_tree_layout-rotate .
        WHEN space  .
          IF cv_left LT cs_legacy-tb_area_left .
            cv_left = cs_legacy-tb_area_left .
          ENDIF .
        WHEN OTHERS .
          IF cv_top LT cs_legacy-tb_area_top .
            cv_top = cs_legacy-tb_area_top .
          ENDIF .
      ENDCASE .

*----------------------------------------------

*     recursive process children nodes
      compose_process_tree_s_recurs(
          EXPORTING ir_salv_node_parent   = ls_nodes-node
                    iv_parent_level       = lv_level
                    is_parent_patterns_a  = ls_patterns_a
                    is_parent_patterns_b  = ls_patterns_b
                    it_patterns_a         = it_patterns_a
                    it_patterns_b         = it_patterns_b
                    it_fcat_lvc           = it_fcat_lvc
                    is_tree_layout        = is_tree_layout
                    it_expanded_nodes     = it_expanded_nodes
                    it_subtotals          = it_subtotals
           CHANGING cr_salvtree           = cr_salvtree
                    cs_legacy             = cs_legacy
                    cv_top                = cv_top
                    cv_left               = cv_left
                    cv_firstrow           = cv_firstrow ) .

*     make structure (group rows/columns)
      DO 1 TIMES .
        CHECK is_tree_layout-stru IS NOT INITIAL .
        CHECK lv_level LT 8 . &quot; --&gt;&gt; Max Number of Outline Levels Excel can display

        lv_rows     = cv_top  - lv_begin_top  .
        lv_columns  = cv_left - lv_begin_left .

        CASE is_tree_layout-rotate .
          WHEN space  .
            CHECK lv_rows GE 1 .
            ADD 1 TO lv_begin_top .
            lv_rowgroup_level = lv_level .
          WHEN OTHERS .
            CHECK lv_columns GE 1 .
            ADD 1 TO lv_begin_left .
            lv_colgroup_level = lv_level .
        ENDCASE .

        CASE is_tree_layout-stru_exp_coll .
          WHEN c_stru_exp_coll-dynamic   .
            READ TABLE it_expanded_nodes TRANSPORTING NO FIELDS
            WITH KEY table_line = ls_nodes-key BINARY SEARCH .
            CASE sy-subrc .
              WHEN 0 .      lv_collapsed = abap_off .
              WHEN OTHERS . lv_collapsed = abap_on .
            ENDCASE .
          WHEN c_stru_exp_coll-collapsed .  lv_collapsed = abap_on  .
          WHEN c_stru_exp_coll-expanded  .  lv_collapsed = abap_off .
          WHEN OTHERS . EXIT .
        ENDCASE .

        r_excelruntime-&gt;finalize_folder(
           EXPORTING iv_left             = lv_begin_left
                     iv_top              = lv_begin_top
                     iv_rows             = lv_rows
                     iv_columns          = lv_columns
                     iv_rowgroup_level   = lv_rowgroup_level
                     iv_colgroup_level   = lv_colgroup_level
                     iv_rowgroup_clp     = lv_collapsed
                     iv_colgroup_clp     = lv_collapsed ) .
      ENDDO .
    ENDLOOP .

  ENDMETHOD .                    &quot;compose_process_tree_s_recurs
  METHOD compose_process_tree_s_recsub .

    DATA:
      ls_nodes              TYPE salv_s_nodes ,
      lt_nodes              TYPE salv_t_nodes ,
      lv_count              TYPE i ,
      l_dref_calc_tab       TYPE REF TO data ,
      l_dref_calc_wa        TYPE REF TO data ,
      l_dref_wa             TYPE REF TO data ,
      ls_subtotals          TYPE ty_s_tree_subtotals ,
      lr_outtab_line        TYPE REF TO data .
    FIELD-SYMBOLS:
      &lt;outtab_line&gt;         TYPE ANY ,
      &lt;calc_line&gt;           TYPE ANY ,
      &lt;calc_tab&gt;            TYPE STANDARD TABLE ,
      &lt;fcat_lvc&gt;            TYPE lvc_s_fcat ,
      &lt;f1&gt;                  TYPE ANY ,
      &lt;f2&gt;                  TYPE ANY ,
      &lt;f3&gt;                  TYPE ANY ,
      &lt;f4&gt;                  TYPE ANY .

*   assign local copy of initial &lt;tab1&gt; to &lt;calc_tab&gt;.
    CREATE DATA l_dref_calc_tab LIKE TABLE OF cs_outtab_line .
    ASSIGN l_dref_calc_tab-&gt;* TO &lt;calc_tab&gt; .
*   assign local copy of initial line of &lt;tab1&gt; to &lt;calc_wa&gt;.
    CREATE DATA l_dref_calc_wa LIKE cs_outtab_line .
    ASSIGN l_dref_calc_wa-&gt;* TO &lt;calc_line&gt; .
*   assign local copy of initial line of &lt;tab1&gt; to &lt;wa&gt;.
    CREATE DATA l_dref_wa LIKE cs_outtab_line .
    ASSIGN l_dref_wa-&gt;* TO &lt;outtab_line&gt; .

*   get current level nodes
    lt_nodes[] = salv_node_get_children( ir_salv_node_parent ) .

    IF lt_nodes IS INITIAL .
      ev_leaf = abap_on .

      lr_outtab_line = ir_salv_node_parent-&gt;get_data_row( ) .
      ASSIGN lr_outtab_line-&gt;* TO &lt;outtab_line&gt; .
      cs_outtab_line = &lt;outtab_line&gt; .

      EXIT .

    ELSE .
      CLEAR ev_leaf .

*     process nodes
      LOOP AT lt_nodes INTO ls_nodes .

        compose_process_tree_s_recsub(
            EXPORTING ir_salv_node_parent   = ls_nodes-node
                      it_fcat_lvc           = it_fcat_lvc
             CHANGING cr_salvtree           = cr_salvtree
                      cs_outtab_line        = &lt;calc_line&gt;
                      ct_subtotals          = ct_subtotals ) .
        APPEND &lt;calc_line&gt; TO &lt;calc_tab&gt; .
      ENDLOOP .
    ENDIF .

*   calculate level
    CLEAR cs_outtab_line .

    LOOP AT it_fcat_lvc ASSIGNING &lt;fcat_lvc&gt; WHERE do_sum IS NOT INITIAL.
      CLEAR lv_count .

      LOOP AT &lt;calc_tab&gt; ASSIGNING &lt;calc_line&gt; .
        ASSIGN COMPONENT &lt;fcat_lvc&gt;-fieldname OF STRUCTURE &lt;calc_line&gt;     TO &lt;f1&gt; .
        ASSIGN COMPONENT &lt;fcat_lvc&gt;-fieldname OF STRUCTURE cs_outtab_line  TO &lt;f2&gt; .

*       calculate column
        CATCH SYSTEM-EXCEPTIONS arithmetic_errors = 5
                                conversion_errors = 5 .
          CASE &lt;fcat_lvc&gt;-h_ftype .
            WHEN &apos;MIN&apos; . &quot; --&gt;&gt; minimum
              IF sy-tabix EQ 1
              OR &lt;f1&gt; LT &lt;f2&gt; .
                &lt;f2&gt; = &lt;f1&gt; .
              ENDIF .
            WHEN &apos;MAX&apos; . &quot; --&gt;&gt; maximum
              IF sy-tabix EQ 1
              OR &lt;f1&gt; GT &lt;f2&gt; .
                &lt;f2&gt; = &lt;f1&gt; .
              ENDIF .
            WHEN &apos;AVG&apos; . &quot; --&gt;&gt; average
              ADD &lt;f1&gt; TO &lt;f2&gt; .
              ADD 1    TO lv_count .
            WHEN &apos;SUM&apos;   &quot; --&gt;&gt; total
              OR space .
              ADD &lt;f1&gt; TO &lt;f2&gt; .
          ENDCASE .
        ENDCATCH .
        IF sy-subrc EQ 5 .
          CLEAR &lt;f2&gt; .
          EXIT .
        ENDIF .

*       get currency
        IF &lt;fcat_lvc&gt;-cfieldname IS NOT INITIAL .
          ASSIGN COMPONENT &lt;fcat_lvc&gt;-cfieldname OF STRUCTURE &lt;calc_line&gt;    TO &lt;f3&gt; .
          ASSIGN COMPONENT &lt;fcat_lvc&gt;-cfieldname OF STRUCTURE cs_outtab_line TO &lt;f4&gt; .
          IF &lt;f4&gt; IS INITIAL .
            MOVE &lt;f3&gt; TO &lt;f4&gt; .
          ELSE .
            IF  &lt;f4&gt; NE &lt;f3&gt;
            AND &lt;f3&gt; IS NOT INITIAL .
              MOVE &apos;***&apos; TO &lt;f4&gt; .
            ENDIF .
          ENDIF .
        ENDIF .

*       get quantity
        IF &lt;fcat_lvc&gt;-qfieldname IS NOT INITIAL .
          ASSIGN COMPONENT &lt;fcat_lvc&gt;-qfieldname OF STRUCTURE &lt;calc_line&gt;    TO &lt;f3&gt; .
          ASSIGN COMPONENT &lt;fcat_lvc&gt;-qfieldname OF STRUCTURE cs_outtab_line TO &lt;f4&gt; .
          IF &lt;f4&gt; IS INITIAL .
            MOVE &lt;f3&gt; TO &lt;f4&gt; .
          ELSE .
            IF  &lt;f4&gt; NE &lt;f3&gt;
            AND &lt;f3&gt; IS NOT INITIAL .
              MOVE &apos;***&apos; TO &lt;f4&gt; .
            ENDIF .
          ENDIF .
        ENDIF .
      ENDLOOP .

*     calcualte avg
      IF &lt;fcat_lvc&gt;-h_ftype EQ &apos;AVG&apos; .
        CATCH SYSTEM-EXCEPTIONS arithmetic_errors = 5
                                conversion_errors = 5 .
          &lt;f2&gt; = &lt;f2&gt; / lv_count .
        ENDCATCH .
      ENDIF .

*     subtotals
      DO 1 TIMES .
        ASSIGN COMPONENT &lt;fcat_lvc&gt;-fieldname OF STRUCTURE cs_outtab_line TO &lt;f2&gt; .
        CHECK &lt;f2&gt; IS ASSIGNED .
        CLEAR ls_subtotals .
        ls_subtotals-nodekey    = ir_salv_node_parent-&gt;get_key( ) .
        ls_subtotals-fieldname  = &lt;fcat_lvc&gt;-fieldname .
        ls_subtotals-fieldvalue = &lt;f2&gt; .
        INSERT ls_subtotals INTO TABLE ct_subtotals .
      ENDDO .
      DO 1 TIMES .
        CHECK &lt;fcat_lvc&gt;-cfieldname IS NOT INITIAL .
        ASSIGN COMPONENT &lt;fcat_lvc&gt;-cfieldname OF STRUCTURE cs_outtab_line TO &lt;f2&gt; .
        CHECK &lt;f2&gt; IS ASSIGNED .
        CLEAR ls_subtotals .
        ls_subtotals-nodekey    = ir_salv_node_parent-&gt;get_key( ) .
        ls_subtotals-fieldname  = &lt;fcat_lvc&gt;-cfieldname .
        ls_subtotals-fieldvalue = &lt;f2&gt; .
        INSERT ls_subtotals INTO TABLE ct_subtotals .
      ENDDO .
      DO 1 TIMES .
        CHECK &lt;fcat_lvc&gt;-qfieldname IS NOT INITIAL .
        ASSIGN COMPONENT &lt;fcat_lvc&gt;-qfieldname OF STRUCTURE cs_outtab_line TO &lt;f2&gt; .
        CHECK &lt;f2&gt; IS ASSIGNED .
        CLEAR ls_subtotals .
        ls_subtotals-nodekey    = ir_salv_node_parent-&gt;get_key( ) .
        ls_subtotals-fieldname  = &lt;fcat_lvc&gt;-qfieldname .
        ls_subtotals-fieldvalue = &lt;f2&gt; .
        INSERT ls_subtotals INTO TABLE ct_subtotals .
      ENDDO .
    ENDLOOP .
  ENDMETHOD .                    &quot;compose_process_tree_s_recsub
  METHOD compose_process_grid .
    DATA:
      ls_grid_layout        TYPE ty_s_grid_layout ,
      ls_rowvalues          TYPE ty_s_grid_rowvalues ,
      ls_patterns           TYPE lcl_excel=&gt;ty_s_patterns ,
      ls_patterns_m         TYPE lcl_excel=&gt;ty_s_patterns ,
      ls_patterns_p         TYPE lcl_excel=&gt;ty_s_patterns ,
      lt_patterns_p         TYPE lcl_excel=&gt;ty_t_patterns ,
      ls_cells              TYPE lcl_excel=&gt;ty_s_cells ,
      ls_colprop            TYPE lcl_excel=&gt;ty_s_colprop ,
      ls_rowprop            TYPE lcl_excel=&gt;ty_s_rowprop ,
      ls_mergecells_rel     TYPE ty_s_mergecells_rel ,
      lv_x                  TYPE i ,
      lv_y                  TYPE i ,
      lv_x_from             TYPE i ,
      lv_x_to               TYPE i ,
      lv_y_from             TYPE i ,
      lv_y_to               TYPE i ,
      lv_top                TYPE i ,
      lv_left               TYPE i ,
      lv_value_top          TYPE i ,
      lv_value_left         TYPE i ,
      lv_value              TYPE string ,
      lv_pattern_top        TYPE i ,
      lv_pattern_left       TYPE i ,
      lv_comp_fullpath      TYPE string ,
      lv_index              TYPE i ,
      lv_index_delta        TYPE i ,
      lv_index_previous     TYPE i ,
      lv_subrc              TYPE sysubrc ,
      lv_offset             TYPE i ,
      lv_subpattern         TYPE i ,
      lv_firstcall          TYPE flag VALUE abap_on .
    DATA:
      ls_ctxt_hier          TYPE lcl_context=&gt;ty_s_hierarchy ,
      lt_ctxt_hier          TYPE lcl_context=&gt;ty_t_hierarchy ,
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      lt_ctxt_prop          TYPE lcl_context=&gt;ty_t_properties ,
      ls_fldseq             TYPE ty_s_grid_fldseq ,
      lt_fldseq             TYPE ty_t_grid_fldseq ,
      ls_fldprop            TYPE ty_s_grid_fldprop ,
      lt_fldprop            TYPE ty_t_grid_fldprop ,
      ls_buffer_rs          TYPE ty_s_grid_rowstructure_buf .
    FIELD-SYMBOLS:
      &lt;context_tab&gt;         TYPE ANY TABLE ,
      &lt;rowvalues&gt;           TYPE ty_s_grid_rowvalues ,
      &lt;rowpattrens&gt;         TYPE ty_s_grid_rowpattrens ,
      &lt;rowstructure&gt;        TYPE ty_s_grid_rowstructure .

*   binding with reference of context data (it only can have a type of nested table)
    IF is_data-shift_val_relpath IS INITIAL .
      ASSIGN is_parent_context_ref TO &lt;context_tab&gt; .
    ELSE .
      ASSIGN COMPONENT is_data-shift_val_relpath
      OF STRUCTURE is_parent_context_ref TO &lt;context_tab&gt; .
      CHECK &lt;context_tab&gt; IS ASSIGNED .
    ENDIF .

    conv_container_fs(
        EXPORTING iv_field      = is_data-properties-grid_layout
        IMPORTING es_structure  = ls_grid_layout ) .

*======================================================================
*======================================================================
*   Prepare coordinates and fields
*======================================================================
*======================================================================

    CASE is_data-properties-tb_direction .
      WHEN c_tb_direction-up2down .
        cs_legacy-tb_area_top  = cs_parent_legacy-tb_area_prew_top  +
                                 cs_parent_legacy-tb_area_prew_rows .
        cs_legacy-tb_area_left = cs_parent_legacy-tb_area_prew_left .

      WHEN c_tb_direction-left2right .
        cs_legacy-tb_area_left = cs_parent_legacy-tb_area_prew_left +
                                 cs_parent_legacy-tb_area_prew_columns .
        cs_legacy-tb_area_top  = cs_parent_legacy-tb_area_prew_top  .
    ENDCASE .

    cs_legacy-tb_area_rows    = 0 .
    cs_legacy-tb_area_columns = 0 .

*======================================================================
*======================================================================
*   Try to read &apos;rowstructure&apos; from the buffer.
*   If not occurred, calculate it and insert into buffer
*======================================================================
*======================================================================

    CLEAR ls_buffer_rs .
    READ TABLE t_buffer_rs INTO ls_buffer_rs WITH TABLE KEY form_id = is_data-properties-id .
    IF sy-subrc NE 0 .
*======================================================================
*     get field sequence
*======================================================================
      get_grid_fldseqprop(
          EXPORTING iv_id           = is_data-properties-id
          IMPORTING et_ctxt_hier    = lt_ctxt_hier[]
                    et_ctxt_prop    = lt_ctxt_prop[]
                    et_fldseq       = lt_fldseq[]
                    et_fldprop      = lt_fldprop[] ) .


*======================================================================
*     prepare patterns (get a content of pattern area)
*======================================================================
      ls_patterns_m =
      r_exceltemplate-&gt;get_pattern( iv_sheetname = cs_parent_legacy-tb_sheetname
                                    iv_id = is_data-properties-id ) .
      CASE ls_grid_layout-rotate .
        WHEN space .
          DO ls_patterns_m-rows TIMES . &quot; --&gt;&gt; loop at ROWS
            lv_index = sy-index .
            lv_y = ls_patterns_m-top  + lv_index - 1 .

            CLEAR ls_patterns .
            CLEAR ls_cells .
            CLEAR ls_colprop .
            CLEAR ls_rowprop .

            ls_patterns-id      = lv_index - 1 .
            ls_patterns-left    = ls_patterns_m-left .
            ls_patterns-top     = ls_patterns_m-top  + lv_index - 1 .
            ls_patterns-rows    = 1 .

            READ TABLE ls_patterns_m-t_rowprop INTO ls_rowprop WITH TABLE KEY y = lv_y .
            IF sy-subrc EQ 0 .
              INSERT ls_rowprop INTO TABLE ls_patterns-t_rowprop .
            ENDIF .

            CLEAR ls_buffer_rs-rowvalues[] .
            CLEAR ls_rowvalues .
            ls_rowvalues-position = ls_patterns_m-left - 1 .
            ls_rowvalues-position_rel = 0 .

            LOOP AT lt_fldseq INTO ls_fldseq .  &quot; --&gt;&gt; loop at COLUMNS
              CLEAR ls_fldprop .
              READ TABLE lt_fldprop INTO ls_fldprop WITH KEY field = ls_fldseq-field .

              ADD 1 TO ls_rowvalues-position .
              ADD 1 TO ls_rowvalues-position_rel .
              lv_x = ls_rowvalues-position .

              ls_rowvalues-index            = sy-tabix .
              ls_rowvalues-value_fullpath   = ls_fldseq-field .
              ls_rowvalues-autofitmerged_r  = ls_fldprop-autofitmerged_r .
              ls_rowvalues-autofitmerged_c  = ls_fldprop-autofitmerged_c .
              APPEND ls_rowvalues TO ls_buffer_rs-rowvalues[] .

              CLEAR ls_mergecells_rel .
              READ TABLE ls_patterns_m-t_mergecells INTO ls_mergecells_rel
                WITH KEY top  = lv_y
                         left = lv_x .
              IF sy-subrc EQ 0 .
                ls_mergecells_rel-autofit_rows = ls_fldprop-autofitmerged_r .
                ls_mergecells_rel-autofit_cols = ls_fldprop-autofitmerged_c .
                INSERT ls_mergecells_rel INTO TABLE ls_patterns-t_mergecells .
              ELSE  .
                ls_mergecells_rel-columns = 1 .
              ENDIF .

              DO ls_mergecells_rel-columns TIMES .
                IF sy-index GT 1 .
                  ADD 1 TO ls_rowvalues-position .
                  ADD 1 TO ls_rowvalues-position_rel .
                  lv_x = ls_rowvalues-position .
                ENDIF .

                IF ls_rowvalues-position_rel LE ls_patterns_m-columns .
                  CLEAR ls_cells .
                  READ TABLE ls_patterns_m-t_cells INTO ls_cells WITH KEY y = lv_y  x = lv_x BINARY SEARCH .
                ENDIF .
                ls_cells-y = lv_y .
                ls_cells-x = lv_x .
                INSERT ls_cells INTO TABLE ls_patterns-t_cells .

                IF ls_rowvalues-position_rel LE ls_patterns_m-columns .
                  CLEAR ls_colprop .
                  READ TABLE ls_patterns_m-t_colprop INTO ls_colprop WITH KEY x = lv_x BINARY SEARCH .
                  lv_subrc = sy-subrc .
                ENDIF .
                IF lv_subrc EQ 0 .
                  ls_colprop-x = lv_x .
                  INSERT ls_colprop INTO TABLE ls_patterns-t_colprop .
                ENDIF .
              ENDDO .
            ENDLOOP .

            ls_patterns-columns = lv_x - ls_patterns-left + 1 .
            ls_buffer_rs-maxposition = lv_x .
            CASE lv_index .
              WHEN 1 .      MOVE   ls_patterns TO ls_buffer_rs-patterns_h .
              WHEN OTHERS . APPEND ls_patterns TO lt_patterns_p .
            ENDCASE .
          ENDDO .

        WHEN OTHERS . &quot; == R O T A T E = G R I D =====================================
          DO ls_patterns_m-columns TIMES . &quot; --&gt;&gt; loop at ROWS
            lv_index = sy-index .
            lv_x = ls_patterns_m-left + lv_index - 1 .

            CLEAR ls_patterns .
            CLEAR ls_cells .
            CLEAR ls_colprop .
            CLEAR ls_rowprop .

            ls_patterns-id      = lv_index - 1 .
            ls_patterns-left    = ls_patterns_m-left + lv_index - 1 .
            ls_patterns-top     = ls_patterns_m-top  .
            ls_patterns-columns = 1 .

            READ TABLE ls_patterns_m-t_colprop INTO ls_colprop WITH KEY x = lv_x BINARY SEARCH .
            IF sy-subrc EQ 0 .
              INSERT ls_colprop INTO TABLE ls_patterns-t_colprop .
            ENDIF .

            CLEAR ls_buffer_rs-rowvalues[] .
            CLEAR ls_rowvalues .
            ls_rowvalues-position = ls_patterns_m-top - 1 .
            ls_rowvalues-position_rel = 0 .

            LOOP AT lt_fldseq INTO ls_fldseq .  &quot; --&gt;&gt; loop at COLUMNS
              CLEAR ls_fldprop .
              READ TABLE lt_fldprop INTO ls_fldprop WITH KEY field = ls_fldseq-field .

              ADD 1 TO ls_rowvalues-position .
              ADD 1 TO ls_rowvalues-position_rel .
              lv_y = ls_rowvalues-position .

              ls_rowvalues-index            = sy-tabix .
              ls_rowvalues-value_fullpath   = ls_fldseq-field .
              ls_rowvalues-autofitmerged_r  = ls_fldprop-autofitmerged_r .
              ls_rowvalues-autofitmerged_c  = ls_fldprop-autofitmerged_c .
              APPEND ls_rowvalues TO ls_buffer_rs-rowvalues[] .

              CLEAR ls_mergecells_rel .
              READ TABLE ls_patterns_m-t_mergecells INTO ls_mergecells_rel
                WITH KEY top  = lv_y
                         left = lv_x .
              IF sy-subrc EQ 0 .
                ls_mergecells_rel-autofit_rows = ls_fldprop-autofitmerged_r .
                ls_mergecells_rel-autofit_cols = ls_fldprop-autofitmerged_c .
                INSERT ls_mergecells_rel INTO TABLE ls_patterns-t_mergecells .
              ELSE  .
                ls_mergecells_rel-rows = 1 .
              ENDIF .

              DO ls_mergecells_rel-rows TIMES .
                IF sy-index GT 1 .
                  ADD 1 TO ls_rowvalues-position .
                  ADD 1 TO ls_rowvalues-position_rel .
                  lv_y = ls_rowvalues-position .
                ENDIF .

                IF ls_rowvalues-position_rel LE ls_patterns_m-rows .
                  CLEAR ls_cells .
                  READ TABLE ls_patterns_m-t_cells INTO ls_cells WITH KEY y = lv_y  x = lv_x BINARY SEARCH .
                ENDIF .
                ls_cells-y = lv_y .
                ls_cells-x = lv_x .
                INSERT ls_cells INTO TABLE ls_patterns-t_cells .

                IF ls_rowvalues-position_rel LE ls_patterns_m-rows .
                  CLEAR ls_rowprop .
                  READ TABLE ls_patterns_m-t_rowprop INTO ls_rowprop WITH TABLE KEY y = lv_y .
                  lv_subrc = sy-subrc .
                ENDIF .
                IF lv_subrc EQ 0 .
                  ls_rowprop-y = lv_y .
                  INSERT ls_rowprop INTO TABLE ls_patterns-t_rowprop .
                ENDIF .
              ENDDO .
            ENDLOOP .

            ls_patterns-rows = lv_y - ls_patterns-top + 1 .
            ls_buffer_rs-maxposition = lv_y .
            CASE lv_index .
              WHEN 1 .      MOVE   ls_patterns TO ls_buffer_rs-patterns_h .
              WHEN OTHERS . APPEND ls_patterns TO lt_patterns_p .
            ENDCASE .
          ENDDO .
      ENDCASE .

      IF  lt_patterns_p IS INITIAL
      AND ls_buffer_rs-patterns_h IS NOT INITIAL .
        ls_buffer_rs-patterns_h-id = 1 .
        APPEND ls_buffer_rs-patterns_h TO lt_patterns_p .
      ENDIF .

*======================================================================
*     prepare row structure
*======================================================================
      APPEND INITIAL LINE TO ls_buffer_rs-rowstructure ASSIGNING &lt;rowstructure&gt; .
      &lt;rowstructure&gt;-level = sy-tabix .
      node_get_legacy_info(
            EXPORTING iv_id = is_data-properties-id
            IMPORTING ev_cb_fullpath = &lt;rowstructure&gt;-loop_fullpath ) .

      &lt;rowstructure&gt;-loop_fullpath =
      get_fullpath( iv_parent_fullpath  = &lt;rowstructure&gt;-loop_fullpath
                    iv_relpath = is_data-properties-cb_val_relpath ) .

      SORT lt_ctxt_hier BY tlevel .
      LOOP AT lt_ctxt_hier INTO ls_ctxt_hier .
        READ TABLE lt_ctxt_prop INTO ls_ctxt_prop WITH KEY id = ls_ctxt_hier-hide .
        CHECK sy-subrc EQ 0
          AND ls_ctxt_prop-comp_type EQ lcl_context=&gt;c_comp_type-table .

        APPEND INITIAL LINE TO ls_buffer_rs-rowstructure ASSIGNING &lt;rowstructure&gt; .
        &lt;rowstructure&gt;-level         = sy-tabix .
        &lt;rowstructure&gt;-loop_fullpath = ls_ctxt_prop-comp_fullpath .
      ENDLOOP .


      SORT ls_buffer_rs-rowstructure BY level DESCENDING .
      LOOP AT ls_buffer_rs-rowvalues ASSIGNING &lt;rowvalues&gt; .
        READ TABLE lt_ctxt_prop INTO ls_ctxt_prop WITH KEY comp_fullpath = &lt;rowvalues&gt;-value_fullpath .
        CHECK sy-subrc EQ 0 .
        &lt;rowvalues&gt;-ctxt_prop = ls_ctxt_prop .

        LOOP AT ls_buffer_rs-rowstructure ASSIGNING &lt;rowstructure&gt; .
          CONCATENATE &lt;rowstructure&gt;-loop_fullpath &apos;*&apos; INTO lv_comp_fullpath .
          CHECK &lt;rowvalues&gt;-value_fullpath CP lv_comp_fullpath .

          APPEND &lt;rowvalues&gt; TO &lt;rowstructure&gt;-rowvalues .
          EXIT .
        ENDLOOP .
      ENDLOOP .


      SORT ls_buffer_rs-rowstructure BY level .
      LOOP AT ls_buffer_rs-rowstructure ASSIGNING &lt;rowstructure&gt; .
        CLEAR lv_index_delta .
        CLEAR lv_index_previous .
        UNASSIGN &lt;rowpattrens&gt; .

        LOOP AT &lt;rowstructure&gt;-rowvalues ASSIGNING &lt;rowvalues&gt; .
          lv_index_delta    = &lt;rowvalues&gt;-index - lv_index_previous .
          lv_index_previous = &lt;rowvalues&gt;-index .

          IF  &lt;rowpattrens&gt; IS NOT ASSIGNED
          OR lv_index_delta NE 1 .
            APPEND INITIAL LINE TO &lt;rowstructure&gt;-rowpattrens ASSIGNING &lt;rowpattrens&gt; .
            &lt;rowpattrens&gt;-position     = &lt;rowvalues&gt;-position .
            &lt;rowpattrens&gt;-position_rel = &lt;rowvalues&gt;-position_rel .
          ENDIF .

          lv_index = &lt;rowvalues&gt;-index + 1 .
          READ TABLE ls_buffer_rs-rowvalues INTO ls_rowvalues WITH KEY INDEX = lv_index . &quot; read the next field position
          IF sy-subrc EQ 0 .
            &lt;rowpattrens&gt;-columns = ls_rowvalues-position - &lt;rowpattrens&gt;-position .
          ELSE  .
            &lt;rowpattrens&gt;-columns = ls_buffer_rs-maxposition - &lt;rowpattrens&gt;-position + 1 .
          ENDIF .

          IF &lt;rowvalues&gt;-autofitmerged_r IS NOT INITIAL .
            INSERT &lt;rowvalues&gt;-position_rel INTO TABLE &lt;rowpattrens&gt;-t_autofitmerged_r[] .
          ENDIF .
          IF &lt;rowvalues&gt;-autofitmerged_c IS NOT INITIAL .
            INSERT &lt;rowvalues&gt;-position_rel INTO TABLE &lt;rowpattrens&gt;-t_autofitmerged_c[] .
          ENDIF .

          APPEND &lt;rowvalues&gt; TO &lt;rowpattrens&gt;-rowvalues .
        ENDLOOP .
      ENDLOOP .


      LOOP AT ls_buffer_rs-rowstructure ASSIGNING &lt;rowstructure&gt; .
        LOOP AT lt_patterns_p INTO ls_patterns_p .
          LOOP AT &lt;rowstructure&gt;-rowpattrens ASSIGNING &lt;rowpattrens&gt; .
            CLEAR ls_patterns .

            CASE ls_grid_layout-rotate .
              WHEN space  .
                lv_x_from = &lt;rowpattrens&gt;-position .
                lv_x_to   = &lt;rowpattrens&gt;-position + &lt;rowpattrens&gt;-columns - 1 .

                ls_patterns-t_cells[] = ls_patterns_p-t_cells[] .
                DELETE ls_patterns-t_cells WHERE NOT x BETWEEN lv_x_from AND lv_x_to .

                ls_patterns-t_mergecells[] = ls_patterns_p-t_mergecells[] .
                DELETE ls_patterns-t_mergecells WHERE NOT left BETWEEN lv_x_from AND lv_x_to .

                ls_patterns-t_rowprop[] = ls_patterns_p-t_rowprop[] .
                ls_patterns-t_colprop[] = ls_patterns_p-t_colprop[] .
                DELETE ls_patterns-t_colprop WHERE NOT x BETWEEN lv_x_from AND lv_x_to .

                ls_patterns-id      = ls_patterns_p-id .
                ls_patterns-left    = &lt;rowpattrens&gt;-position .
                ls_patterns-top     = ls_patterns_p-top .
                ls_patterns-columns = &lt;rowpattrens&gt;-columns .
                ls_patterns-rows    = ls_patterns_p-rows .
                APPEND ls_patterns TO &lt;rowpattrens&gt;-patterns .

              WHEN OTHERS .
                lv_y_from = &lt;rowpattrens&gt;-position .
                lv_y_to   = &lt;rowpattrens&gt;-position + &lt;rowpattrens&gt;-columns - 1 .

                ls_patterns-t_cells[] = ls_patterns_p-t_cells[] .
                DELETE ls_patterns-t_cells WHERE NOT y BETWEEN lv_y_from AND lv_y_to .

                ls_patterns-t_mergecells[] = ls_patterns_p-t_mergecells[] .
                DELETE ls_patterns-t_mergecells WHERE NOT top BETWEEN lv_y_from AND lv_y_to .

                ls_patterns-t_rowprop[] = ls_patterns_p-t_rowprop[] .
                ls_patterns-t_colprop[] = ls_patterns_p-t_colprop[] .
                DELETE ls_patterns-t_rowprop WHERE NOT y BETWEEN lv_y_from AND lv_y_to .

                ls_patterns-id      = ls_patterns_p-id .
                ls_patterns-left    = ls_patterns_p-left .
                ls_patterns-top     = &lt;rowpattrens&gt;-position .
                ls_patterns-columns = ls_patterns_p-columns .
                ls_patterns-rows    = &lt;rowpattrens&gt;-columns .
                APPEND ls_patterns TO &lt;rowpattrens&gt;-patterns .
            ENDCASE .
          ENDLOOP .
        ENDLOOP .
      ENDLOOP .


      LOOP AT ls_buffer_rs-rowstructure ASSIGNING &lt;rowstructure&gt; .
        IF sy-tabix GT 1 .
          CONCATENATE lv_comp_fullpath &apos;-LINE-&apos; INTO lv_comp_fullpath .
          lv_offset = STRLEN( lv_comp_fullpath ) .
          &lt;rowstructure&gt;-loop_relpath = &lt;rowstructure&gt;-loop_fullpath+lv_offset .
        ENDIF .

        CONCATENATE &lt;rowstructure&gt;-loop_fullpath &apos;-LINE-&apos; INTO lv_comp_fullpath .
        lv_offset = STRLEN( lv_comp_fullpath ) .

        LOOP AT &lt;rowstructure&gt;-rowvalues ASSIGNING &lt;rowvalues&gt; .
          &lt;rowvalues&gt;-value_relpath = &lt;rowvalues&gt;-value_fullpath+lv_offset .
        ENDLOOP .

        LOOP AT &lt;rowstructure&gt;-rowpattrens ASSIGNING &lt;rowpattrens&gt; .
          LOOP AT &lt;rowpattrens&gt;-rowvalues ASSIGNING &lt;rowvalues&gt; .
            &lt;rowvalues&gt;-value_relpath = &lt;rowvalues&gt;-value_fullpath+lv_offset .
          ENDLOOP .
        ENDLOOP .

        lv_comp_fullpath = &lt;rowstructure&gt;-loop_fullpath .
      ENDLOOP .

*======================================================================
*     insert &apos;rowstructure&apos; into buffer
*======================================================================
      ls_buffer_rs-form_id       = is_data-properties-id .
      ls_buffer_rs-maxlevel      = LINES( ls_buffer_rs-rowstructure ) .
      ls_buffer_rs-maxsubpattern = LINES( lt_patterns_p ) .
      INSERT ls_buffer_rs INTO TABLE t_buffer_rs .
    ENDIF .


*======================================================================
*======================================================================
*   Paste header
*======================================================================
*======================================================================
    CASE ls_grid_layout-rotate .
      WHEN space  .
        lv_top  = cs_legacy-tb_area_top  .
        lv_left = cs_legacy-tb_area_left - 1 .
      WHEN OTHERS .
        lv_top  = cs_legacy-tb_area_top  - 1 .
        lv_left = cs_legacy-tb_area_left .
    ENDCASE .

    IF ls_grid_layout-head IS NOT INITIAL .
      r_excelruntime-&gt;begin_pattern( is_patterns = ls_buffer_rs-patterns_h ) .

      LOOP AT ls_buffer_rs-rowvalues ASSIGNING &lt;rowvalues&gt; .
        CASE ls_grid_layout-rotate .
          WHEN space  .
            ADD 1 TO lv_left .
            lv_value_top  = ls_buffer_rs-patterns_h-top  .
            lv_value_left = ls_buffer_rs-patterns_h-left + &lt;rowvalues&gt;-position_rel - 1 .
          WHEN OTHERS .
            ADD 1 TO lv_top .
            lv_value_left = ls_buffer_rs-patterns_h-left .
            lv_value_top  = ls_buffer_rs-patterns_h-top  + &lt;rowvalues&gt;-position_rel - 1 .
        ENDCASE .
        IF sy-tabix EQ 1 .
          lv_pattern_left = lv_left .
          lv_pattern_top  = lv_top  .
        ENDIF .

        CASE ls_grid_layout-head_titles .
          WHEN c_head_titles-tech  .  lv_value = &lt;rowvalues&gt;-ctxt_prop-comp_name .
          WHEN c_head_titles-descr .  lv_value = &lt;rowvalues&gt;-ctxt_prop-comp_shortdescr .
          WHEN OTHERS .
            CONCATENATE &lt;rowvalues&gt;-ctxt_prop-comp_name &apos;-&apos; &lt;rowvalues&gt;-ctxt_prop-comp_shortdescr
                   INTO lv_value SEPARATED BY space .
        ENDCASE .

        r_excelruntime-&gt;begin_field( EXPORTING iv_top    = lv_value_top
                                               iv_left   = lv_value_left
                                               iv_value  = lv_value ) .
      ENDLOOP .

      r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r = space
                                                  iv_printtitles_c = space
                                         CHANGING cv_top  = lv_pattern_top
                                                  cv_left = lv_pattern_left ) .
      CASE ls_grid_layout-rotate .
        WHEN space  .   ADD 1 TO lv_top  .
        WHEN OTHERS .   ADD 1 TO lv_left .
      ENDCASE .
    ENDIF .

*======================================================================
*======================================================================
*   Positions
*======================================================================
*======================================================================
    IF &lt;context_tab&gt; IS NOT INITIAL .
      lv_subpattern    = 0 .

      compose_process_grid_r( EXPORTING iv_parent_level   = 0
                                        ir_parent_context = &lt;context_tab&gt;
                                        iv_maxlevel       = ls_buffer_rs-maxlevel
                                        iv_maxsubpattern  = ls_buffer_rs-maxsubpattern
                                        is_grid_layout    = ls_grid_layout
                               CHANGING ct_rowstructure   = ls_buffer_rs-rowstructure
                                        cs_legacy         = cs_legacy
                                        cv_top            = lv_top
                                        cv_left           = lv_left
                                        cv_subpattern     = lv_subpattern
                                        cv_firstcall      = lv_firstcall ) .
    ENDIF .

    CASE ls_grid_layout-rotate .
      WHEN space  .
        cs_legacy-tb_area_rows    = lv_top  - cs_legacy-tb_area_top  .
        cs_legacy-tb_area_columns = ls_buffer_rs-patterns_h-columns  .
      WHEN OTHERS .
        cs_legacy-tb_area_rows    = ls_buffer_rs-patterns_h-rows     .
        cs_legacy-tb_area_columns = lv_left - cs_legacy-tb_area_left .
    ENDCASE .

    IF cs_legacy-tb_area_rows LT 0 .
      cs_legacy-tb_area_rows = 0 .
    ENDIF .
    IF cs_legacy-tb_area_columns LT 0 .
      cs_legacy-tb_area_columns = 0 .
    ENDIF .

    cs_parent_legacy-tb_area_prew_top     = cs_legacy-tb_area_prew_top      = cs_legacy-tb_area_top .
    cs_parent_legacy-tb_area_prew_rows    = cs_legacy-tb_area_prew_rows     = cs_legacy-tb_area_rows .
    cs_parent_legacy-tb_area_prew_left    = cs_legacy-tb_area_prew_left     = cs_legacy-tb_area_left .
    cs_parent_legacy-tb_area_prew_columns = cs_legacy-tb_area_prew_columns  = cs_legacy-tb_area_columns .


*======================================================================
*======================================================================
*   Dataset Series information for Chart
*======================================================================
*======================================================================
    DO 1 TIMES .
*     is this Grid dataset for a Chart or CellDataValidation ?
      LOOP AT t_properties TRANSPORTING NO FIELDS
        WHERE dataset_id                EQ is_data-properties-id
           OR cb_valvld_for1_dataset_id EQ is_data-properties-id .
        EXIT .
      ENDLOOP .
      CHECK sy-subrc EQ 0 . &quot; --&gt;&gt; yes, it&apos;s dataset

      DATA:
        ls_ref_fields     TYPE lcl_excelruntime=&gt;ty_s_dataset_ref_fields ,
        lt_ref_fields     TYPE lcl_excelruntime=&gt;ty_t_dataset_ref_fields .

      LOOP AT ls_buffer_rs-rowvalues ASSIGNING &lt;rowvalues&gt; .  &quot; --&gt;&gt; loop at COLUMNS
        ls_ref_fields-field = &lt;rowvalues&gt;-value_fullpath .
        CASE ls_grid_layout-rotate .
          WHEN space  .
            ls_ref_fields-beg_x =
            ls_ref_fields-end_x = cs_legacy-tb_area_left + &lt;rowvalues&gt;-position_rel .
            ls_ref_fields-beg_y = cs_legacy-tb_area_top + 1 .
            ls_ref_fields-end_y = cs_legacy-tb_area_top + cs_legacy-tb_area_rows .
            IF ls_grid_layout-head IS NOT INITIAL .
              ADD 1 TO ls_ref_fields-beg_y .
            ENDIF .
            ls_ref_fields-caption_x = ls_ref_fields-beg_x .
            ls_ref_fields-caption_y = ls_ref_fields-beg_y - 1 .
          WHEN OTHERS .
            ls_ref_fields-beg_x = cs_legacy-tb_area_left + 1 .
            ls_ref_fields-end_x = cs_legacy-tb_area_left + cs_legacy-tb_area_columns .
            ls_ref_fields-beg_y =
            ls_ref_fields-end_y = cs_legacy-tb_area_top + &lt;rowvalues&gt;-position_rel .
            IF ls_grid_layout-head IS NOT INITIAL .
              ADD 1 TO ls_ref_fields-beg_x .
            ENDIF .
            ls_ref_fields-caption_x = ls_ref_fields-beg_x - 1 .
            ls_ref_fields-caption_y = ls_ref_fields-beg_y .
        ENDCASE .
        APPEND ls_ref_fields TO lt_ref_fields .
      ENDLOOP .
    ENDDO .

*======================================================================
*======================================================================
*   Finalize
*======================================================================
*======================================================================

    r_excelruntime-&gt;finalize_grid( iv_form_id    = is_data-properties-id
                                   it_ref_fields = lt_ref_fields[]
                                   iv_rt_path_1  = cs_legacy-rt_path_1 ) .

  ENDMETHOD .                    &quot;compose_process_grid
  METHOD compose_process_grid_r .
    DATA:
      lv_level              TYPE i ,
      lv_value              TYPE string ,
      lv_val_convert        TYPE flag ,
      lv_formula            TYPE flag ,
      lv_begin_top          TYPE i ,
      lv_begin_left         TYPE i ,
      lv_value_top          TYPE i ,
      lv_value_left         TYPE i ,
      lv_pattern_top        TYPE i ,
      lv_pattern_left       TYPE i ,
      lv_span               TYPE i ,
      ls_drawings           TYPE lcl_excel=&gt;ty_s_drawings_tmp ,
      lr_context_line       TYPE REF TO data ,
      lr_context_tab        TYPE REF TO data .
    FIELD-SYMBOLS:
      &lt;context_tab1&gt;        TYPE STANDARD TABLE ,
      &lt;context_line1&gt;       TYPE ANY ,
      &lt;context_tab&gt;         TYPE ANY TABLE ,
      &lt;context_line&gt;        TYPE ANY ,
      &lt;rowvalues&gt;           TYPE ty_s_grid_rowvalues ,
      &lt;rowpattrens&gt;         TYPE ty_s_grid_rowpattrens ,
      &lt;rowstructure&gt;        TYPE ty_s_grid_rowstructure ,
      &lt;rowstructure2&gt;       TYPE ty_s_grid_rowstructure ,
      &lt;patterns&gt;            TYPE lcl_excel=&gt;ty_s_patterns .

    lv_level = iv_parent_level + 1 .

    READ TABLE ct_rowstructure ASSIGNING &lt;rowstructure&gt; WITH KEY level = lv_level BINARY SEARCH .
    CHECK sy-subrc EQ 0 .

    IF &lt;rowstructure&gt;-loop_relpath IS INITIAL .
      ASSIGN ir_parent_context TO &lt;context_tab&gt; .
    ELSE .
      ASSIGN COMPONENT &lt;rowstructure&gt;-loop_relpath
      OF STRUCTURE ir_parent_context
      TO &lt;context_tab&gt; .
    ENDIF .
    CHECK &lt;context_tab&gt; IS ASSIGNED .

    IF &lt;context_tab&gt; IS INITIAL .
      CREATE DATA lr_context_line LIKE LINE OF &lt;context_tab&gt; .
      ASSIGN lr_context_line-&gt;* TO &lt;context_line1&gt; .
      CREATE DATA lr_context_tab LIKE STANDARD TABLE OF &lt;context_line1&gt; .
      ASSIGN lr_context_tab-&gt;* TO &lt;context_tab1&gt; .
      APPEND INITIAL LINE TO &lt;context_tab1&gt; .
      ASSIGN lr_context_tab-&gt;* TO &lt;context_tab&gt; .
    ENDIF .

    IF lv_level EQ 1 .
      progressbar_loop_init(
         EXPORTING it_tab           = &lt;context_tab&gt;
                   iv_step          = 777
                   iv_percent_start = 1
                   iv_percent_end   = 99
                   iv_text          = v_text-t225 ) .
    ENDIF .

    LOOP AT &lt;context_tab&gt; ASSIGNING &lt;context_line&gt; .

*================================================================================
*     current level processing
*================================================================================

      IF lv_level EQ 1 .
        progressbar_loop_actualize( ) .

        CASE iv_maxsubpattern .
          WHEN 1 .
            cv_subpattern = 1 .
          WHEN OTHERS .
            IF cv_subpattern LT iv_maxsubpattern .
              ADD 1 TO cv_subpattern .
            ELSE .
              cv_subpattern = 1 .
            ENDIF .
        ENDCASE .
      ENDIF .

      lv_begin_top  = cv_top  .
      lv_begin_left = cv_left .

      LOOP AT &lt;rowstructure&gt;-rowpattrens ASSIGNING &lt;rowpattrens&gt; .

        READ TABLE &lt;rowpattrens&gt;-patterns ASSIGNING &lt;patterns&gt; WITH TABLE KEY id = cv_subpattern .
        CHECK &lt;patterns&gt; IS ASSIGNED .

        r_excelruntime-&gt;begin_pattern( is_patterns = &lt;patterns&gt; ) .

        CASE is_grid_layout-rotate .
          WHEN space  .   cv_left = cs_legacy-tb_area_left + &lt;rowpattrens&gt;-position_rel - 1 .
          WHEN OTHERS .   cv_top  = cs_legacy-tb_area_top  + &lt;rowpattrens&gt;-position_rel - 1 .
        ENDCASE .

        lv_pattern_top  = cv_top  .
        lv_pattern_left = cv_left .

        LOOP AT &lt;rowpattrens&gt;-rowvalues ASSIGNING &lt;rowvalues&gt; .

          CASE is_grid_layout-rotate .
            WHEN space  .
              lv_value_top  = &lt;patterns&gt;-top  .
              lv_value_left = &lt;rowvalues&gt;-position .
            WHEN OTHERS .
              lv_value_left = &lt;patterns&gt;-left .
              lv_value_top  = &lt;rowvalues&gt;-position .
          ENDCASE .

          lv_val_convert = is_val_convert_relevant( &lt;rowvalues&gt;-ctxt_prop ) .

          lv_value = get_value( is_parent_context_ref = &lt;context_line&gt;
                                iv_shift_val_relpath  = &lt;rowvalues&gt;-value_relpath
                                iv_val_relpath        = &lt;rowvalues&gt;-value_relpath
                                iv_val_convert        = lv_val_convert
                                iv_fullpath           = &lt;rowvalues&gt;-value_fullpath
                                is_ctxt_prop          = &lt;rowvalues&gt;-ctxt_prop ) .
          DO 1 TIMES .
            CLEAR lv_formula .
            CHECK is_grid_layout-allow_formulas IS NOT INITIAL .
            CHECK lv_value    IS NOT INITIAL .
            CHECK lv_value(1) EQ &apos;=&apos; .

            lv_formula = abap_on .
          ENDDO .

          IF &lt;rowvalues&gt;-ctxt_prop-type_kind EQ cl_abap_datadescr=&gt;typekind_xstring .
            CLEAR ls_drawings .
            ls_drawings-drawing_type  = lcl_excel=&gt;c_drawing_type-bitmap .
            ls_drawings-media_rawdata = lv_value .
          ELSE  .
            DO 1 TIMES .
              CLEAR ls_drawings .
              CHECK lv_value IS NOT INITIAL .
              CHECK lv_value+0(1)       EQ &apos;@&apos; .
              CHECK STRLEN( lv_value )  EQ 4 .
              CHECK lv_value+3(1)       EQ &apos;@&apos; .
              ls_drawings-drawing_type  = lcl_excel=&gt;c_drawing_type-bitmap .
              ls_drawings-media_rawdata = get_icon_rawdata( lv_value ) .
            ENDDO .
          ENDIF .

          IF ls_drawings-media_rawdata IS INITIAL .
            r_excelruntime-&gt;begin_field( EXPORTING iv_top     = lv_value_top
                                                   iv_left    = lv_value_left
                                                   iv_value   = lv_value
                                                   iv_formula = lv_formula ) .
          ELSE .
            ls_drawings-top      = lv_value_top .
            ls_drawings-left     = lv_value_left .
            ls_drawings-rows     = 1 .
            ls_drawings-columns  = 1 .
            r_excelruntime-&gt;begin_drawing( EXPORTING is_drawings_tmp = ls_drawings ) .
          ENDIF .
        ENDLOOP .

        r_excelruntime-&gt;finalize_pattern( EXPORTING iv_printtitles_r = space
                                                    iv_printtitles_c = space
                                           CHANGING cv_top  = lv_pattern_top
                                                    cv_left = lv_pattern_left ) .
      ENDLOOP .

*================================================================================
*     recursive processing of the children levels
*================================================================================
      IF lv_level LT iv_maxlevel .
        compose_process_grid_r( EXPORTING iv_parent_level   = lv_level
                                          ir_parent_context = &lt;context_line&gt;
                                          iv_maxlevel       = iv_maxlevel
                                          iv_maxsubpattern  = iv_maxsubpattern
                                          is_grid_layout    = is_grid_layout
                                 CHANGING ct_rowstructure   = ct_rowstructure
                                          cs_legacy         = cs_legacy
                                          cv_top            = cv_top
                                          cv_left           = cv_left
                                          cv_subpattern     = cv_subpattern
                                          cv_firstcall      = cv_firstcall ) .
      ENDIF .

*================================================================================
*   merge Rows/Columns in the Spanned pattern
*================================================================================
      DO 1 TIMES .
        CASE is_grid_layout-rotate .
          WHEN space  .   CHECK cv_top  GT lv_begin_top .
          WHEN OTHERS .   CHECK cv_left GT lv_begin_left .
        ENDCASE .

        LOOP AT &lt;rowstructure&gt;-rowpattrens ASSIGNING &lt;rowpattrens&gt; .
          CASE is_grid_layout-rotate .
            WHEN space  .
              lv_span  = cv_top - lv_begin_top .
              CHECK lv_span GT 1 .
              lv_pattern_top  = lv_begin_top .
              lv_pattern_left = cs_legacy-tb_area_left + &lt;rowpattrens&gt;-position_rel - 1 .

              r_excelruntime-&gt;finalize_respattern(
                    EXPORTING iv_rowspan         = abap_on
                              iv_top             = lv_pattern_top
                              iv_left            = lv_pattern_left
                              iv_rows            = lv_span
                              iv_columns         = &lt;rowpattrens&gt;-columns
                              it_autofitmerged_r = &lt;rowpattrens&gt;-t_autofitmerged_r
                              it_autofitmerged_c = &lt;rowpattrens&gt;-t_autofitmerged_c ) .
            WHEN OTHERS .
              lv_span  = cv_left - lv_begin_left .
              CHECK lv_span GT 1 .
              lv_pattern_top  = cs_legacy-tb_area_top  + &lt;rowpattrens&gt;-position_rel - 1 .
              lv_pattern_left = lv_begin_left .

              r_excelruntime-&gt;finalize_respattern(
                    EXPORTING iv_colspan         = abap_on
                              iv_top             = lv_pattern_top
                              iv_left            = lv_pattern_left
                              iv_rows            = &lt;rowpattrens&gt;-columns
                              iv_columns         = lv_span
                              it_autofitmerged_r = &lt;rowpattrens&gt;-t_autofitmerged_r
                              it_autofitmerged_c = &lt;rowpattrens&gt;-t_autofitmerged_c ) .
          ENDCASE .
        ENDLOOP .
      ENDDO .

*================================================================================
*   optimize row/column properties
*================================================================================
      DO 1 TIMES .
        CHECK cv_firstcall IS NOT INITIAL .
        CHECK lv_level    EQ 1 .
        CLEAR cv_firstcall .

        LOOP AT ct_rowstructure ASSIGNING &lt;rowstructure2&gt; .
          LOOP AT &lt;rowstructure2&gt;-rowpattrens ASSIGNING &lt;rowpattrens&gt; .
            LOOP AT &lt;rowpattrens&gt;-patterns ASSIGNING &lt;patterns&gt; .
              CASE is_grid_layout-rotate .
                WHEN space  .   CLEAR &lt;patterns&gt;-t_colprop[] .
                WHEN OTHERS .   CLEAR &lt;patterns&gt;-t_rowprop[] .
              ENDCASE .
            ENDLOOP .
          ENDLOOP .
        ENDLOOP .
      ENDDO .

*================================================================================
*     next row/column
*================================================================================
      IF lv_level EQ iv_maxlevel .
        CASE is_grid_layout-rotate .
          WHEN space  .   ADD 1 TO cv_top  .
          WHEN OTHERS .   ADD 1 TO cv_left .
        ENDCASE .
      ENDIF .

    ENDLOOP .   &quot;  AT &lt;context_tab&gt;

  ENDMETHOD .                    &quot;compose_process_grid_r
  METHOD get_appearance_req .
    FIELD-SYMBOLS:
      &lt;component&gt;         TYPE ANY .

    IF iv_apr_relpath IS INITIAL.
      rv_required = abap_on.
      EXIT.
    ELSE.
      rv_required = abap_off.
    ENDIF.

    ASSIGN COMPONENT iv_apr_relpath
    OF STRUCTURE is_parent_context_ref TO &lt;component&gt; .
    CHECK &lt;component&gt; IS ASSIGNED .

    IF  iv_apr_offset IS INITIAL
    AND iv_apr_match  IS INITIAL.
      CHECK &lt;component&gt; IS NOT INITIAL .

    ELSEIF iv_apr_offset IS NOT INITIAL
       AND iv_apr_match  IS NOT INITIAL.
      CHECK &lt;component&gt;+iv_apr_offset(iv_apr_match) IS NOT INITIAL .

    ELSEIF iv_apr_offset IS NOT INITIAL.
      CHECK &lt;component&gt;+iv_apr_offset IS NOT INITIAL .

    ELSEIF iv_apr_match  IS NOT INITIAL.
      CHECK &lt;component&gt;(iv_apr_match) IS NOT INITIAL .
    ENDIF.

    rv_required = abap_on .
  ENDMETHOD .                    &quot;get_appearance_req
  METHOD get_value_simple .
    DATA:
      lv_part             TYPE string .
    FIELD-SYMBOLS:
      &lt;component&gt;         TYPE ANY .

    CLEAR ev_value .

    CHECK iv_relpath IS NOT INITIAL .

    ASSIGN COMPONENT iv_relpath
    OF STRUCTURE is_parent_context_ref TO &lt;component&gt; .
    CHECK &lt;component&gt; IS ASSIGNED .

    lv_part = &lt;component&gt; .
    CHECK lv_part IS NOT INITIAL .

    TRY .
        IF  iv_offset IS INITIAL
        AND iv_match  IS INITIAL .

        ELSEIF iv_offset IS NOT INITIAL
           AND iv_match  IS NOT INITIAL .
          lv_part = lv_part+iv_offset(iv_match) .

        ELSEIF iv_offset IS NOT INITIAL.
          lv_part = lv_part+iv_offset .

        ELSEIF iv_match  IS NOT INITIAL.
          lv_part = lv_part(iv_match) .
        ENDIF .
      CATCH cx_sy_range_out_of_bounds .
        RETURN .
    ENDTRY .

    ev_value = lv_part .
  ENDMETHOD .                    &quot;get_value_simple
  METHOD get_value .
    TYPE-POOLS:
      sydes .
    DATA:
      ls_tabfield         TYPE tabfield ,
      lv_value(60000)     TYPE c ,
      lv_val_offset       TYPE i ,
      lv_val_match        TYPE i ,
      lv_val_strlen       TYPE i ,
      lv_min_strlen       TYPE i ,
      lv_tabkind          TYPE ty_char1 ,
      lv_relpath_sub      TYPE ty_comp_path ,
      lr_table_line       TYPE REF TO data ,
      lr_table_std        TYPE REF TO data .
    FIELD-SYMBOLS:
      &lt;component&gt;         TYPE ANY ,
      &lt;table_std&gt;         TYPE STANDARD TABLE ,
      &lt;table_any&gt;         TYPE ANY TABLE ,
      &lt;table_line&gt;        TYPE ANY .

    CLEAR rv_value.
    CHECK iv_val_relpath IS NOT INITIAL .

*======================================================================
*   get reference
*======================================================================
    CASE iv_val_sub_req .
      WHEN space .
        IF is_ctxt_prop IS INITIAL .
          is_ctxt_prop = r_context-&gt;node_get_by_path( iv_comp_fullpath = iv_fullpath ) .
        ENDIF .
        CHECK is_ctxt_prop-type_kind NE cl_abap_datadescr=&gt;typekind_table .

        IF iv_shift_val_relpath IS INITIAL .
          ASSIGN is_parent_context_ref TO &lt;component&gt; .
        ELSE .
          ASSIGN COMPONENT iv_shift_val_relpath
          OF STRUCTURE is_parent_context_ref TO &lt;component&gt; .
        ENDIF .
        CHECK &lt;component&gt; IS ASSIGNED .

      WHEN OTHERS .
        CHECK iv_val_sub_row IS NOT INITIAL .
        CHECK iv_val_sub_col IS NOT INITIAL .

        IF is_ctxt_prop IS INITIAL .
          is_ctxt_prop = r_context-&gt;node_get_by_path( iv_comp_fullpath = iv_fullpath ) .
        ENDIF .
        CHECK is_ctxt_prop-type_kind EQ cl_abap_datadescr=&gt;typekind_table .

        IF iv_shift_val_relpath IS INITIAL .
          ASSIGN is_parent_context_ref TO &lt;table_any&gt; .
        ELSE .
          ASSIGN COMPONENT iv_shift_val_relpath
          OF STRUCTURE is_parent_context_ref TO &lt;table_any&gt; .
        ENDIF .
        CHECK &lt;table_any&gt; IS NOT INITIAL .

        DESCRIBE TABLE &lt;table_any&gt; KIND lv_tabkind .
        CASE lv_tabkind .
          WHEN sydes_kind-hashed
            OR sydes_kind-sorted .
            CHECK LINES( &lt;table_any&gt; ) GE iv_val_sub_row .

            CREATE DATA lr_table_line LIKE LINE OF &lt;table_any&gt; .
            ASSIGN lr_table_line-&gt;* TO &lt;table_line&gt; .
            CREATE DATA lr_table_std  LIKE STANDARD TABLE OF &lt;table_line&gt; .
            ASSIGN lr_table_std-&gt;* TO &lt;table_std&gt; .
            CHECK &lt;table_std&gt; IS ASSIGNED .
            &lt;table_std&gt;[] = &lt;table_any&gt;[] .

          WHEN OTHERS .
            ASSIGN &lt;table_any&gt; TO &lt;table_std&gt; .
        ENDCASE .
        CHECK &lt;table_std&gt; IS ASSIGNED .
        READ TABLE &lt;table_std&gt; ASSIGNING &lt;table_line&gt; INDEX iv_val_sub_row .
        CHECK &lt;table_line&gt; IS ASSIGNED .

        ASSIGN COMPONENT iv_val_sub_col
        OF STRUCTURE &lt;table_line&gt; TO &lt;component&gt; .
        CHECK &lt;component&gt; IS ASSIGNED .

        CONCATENATE &apos;LINE-&apos; iv_val_sub_col INTO lv_relpath_sub .

        is_ctxt_prop =
        r_context-&gt;node_get_by_path( iv_relpath  = lv_relpath_sub
                                     iv_fullpath_parent = iv_fullpath ) .
        CHECK is_ctxt_prop-type_kind NE cl_abap_datadescr=&gt;typekind_table .
    ENDCASE .

*======================================================================
*   conversion
*======================================================================
    IF is_ctxt_prop-type_kind EQ cl_abap_datadescr=&gt;typekind_packed
    OR is_ctxt_prop-type_kind EQ cl_abap_datadescr=&gt;typekind_int .
      rv_value = &lt;component&gt; .
      IF &lt;component&gt; LT 0 .
        REPLACE FIRST OCCURRENCE OF &apos;-&apos; IN rv_value WITH space .
        CONCATENATE &apos;-&apos; rv_value INTO rv_value .
      ENDIF .
      CONDENSE rv_value NO-GAPS .

    ELSEIF is_ctxt_prop-type_kind EQ cl_abap_datadescr=&gt;typekind_xstring .
      rv_value = &lt;component&gt; .

    ELSEIF iv_val_convert IS INITIAL .
      rv_value = &lt;component&gt; .

    ELSEIF is_ctxt_prop IS NOT INITIAL .
*     ls_tabfield-tabname   = is_ctxt_prop-type_refname_tab .
*     ls_tabfield-fieldname = is_ctxt_prop-type_refname_fld .
*     lv_value = &lt;component&gt; .
*     CALL FUNCTION &apos;RS_DS_CONV_IN_2_EX&apos;
*       EXPORTING
*         input            = lv_value
*         table_field      = ls_tabfield
*       IMPORTING
*         output           = lv_value
*       EXCEPTIONS
*         conversion_error = 1
*         OTHERS           = 2.
*     IF sy-subrc EQ 0 .
*       rv_value = lv_value .
*     ELSE .
*       rv_value = &lt;component&gt; .
*     ENDIF .

      DATA lr_input_util     TYPE REF TO cl_fobu_input_util.

      CREATE OBJECT lr_input_util
        EXPORTING
          tabname   = is_ctxt_prop-type_refname_tab
          fieldname = is_ctxt_prop-type_refname_fld.

      lr_input_util-&gt;output_convert(
          EXPORTING  field_value_int = &lt;component&gt;
          IMPORTING  field_value_ext = lv_value
          EXCEPTIONS OTHERS          = 2 ) .
      IF sy-subrc EQ 0 .
        rv_value = lv_value .
      ELSE .
        rv_value = &lt;component&gt; .
      ENDIF .

    ENDIF .

    CHECK rv_value IS NOT INITIAL AND
        ( iv_val_offset IS NOT INITIAL OR iv_val_match IS NOT INITIAL ) .

    lv_val_offset = iv_val_offset .
    lv_val_match  = iv_val_match  .
    lv_val_strlen = STRLEN( rv_value ) .
    lv_min_strlen = lv_val_offset + lv_val_match .

    IF lv_val_strlen LE lv_val_offset .
      CLEAR rv_value .
      EXIT .
    ELSEIF lv_val_strlen LT lv_min_strlen .
      lv_val_match = lv_val_strlen - lv_val_offset .
    ENDIF .

    TRY .
        IF  lv_val_offset IS NOT INITIAL
        AND lv_val_match  IS NOT INITIAL .
          rv_value = rv_value+lv_val_offset(lv_val_match) .

        ELSEIF lv_val_offset IS NOT INITIAL .
          rv_value = rv_value+lv_val_offset .

        ELSEIF lv_val_match  IS NOT INITIAL .
          rv_value = rv_value(lv_val_match) .
        ENDIF .

      CATCH cx_sy_range_out_of_bounds .
        RETURN .
    ENDTRY .

  ENDMETHOD .                    &quot; get_value
  METHOD get_icon_rawdata .
    DATA:
      lr_bds_document   TYPE REF TO cl_bds_document_set ,
      lv_objkey         TYPE bapibds01-objkey ,
      lv_content_size   TYPE i ,
      lt_content        TYPE sbdst_content ,
      lt_components	    TYPE sbdst_components ,
      ls_buffer_icon    TYPE ty_s_buffer_icon .
    FIELD-SYMBOLS:
      &lt;components&gt;      TYPE bapicompon ,
      &lt;buffer_icon&gt;     TYPE ty_s_buffer_icon .
    CLEAR rv_rawdata .

    READ TABLE t_buffer_icon ASSIGNING &lt;buffer_icon&gt;
    WITH TABLE KEY id = iv_icon .
    IF sy-subrc NE 0 .
      ls_buffer_icon-id   = iv_icon .

      DO 1 TIMES .
        SELECT SINGLE id name
          INTO (ls_buffer_icon-id, ls_buffer_icon-name)
          FROM icon
         WHERE id EQ iv_icon .
        CHECK sy-subrc EQ 0 .

        lv_objkey = ls_buffer_icon-name .
        CREATE OBJECT lr_bds_document .

        lr_bds_document-&gt;get_with_table(
          EXPORTING classname   = &apos;SAP_ICONS&apos;
                    classtype   = &apos;OT&apos;
                    object_key  = lv_objkey
          CHANGING  content     = lt_content
                    components  = lt_components
          EXCEPTIONS OTHERS     = 1 ) .

        READ TABLE lt_components ASSIGNING &lt;components&gt; INDEX 1 .
        CHECK sy-subrc EQ 0 .

        lv_content_size = &lt;components&gt;-comp_size .
        CHECK lv_content_size GT 0 .

        CALL FUNCTION &apos;SCMS_BINARY_TO_XSTRING&apos;
          EXPORTING
            input_length = lv_content_size
          IMPORTING
            buffer       = ls_buffer_icon-rawdata
          TABLES
            binary_tab   = lt_content.
      ENDDO .
      INSERT ls_buffer_icon INTO TABLE t_buffer_icon ASSIGNING &lt;buffer_icon&gt; .
    ENDIF.

    rv_rawdata = &lt;buffer_icon&gt;-rawdata .
  ENDMETHOD .                    &quot;get_icon_rawdata
  METHOD shift_relpath .
    DATA:
      lv_i                  TYPE i ,
      lv_tmp_relpath1       TYPE c LENGTH 30000 .

    DEFINE mk_shift_left .
      if &amp;2 is not initial .
        lv_tmp_relpath1 = &amp;1 .
        lv_i = strlen( &amp;2 ) .
        if lv_tmp_relpath1(lv_i) eq &amp;2 .
          shift lv_tmp_relpath1 left by lv_i places .
        endif .
        &amp;1 = lv_tmp_relpath1 .
      endif .
    END-OF-DEFINITION .

    mk_shift_left  cv_relpath: r_context-&gt;v_contextname , &apos;-&apos; , &apos;LINE-&apos; .
  ENDMETHOD .                    &quot;shift_relpath
  METHOD salv_node_get_children .
    TRY .
        rt_nodes[] = ir_salv_node-&gt;get_children( ) .
      CATCH cx_salv_msg .
        CLEAR rt_nodes[] .
    ENDTRY .
  ENDMETHOD .                    &quot; salv_node_get_children
ENDCLASS .                    &quot;lcl_formruntime IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_formtemplate DEFINITION
*----------------------------------------------------------------------*
*       form editor
*----------------------------------------------------------------------*
CLASS lcl_formtemplate DEFINITION INHERITING FROM lcl_form .
  PUBLIC SECTION .

    METHODS:
      save
          IMPORTING iv_deactivate         TYPE flag DEFAULT abap_on
                    iv_devclass           TYPE any OPTIONAL ,
      activate ,
      deactivate ,
      node_add
          IMPORTING iv_comp_type          TYPE any
                    iv_comp_name          TYPE any
                    iv_comp_descr         TYPE any OPTIONAL
                    iv_parent_id          TYPE any
                    iv_sibling_id         TYPE any OPTIONAL
                    iv_default_values     TYPE any DEFAULT abap_on
          RETURNING value(rv_new_id)      TYPE ty_s_hierarchy-id ,
      node_del
          IMPORTING iv_id                 TYPE any ,
      node_clone
          IMPORTING iv_id_sample          TYPE any
                    iv_id_target_parent   TYPE any OPTIONAL
                    iv_rename_prefix      TYPE any OPTIONAL
                    iv_rename_postfix     TYPE any OPTIONAL
                    iv_rename_find        TYPE any OPTIONAL
                    iv_rename_replacement TYPE any OPTIONAL
          RETURNING value(rv_id_clone)    TYPE ty_s_hierarchy-id ,
      node_move
          IMPORTING iv_id_source          TYPE any
                    iv_id_target          TYPE any ,
      node_move_sibling_up
          IMPORTING iv_id                 TYPE any ,
      node_move_sibling_down
          IMPORTING iv_id                 TYPE any ,
      node_set_properties
          CHANGING  cs_properties         TYPE ty_s_properties ,
      get_retmess_icon
          IMPORTING iv_id                 TYPE any
          RETURNING value(rv_retmess_icon) TYPE icon_d ,
      set_formname_new
          IMPORTING iv_formname           TYPE any ,
      set_formdescr_new
          IMPORTING iv_formdescr          TYPE any ,
      autostructure_create ,
      autostructure_recurs
          IMPORTING is_altern_form_prop   TYPE lcl_form=&gt;ty_s_properties
                    is_parent_form_prop   TYPE lcl_form=&gt;ty_s_properties
                    is_parent_ctxt_prop   TYPE lcl_context=&gt;ty_s_properties
                    iv_parent_level       TYPE i
                    iv_parent_cb_fullpath TYPE any ,
      is_component_subnode_of
          IMPORTING iv_form_id            TYPE ty_s_hierarchy-id
                    iv_form_id_checked    TYPE ty_s_hierarchy-id
          RETURNING value(rv_yes)         TYPE flag .

  PRIVATE SECTION .
    METHODS:
      node_clone_recurs
          IMPORTING is_hier_sample_parent TYPE ty_s_hierarchy
                    iv_id_clone_parent    TYPE ty_s_hierarchy-id
                    iv_rename_prefix      TYPE any OPTIONAL
                    iv_rename_postfix     TYPE any OPTIONAL
                    iv_rename_find        TYPE any OPTIONAL
                    iv_rename_replacement TYPE any OPTIONAL .

ENDCLASS .                    &quot;lcl_formtemplate DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_formtemplate IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_formtemplate IMPLEMENTATION .
  METHOD save .
    msg_init( ) .

    DATA:
      ls_head             TYPE ty_s_head ,
      lv_objid            TYPE wwwdatatab-objid ,
      lt_html_table       TYPE STANDARD TABLE OF w3html ,
      lt_document_table   TYPE tsfmime ,
      lv_document_size    TYPE i ,
      lv_devclass         TYPE tadir-devclass .

    IF iv_deactivate IS NOT INITIAL .
      deactivate( ) .
    ENDIF .
    ls_head-formname    = v_formname .
    ls_head-formdescr   = v_formdescr .
    ls_head-contextname = r_context-&gt;v_contextname .
    ls_head-active      = v_active .
    ls_head-root_id     = v_root_id .

    v_changed_uname = sy-uname .
    v_changed_datum = sy-datum .
    IF v_created_uname IS INITIAL .
      v_created_uname = v_changed_uname .
    ENDIF .
    IF v_created_datum IS INITIAL .
      v_created_datum = v_changed_datum .
    ENDIF .
    ls_head-created_uname = v_created_uname .
    ls_head-created_datum = v_created_datum .
    ls_head-changed_uname = v_changed_uname .
    ls_head-changed_datum = v_changed_datum .

    FIELD-SYMBOLS &lt;properties&gt; TYPE ty_s_properties .
    READ TABLE t_properties ASSIGNING &lt;properties&gt; WITH KEY id = v_root_id .
    IF sy-subrc EQ 0 .
      &lt;properties&gt;-comp_name  = v_formname .
      &lt;properties&gt;-comp_descr = v_formdescr .
    ENDIF .

    r_exceltemplate-&gt;formparameters_struc_set(
                          iv_path  = r_exceltemplate-&gt;c_path-formhead
                          is_struc = ls_head ) .
    r_exceltemplate-&gt;formparameters_table_set(
                          iv_path  = r_exceltemplate-&gt;c_path-formproperties
                          it_tab   = t_properties ) .
    r_exceltemplate-&gt;formparameters_table_set(
                          iv_path  = r_exceltemplate-&gt;c_path-formhierarchy
                          it_tab   = t_hierarchy ) .

    lv_objid = conv_formname_ei( v_formname ) .

    r_exceltemplate-&gt;rawdata_get_as_table(
               IMPORTING  et_document_table = lt_document_table
                          ev_document_size  = lv_document_size ) .

    IF v_devclass IS INITIAL .
      lv_devclass = iv_devclass .
    ELSE .
      lv_devclass = v_devclass .
    ENDIF .
    IF lv_devclass IS INITIAL .
      MESSAGE e000(lp) WITH v_text-t037 INTO v_dummy .   &quot; text: Development class is not specified
      msg_syst_catch( ) .
      EXIT .
    ENDIF .

    CALL FUNCTION &apos;EXPORT_WEB_OBJECT&apos;
      EXPORTING
        object_id          = lv_objid
        mimetype           = c_mimetype
        text               = v_formdescr
        size               = lv_document_size
        devclass           = lv_devclass
      TABLES
        html               = lt_html_table
        mime               = lt_document_table
      EXCEPTIONS
        size_not_specified = 1
        object_locked      = 2
        OTHERS             = 3.
    IF sy-subrc NE 0 .
      msg_syst_catch( ) .
      EXIT .
    ENDIF .

    v_devclass = lv_devclass .

  ENDMETHOD .                    &quot;save
  METHOD activate .
    msg_init( ) .

    DATA:
      ls_properties       TYPE ty_s_properties ,
      lv_active           TYPE flag .
    FIELD-SYMBOLS:
      &lt;exceptions&gt;        TYPE ty_s_exceptions ,
      &lt;retmess&gt;           TYPE bapiret2 .

    IF v_devclass IS INITIAL .
      MESSAGE e000(lp) WITH v_text-t038 INTO v_dummy .  &quot; text: Firstly, save the form
      msg_syst_catch( ) .
      EXIT .
    ENDIF .

    check_subtree( ) .
    v_msg_init = abap_off .
    lv_active  = abap_on .

    LOOP AT t_exceptions ASSIGNING &lt;exceptions&gt; .
      READ TABLE t_properties INTO ls_properties WITH KEY id = &lt;exceptions&gt;-id .
      IF sy-subrc NE 0 .
        DELETE t_exceptions .
        CONTINUE .
      ENDIF .

      CHECK ls_properties-draft_subtree EQ c_draft_subtree-no .

      CHECK node_get_retcode_severity( &lt;exceptions&gt;-id ) EQ c_retcode-error .
      v_retcode = c_retcode-error .
      lv_active = abap_off .

      LOOP AT &lt;exceptions&gt;-t_retmess ASSIGNING &lt;retmess&gt; .
        IF ls_properties-comp_descr IS INITIAL .
          &lt;retmess&gt;-parameter = ls_properties-comp_name .
        ELSE .
          CONCATENATE ls_properties-comp_name &apos;-&apos; ls_properties-comp_descr
          INTO &lt;retmess&gt;-parameter SEPARATED BY space .
        ENDIF .

        APPEND &lt;retmess&gt; TO t_retmess .
      ENDLOOP .
    ENDLOOP .

    v_active = lv_active .
    save( iv_deactivate = space ) .
    v_msg_init = abap_on .

  ENDMETHOD .                    &quot;activate
  METHOD deactivate .
    v_active = abap_off .
  ENDMETHOD .                    &quot;deactivate
  METHOD node_add .
    msg_init( ) .

    DATA:
      ls_properties         TYPE ty_s_properties ,
      ls_tree_layout        TYPE ty_s_tree_layout ,
      ls_grid_layout        TYPE ty_s_grid_layout .

*------------ preliminary checks
    IF iv_comp_name IS INITIAL
    OR iv_comp_name CA &apos;-&apos; .
      MESSAGE e000(lp) WITH v_text-t039    &quot; text: Component name is incorrect
                            &apos;(&apos; iv_comp_name &apos;)&apos; INTO v_dummy .
      msg_syst_catch( ) .
    ENDIF .
    CHECK v_retcode NE c_retcode-error .

    READ TABLE t_properties TRANSPORTING NO FIELDS WITH KEY comp_name = iv_comp_name .
    IF sy-subrc EQ 0 .
      MESSAGE w000(lp) WITH v_text-t040    &quot; text: Component with same name already exists
                            &apos;(&apos; iv_comp_name &apos;)&apos; INTO v_dummy .
      msg_syst_catch( ) .
    ENDIF .

    is_comptype_allowed( iv_id = iv_parent_id
                         iv_child_type = iv_comp_type ) .
    CHECK v_retcode NE c_retcode-error .

*------------ add node into hierarchy
    CALL FUNCTION &apos;RS_TREE_SET_CURRENT_TREE&apos;
      TABLES
        nodeinfo = t_hierarchy.

    IF iv_sibling_id IS INITIAL .
      CALL FUNCTION &apos;RS_TREE_ADD_NODE&apos;
        EXPORTING
          new_name     = space
          insert_id    = iv_parent_id
          relationship = stree_reltype_baby
        IMPORTING
          new_id       = rv_new_id
        EXCEPTIONS
          OTHERS       = 0.
    ELSE .
      CALL FUNCTION &apos;RS_TREE_ADD_NODE&apos;
        EXPORTING
          new_name     = space
          insert_id    = iv_sibling_id
          relationship = stree_reltype_next
        IMPORTING
          new_id       = rv_new_id
        EXCEPTIONS
          OTHERS       = 0.
    ENDIF .


    CALL FUNCTION &apos;RS_TREE_GET_CURRENT_TREE&apos;
      TABLES
        nodeinfo = t_hierarchy.

*------------ add node properties
    ls_properties-comp_type   = iv_comp_type .
    ls_properties-comp_name   = iv_comp_name .
    ls_properties-comp_descr  = iv_comp_descr .

    IF iv_default_values IS NOT INITIAL . &quot; set default values
      CASE ls_properties-comp_type .
        WHEN c_comp_type-sheet    .
        WHEN c_comp_type-loopstep .
        WHEN c_comp_type-pattern
          OR c_comp_type-respattern  .
          ls_properties-tb_colprop = abap_on .
          ls_properties-tb_rowprop = abap_on .
        WHEN c_comp_type-field    .
        WHEN c_comp_type-folder   .
        WHEN c_comp_type-drawing  .
        WHEN c_comp_type-tree  .
          conv_container_fs(
              EXPORTING iv_field      = ls_properties-tree_layout
              IMPORTING es_structure  = ls_tree_layout ) .
          ls_tree_layout-stru = abap_on .
          ls_tree_layout-stru_exp_coll = c_stru_exp_coll-expanded .
          ls_tree_layout-head = abap_on .
          ls_tree_layout-col_hier = abap_on .
          ls_tree_layout-col_hier_shift = 5 .
          ls_tree_layout-col_othr = abap_on .
          ls_tree_layout-allow_formulas = abap_on .
          conv_container_sf(
              EXPORTING is_structure  = ls_tree_layout
              IMPORTING ev_field      = ls_properties-tree_layout ) .
        WHEN c_comp_type-grid  .
          conv_container_fs(
              EXPORTING iv_field      = ls_properties-grid_layout
              IMPORTING es_structure  = ls_grid_layout ) .
          ls_grid_layout-head = abap_on .
          ls_grid_layout-head_titles = c_head_titles-tech_descr .
          ls_grid_layout-allow_formulas = abap_on .
          conv_container_sf(
              EXPORTING is_structure  = ls_grid_layout
              IMPORTING ev_field      = ls_properties-grid_layout ) .
      ENDCASE .
    ENDIF .

    ls_properties-id = rv_new_id .
    APPEND ls_properties TO t_properties .

*------------ check subtree
    check_subtree( rv_new_id ) .
    deactivate( ) .

  ENDMETHOD .                    &quot;node_add
  METHOD node_del .
    msg_init( ) .

    DATA:
      lv_id                 TYPE snode-id ,
      ls_hier_subtree       TYPE ty_s_hierarchy ,
      lt_hier_subtree       TYPE ty_t_hierarchy .

    IF iv_id EQ v_root_id .
      MESSAGE e000(lp) WITH v_text-t342    &quot; text: Root node cannot be removed
                       INTO v_dummy .
      msg_syst_catch( ) .
      RETURN .
    ENDIF .


    lv_id = iv_id .

    CALL FUNCTION &apos;RS_TREE_SET_CURRENT_TREE&apos;
      TABLES
        nodeinfo = t_hierarchy.

    CALL FUNCTION &apos;RS_TREE_LIST&apos;
      EXPORTING
        node_id        = lv_id
        all            = abap_on
      TABLES
        list           = lt_hier_subtree
      EXCEPTIONS
        cycle_detected = 1
        OTHERS         = 0.
    CHECK sy-subrc EQ 0 .

    LOOP AT lt_hier_subtree INTO ls_hier_subtree .
      DELETE t_properties WHERE id EQ ls_hier_subtree-id .
    ENDLOOP .

    CALL FUNCTION &apos;RS_TREE_DELETE_NODE&apos;
      EXPORTING
        node_id = lv_id
      EXCEPTIONS
        OTHERS  = 0.

    CALL FUNCTION &apos;RS_TREE_GET_CURRENT_TREE&apos;
      TABLES
        nodeinfo = t_hierarchy.

    DELETE t_patternarea WHERE areaid = lv_id .

    check_subtree( ) .
    deactivate( ) .
  ENDMETHOD .                    &quot;node_del
  METHOD node_move .
    msg_init( ) .

    DATA:
      lv_id_parent_old  TYPE snode-id ,
      lv_id_source      TYPE snode-id ,
      lv_id_target      TYPE snode-id ,
      ls_form_prop_source TYPE ty_s_properties .

*------ prepare
    lv_id_source = iv_id_source .
    lv_id_target = iv_id_target .
    lv_id_parent_old = node_get_parent( lv_id_source ) .
    CHECK lv_id_parent_old NE lv_id_target .

*------ check the new location via component type
    ls_form_prop_source = node_get_properties( lv_id_source ) .

    is_comptype_allowed( iv_id  = lv_id_target
                         iv_child_type  = ls_form_prop_source-comp_type ) .
    CHECK v_retcode NE c_retcode-error .

*------ the move process
    CALL FUNCTION &apos;RS_TREE_SET_CURRENT_TREE&apos;
      TABLES
        nodeinfo = t_hierarchy.

    CALL FUNCTION &apos;RS_TREE_MOVE&apos;
      EXPORTING
        destination           = lv_id_target
        move_id               = lv_id_source
        relationship          = stree_reltype_baby &quot;stree_reltype_child
      EXCEPTIONS
        destination_not_found = 1
        source_not_found      = 2
        OTHERS                = 3.
    IF sy-subrc NE 0 .
      MESSAGE e000(lp) WITH v_text-t005 INTO v_dummy . &quot; text: Requested node was not found in the structure
      msg_syst_catch( ) .
    ENDIF .
    CHECK v_retcode NE c_retcode-error .

    CALL FUNCTION &apos;RS_TREE_GET_CURRENT_TREE&apos;
      TABLES
        nodeinfo = t_hierarchy.

*------ checks
    check_subtree( lv_id_target ) .
    deactivate( ) .
  ENDMETHOD .                    &quot;node_move
  METHOD node_move_sibling_up .
    msg_init( ) .

    DATA:
      lv_id_parent          TYPE snode-id ,
      ls_hierarchy          TYPE ty_s_hierarchy ,
      ls_hier_prec          TYPE ty_s_hierarchy .

*------ prepare
    lv_id_parent = node_get_parent( iv_id ) .

    READ TABLE t_hierarchy INTO ls_hierarchy WITH KEY id = iv_id .
    IF sy-subrc NE 0 .
      MESSAGE e000(lp) WITH v_text-t041 INTO v_dummy . &quot;  text: Moving of the component is impossible
      msg_syst_catch( ) .
    ENDIF .
    CHECK v_retcode NE c_retcode-error .

    READ TABLE t_hierarchy INTO ls_hier_prec
    WITH KEY next   = ls_hierarchy-id
             tlevel = ls_hierarchy-tlevel .
    IF sy-subrc NE 0 .
      MESSAGE e000(lp) WITH v_text-t041 INTO v_dummy . &quot;  text: Moving of the component is impossible
      msg_syst_catch( ) .
    ENDIF .
    CHECK v_retcode NE c_retcode-error .

*------ the move process
    CALL FUNCTION &apos;RS_TREE_SET_CURRENT_TREE&apos;
      TABLES
        nodeinfo = t_hierarchy.


    CALL FUNCTION &apos;RS_TREE_MOVE&apos;
      EXPORTING
        destination           = ls_hierarchy-id
        move_id               = ls_hier_prec-id
        relationship          = stree_reltype_next
      EXCEPTIONS
        destination_not_found = 1
        source_not_found      = 2
        OTHERS                = 3.
    IF sy-subrc NE 0 .
      MESSAGE e000(lp) WITH v_text-t041 INTO v_dummy . &quot;  text: Moving of the component is impossible
      msg_syst_catch( ) .
    ENDIF .
    CHECK v_retcode NE c_retcode-error .

    CALL FUNCTION &apos;RS_TREE_GET_CURRENT_TREE&apos;
      TABLES
        nodeinfo = t_hierarchy.

*------ checks
    check_subtree( lv_id_parent ) .
    deactivate( ) .
  ENDMETHOD .                    &quot;node_move_sibling_up
  METHOD node_move_sibling_down .
    msg_init( ) .

    DATA:
      lv_id_parent          TYPE snode-id ,
      ls_hierarchy          TYPE ty_s_hierarchy .

*------ prepare
    lv_id_parent = node_get_parent( iv_id ) .

    READ TABLE t_hierarchy INTO ls_hierarchy WITH KEY id = iv_id .
    IF sy-subrc NE 0
    OR ls_hierarchy-next IS INITIAL .
      MESSAGE e000(lp) WITH v_text-t041 INTO v_dummy . &quot;  text: Moving of the component is impossible
      msg_syst_catch( ) .
    ENDIF .
    CHECK v_retcode NE c_retcode-error .


*------ the move process
    CALL FUNCTION &apos;RS_TREE_SET_CURRENT_TREE&apos;
      TABLES
        nodeinfo = t_hierarchy.

    CALL FUNCTION &apos;RS_TREE_MOVE&apos;
      EXPORTING
        destination           = ls_hierarchy-next
        move_id               = ls_hierarchy-id
        relationship          = stree_reltype_next
      EXCEPTIONS
        destination_not_found = 1
        source_not_found      = 2
        OTHERS                = 3.
    IF sy-subrc NE 0 .
      MESSAGE e000(lp) WITH v_text-t041 INTO v_dummy . &quot;  text: Moving of the component is impossible
      msg_syst_catch( ) .
    ENDIF .
    CHECK v_retcode NE c_retcode-error .

    CALL FUNCTION &apos;RS_TREE_GET_CURRENT_TREE&apos;
      TABLES
        nodeinfo = t_hierarchy.

*------ checks
    check_subtree( lv_id_parent ) .
    deactivate( ) .
  ENDMETHOD .                    &quot;node_move_sibling_down
  METHOD node_set_properties .
    msg_init( ) .

    FIELD-SYMBOLS &lt;properties&gt; TYPE ty_s_properties .

    READ TABLE t_properties ASSIGNING &lt;properties&gt;
    WITH KEY id = cs_properties-id .
    IF sy-subrc NE 0 .
      MESSAGE e000(lp) WITH v_text-t005 INTO v_dummy .  &quot; text: Requested node was not found in the structure
      msg_syst_catch( ) .
    ENDIF .
    CHECK v_retcode NE c_retcode-error .

    &lt;properties&gt; = cs_properties .

    check_subtree( cs_properties-id ) .
    deactivate( ) .

    READ TABLE t_properties INTO cs_properties
    WITH KEY id = cs_properties-id .
  ENDMETHOD .                    &quot;node_set_properties
  METHOD get_retmess_icon .
    msg_init( ) .

    IF iv_id EQ v_root_id .
      IF v_active IS INITIAL .
        rv_retmess_icon = icon_space .
      ELSE .
        rv_retmess_icon = icon_activate .
      ENDIF .
      EXIT .
    ENDIF .

    CASE node_get_retcode_severity( iv_id ) .
      WHEN c_retcode-okey.    rv_retmess_icon = icon_led_green .
      WHEN c_retcode-warning. rv_retmess_icon = icon_led_yellow .
      WHEN c_retcode-legacy.  rv_retmess_icon = icon_negative .
      WHEN c_retcode-error.   rv_retmess_icon = icon_led_red .
    ENDCASE .
  ENDMETHOD .                    &quot;get_retmess_icon
  METHOD set_formname_new .
    IF abap_on EQ enq_check( iv_formname ) .
      msg_syst_catch( ) .
      EXIT .
    ENDIF .

    enq_lock( iv_formname ) .
    v_formname = iv_formname .
    v_devclass = get_devclass( iv_formname = iv_formname ) .

    v_created_uname = sy-uname .
    v_created_datum = sy-datum .
    CLEAR:  v_changed_uname ,
            v_changed_datum .
  ENDMETHOD .                    &quot;set_formname_new
  METHOD set_formdescr_new .
    msg_init( ) .

    v_formdescr = iv_formdescr .

    FIELD-SYMBOLS &lt;properties&gt;  TYPE ty_s_properties .
    READ TABLE t_properties ASSIGNING &lt;properties&gt; WITH KEY id = v_root_id .
    IF sy-subrc EQ 0 .
      &lt;properties&gt;-comp_descr = iv_formdescr .
    ENDIF .

    check_subtree( ) .

  ENDMETHOD .                    &quot;set_formdescr_new
  METHOD node_clone .
    msg_init( ) .

    DATA:
      ls_prop_sample        TYPE ty_s_properties ,
      ls_hier_sample        TYPE ty_s_hierarchy ,
      ls_prop_clone         TYPE ty_s_properties ,
      lv_id_target_sibling  TYPE ty_s_properties-id ,
      lv_id_target_parent   TYPE ty_s_properties-id .

    ls_prop_sample = node_get_properties( iv_id_sample ) .
    CHECK v_retcode NE c_retcode-error .

    IF ls_prop_sample-comp_type EQ c_comp_type-root .
      MESSAGE e000(lp) WITH v_text-t104 INTO v_dummy .  &quot; text: Function has not been processed
      msg_syst_catch( ) .
    ENDIF .
    CHECK v_retcode NE c_retcode-error .

    READ TABLE t_hierarchy INTO ls_hier_sample WITH KEY id = iv_id_sample .
    IF sy-subrc NE 0 .
      EXIT .
    ENDIF .

    lv_id_target_parent  = iv_id_target_parent .
    IF iv_id_target_parent EQ node_get_parent( iv_id_sample ) .
      lv_id_target_sibling = iv_id_sample .
    ENDIF .

*   add node
    ls_prop_clone = ls_prop_sample .

    IF iv_rename_find IS NOT INITIAL .
      REPLACE ALL OCCURRENCES OF iv_rename_find IN ls_prop_clone-comp_name WITH iv_rename_replacement .
    ENDIF .
    IF iv_rename_prefix IS NOT INITIAL .
      CONCATENATE iv_rename_prefix ls_prop_clone-comp_name INTO ls_prop_clone-comp_name .
    ENDIF .
    IF iv_rename_postfix  IS NOT INITIAL .
      CONCATENATE ls_prop_clone-comp_name iv_rename_postfix INTO ls_prop_clone-comp_name .
    ENDIF .

    node_add( EXPORTING iv_comp_type  = ls_prop_clone-comp_type
                        iv_comp_name  = ls_prop_clone-comp_name
                        iv_comp_descr = ls_prop_clone-comp_descr
                        iv_parent_id  = lv_id_target_parent
                        iv_sibling_id = lv_id_target_sibling
              RECEIVING rv_new_id     = ls_prop_clone-id ) .
    CHECK v_retcode NE c_retcode-error .

    rv_id_clone = ls_prop_clone-id .

    node_set_properties( CHANGING cs_properties = ls_prop_clone ) .

*   recursive process of subnodes
    node_clone_recurs( EXPORTING is_hier_sample_parent = ls_hier_sample
                                 iv_id_clone_parent    = rv_id_clone
                                 iv_rename_prefix      = iv_rename_prefix
                                 iv_rename_postfix     = iv_rename_postfix
                                 iv_rename_find        = iv_rename_find
                                 iv_rename_replacement = iv_rename_replacement ) .

    check_subtree( lv_id_target_parent ) .
  ENDMETHOD .                    &quot;node_clone
  METHOD node_clone_recurs .

    DATA:
      ls_hier_sample          TYPE ty_s_hierarchy ,
      ls_prop_sample          TYPE ty_s_properties ,
      ls_prop_clone           TYPE ty_s_properties ,
      lv_id_sample            TYPE snode-id .

    lv_id_sample = is_hier_sample_parent-child .

    DO .
      CLEAR ls_hier_sample .
      CLEAR ls_prop_sample .
      CLEAR ls_prop_clone  .

*     read a next node
      READ TABLE t_hierarchy INTO ls_hier_sample
      WITH KEY parent = is_hier_sample_parent-id
               id     = lv_id_sample .
      IF sy-subrc NE 0 .
        EXIT .
      ENDIF .

      READ TABLE t_properties INTO ls_prop_sample
      WITH KEY id = lv_id_sample .
      CHECK sy-subrc EQ 0 .

*     copy node
      ls_prop_clone = ls_prop_sample .

      IF iv_rename_find IS NOT INITIAL .
        REPLACE ALL OCCURRENCES OF iv_rename_find IN ls_prop_clone-comp_name WITH iv_rename_replacement .
      ENDIF .
      IF iv_rename_prefix IS NOT INITIAL .
        CONCATENATE iv_rename_prefix ls_prop_clone-comp_name INTO ls_prop_clone-comp_name .
      ENDIF .
      IF iv_rename_postfix  IS NOT INITIAL .
        CONCATENATE ls_prop_clone-comp_name iv_rename_postfix INTO ls_prop_clone-comp_name .
      ENDIF .

      node_add( EXPORTING iv_comp_type  = ls_prop_clone-comp_type
                          iv_comp_name  = ls_prop_clone-comp_name
                          iv_comp_descr = ls_prop_clone-comp_descr
                          iv_parent_id  = iv_id_clone_parent
                RECEIVING rv_new_id     = ls_prop_clone-id ) .
      CHECK v_retcode NE c_retcode-error .

      node_set_properties( CHANGING cs_properties = ls_prop_clone ) .

      IF ls_hier_sample-child IS NOT INITIAL .
*       recursive process
        node_clone_recurs( EXPORTING is_hier_sample_parent = ls_hier_sample
                                     iv_id_clone_parent    = ls_prop_clone-id ) .
      ENDIF .

      IF ls_hier_sample-next IS INITIAL .
        EXIT .
      ELSE .
        lv_id_sample = ls_hier_sample-next .
      ENDIF .
    ENDDO .

  ENDMETHOD .                     &quot;node_clone_recurs
  METHOD is_component_subnode_of .
    DATA lv_form_id_current TYPE ty_s_hierarchy-id .
    DATA ls_hierarchy       TYPE ty_s_hierarchy .

    rv_yes = abap_off .
    lv_form_id_current = iv_form_id_checked .
    DO .
      IF lv_form_id_current EQ iv_form_id .
        rv_yes = abap_on .
        RETURN .
      ENDIF .
      CLEAR ls_hierarchy .
      READ TABLE t_hierarchy INTO ls_hierarchy
        WITH KEY id = lv_form_id_current .
      IF ls_hierarchy-parent IS INITIAL .
        RETURN .
      ENDIF .
      lv_form_id_current = ls_hierarchy-parent .
    ENDDO .
  ENDMETHOD .                     &quot;is_component_subnode_of
  METHOD autostructure_create .

    DATA:
      ls_ctxt_prop        TYPE lcl_context=&gt;ty_s_properties ,
      ls_form_hier        TYPE lcl_form=&gt;ty_s_hierarchy ,
      ls_form_prop        TYPE lcl_form=&gt;ty_s_properties ,
      ls_sheets           TYPE lcl_exceltemplate=&gt;ty_s_sheets .

*------------ try to find a worksheet node
    READ TABLE t_properties INTO ls_form_prop
      WITH KEY comp_type = lcl_form=&gt;c_comp_type-sheet .
    IF sy-subrc NE 0 . &quot; worksheet is not found

*------------ add worksheet node into the form buffer
      ls_form_prop-comp_type    = lcl_form=&gt;c_comp_type-sheet .
      ls_form_prop-comp_name    = &apos;SHEET&apos; .

      ls_form_prop-id = node_add( iv_comp_type  = ls_form_prop-comp_type
                                  iv_comp_name  = ls_form_prop-comp_name
                                  iv_comp_descr = ls_form_prop-comp_descr
                                  iv_parent_id  = v_root_id ) .
      CHECK v_retcode NE c_retcode-error .

      READ TABLE r_exceltemplate-&gt;s_model-t_sheets INTO ls_sheets INDEX 1 .
      IF sy-subrc EQ 0 .
        ls_form_prop-tb_sheetname = ls_sheets-name .

        node_set_properties( CHANGING cs_properties = ls_form_prop ) .
        CHECK v_retcode NE c_retcode-error .
      ENDIF .
    ENDIF .

*------------ recursive add child nodes
    ls_ctxt_prop-id = r_context-&gt;v_root_id .

    autostructure_recurs( EXPORTING is_altern_form_prop   = ls_form_prop
                                    is_parent_form_prop   = ls_form_prop
                                    is_parent_ctxt_prop   = ls_ctxt_prop
                                    iv_parent_level       = 1
                                    iv_parent_cb_fullpath = space ) .

*------------ delete patterns without sub-values
    LOOP AT t_properties INTO ls_form_prop WHERE comp_type = lcl_form=&gt;c_comp_type-pattern .
      READ TABLE t_hierarchy INTO ls_form_hier WITH KEY id = ls_form_prop-id .
      CHECK sy-subrc EQ 0 .
      CHECK ls_form_hier-child IS INITIAL .
      node_del( ls_form_prop-id ) .
    ENDLOOP .

  ENDMETHOD .                     &quot;autostructure_create
  METHOD autostructure_recurs .
    DATA:
      ls_ctxt_hier        TYPE lcl_context=&gt;ty_s_hierarchy ,
      ls_ctxt_prop        TYPE lcl_context=&gt;ty_s_properties ,
      ls_form_prop        TYPE lcl_form=&gt;ty_s_properties ,
      ls_form_prop_altern TYPE lcl_form=&gt;ty_s_properties ,
      lv_offset           TYPE i ,
      lv_level            TYPE i ,
      lv_cb_fullpath      TYPE ty_comp_path .

    lv_level = iv_parent_level + 1 .

    LOOP AT r_context-&gt;t_hierarchy INTO ls_ctxt_hier
      WHERE parent EQ is_parent_ctxt_prop-id .

      ls_ctxt_prop = r_context-&gt;node_get( ls_ctxt_hier-id ) .
      CHECK r_context-&gt;v_retcode NE c_retcode-error .

      CLEAR ls_form_prop .
      ls_form_prop-comp_name  = ls_ctxt_prop-comp_name .
      ls_form_prop-comp_descr = ls_ctxt_prop-comp_shortdescr .

      CASE ls_ctxt_prop-comp_type .
        WHEN lcl_context=&gt;c_comp_type-table .
          ls_form_prop-comp_type  = lcl_form=&gt;c_comp_type-loopstep .
          ls_form_prop-id =
          node_add( iv_comp_type  = ls_form_prop-comp_type
                    iv_comp_name  = ls_form_prop-comp_name
                    iv_comp_descr = ls_form_prop-comp_descr
                    iv_parent_id  = is_altern_form_prop-id ) .
          CHECK v_retcode NE c_retcode-error .

          ls_form_prop = node_get_properties( iv_id = ls_form_prop-id ) .
          CHECK v_retcode NE c_retcode-error .

          lv_offset = STRLEN( iv_parent_cb_fullpath ) .
          ls_form_prop-cb_relpath = ls_ctxt_prop-comp_fullpath+lv_offset .
          SHIFT ls_form_prop-cb_relpath LEFT DELETING LEADING &apos;-&apos; .

          node_set_properties( CHANGING cs_properties = ls_form_prop ) .
          CHECK v_retcode NE c_retcode-error .

          lv_cb_fullpath          = ls_ctxt_prop-comp_fullpath .
          ls_form_prop_altern     = ls_form_prop .

        WHEN lcl_context=&gt;c_comp_type-struct .
          ls_form_prop-comp_type  = lcl_form=&gt;c_comp_type-pattern .
          ls_form_prop-id =
          node_add( iv_comp_type  = ls_form_prop-comp_type
                    iv_comp_name  = ls_form_prop-comp_name
                    iv_comp_descr = ls_form_prop-comp_descr
                    iv_parent_id  = is_altern_form_prop-id ) .
          CHECK v_retcode NE c_retcode-error .

          lv_cb_fullpath          = iv_parent_cb_fullpath .
          ls_form_prop_altern     = is_altern_form_prop .

        WHEN lcl_context=&gt;c_comp_type-element .
          CASE ls_ctxt_prop-type_kind .
            WHEN cl_abap_datadescr=&gt;typekind_xstring .
              ls_form_prop-comp_type  = lcl_form=&gt;c_comp_type-drawing .
            WHEN OTHERS .
              ls_form_prop-comp_type  = lcl_form=&gt;c_comp_type-field .
          ENDCASE .
          ls_form_prop-id =
          node_add( iv_comp_type  = ls_form_prop-comp_type
                    iv_comp_name  = ls_form_prop-comp_name
                    iv_comp_descr = ls_form_prop-comp_descr
                    iv_parent_id  = is_parent_form_prop-id ) .
          CHECK v_retcode NE c_retcode-error .

          ls_form_prop = node_get_properties( iv_id = ls_form_prop-id ) .
          CHECK v_retcode NE c_retcode-error .

          lv_offset = STRLEN( iv_parent_cb_fullpath ) .
          ls_form_prop-cb_val_relpath = ls_ctxt_prop-comp_fullpath+lv_offset .
          SHIFT ls_form_prop-cb_val_relpath LEFT DELETING LEADING &apos;-&apos; .

          node_set_properties( CHANGING cs_properties = ls_form_prop ) .
          CHECK v_retcode NE c_retcode-error .

          lv_cb_fullpath          = ls_ctxt_prop-comp_fullpath .
          ls_form_prop_altern     = is_altern_form_prop .

        WHEN lcl_context=&gt;c_comp_type-tree
          OR lcl_context=&gt;c_comp_type-tree_s .
          ls_form_prop-comp_type  = lcl_form=&gt;c_comp_type-tree .
          ls_form_prop-id =
          node_add( iv_comp_type  = ls_form_prop-comp_type
                    iv_comp_name  = ls_form_prop-comp_name
                    iv_comp_descr = ls_form_prop-comp_descr
                    iv_parent_id  = is_altern_form_prop-id ) .
          CHECK v_retcode NE c_retcode-error .

          ls_form_prop = node_get_properties( iv_id = ls_form_prop-id ) .
          CHECK v_retcode NE c_retcode-error .

          lv_offset = STRLEN( iv_parent_cb_fullpath ) .
          ls_form_prop-cb_val_relpath = ls_ctxt_prop-comp_fullpath+lv_offset .
          SHIFT ls_form_prop-cb_val_relpath LEFT DELETING LEADING &apos;-&apos; .

          node_set_properties( CHANGING cs_properties = ls_form_prop ) .
          CHECK v_retcode NE c_retcode-error .

          lv_cb_fullpath          = ls_ctxt_prop-comp_fullpath .
          ls_form_prop_altern     = is_altern_form_prop .

        WHEN OTHERS . CONTINUE .
      ENDCASE .

      autostructure_recurs( EXPORTING is_altern_form_prop   = ls_form_prop_altern
                                      is_parent_form_prop   = ls_form_prop
                                      is_parent_ctxt_prop   = ls_ctxt_prop
                                      iv_parent_level       = lv_level
                                      iv_parent_cb_fullpath = lv_cb_fullpath ) .
    ENDLOOP .
  ENDMETHOD .                     &quot;autostructure_recurs
ENDCLASS .                    &quot;lcl_formtemplate IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_wb_formtree_drgdrpdata DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_wb_formtree_drgdrpdata DEFINITION .
  PUBLIC SECTION.
    DATA:
      v_source_alvtree_nkey TYPE tv_nodekey ,
      v_source_form_id      TYPE snode-id ,
      v_target_alvtree_nkey TYPE tv_nodekey ,
      v_target_form_id      TYPE snode-id ,
      v_terminated          TYPE flag ,
      r_formtemplate        TYPE REF TO lcl_formtemplate .

ENDCLASS .                    &quot;lcl_wb_formtree_drgdrpdata DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_wb_appltoolbar DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_wb_appltoolbar DEFINITION INHERITING FROM lcl_root .
  PUBLIC SECTION .
    DATA:
      r_container               TYPE REF TO cl_gui_gos_container ,
      r_toolbar                 TYPE REF TO cl_gui_toolbar .
    CONSTANTS:
      BEGIN OF c_fcode ,
        appl_help               TYPE ui_func VALUE &apos;APPL_HELP&apos; ,
        appl_presets_designtime TYPE ui_func VALUE &apos;APPL_PRESETS_DT&apos; ,
        appl_presets_runtime    TYPE ui_func VALUE &apos;APPL_PRESETS_RT&apos; ,
        appl_save               TYPE ui_func VALUE &apos;APPL_SAVE&apos; ,
        appl_save_as            TYPE ui_func VALUE &apos;APPL_SAVE_AS&apos; ,
        appl_activate           TYPE ui_func VALUE &apos;APPL_ACTIVATE&apos; ,
        appl_actualize          TYPE ui_func VALUE &apos;APPL_ACTUALIZE&apos; ,
        appl_viewmode           TYPE ui_func VALUE &apos;APPL_VIEWMODE&apos; ,
        appl_mass_processing    TYPE ui_func VALUE &apos;APPL_MASS_PROCESSING&apos; ,
      END   OF c_fcode .
    EVENTS:
      evnt_fcode
          EXPORTING value(ev_fcode)       TYPE ui_func .

    METHODS:
      constructor
          IMPORTING iv_mass_processing    TYPE flag DEFAULT space ,
      free ,
      hndl_toolbar_fcode
          FOR EVENT function_selected OF cl_gui_toolbar
          IMPORTING fcode .

ENDCLASS .                    &quot;lcl_wb_appltoolbar DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_wb_appltoolbar IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_wb_appltoolbar IMPLEMENTATION .
  METHOD constructor .
    super-&gt;constructor( ) .

    DATA:
      lv_repid            TYPE syrepid ,
      lv_dynnr            TYPE sydynnr ,
      lv_text             TYPE text100 ,
      lv_icon             TYPE icon-id ,
      ls_events           TYPE cntl_simple_event ,
      lt_events           TYPE cntl_simple_events .

    lv_repid = sy-repid .
    lv_dynnr = sy-dynnr .

    CREATE OBJECT r_container
      EXPORTING
        width                   = 300 &quot;450
        repid                   = lv_repid
        dynnr                   = lv_dynnr
*       no_autodef_progid_dynnr = abap_on
      EXCEPTIONS
        OTHERS                  = 5.
    CHECK sy-subrc = 0 .

    CREATE OBJECT r_toolbar
      EXPORTING
        parent = r_container.

    lv_text = v_text-t207 .  &quot; text: User guide
    r_toolbar-&gt;add_button( fcode     = c_fcode-appl_help
                           icon      = icon_information &quot;icon_personal_help
                           butn_type = cntb_btype_button
                           quickinfo = lv_text(30) ) .

    lv_text = v_text-t206 .  &quot; text: Presets
    r_toolbar-&gt;add_button( fcode     = c_fcode-appl_presets_designtime
                           icon      = icon_tools
                           butn_type = cntb_btype_button
                           quickinfo = lv_text(30) ) .

    r_toolbar-&gt;add_button( fcode     = space
                           icon      = space
                           butn_type = cntb_btype_sep
                           quickinfo = space ) .

    lv_text = v_text-t042 .  &quot; text: Window mode
    r_toolbar-&gt;add_button( fcode     = c_fcode-appl_viewmode
                           icon      = icon_wd_interface_views
                           butn_type = cntb_btype_button
                           quickinfo = lv_text(30) ) .

    lv_text = v_text-t043 .  &quot; text: Actualize
    r_toolbar-&gt;add_button( fcode     = c_fcode-appl_actualize
                           icon      = icon_refresh
                           butn_type = cntb_btype_button
                           quickinfo = lv_text(30) ) .

    r_toolbar-&gt;add_button( fcode     = space
                           icon      = space
                           butn_type = cntb_btype_sep
                           quickinfo = space ) .

    lv_text = v_text-t044 .  &quot; text: Save
    r_toolbar-&gt;add_button( fcode     = c_fcode-appl_save
                           icon      = icon_system_save
                           butn_type = cntb_btype_dropdown
                           quickinfo = lv_text(30) ) .

    DATA lr_button_menu TYPE REF TO cl_ctmenu .
    CREATE OBJECT lr_button_menu.

    lv_text = v_text-t045 .  &quot; text: Save as...
    lr_button_menu-&gt;add_function(
                           fcode     = c_fcode-appl_save_as
                           icon      = icon_save_as_template
                           text      = lv_text(40) ) .
    r_toolbar-&gt;set_static_ctxmenu(
                           fcode     = c_fcode-appl_save
                           ctxmenu   = lr_button_menu ) .

    lv_text = v_text-t046 .  &quot; text: Activate
    r_toolbar-&gt;add_button( fcode     = c_fcode-appl_activate
                           icon      = icon_activate
                           butn_type = cntb_btype_button
                           quickinfo = lv_text(30) ) .   &quot; text: Activate

    ls_events-eventid = cl_gui_toolbar=&gt;m_id_function_selected .
    APPEND ls_events TO lt_events .

    r_toolbar-&gt;add_button( fcode     = space
                           icon      = space
                           butn_type = cntb_btype_sep
                           quickinfo = space ) .

    CASE iv_mass_processing .
      WHEN space .  lv_icon = icon_segmented_data_ina .
      WHEN OTHERS.  lv_icon = icon_segmented_data_act .
    ENDCASE .
    lv_text = v_text-t214 .  &quot; text: Mass processing
    r_toolbar-&gt;add_button( fcode     = c_fcode-appl_mass_processing
                           icon      = lv_icon
                           butn_type = cntb_btype_button
                           quickinfo = lv_text(30) ) .


    r_toolbar-&gt;set_registered_events( events = lt_events ) .
    SET HANDLER hndl_toolbar_fcode FOR r_toolbar .

  ENDMETHOD .                    &quot;constructor
  METHOD free .
    IF r_toolbar IS BOUND .
      r_toolbar-&gt;free( ) .
      FREE r_toolbar .
    ENDIF .
    IF r_container IS BOUND .
      r_container-&gt;free( ) .
      FREE r_container .
    ENDIF .
  ENDMETHOD .                    &quot;free
  METHOD hndl_toolbar_fcode .
    RAISE EVENT evnt_fcode EXPORTING ev_fcode = fcode .
  ENDMETHOD .                    &quot;hndl_toolbar_fcode
ENDCLASS .                    &quot;lcl_wb_appltoolbar IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_wb_excelole DEFINITION
*----------------------------------------------------------------------*
*       MS-Office template document
*----------------------------------------------------------------------*
CLASS lcl_wb_ole DEFINITION INHERITING FROM lcl_ole .
  PUBLIC SECTION .
    METHODS:
      constructor
          IMPORTING ir_container          TYPE REF TO cl_gui_container
                    iv_document_rawdata   TYPE xstring
                    iv_viewmode           TYPE flag
          EXCEPTIONS process_terminated ,
      selection_get
          EXPORTING ev_sheet              TYPE any
                    ev_name               TYPE any
                    ev_area_top           TYPE i
                    ev_area_left          TYPE i
                    ev_area_rows          TYPE i
                    ev_area_columns       TYPE i ,
      selection_set
          IMPORTING iv_sheet              TYPE any
                    iv_sheet_only         TYPE flag OPTIONAL
                    iv_area_top           TYPE i
                    iv_area_left          TYPE i
                    iv_area_rows          TYPE i
                    iv_area_columns       TYPE i
          RETURNING value(rv_sheet_not_found) TYPE flag ,
      free REDEFINITION .

ENDCLASS .                    &quot;lcl_wb_ole DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_wb_ole IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_wb_ole IMPLEMENTATION .
  METHOD constructor .
    super-&gt;constructor(
        EXPORTING ir_container        = ir_container
                  iv_document_rawdata = iv_document_rawdata
                  iv_viewmode         = iv_viewmode
                  iv_readonly         = abap_off
        EXCEPTIONS OTHERS = 1 ) .
    IF sy-subrc NE 0 .
      RAISE process_terminated .
    ENDIF .
  ENDMETHOD .                    &quot;constructor
  METHOD selection_get .
    msg_init( ) .

    DATA ls_area      TYPE soi_area_item .
    DATA lt_areas     TYPE soi_area_table .

    application_availability_check( ) .
    CHECK v_retcode NE c_retcode-error .

    r_spreadsheet-&gt;get_selected_areas( IMPORTING areas = lt_areas ) .
    DESCRIBE TABLE lt_areas .
    CASE sy-tfill .
      WHEN 0 .
        MESSAGE e000(lp) WITH v_text-t051 INTO v_dummy . &quot;  text: Select an area on the actual template sheet
        msg_syst_catch( ) .

      WHEN 1 .
        READ TABLE lt_areas INTO ls_area INDEX 1 .
        ev_area_left    = ls_area-left .
        ev_area_top     = ls_area-top .
        ev_area_rows    = ls_area-rows .
        ev_area_columns = ls_area-columns .

        IF  ev_area_left    EQ 1
        AND ev_area_top     EQ 1
        AND ev_area_rows    EQ 1000
        AND ev_area_columns EQ 1000 .
          CLEAR:
          ev_area_left ,
          ev_area_top ,
          ev_area_rows ,
          ev_area_columns .

          MESSAGE e000(lp) WITH v_text-t051 INTO v_dummy . &quot;  text: Select an area on the actual template sheet
          msg_syst_catch( ) .
          EXIT .
        ENDIF .

        r_spreadsheet-&gt;get_active_sheet( IMPORTING sheetname = ev_sheet ) .

      WHEN OTHERS .
        MESSAGE e000(lp) WITH v_text-t052 INTO v_dummy . &quot;  text: Only single area selection is required
        msg_syst_catch( ) .
    ENDCASE .
  ENDMETHOD .                    &quot;selection_get
  METHOD selection_set .

    DATA lt_sheets    TYPE soi_sheets_table .
    DATA lv_errorflag TYPE flag .
    DATA lv_rc        TYPE soi_ret_string .

    CLEAR rv_sheet_not_found .

    DO 1 TIMES .
      IF iv_sheet IS INITIAL .
        lv_errorflag = abap_on .
      ENDIF .
      CHECK lv_errorflag IS INITIAL .

      r_spreadsheet-&gt;get_sheets(
            IMPORTING sheets  = lt_sheets
                      retcode = lv_rc ) .
      READ TABLE lt_sheets TRANSPORTING NO FIELDS
      WITH KEY sheet_name = iv_sheet .
      IF sy-subrc NE 0 .
        lv_errorflag = abap_on .
        rv_sheet_not_found = abap_on .
      ENDIF .
      CHECK lv_errorflag IS INITIAL .

      r_spreadsheet-&gt;select_sheet(
            EXPORTING name = iv_sheet
            IMPORTING retcode = lv_rc ) .
      IF lv_rc NE &apos;OK&apos; .
        lv_errorflag = abap_on .
      ENDIF .
      CHECK lv_errorflag IS INITIAL .

      IF iv_sheet_only IS NOT INITIAL .
        r_spreadsheet-&gt;set_selection(
              EXPORTING left    = 1
                        top     = 1
                        rows    = 1000
                        columns = 1000 ) .
        EXIT .
      ENDIF .

      IF  iv_area_top     IS INITIAL
      AND iv_area_left    IS INITIAL
      AND iv_area_rows    IS INITIAL
      AND iv_area_columns IS INITIAL .
        lv_errorflag = abap_on .
      ENDIF .
      CHECK lv_errorflag IS INITIAL .

      r_spreadsheet-&gt;set_selection(
            EXPORTING left    = iv_area_left
                      top     = iv_area_top
                      rows    = iv_area_rows
                      columns = iv_area_columns
            IMPORTING retcode = lv_rc ) .
      IF lv_rc NE &apos;OK&apos; .
        lv_errorflag = abap_on .
      ENDIF .
      CHECK lv_errorflag IS INITIAL .
    ENDDO .

    CHECK lv_errorflag IS NOT INITIAL .

    IF s_presets_dt-deselect_cells_no_tb IS NOT INITIAL .
      r_spreadsheet-&gt;set_selection(
            EXPORTING left    = 1
                      top     = 1
                      rows    = 1000
                      columns = 1000 ) .
    ENDIF .

    CHECK s_presets_dt-mesgtab_when_error IS NOT INITIAL .
    MESSAGE s000(lp) WITH v_text-t053 . &quot; text: Positioning on the sheet is impossible

  ENDMETHOD .                    &quot;selection_set
  METHOD free .
    super-&gt;free( ) .
  ENDMETHOD .                    &quot;free
ENDCLASS .                    &quot;lcl_wb_ole IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_wb_formtree DEFINITION
*----------------------------------------------------------------------*
*       tree for the form structure visualization
*----------------------------------------------------------------------*
CLASS lcl_wb_formtree DEFINITION INHERITING FROM cl_gui_alv_tree .
  PUBLIC SECTION .
    TYPES:
      BEGIN OF ty_s_links ,
        alvtree_nkey      TYPE tv_nodekey ,
        form_id           TYPE snode-id ,
      END   OF ty_s_links ,
      ty_t_links          TYPE STANDARD TABLE OF ty_s_links .
    TYPES:
      BEGIN OF ty_s_outtab ,
        retmess_icon      TYPE icon_d ,
        direction_icon    TYPE icon_d ,
        comp_descr        TYPE ddtext ,
      END   OF ty_s_outtab ,
      ty_t_outtab         TYPE STANDARD TABLE OF ty_s_outtab .
    DATA:
      r_dgdp_source       TYPE REF TO cl_dragdrop ,
      r_dgdp_target       TYPE REF TO cl_dragdrop ,
      r_dgdp_full         TYPE REF TO cl_dragdrop ,
      r_dgdp_none         TYPE REF TO cl_dragdrop ,
      v_root_nkey         TYPE lvc_nkey VALUE &apos;          1&apos; ,
      t_outtab            TYPE ty_t_outtab ,
      t_links             TYPE ty_t_links .
    CONSTANTS:
      BEGIN OF c_fcode ,
        comp_add_child    TYPE ui_func VALUE &apos;COMP_ADD_CHILD&apos; ,
        comp_add_sibling  TYPE ui_func VALUE &apos;COMP_ADD_SIBLING&apos; ,
        comp_clone        TYPE ui_func VALUE &apos;COMP_CLONE&apos; ,
        comp_clone_mass   TYPE ui_func VALUE &apos;COMP_CLONE_MASS&apos; ,
        comp_delete       TYPE ui_func VALUE &apos;COMP_DELETE&apos; ,
        comp_delete_mass  TYPE ui_func VALUE &apos;COMP_DELETE_MASS&apos; ,
        comp_selected     TYPE ui_func VALUE &apos;COMP_SELECTED&apos; ,
        comp_move_sibling_up   TYPE ui_func VALUE &apos;COMP_MOVE_SIBLING_UP&apos; ,
        comp_move_sibling_down TYPE ui_func VALUE &apos;COMP_MOVE_SIBLING_DOWN&apos; ,
        comp_select_all   TYPE ui_func VALUE &apos;COMP_SELECT_ALL&apos; ,
        comp_tbshift_mass TYPE ui_func VALUE &apos;COMP_TBSHIFT_MASS&apos; ,
        appl_actualize    TYPE ui_func VALUE &apos;APPL_ACTUALIZE&apos; ,
      END   OF c_fcode .

    METHODS:
      constructor
          IMPORTING ir_container            TYPE REF TO cl_gui_container
                    ir_formtemplate         TYPE REF TO lcl_formtemplate
                    iv_mass_processing      TYPE flag DEFAULT space
          EXCEPTIONS process_terminated ,
      redraw
          IMPORTING iv_form_id              TYPE snode-id OPTIONAL
                    ir_formtemplate         TYPE REF TO lcl_formtemplate ,
      node_add
          IMPORTING ir_formtemplate         TYPE REF TO lcl_formtemplate
                    iv_form_id              TYPE snode-id
                    iv_alvtree_nkey         TYPE lvc_nkey
                    iv_sibling              TYPE flag DEFAULT space
          RETURNING value(rv_alvtree_nkey_new) TYPE lvc_nkey ,
      node_del
          IMPORTING iv_alvtree_nkey         TYPE lvc_nkey ,
      node_upd
          IMPORTING ir_formtemplate         TYPE REF TO lcl_formtemplate
                    iv_form_id              TYPE snode-id
                    iv_alvtree_nkey         TYPE lvc_nkey ,
      node_prepare
          IMPORTING ir_formtemplate         TYPE REF TO lcl_formtemplate
                    iv_form_id              TYPE snode-id
          EXPORTING es_form_properties      TYPE lcl_formtemplate=&gt;ty_s_properties
                    es_outtab               TYPE ty_s_outtab
                    es_layn                 TYPE lvc_s_layn
                    ev_ntext                TYPE lvc_value .
    EVENTS:
      evnt_fcode
          EXPORTING value(ev_fcode)         TYPE ui_func
                    value(ev_form_id)       TYPE snode-id ,
      evnt_comp_move
          EXPORTING value(ev_drag_drop_object) TYPE REF TO cl_dragdropobject .

  PRIVATE SECTION .

    METHODS:
      hndl_toolbar_fcode
          FOR EVENT function_selected OF cl_gui_toolbar
          IMPORTING fcode ,
      hndl_selection_changed
          FOR EVENT selection_changed OF cl_gui_alv_tree
          IMPORTING node_key ,
      hndl_node_double_click
          FOR EVENT node_double_click OF cl_gui_alv_tree
          IMPORTING node_key ,
      hndl_item_double_click
          FOR EVENT item_double_click OF cl_gui_alv_tree
          IMPORTING node_key fieldname ,
      hndl_node_drag
          FOR EVENT on_drag OF cl_gui_alv_tree
          IMPORTING sender  node_key  drag_drop_object  fieldname ,
      hndl_node_drop
          FOR EVENT on_drop OF cl_gui_alv_tree
          IMPORTING sender  node_key  drag_drop_object ,
      hndl_node_drop_complete
          FOR EVENT on_drop_complete OF cl_gui_alv_tree
          IMPORTING sender  node_key  fieldname  drag_drop_object ,
      hndl_node_context_menu_req
          FOR EVENT node_context_menu_request OF cl_gui_alv_tree
          IMPORTING node_key menu ,
      hndl_node_context_menu_sel
          FOR EVENT node_context_menu_selected OF cl_gui_alv_tree
          IMPORTING node_key fcode ,
      raise_component_selected
          IMPORTING iv_alvtree_nkey        TYPE lvc_nkey,
      redraw_recurs
          IMPORTING ir_formtemplate        TYPE REF TO lcl_formtemplate
                    is_form_hier_parent    TYPE lcl_formtemplate=&gt;ty_s_hierarchy OPTIONAL
                    iv_alvtree_nkey_parent TYPE lvc_nkey DEFAULT space .


ENDCLASS .                    &quot;lcl_wb_formtree DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_wb_formtree IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_wb_formtree IMPLEMENTATION .
  METHOD constructor .
    DATA lv_node_selection_mode TYPE i .
    CASE iv_mass_processing .
      WHEN space  . lv_node_selection_mode = cl_gui_column_tree=&gt;node_sel_mode_single .
      WHEN OTHERS . lv_node_selection_mode = cl_gui_column_tree=&gt;node_sel_mode_multiple .
    ENDCASE .

    super-&gt;constructor(
          EXPORTING parent              = ir_container
                    node_selection_mode = lv_node_selection_mode
                    item_selection      = abap_off
                    no_html_header      = abap_on
                    no_toolbar          = abap_off
          EXCEPTIONS OTHERS             = 7 ) .
    IF sy-subrc NE 0 .
      RAISE process_terminated .
    ENDIF .

*   hierarchy header
    DATA ls_hdr      TYPE treev_hhdr .
    ls_hdr-heading   =
    ls_hdr-tooltip   = lcl_root=&gt;v_text-t055 .  &quot; text: Form structure
    ls_hdr-t_image   = icon_tree .
    ls_hdr-width     = 45 .
    ls_hdr-width_pix = space .

*   variant
    DATA ls_var      TYPE disvariant .
    ls_var-report = sy-repid .
    ls_var-handle = &apos;0001&apos; .
    CALL FUNCTION &apos;LVC_VARIANT_DEFAULT_GET&apos;
      EXPORTING
        i_save     = space
      CHANGING
        cs_variant = ls_var
      EXCEPTIONS
        OTHERS     = 0.

*   fieldcatalog
    DATA:
      ls_fct         TYPE lvc_s_fcat ,
      lt_fct         TYPE lvc_t_fcat .
    CLEAR ls_fct .
    ls_fct-fieldname = &apos;RETMESS_ICON&apos; .
    ls_fct-scrtext_s =
    ls_fct-scrtext_l = ls_fct-scrtext_m =
    ls_fct-reptext   = ls_fct-coltext   = lcl_root=&gt;v_text-t056 . &quot; text: Status
    ls_fct-icon      = abap_on .
    APPEND ls_fct TO lt_fct .
    CLEAR ls_fct .
    ls_fct-fieldname = &apos;DIRECTION_ICON&apos; .
    ls_fct-scrtext_s =
    ls_fct-scrtext_l = ls_fct-scrtext_m =
    ls_fct-reptext   = ls_fct-coltext   = lcl_root=&gt;v_text-t057 . &quot; text: Direction
    ls_fct-icon      = abap_on .
    APPEND ls_fct TO lt_fct .
    CLEAR ls_fct .
    ls_fct-fieldname = &apos;COMP_DESCR&apos; .
    ls_fct-scrtext_s =
    ls_fct-scrtext_l = ls_fct-scrtext_m =
    ls_fct-reptext   = ls_fct-coltext   = lcl_root=&gt;v_text-t058 . &quot; text: Description
    ls_fct-outputlen = 20 .
    APPEND ls_fct TO lt_fct .

*   initialization
    me-&gt;set_table_for_first_display(
      EXPORTING i_save              = &apos;A&apos;
                is_hierarchy_header = ls_hdr
                is_variant          = ls_var
      CHANGING  it_fieldcatalog     = lt_fct[]
                it_outtab           = t_outtab[] ) .

*   tree events
    IF iv_mass_processing IS INITIAL .
      DATA:
        ls_events           TYPE cntl_simple_event ,
        lt_events           TYPE cntl_simple_events .
      me-&gt;get_registered_events( IMPORTING events = lt_events ) .
*     ls_events-eventid = cl_gui_column_tree=&gt;eventid_node_double_click .
*     APPEND ls_events TO lt_events .
*     ls_events-eventid = cl_gui_column_tree=&gt;eventid_item_double_click .
*     APPEND ls_events TO lt_events .
      ls_events-eventid = cl_gui_column_tree=&gt;eventid_node_context_menu_req .
      APPEND ls_events TO lt_events .
      ls_events-eventid = cl_gui_column_tree=&gt;eventid_selection_changed .
      APPEND ls_events TO lt_events .
      me-&gt;set_registered_events( events = lt_events ) .
    ENDIF .

    SET HANDLER:
      hndl_selection_changed FOR me ,
      hndl_node_double_click FOR me ,
      hndl_item_double_click FOR me ,
      hndl_node_drag FOR me ,
      hndl_node_drop FOR me ,
      hndl_node_drop_complete FOR me ,
      hndl_node_context_menu_req FOR me ,
      hndl_node_context_menu_sel FOR me .

*   tree toolbar
    DATA:
      lr_toolbar          TYPE REF TO cl_gui_toolbar ,
      lv_text             TYPE text100 .
    FIELD-SYMBOLS &lt;table_button&gt; TYPE stb_button .
    me-&gt;get_toolbar_object( IMPORTING er_toolbar = lr_toolbar ) .

    LOOP AT lr_toolbar-&gt;m_table_button ASSIGNING &lt;table_button&gt;
      WHERE function NE me-&gt;mc_fc_expand
        AND function NE me-&gt;mc_fc_collapse
        AND function NE me-&gt;mc_fc_load_variant .
      lr_toolbar-&gt;delete_button( fcode = &lt;table_button&gt;-function ) .
    ENDLOOP .
    lr_toolbar-&gt;add_button( fcode     = space
                            icon      = space
                            butn_type = cntb_btype_sep
                            quickinfo = space ) .

    CASE iv_mass_processing .
      WHEN space  .
        lv_text = lcl_root=&gt;v_text-t061 . &quot; text: Delete component
        lr_toolbar-&gt;add_button( fcode     = c_fcode-comp_delete
                                icon      = icon_delete
                                butn_type = cntb_btype_button
                                quickinfo = lv_text(30) ) .

        lv_text = lcl_root=&gt;v_text-t062 . &quot; text: Create component
        lr_toolbar-&gt;add_button( fcode     = c_fcode-comp_add_child
                                icon      = icon_create
                                butn_type = cntb_btype_dropdown
                                quickinfo = lv_text(30) ) .

        DATA lr_button_menu TYPE REF TO cl_ctmenu .
        CREATE OBJECT lr_button_menu.

        CONCATENATE lcl_root=&gt;v_text-t062 &quot; text: Create component
                    lcl_root=&gt;v_text-t296 &quot; text: as Child
               INTO lv_text SEPARATED BY space .
        lr_button_menu-&gt;add_function(
                               fcode      = c_fcode-comp_add_child
                               icon       = icon_create
                               text       = lv_text(40) ) .

        CONCATENATE lcl_root=&gt;v_text-t062 &quot; text: Create component
                    lcl_root=&gt;v_text-t297 &quot; text: as Sibling
               INTO lv_text SEPARATED BY space .
        lr_button_menu-&gt;add_function(
                                fcode     = c_fcode-comp_add_sibling
                                icon      = icon_create
                                text      = lv_text(40) ) .

        lr_toolbar-&gt;set_static_ctxmenu(
                                fcode     = c_fcode-comp_add_child
                                ctxmenu   = lr_button_menu ) .


        lv_text = lcl_root=&gt;v_text-t172 . &quot; text: Clone component
        lr_toolbar-&gt;add_button( fcode     = c_fcode-comp_clone
                                icon      = icon_copy_object
                                butn_type = cntb_btype_button
                                quickinfo = lv_text(30) ) .

        lr_toolbar-&gt;add_button( fcode     = space
                                icon      = space
                                butn_type = cntb_btype_sep
                                quickinfo = space ) .

        lv_text = lcl_root=&gt;v_text-t063 . &quot; text: Move component UP
        lr_toolbar-&gt;add_button( fcode     = c_fcode-comp_move_sibling_up
                                icon      = icon_next_value
                                butn_type = cntb_btype_button
                                quickinfo = lv_text(30) ) .

        lv_text = lcl_root=&gt;v_text-t064 . &quot; text: Move component DOWN
        lr_toolbar-&gt;add_button( fcode     = c_fcode-comp_move_sibling_down
                                icon      = icon_previous_value
                                butn_type = cntb_btype_button
                                quickinfo = lv_text(30) ) .
      WHEN OTHERS .
        lv_text = lcl_root=&gt;v_text-t215 . &quot; text: Select all components
        lr_toolbar-&gt;add_button( fcode     = c_fcode-comp_select_all
                                icon      = icon_select_all
                                butn_type = cntb_btype_button
                                quickinfo = lv_text(30) ) .

        lr_toolbar-&gt;add_button( fcode     = space
                                icon      = space
                                butn_type = cntb_btype_sep
                                quickinfo = space ) .

        lv_text = lcl_root=&gt;v_text-t061 . &quot; text: Delete component
        lr_toolbar-&gt;add_button( fcode     = c_fcode-comp_delete_mass
                                icon      = icon_delete
                                butn_type = cntb_btype_button
                                quickinfo = lv_text(30) ) .

        lv_text = lcl_root=&gt;v_text-t172 . &quot; text: Clone component
        lr_toolbar-&gt;add_button( fcode     = c_fcode-comp_clone_mass
                                icon      = icon_copy_object
                                butn_type = cntb_btype_button
                                quickinfo = lv_text(30) ) .

        lv_text = lcl_root=&gt;v_text-t220 . &quot; text: Shift template binding coordinates
        lr_toolbar-&gt;add_button( fcode     = c_fcode-comp_tbshift_mass
                                icon      = icon_snap_to_grid
                                butn_type = cntb_btype_button
                                quickinfo = lv_text(30) ) .
    ENDCASE .



*   toolbar events
    CLEAR:
      ls_events ,
      lt_events .
    ls_events-eventid = cl_gui_toolbar=&gt;m_id_function_selected .
    APPEND ls_events TO lt_events .
    lr_toolbar-&gt;set_registered_events( lt_events ) .
    SET HANDLER hndl_toolbar_fcode FOR lr_toolbar .

*   drag&apos;n&apos;drop objects (define any behaviours of node)
    CREATE OBJECT r_dgdp_target .
    r_dgdp_target-&gt;add( flavor     = &apos;DRAGDROP&apos;
                        dragsrc    = abap_off
                        droptarget = abap_on
                        effect     = cl_dragdrop=&gt;move ) .

    CREATE OBJECT r_dgdp_source.
    r_dgdp_source-&gt;add( flavor     = &apos;DRAGDROP&apos;
                        dragsrc    = abap_on
                        droptarget = abap_off
                        effect     = cl_dragdrop=&gt;move ) .

    CREATE OBJECT r_dgdp_full.
    r_dgdp_full-&gt;add( flavor     = &apos;DRAGDROP&apos;
                      dragsrc    = abap_on
                      droptarget = abap_on
                      effect     = cl_dragdrop=&gt;move ) .

    CREATE OBJECT r_dgdp_none.
    r_dgdp_none-&gt;add( flavor     = &apos;DRAGDROP&apos;
                      dragsrc    = abap_off
                      droptarget = abap_off
                      effect     = cl_dragdrop=&gt;move ) .

*   add nodes
    me-&gt;redraw( ir_formtemplate = ir_formtemplate ) .

*   expand all nodes
    DATA lt_subtree_nodes TYPE lvc_t_nkey .
    me-&gt;get_subtree( EXPORTING i_node_key = v_root_nkey
                     IMPORTING et_subtree_nodes = lt_subtree_nodes ) .
    IF LINES( lt_subtree_nodes ) GT 1 .
      me-&gt;expand_node( EXPORTING i_node_key       = v_root_nkey
                                 i_level_count    = 2
                                 i_expand_subtree = abap_off
                       EXCEPTIONS OTHERS = 0 ) .
    ENDIF .

  ENDMETHOD.                    &quot;constructor
  METHOD redraw .
    DATA ls_form_hier  TYPE lcl_form=&gt;ty_s_hierarchy .
    IF iv_form_id IS INITIAL
    OR iv_form_id EQ &apos;000000&apos;
    OR iv_form_id EQ ir_formtemplate-&gt;v_root_id .
      ls_form_hier-child = ir_formtemplate-&gt;v_root_id .
    ELSE .
      READ TABLE ir_formtemplate-&gt;t_hierarchy INTO ls_form_hier
        WITH KEY id = iv_form_id .
      ls_form_hier-id    = ls_form_hier-parent .
      ls_form_hier-child = iv_form_id .
    ENDIF .

    me-&gt;set_screen_update( i_update = space ) .

    redraw_recurs( EXPORTING ir_formtemplate = ir_formtemplate
                             is_form_hier_parent = ls_form_hier ) .

    me-&gt;set_screen_update( i_update = abap_on ) .
    me-&gt;frontend_update( ) .
    cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .
  ENDMETHOD .                    &quot;redraw
  METHOD redraw_recurs .
    DATA:
      ls_links                TYPE ty_s_links ,
      lv_form_id_next         TYPE snode-id .
    FIELD-SYMBOLS:
      &lt;form_hier&gt;             TYPE lcl_form=&gt;ty_s_hierarchy .

    lv_form_id_next = is_form_hier_parent-child .
    DO .
      READ TABLE ir_formtemplate-&gt;t_hierarchy ASSIGNING &lt;form_hier&gt;
        WITH KEY parent = is_form_hier_parent-id
                 id     = lv_form_id_next .
      IF sy-subrc NE 0 .
        EXIT .
      ENDIF .

      READ TABLE t_links INTO ls_links WITH KEY form_id = &lt;form_hier&gt;-id .
      CASE sy-subrc .
        WHEN 0 .
          node_upd( ir_formtemplate = ir_formtemplate
                    iv_form_id      = ls_links-form_id
                    iv_alvtree_nkey = ls_links-alvtree_nkey ) .
        WHEN OTHERS .
          CLEAR ls_links .
          ls_links-form_id = &lt;form_hier&gt;-id .
          ls_links-alvtree_nkey =
          node_add( ir_formtemplate = ir_formtemplate
                    iv_form_id      = &lt;form_hier&gt;-id
                    iv_alvtree_nkey = iv_alvtree_nkey_parent ) .
      ENDCASE .

      IF &lt;form_hier&gt;-child IS NOT INITIAL .
        redraw_recurs( ir_formtemplate        = ir_formtemplate
                       iv_alvtree_nkey_parent = ls_links-alvtree_nkey
                       is_form_hier_parent    = &lt;form_hier&gt; ) .
      ENDIF .

      IF &lt;form_hier&gt;-next IS INITIAL .
        EXIT .
      ELSE .
        lv_form_id_next = &lt;form_hier&gt;-next .
      ENDIF .
    ENDDO .
  ENDMETHOD .                    &quot;redraw_recurs
  METHOD node_prepare .

    DATA ls_hierarchy   TYPE lcl_form=&gt;ty_s_hierarchy .
    DATA ls_comp_types  TYPE lcl_form=&gt;ty_s_comp_types .
    DATA lv_dragdropid  TYPE i .

    CLEAR es_form_properties .
    CLEAR es_outtab .
    CLEAR es_layn .
    CLEAR ev_ntext .

    es_form_properties = ir_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK ir_formtemplate-&gt;v_retcode NE ir_formtemplate-&gt;c_retcode-error .

    READ TABLE ir_formtemplate-&gt;t_hierarchy INTO ls_hierarchy
    WITH KEY id = iv_form_id .
    CHECK sy-subrc EQ 0 .

*   node layout
    READ TABLE ir_formtemplate-&gt;t_comp_types INTO ls_comp_types
    WITH KEY comp_type = es_form_properties-comp_type
    BINARY SEARCH .
    IF sy-subrc EQ 0 .
      es_layn-n_image = es_layn-exp_image = ls_comp_types-icon .
    ENDIF .

    CASE es_form_properties-comp_type .
      WHEN ir_formtemplate-&gt;c_comp_type-sheet
        OR ir_formtemplate-&gt;c_comp_type-loopstep
        OR ir_formtemplate-&gt;c_comp_type-pattern
        OR ir_formtemplate-&gt;c_comp_type-respattern
        OR ir_formtemplate-&gt;c_comp_type-folder .
        r_dgdp_full-&gt;get_handle( IMPORTING handle = lv_dragdropid ) .
      WHEN ir_formtemplate-&gt;c_comp_type-field
        OR ir_formtemplate-&gt;c_comp_type-drawing
        OR ir_formtemplate-&gt;c_comp_type-chart
        OR ir_formtemplate-&gt;c_comp_type-tree
        OR ir_formtemplate-&gt;c_comp_type-grid .
        r_dgdp_source-&gt;get_handle( IMPORTING handle = lv_dragdropid ) .
      WHEN ir_formtemplate-&gt;c_comp_type-root .
        r_dgdp_target-&gt;get_handle( IMPORTING handle = lv_dragdropid ) .
      WHEN OTHERS .
        r_dgdp_none-&gt;get_handle( IMPORTING handle = lv_dragdropid ) .
    ENDCASE .
    es_layn-dragdropid = lv_dragdropid .

    IF ls_hierarchy-child IS NOT INITIAL .
      es_layn-expander = abap_on .
    ENDIF .

*   node text
    ev_ntext = es_form_properties-comp_name .

*   outtab
    es_outtab-comp_descr = es_form_properties-comp_descr .

    CASE es_form_properties-draft_subtree .
      WHEN ir_formtemplate-&gt;c_draft_subtree-yes .      es_outtab-retmess_icon = icon_delete_template .
      WHEN ir_formtemplate-&gt;c_draft_subtree-legacy .   es_outtab-retmess_icon = icon_dummy .
      WHEN OTHERS . es_outtab-retmess_icon = ir_formtemplate-&gt;get_retmess_icon( iv_form_id ) .
    ENDCASE .

    CASE es_form_properties-comp_type .
      WHEN ir_formtemplate-&gt;c_comp_type-pattern
        OR ir_formtemplate-&gt;c_comp_type-respattern
        OR ir_formtemplate-&gt;c_comp_type-folder
        OR ir_formtemplate-&gt;c_comp_type-tree
        OR ir_formtemplate-&gt;c_comp_type-grid .
        CASE es_form_properties-tb_direction .
          WHEN ir_formtemplate-&gt;c_tb_direction-left2right .
            es_outtab-direction_icon = icon_trend_unchanged .
          WHEN ir_formtemplate-&gt;c_tb_direction-up2down .
            es_outtab-direction_icon = icon_trend_down .
          WHEN OTHERS .
            es_outtab-direction_icon = space .
        ENDCASE .
      WHEN OTHERS .
        es_outtab-direction_icon = space .
    ENDCASE .

  ENDMETHOD.                    &quot;node_prepare
  METHOD node_add .
    DATA:
      ls_form_properties  TYPE lcl_formtemplate=&gt;ty_s_properties ,
      ls_outtab           TYPE ty_s_outtab ,
      ls_layn             TYPE lvc_s_layn ,
      lv_ntext            TYPE lvc_value ,
      ls_links            TYPE ty_s_links ,
      lv_relationship     LIKE cl_gui_column_tree=&gt;relat_next_sibling .

    node_prepare(
          EXPORTING ir_formtemplate  = ir_formtemplate
                    iv_form_id       = iv_form_id
          IMPORTING es_form_properties = ls_form_properties
                    es_outtab        = ls_outtab
                    es_layn          = ls_layn
                    ev_ntext         = lv_ntext ) .
    CASE iv_sibling .
      WHEN space  . lv_relationship  = cl_gui_column_tree=&gt;relat_last_child .
      WHEN OTHERS . lv_relationship  = cl_gui_column_tree=&gt;relat_next_sibling .
    ENDCASE .

    me-&gt;add_node(
          EXPORTING i_relat_node_key = iv_alvtree_nkey
                    i_relationship   = lv_relationship
                    i_node_text      = lv_ntext
                    is_outtab_line   = ls_outtab
                    is_node_layout   = ls_layn
          IMPORTING e_new_node_key   = rv_alvtree_nkey_new ) .

    IF ls_form_properties-id EQ ir_formtemplate-&gt;v_root_id .
      v_root_nkey = rv_alvtree_nkey_new .
    ENDIF .

    ls_links-form_id = iv_form_id .
    ls_links-alvtree_nkey = rv_alvtree_nkey_new .
    APPEND ls_links TO t_links .

  ENDMETHOD .                    &quot; node_add
  METHOD node_del .
    DATA:
      ls_subtree        TYPE lvc_s_nkey ,
      lt_subtree        TYPE lvc_t_nkey .

    me-&gt;get_subtree( EXPORTING i_node_key  = iv_alvtree_nkey
                     IMPORTING et_subtree_nodes = lt_subtree ) .
    LOOP AT lt_subtree INTO ls_subtree .
      DELETE t_links WHERE alvtree_nkey EQ ls_subtree-node_key .
    ENDLOOP .
    DELETE t_links WHERE alvtree_nkey EQ iv_alvtree_nkey .

    me-&gt;delete_subtree( i_node_key = iv_alvtree_nkey ) .
  ENDMETHOD .                    &quot;node_del
  METHOD node_upd .

    DATA:
      ls_outtab           TYPE ty_s_outtab ,
      ls_layn             TYPE lvc_s_layn ,
      lv_ntext            TYPE lvc_value ,
      ls_outtab_old       TYPE ty_s_outtab ,
      lv_ntext_old        TYPE lvc_value ,
      ls_layn_old         TYPE lvc_s_layn ,
      ls_lacn             TYPE lvc_s_lacn ,
      lv_ntext_flag       TYPE flag .

*   get old values
    me-&gt;get_outtab_line(
          EXPORTING i_node_key      = iv_alvtree_nkey
          IMPORTING	e_outtab_line   = ls_outtab_old
                    e_node_text	    = lv_ntext_old
                    es_node_layout  = ls_layn_old ) .

*   prepare new values
    node_prepare(
          EXPORTING ir_formtemplate = ir_formtemplate
                    iv_form_id      = iv_form_id
          IMPORTING es_outtab       = ls_outtab
                    es_layn         = ls_layn
                    ev_ntext        = lv_ntext ) .

*   prepare values for update
    IF ls_layn-n_image NE ls_layn_old-n_image .
      ls_lacn-n_image     = ls_layn-n_image .
      ls_lacn-u_n_image   = abap_on .
    ENDIF .
    IF ls_layn-exp_image NE ls_layn_old-exp_image .
      ls_lacn-exp_image   = ls_layn-exp_image .
      ls_lacn-u_exp_imag  = abap_on .
    ENDIF .
    IF ls_layn-dragdropid NE ls_layn_old-dragdropid .
      ls_lacn-dragdropid  = ls_layn-dragdropid .
      ls_lacn-u_dragdrop  = abap_on .
    ENDIF .
*   IF ls_layn-isfolder NE ls_layn_old-isfolder .
*     ls_lacn-isfolder    = ls_layn-isfolder .
*     ls_lacn-u_isfolder  = abap_on .
*   ENDIF .
    IF ls_layn-expander NE ls_layn_old-expander .
      ls_lacn-expander    = ls_layn-expander .
      ls_lacn-u_expander  = abap_on .
    ENDIF .
    IF lv_ntext NE lv_ntext_old .
      lv_ntext_flag = abap_on .
    ENDIF .

*   update node (if required)
    CHECK ls_outtab NE ls_outtab_old
       OR ls_lacn   IS NOT INITIAL
       OR lv_ntext_flag IS NOT INITIAL .

    me-&gt;change_node(
          EXPORTING i_node_key      = iv_alvtree_nkey
                    i_outtab_line	  = ls_outtab
                    is_node_layout  = ls_lacn
                    i_node_text	    = lv_ntext
                    i_u_node_text	  = lv_ntext_flag ) .

  ENDMETHOD .                    &quot;node_upd
  METHOD hndl_toolbar_fcode .
    DATA:
      lv_node_key       TYPE lvc_nkey ,
      lt_node_key       TYPE lvc_t_nkey ,
      ls_links          TYPE ty_s_links .

*   ------------- process function: Select all
    CASE fcode .
      WHEN c_fcode-comp_select_all .
        LOOP AT t_links INTO ls_links .
          lv_node_key = ls_links-alvtree_nkey .
          INSERT lv_node_key INTO TABLE lt_node_key .
        ENDLOOP .
        me-&gt;set_selected_nodes( EXPORTING  it_selected_nodes = lt_node_key
                                EXCEPTIONS OTHERS = 0 ) .
        EXIT .
    ENDCASE .

*   ------------- process other functions
    me-&gt;get_selected_item( IMPORTING e_selected_node = lv_node_key
                           EXCEPTIONS OTHERS = 0 ) .
    IF lv_node_key IS INITIAL .
      me-&gt;get_selected_nodes( CHANGING ct_selected_nodes = lt_node_key
                              EXCEPTIONS OTHERS = 0 ).
      READ TABLE lt_node_key INTO lv_node_key INDEX 1 .
    ENDIF .
    IF lv_node_key IS INITIAL .
      MESSAGE s000(lp) WITH lcl_root=&gt;v_text-t066 . &quot; text: Select the node
      EXIT .
    ENDIF .

    READ TABLE t_links INTO ls_links WITH KEY alvtree_nkey = lv_node_key .
    CHECK sy-subrc EQ 0 .

    RAISE EVENT evnt_fcode
      EXPORTING ev_fcode        = fcode
                ev_form_id      = ls_links-form_id .

  ENDMETHOD .                    &quot;hndl_toolbar_fcode
  METHOD hndl_selection_changed .
    raise_component_selected( node_key ) .
  ENDMETHOD .                    &quot;hndl_selection_changed
  METHOD hndl_node_double_click .
    raise_component_selected( node_key ) .
  ENDMETHOD .                    &quot;hndl_node_double_click
  METHOD hndl_item_double_click .
    raise_component_selected( node_key ) .
  ENDMETHOD .                    &quot;hndl_item_double_click
  METHOD hndl_node_drag .
    DATA lr_dragdrop_data TYPE REF TO lcl_wb_formtree_drgdrpdata .
    FIELD-SYMBOLS &lt;links&gt; TYPE ty_s_links .

    READ TABLE t_links ASSIGNING &lt;links&gt; WITH KEY alvtree_nkey = node_key .
    CHECK sy-subrc EQ 0 .

    CREATE OBJECT lr_dragdrop_data .
    lr_dragdrop_data-&gt;v_source_alvtree_nkey = &lt;links&gt;-alvtree_nkey .
    lr_dragdrop_data-&gt;v_source_form_id = &lt;links&gt;-form_id .
    drag_drop_object-&gt;object = lr_dragdrop_data .
  ENDMETHOD .                    &quot;hndl_node_drag
  METHOD hndl_node_drop .
    DATA lr_dragdrop_data TYPE REF TO lcl_wb_formtree_drgdrpdata .
    FIELD-SYMBOLS &lt;links&gt; TYPE ty_s_links .

    READ TABLE t_links ASSIGNING &lt;links&gt; WITH KEY alvtree_nkey = node_key .
    CHECK sy-subrc EQ 0 .

    CATCH SYSTEM-EXCEPTIONS move_cast_error = 1 .
      lr_dragdrop_data ?= drag_drop_object-&gt;object .
      lr_dragdrop_data-&gt;v_target_alvtree_nkey = &lt;links&gt;-alvtree_nkey .
      lr_dragdrop_data-&gt;v_target_form_id = &lt;links&gt;-form_id .
      drag_drop_object-&gt;object = lr_dragdrop_data .
    ENDCATCH .

    CHECK sy-subrc NE 0 .
    drag_drop_object-&gt;abort( ) .
  ENDMETHOD .                    &quot;hndl_node_drop
  METHOD hndl_node_drop_complete .
    DATA lr_dragdrop_data TYPE REF TO lcl_wb_formtree_drgdrpdata .

    CATCH SYSTEM-EXCEPTIONS move_cast_error = 1 .
      lr_dragdrop_data ?= drag_drop_object-&gt;object .
    ENDCATCH .
    CHECK sy-subrc EQ 0 .

    RAISE EVENT evnt_comp_move
    EXPORTING ev_drag_drop_object = drag_drop_object .

    CHECK lr_dragdrop_data-&gt;v_terminated IS INITIAL .

*   set on an Expander option in the target node of AlvTree
    DATA:
      ls_outtab           TYPE ty_s_outtab ,
      ls_layn             TYPE lvc_s_layn ,
      ls_lacn             TYPE lvc_s_lacn .
    me-&gt;get_outtab_line(
        EXPORTING i_node_key      = lr_dragdrop_data-&gt;v_target_alvtree_nkey
        IMPORTING	e_outtab_line   = ls_outtab
                  es_node_layout  = ls_layn ) .
    IF ls_layn-isfolder IS INITIAL .
      ls_lacn-isfolder = ls_lacn-u_isfolder = abap_on .
      me-&gt;change_node(
          EXPORTING i_node_key      = lr_dragdrop_data-&gt;v_target_alvtree_nkey
                    i_outtab_line	  = ls_outtab
                    is_node_layout  = ls_lacn ) .
      me-&gt;frontend_update( ) .
    ENDIF .

*   move subtree
    move_node(
      EXPORTING i_node_key      = lr_dragdrop_data-&gt;v_source_alvtree_nkey
                i_relatkey      = lr_dragdrop_data-&gt;v_target_alvtree_nkey
                i_relatship     = cl_gui_column_tree=&gt;relat_last_child
      EXCEPTIONS node_not_found     = 1
                 relative_not_found = 2
                 OTHERS             = 3 ) .
    IF sy-subrc EQ 0 .
      redraw( iv_form_id      = lr_dragdrop_data-&gt;v_target_form_id &quot;lr_dragdrop_data-&gt;v_source_form_id
              ir_formtemplate = lr_dragdrop_data-&gt;r_formtemplate ) .

      expand_node( i_node_key = lr_dragdrop_data-&gt;v_target_alvtree_nkey ) .
    ELSE .
      RAISE EVENT evnt_fcode &quot; hard redraw tree
      EXPORTING ev_fcode   = c_fcode-appl_actualize
                ev_form_id = 0 .
    ENDIF .

  ENDMETHOD .                    &quot;hndl_node_drop_complete
  METHOD hndl_node_context_menu_req .
    DATA lv_text TYPE gui_text .

    lv_text = lcl_root=&gt;v_text-t061 . &quot; text: Delete component
    menu-&gt;add_function( fcode     = c_fcode-comp_delete
                        icon      = icon_delete
                        text      = lv_text ) .

    CONCATENATE lcl_root=&gt;v_text-t062 &quot; text: Create component
                lcl_root=&gt;v_text-t296 &quot; text: as Child
           INTO lv_text SEPARATED BY space .
    menu-&gt;add_function( fcode     = c_fcode-comp_add_child
                        icon      = icon_create
                        text      = lv_text ) .

    CONCATENATE lcl_root=&gt;v_text-t062 &quot; text: Create component
                lcl_root=&gt;v_text-t297 &quot; text: as Sibling
           INTO lv_text SEPARATED BY space .
    menu-&gt;add_function( fcode     = c_fcode-comp_add_sibling
                        icon      = icon_create
                        text      = lv_text ) .

    lv_text = lcl_root=&gt;v_text-t172 . &quot; text: Clone component
    menu-&gt;add_function( fcode     = c_fcode-comp_clone
                        icon      = icon_copy_object
                        text      = lv_text ) .

    lv_text = lcl_root=&gt;v_text-t063 . &quot; text: Move component UP
    menu-&gt;add_function( fcode     = c_fcode-comp_move_sibling_up
                        icon      = icon_next_value
                        text      = lv_text ) .

    lv_text = lcl_root=&gt;v_text-t064 . &quot; text: Move component DOWN
    menu-&gt;add_function( fcode     = c_fcode-comp_move_sibling_down
                        icon      = icon_previous_value
                        text      = lv_text ) .
  ENDMETHOD .                    &quot;hndl_node_context_menu_req
  METHOD hndl_node_context_menu_sel .
    hndl_toolbar_fcode( fcode = fcode ) .
  ENDMETHOD .                    &quot;hndl_node_context_menu_sel
  METHOD raise_component_selected .
    DATA ls_links TYPE ty_s_links .
    READ TABLE t_links INTO ls_links WITH KEY alvtree_nkey = iv_alvtree_nkey .
    CHECK sy-subrc EQ 0 .

    RAISE EVENT evnt_fcode
      EXPORTING ev_fcode   = c_fcode-comp_selected
                ev_form_id = ls_links-form_id .
  ENDMETHOD .                    &quot;raise_component_selected
ENDCLASS .                    &quot;lcl_wb_formtree IMPLEMENTATION


*----------------------------------------------------------------------*
*       CLASS lcl_wb_protab DEFINITION
*----------------------------------------------------------------------*
*       tab bar of the properties
*----------------------------------------------------------------------*
CLASS lcl_wb_protab DEFINITION INHERITING FROM lcl_root .

  PUBLIC SECTION .
    DATA:
*     ----------- general
      v_form_id           TYPE snode-id ,
      v_formdescr         TYPE string ,
      v_devclass          TYPE tadir-devclass ,
      v_extension         TYPE ty_char10 ,
      v_created_uname     TYPE syuname ,
      v_created_datum     TYPE sydatum ,
      v_changed_uname     TYPE syuname ,
      v_changed_datum     TYPE sydatum ,
      v_contextname       TYPE string ,
      v_contextshortdescr TYPE string ,
      s_comp_types        TYPE ty_s_comp_types ,
      v_dummy_text        TYPE string ,
*     ----------- tabs appearance
      v_rt_show           TYPE flag ,
      v_cm_show           TYPE flag ,
      v_pr_show           TYPE flag ,
      v_ms_show           TYPE flag ,
      v_dm_show           TYPE flag ,
*     ----------- comp.properties
      s_form_prop         TYPE lcl_form=&gt;ty_s_properties ,
      v_tb_printtitles_r_name  TYPE ty_comp_name ,
      v_tb_printtitles_c_name  TYPE ty_comp_name ,
      v_dataset_name           TYPE ty_char100 ,
      v_valvld_for1_dataset_name  TYPE ty_char100 ,
      v_valvld_for1_dataset_field TYPE ty_char100 ,
*     ----------- messages
      t_ms_retmess        TYPE bapiret2_t ,
      v_ms_logh           TYPE balloghndl ,
      v_ms_cnth           TYPE balcnthndl .

    METHODS:
      constructor
          IMPORTING ir_container        TYPE REF TO cl_gui_container ,
      free,
      redraw
          IMPORTING ir_formtemplate     TYPE REF TO lcl_formtemplate
                    iv_form_id          TYPE snode-id OPTIONAL
                    iv_activetab_id     TYPE i OPTIONAL ,
      redraw_dummy
          IMPORTING iv_text             TYPE any OPTIONAL
                    iv_icon             TYPE icon-id OPTIONAL .
    CONSTANTS:
      BEGIN OF c_tab_id ,
        root              TYPE i VALUE 1 ,
        common            TYPE i VALUE 2 ,
        adjustments       TYPE i VALUE 3 ,
        messages          TYPE i VALUE 4 ,
        dummy             TYPE i VALUE 5 ,
      END   OF c_tab_id .
    CONSTANTS:
      BEGIN OF c_fcode ,
        context_change    TYPE ui_func VALUE &apos;CONTEXT_CHANGE&apos; ,
        formdescr_change  TYPE ui_func VALUE &apos;FORMDESCR_CHANGE&apos; ,
        format_change     TYPE ui_func VALUE &apos;FORMAT_CHANGE&apos; ,
        compname_change   TYPE ui_func VALUE &apos;COMPNAME_CHANGE&apos; ,
        cb_relpath_change_f4    TYPE ui_func VALUE &apos;CB_RELPATH_CHANGE_F4&apos; ,
        cb_relpath_change_mn    TYPE ui_func VALUE &apos;CB_RELPATH_CHANGE_MN&apos; ,
        cb_relpath_delete       TYPE ui_func VALUE &apos;CB_RELPATH_DELETE&apos; ,
        cb_aprpath_change_f4    TYPE ui_func VALUE &apos;CB_APRPATH_CHANGE_F4&apos; ,
        cb_aprpath_change_mn    TYPE ui_func VALUE &apos;CB_APRPATH_CHANGE_MN&apos; ,
        cb_aprchar_change       TYPE ui_func VALUE &apos;CB_APRCHAR_CHANGE&apos; ,
        cb_aprpath_delete       TYPE ui_func VALUE &apos;CB_APRPATH_DELETE&apos; ,
        cb_cellrng_change_f4    TYPE ui_func VALUE &apos;CB_CELLRNG_CHANGE_F4&apos; ,
        cb_cellrng_change_mn    TYPE ui_func VALUE &apos;CB_CELLRNG_CHANGE_MN&apos; ,
        cb_cellrng_change_char  TYPE ui_func VALUE &apos;CB_CELLRNG_CHANGE_CHAR&apos; ,
        cb_cellrng_delete       TYPE ui_func VALUE &apos;CB_CELLRNG_DELETE&apos; ,
        cb_valpath_change_f4    TYPE ui_func VALUE &apos;CB_VALPATH_CHANGE_F4&apos; ,
        cb_valpath_change_mn    TYPE ui_func VALUE &apos;CB_VALPATH_CHANGE_MN&apos; ,
        cb_valpath_sub          TYPE ui_func VALUE &apos;CB_VALPATH_SUB&apos; ,
        cb_valchar_change       TYPE ui_func VALUE &apos;CB_VALCHAR_CHANGE&apos; ,
        cb_valpath_delete       TYPE ui_func VALUE &apos;CB_VALPATH_DELETE&apos; ,
        cb_valconv_change       TYPE ui_func VALUE &apos;CB_VALCONV_CHANGE&apos; ,
        cb_valvld_attrpath_change_f4  TYPE ui_func VALUE &apos;CB_VALVLD_ATTRPATH_CHANGE_F4&apos; ,
        cb_valvld_attrpath_change_mn  TYPE ui_func VALUE &apos;CB_VALVLD_ATTRPATH_CHANGE_MN&apos; ,
        cb_valvld_attrpath_delete     TYPE ui_func VALUE &apos;CB_VALVLD_ATTRPATH_DELETE   &apos; ,

        cb_valvld_for1_template       TYPE ui_func VALUE &apos;CB_VALVLD_FOR1_TEMPLATE&apos; ,
        cb_valvld_for1_relpath        TYPE ui_func VALUE &apos;CB_VALVLD_FOR1_RELPATH&apos; ,
        cb_valvld_for1_dataset_id     TYPE ui_func VALUE &apos;CB_VALVLD_FOR1_DATASET_ID&apos; ,
        cb_valvld_for1_dataset_fld    TYPE ui_func VALUE &apos;CB_VALVLD_FOR1_DATASET_FLD&apos; ,
        cb_valvld_for2_template       TYPE ui_func VALUE &apos;CB_VALVLD_FOR2_TEMPLATE&apos; ,
        cb_valvld_for2_relpath        TYPE ui_func VALUE &apos;CB_VALVLD_FOR2_RELPATH&apos; ,

        cb_loop_from_to         TYPE ui_func VALUE &apos;CB_LOOP_FROM_TO&apos; ,
        tb_sheetname_change     TYPE ui_func VALUE &apos;TB_SHEETNAME_CHANGE&apos; ,
        tb_sheetname_delete     TYPE ui_func VALUE &apos;TB_SHEETNAME_DELETE&apos; ,
        tb_sheetstate           TYPE ui_func VALUE &apos;TB_SHEETSTATE&apos; ,
        tb_sheetprot_change     TYPE ui_func VALUE &apos;TB_SHEETPROT_CHANGE&apos; ,
        tb_sheetprot_delete     TYPE ui_func VALUE &apos;TB_SHEETPROT_DELETE&apos; ,
        tb_sheetprotection_from_temp TYPE ui_func VALUE &apos;TB_SHEETPROT_FROM_TEMP&apos; ,
        tb_sheetprotection_from_cont TYPE ui_func VALUE &apos;TB_SHEETPROT_FROM_CONT&apos; ,
        tb_sheetprotection_static    TYPE ui_func VALUE &apos;TB_SHEETPROT_STATIC&apos; ,
        tb_area_setcells        TYPE ui_func VALUE &apos;TB_AREA_SETCELLS&apos; ,
        tb_area_settextmark     TYPE ui_func VALUE &apos;TB_AREA_SETTEXTMARK&apos; ,
        tb_area_delete          TYPE ui_func VALUE &apos;TB_AREA_DELETE&apos; ,
        tb_valstring_change     TYPE ui_func VALUE &apos;TB_VALSTRING_CHANGE&apos; ,
        tb_valformula_change    TYPE ui_func VALUE &apos;TB_VALFORMULA_CHANGE&apos; ,
        tb_valmatrix_change     TYPE ui_func VALUE &apos;TB_VALMATRIX_CHANGE&apos; ,
        tb_direction_change     TYPE ui_func VALUE &apos;TB_DIRECTION_CHANGE&apos; ,
        tb_rowprop_change       TYPE ui_func VALUE &apos;TB_ROWPROP_CHANGE&apos; ,
        tb_colprop_change       TYPE ui_func VALUE &apos;TB_COLPROP_CHANGE&apos; ,
        tb_rowgroup_change      TYPE ui_func VALUE &apos;TB_ROWGROUP_CHANGE&apos; ,
        tb_colgroup_change      TYPE ui_func VALUE &apos;TB_COLGROUP_CHANGE&apos; ,
        tb_rowgroup_clp_change  TYPE ui_func VALUE &apos;TB_ROWGROUP_CLP_CHANGE&apos; ,
        tb_colgroup_clp_change  TYPE ui_func VALUE &apos;TB_COLGROUP_CLP_CHANGE&apos; ,
        tb_drwstflag_change     TYPE ui_func VALUE &apos;TB_DRWSTFLAG_CHANGE&apos; ,
        tb_drwstname_change     TYPE ui_func VALUE &apos;TB_DRWSTNAME_CHANGE&apos; ,
        tb_drwstname_delete     TYPE ui_func VALUE &apos;TB_DRWSTNAME_DELETE&apos; ,
        tb_drwsize_fit          TYPE ui_func VALUE &apos;TB_DRWSIZE_FIT&apos; ,
        tb_drwsize_context      TYPE ui_func VALUE &apos;TB_DRWSIZE_CONTEXT&apos; ,
        tb_drwsize_h_f4         TYPE ui_func VALUE &apos;TB_DRWSIZE_H_F4&apos; ,
        tb_drwsize_h_mn         TYPE ui_func VALUE &apos;TB_DRWSIZE_H_MN&apos; ,
        tb_drwsize_w_f4         TYPE ui_func VALUE &apos;TB_DRWSIZE_W_F4&apos; ,
        tb_drwsize_w_mn         TYPE ui_func VALUE &apos;TB_DRWSIZE_W_MN&apos; ,
        tb_pgbreak_left         TYPE ui_func VALUE &apos;TB_PGBREAK_LEFT&apos; ,
        tb_pgbreak_top          TYPE ui_func VALUE &apos;TB_PGBREAK_TOP&apos; ,
        tb_nopgbreak_left       TYPE ui_func VALUE &apos;TB_NOPGBREAK_LEFT&apos; ,
        tb_nopgbreak_top        TYPE ui_func VALUE &apos;TB_NOPGBREAK_TOP&apos; ,
        tb_printtitles_rows_change  TYPE ui_func VALUE &apos;TB_PRINTTITLES_ROWS_CHANGE&apos; ,
        tb_printtitles_rows_delete  TYPE ui_func VALUE &apos;TB_PRINTTITLES_ROWS_DELETE&apos; ,
        tb_printtitles_cols_change  TYPE ui_func VALUE &apos;TB_PRINTTITLES_COLS_CHANGE&apos; ,
        tb_printtitles_cols_delete  TYPE ui_func VALUE &apos;TB_PRINTTITLES_COLS_DELETE&apos; ,
        tb_mergecells_change        TYPE ui_func VALUE &apos;TB_MERGECELLS_CHANGE&apos; ,
        tb_autofitmerged_off        TYPE ui_func VALUE &apos;TB_AUTOFITMERGED_OFF&apos; ,
        tb_autofitmerged_r          TYPE ui_func VALUE &apos;TB_AUTOFITMERGED_R&apos; ,
        tb_autofitmerged_c          TYPE ui_func VALUE &apos;TB_AUTOFITMERGED_C&apos; ,
        tb_respattern_before        TYPE ui_func VALUE &apos;TB_RESPATTERN_BEFORE&apos; ,
        tb_respattern_after         TYPE ui_func VALUE &apos;TB_RESPATTERN_AFTER&apos; ,
        tree_layout_rotate          TYPE ui_func VALUE &apos;TREE_LAYOUT_ROTATE&apos; ,
        tree_layout_exp_coll        TYPE ui_func VALUE &apos;TREE_LAYOUT_EXP_COLL&apos; ,
        tree_layout_stru            TYPE ui_func VALUE &apos;TREE_LAYOUT_STRU&apos; ,
        tree_layout_head            TYPE ui_func VALUE &apos;TREE_LAYOUT_HEAD&apos; ,
        tree_layout_colhier         TYPE ui_func VALUE &apos;TREE_LAYOUT_COLHIER&apos; ,
        tree_layout_colhier_after   TYPE ui_func VALUE &apos;TREE_LAYOUT_COLHIER_AFTER&apos; ,
        tree_layout_colhier_shift   TYPE ui_func VALUE &apos;TREE_LAYOUT_COLHIER_SHIFT&apos; ,
        tree_layout_colother        TYPE ui_func VALUE &apos;TREE_LAYOUT_COLOTHER&apos; ,
        tree_layout_colother_wdh    TYPE ui_func VALUE &apos;TREE_LAYOUT_COLOTHER_WDH&apos; ,
        tree_layout_allowformulas   TYPE ui_func VALUE &apos;TREE_LAYOUT_ALLOWFORMULAS&apos; ,
        grid_layout_rotate          TYPE ui_func VALUE &apos;GRID_LAYOUT_ROTATE&apos; ,
        grid_layout_head            TYPE ui_func VALUE &apos;GRID_LAYOUT_HEAD&apos; ,
        grid_layout_head_titles     TYPE ui_func VALUE &apos;GRID_LAYOUT_HEAD_TITLES&apos; ,
        grid_layout_allowformulas   TYPE ui_func VALUE &apos;GRID_LAYOUT_ALLOWFORMULAS&apos; ,
        grid_fldseq                 TYPE ui_func VALUE &apos;GRID_FLDSEQ&apos; ,
        grid_fldprop                TYPE ui_func VALUE &apos;GRID_FLDPROP&apos; ,
        chart_model_change          TYPE ui_func VALUE &apos;CHART_MODEL_CHANGE&apos; ,
        chart_model_delete          TYPE ui_func VALUE &apos;CHART_MODEL_DELETE&apos; ,
        chart_title                 TYPE ui_func VALUE &apos;CHART_TITLE&apos; ,
        chart_title_catax           TYPE ui_func VALUE &apos;CHART_TITLE_CATAX&apos; ,
        chart_title_valax           TYPE ui_func VALUE &apos;CHART_TITLE_VALAX&apos; ,
        chart_title_series          TYPE ui_func VALUE &apos;CHART_TITLE_SERIES&apos; ,
        chart_dtset_change          TYPE ui_func VALUE &apos;CHART_DTSET_CHANGE&apos; ,
        chart_dtset_delete          TYPE ui_func VALUE &apos;CHART_DTSET_DELETE&apos; ,
        chart_dtset_series          TYPE ui_func VALUE &apos;CHART_DTSET_SERIES&apos; ,
        draft_change                TYPE ui_func VALUE &apos;DRAFT_CHANGE&apos; ,
        postproc_vbs_code           TYPE ui_func VALUE &apos;POSTPROC_VBS_CODE&apos; ,
        postproc_vbs_tables         TYPE ui_func VALUE &apos;POSTPROC_VBS_TABLES&apos; ,
        definednames_dont_remove    TYPE ui_func VALUE &apos;DEFINEDNAMES_DONT_REMOVE&apos; ,
      END   OF c_fcode .
    EVENTS:
      evnt_fcode
          EXPORTING value(ev_fcode)         TYPE ui_func
                    value(ev_form_id)       TYPE snode-id .

  PRIVATE SECTION .
    DATA:
      r_container           TYPE REF TO cl_gui_container ,
      r_container_bar       TYPE REF TO cl_gui_container_bar_2 ,
      r_menutree_rt         TYPE REF TO cl_gui_list_tree ,
      r_menutree_cm         TYPE REF TO cl_gui_list_tree ,
      r_menutree_pr         TYPE REF TO cl_gui_list_tree .
    CONSTANTS:
      BEGIN OF c_nkey ,
        cntxt               TYPE tv_nodekey VALUE &apos;CNTXT&apos; ,
        cntxt_name          TYPE tv_nodekey VALUE &apos;CNTXT_NAME&apos; ,
        formdescr           TYPE tv_nodekey VALUE &apos;FORMDESCR&apos; ,
        formdescr_name      TYPE tv_nodekey VALUE &apos;FORMDESCR_NM&apos; ,
        format              TYPE tv_nodekey VALUE &apos;FORMAT&apos; ,
        format_line1        TYPE tv_nodekey VALUE &apos;FORMAT_LINE1&apos; ,
        postprocessing      TYPE tv_nodekey VALUE &apos;POSTPROCESSING&apos; ,
        postproc_line1      TYPE tv_nodekey VALUE &apos;POSTPROC_LINE1&apos; ,
        techinfo            TYPE tv_nodekey VALUE &apos;TECHINFO&apos; ,
        created             TYPE tv_nodekey VALUE &apos;CREATED&apos; ,
        changed             TYPE tv_nodekey VALUE &apos;CHANGED&apos; ,
        devclass            TYPE tv_nodekey VALUE &apos;DEVCLASS&apos; ,
        relpath             TYPE tv_nodekey VALUE &apos;RELPATH&apos; ,
        relpath_line1       TYPE tv_nodekey VALUE &apos;RELPATH_1&apos; ,
        relpath_line2       TYPE tv_nodekey VALUE &apos;RELPATH_2&apos; ,
        cellrng             TYPE tv_nodekey VALUE &apos;CELLRNG&apos; ,
        cellrng_line1       TYPE tv_nodekey VALUE &apos;CELLRNG_1&apos; ,
        cellrng_line2       TYPE tv_nodekey VALUE &apos;CELLRNG_2&apos; ,
        cellrng_line3       TYPE tv_nodekey VALUE &apos;CELLRNG_3&apos; ,
        aprpath             TYPE tv_nodekey VALUE &apos;APRPATH&apos; ,
        aprpath_line1       TYPE tv_nodekey VALUE &apos;APRPATH_1&apos; ,
        aprpath_line2       TYPE tv_nodekey VALUE &apos;APRPATH_2&apos; ,
        aprpath_line3       TYPE tv_nodekey VALUE &apos;APRPATH_3&apos; ,
        valpath             TYPE tv_nodekey VALUE &apos;VALPATH&apos; ,
        valpath_line1       TYPE tv_nodekey VALUE &apos;VALPATH_1&apos; ,
        valpath_line2       TYPE tv_nodekey VALUE &apos;VALPATH_2&apos; ,
        valpath_line3       TYPE tv_nodekey VALUE &apos;VALPATH_3&apos; ,
        valpath_line4       TYPE tv_nodekey VALUE &apos;VALPATH_4&apos; ,
        vallayout           TYPE tv_nodekey VALUE &apos;VALLAYOUT&apos; ,
        vallayout_line1     TYPE tv_nodekey VALUE &apos;VALLAYOUT_1&apos; ,
        vallayout_line2     TYPE tv_nodekey VALUE &apos;VALLAYOUT_2&apos; ,
        vallayout_line3     TYPE tv_nodekey VALUE &apos;VALLAYOUT_3&apos; ,
        vallayout_line31    TYPE tv_nodekey VALUE &apos;VALLAYOUT_31&apos; ,
        valvalid            TYPE tv_nodekey VALUE &apos;VALIDAT&apos; ,
        valvalid_line1      TYPE tv_nodekey VALUE &apos;VALIDAT_1&apos; ,
        valvalid_line11     TYPE tv_nodekey VALUE &apos;VALIDAT_11&apos; ,
        valvalid_line12     TYPE tv_nodekey VALUE &apos;VALIDAT_12&apos; ,
        valvalid_line2      TYPE tv_nodekey VALUE &apos;VALIDAT_2&apos; ,
        valvalid_line21     TYPE tv_nodekey VALUE &apos;VALIDAT_21&apos; ,
        valvalid_line22     TYPE tv_nodekey VALUE &apos;VALIDAT_22&apos; ,
        valvalid_line23     TYPE tv_nodekey VALUE &apos;VALIDAT_23&apos; ,
        valvalid_line3      TYPE tv_nodekey VALUE &apos;VALIDAT_3&apos; ,
        valvalid_line31     TYPE tv_nodekey VALUE &apos;VALIDAT_31&apos; ,
        valvalid_line32     TYPE tv_nodekey VALUE &apos;VALIDAT_32&apos; ,
        valvalid_line33     TYPE tv_nodekey VALUE &apos;VALIDAT_33&apos; ,
        component           TYPE tv_nodekey VALUE &apos;COMP&apos; ,
        component_line1     TYPE tv_nodekey VALUE &apos;COMP_1&apos; ,
        component_line2     TYPE tv_nodekey VALUE &apos;COMP_2&apos; ,
        sheet               TYPE tv_nodekey VALUE &apos;SHEET&apos; ,
        sheet_line1         TYPE tv_nodekey VALUE &apos;SHEET_1&apos; ,
        area                TYPE tv_nodekey VALUE &apos;AREA&apos; ,
        area_line1          TYPE tv_nodekey VALUE &apos;AREA_1&apos; ,
        direction           TYPE tv_nodekey VALUE &apos;DIRECTION&apos; ,
        direction_line1     TYPE tv_nodekey VALUE &apos;DIRECTION_1&apos; ,
        colrow_prop         TYPE tv_nodekey VALUE &apos;COLROW_PRP&apos; ,
        colrow_prop_line1   TYPE tv_nodekey VALUE &apos;COLROW_PRP_1&apos; ,
        colrow_grp          TYPE tv_nodekey VALUE &apos;COLROW_GRP&apos; ,
        colrow_grp_line1    TYPE tv_nodekey VALUE &apos;COLROW_GRP_1&apos; ,
        drwstat             TYPE tv_nodekey VALUE &apos;DRWSTAT&apos; ,
        drwstat_line1       TYPE tv_nodekey VALUE &apos;DRWSTAT_1&apos; ,
        drwstat_line2       TYPE tv_nodekey VALUE &apos;DRWSTAT_2&apos; ,
        drwsize             TYPE tv_nodekey VALUE &apos;DRWSIZE&apos; ,
        drwsize_line1       TYPE tv_nodekey VALUE &apos;DRWSIZE_1&apos; ,
        drwsize_line2       TYPE tv_nodekey VALUE &apos;DRWSIZE_2&apos; ,
        drwsize_line3       TYPE tv_nodekey VALUE &apos;DRWSIZE_3&apos; ,
        chart_layout        TYPE tv_nodekey VALUE &apos;CHARTLAYOUT&apos; ,
        chart_model         TYPE tv_nodekey VALUE &apos;CHART_MDL&apos; ,
        chart_title         TYPE tv_nodekey VALUE &apos;CHART_TITLE&apos; ,
        chart_title_catax   TYPE tv_nodekey VALUE &apos;CHART_TLCATAX&apos; ,
        chart_title_valax   TYPE tv_nodekey VALUE &apos;CHART_TLVALAX&apos; ,
        chart_title_ser     TYPE tv_nodekey VALUE &apos;CHART_TLSER&apos; ,
        chart_dtset         TYPE tv_nodekey VALUE &apos;CHART_DTS&apos; ,
        chart_dtset_1       TYPE tv_nodekey VALUE &apos;CHART_DTS_1&apos; ,
        chart_dtset_2       TYPE tv_nodekey VALUE &apos;CHART_DTS_2&apos; ,
        printtitles         TYPE tv_nodekey VALUE &apos;PRINTTL&apos; ,
        printtitles_line1   TYPE tv_nodekey VALUE &apos;PRINTTL_1&apos; ,
        printtitles_line2   TYPE tv_nodekey VALUE &apos;PRINTTL_2&apos; ,
        sheetprot           TYPE tv_nodekey VALUE &apos;SHEETPROT&apos; ,
        sheetprot_line1     TYPE tv_nodekey VALUE &apos;SHEETPROT_1&apos; ,
        sheetprot_line2     TYPE tv_nodekey VALUE &apos;SHEETPROT_2&apos; ,
        sheetprot_line3     TYPE tv_nodekey VALUE &apos;SHEETPROT_3&apos; ,
        sheetprot_line4     TYPE tv_nodekey VALUE &apos;SHEETPROT_4&apos; ,
        pgbrk               TYPE tv_nodekey VALUE &apos;PGBRK&apos; ,
        pgbrk_line1         TYPE tv_nodekey VALUE &apos;PGBRK_1&apos; ,
        pgbrk_line2         TYPE tv_nodekey VALUE &apos;PGBRK_2&apos; ,
        nopgbrk             TYPE tv_nodekey VALUE &apos;NOPGBRK&apos; ,
        nopgbrk_line1       TYPE tv_nodekey VALUE &apos;NOPGBRK_1&apos; ,
        nopgbrk_line2       TYPE tv_nodekey VALUE &apos;NOPGBRK_2&apos; ,
        mergecells          TYPE tv_nodekey VALUE &apos;MRGCELLS&apos; ,
        mergecells_line1    TYPE tv_nodekey VALUE &apos;MRGCELLS_1&apos; ,
        mergecells_line2    TYPE tv_nodekey VALUE &apos;MRGCELLS_2&apos; ,
        autofitmrg          TYPE tv_nodekey VALUE &apos;AUTOFITMRG&apos; ,
        autofitmrg_line1    TYPE tv_nodekey VALUE &apos;AUTOFITMRG_1&apos; ,
        treelayout          TYPE tv_nodekey VALUE &apos;TREELAYOUT&apos; ,
        treelayout_line1    TYPE tv_nodekey VALUE &apos;TREELAYO_1&apos; ,
        treelayout_line2    TYPE tv_nodekey VALUE &apos;TREELAYO_2&apos; ,
        treelayout_line3    TYPE tv_nodekey VALUE &apos;TREELAYO_3&apos; ,
        treelayout_line4    TYPE tv_nodekey VALUE &apos;TREELAYO_4&apos; ,
        treelayout_line5    TYPE tv_nodekey VALUE &apos;TREELAYO_5&apos; ,
        treelayout_line6    TYPE tv_nodekey VALUE &apos;TREELAYO_6&apos; ,
        treelayout_line61   TYPE tv_nodekey VALUE &apos;TREELAYO_61&apos; ,
        treelayout_line62   TYPE tv_nodekey VALUE &apos;TREELAYO_62&apos; ,
        gridlayout          TYPE tv_nodekey VALUE &apos;GRIDLAYOUT&apos; ,
        gridlayout_line1    TYPE tv_nodekey VALUE &apos;GRIDLAYO_1&apos; ,
        gridlayout_line2    TYPE tv_nodekey VALUE &apos;GRIDLAYO_2&apos; ,
        gridlayout_line3    TYPE tv_nodekey VALUE &apos;GRIDLAYO_3&apos; ,
        gridlayout_line4    TYPE tv_nodekey VALUE &apos;GRIDLAYO_4&apos; ,
        draft               TYPE tv_nodekey VALUE &apos;DRAFT&apos; ,
        draft_line1         TYPE tv_nodekey VALUE &apos;DRAFT_1&apos; ,
        loop                TYPE tv_nodekey VALUE &apos;LOOP&apos; ,
        loop_line1          TYPE tv_nodekey VALUE &apos;LOOP_1&apos; ,
        root_others         TYPE tv_nodekey VALUE &apos;ROOT_OTH&apos; ,
        root_others_line1   TYPE tv_nodekey VALUE &apos;ROOT_OTH_1&apos; ,
        respatt_place       TYPE tv_nodekey VALUE &apos;RPT_PLACE&apos; ,
        respatt_place_line1 TYPE tv_nodekey VALUE &apos;RPT_PLACE1&apos; ,
      END   OF c_nkey .
    METHODS:
      hndl_tab_clicked
          FOR EVENT clicked OF cl_gui_container_bar_2
          IMPORTING id  container  name ,
      hndl_button_click
          FOR EVENT button_click OF cl_gui_list_tree
          IMPORTING sender node_key item_name ,
      redraw_tab_rt
          IMPORTING ir_container  TYPE REF TO cl_gui_container ,
      redraw_tab_cm
          IMPORTING ir_container  TYPE REF TO cl_gui_container ,
      redraw_tab_pr
          IMPORTING ir_container  TYPE REF TO cl_gui_container ,
      redraw_tab_ms
          IMPORTING ir_container  TYPE REF TO cl_gui_container ,
      redraw_tab_dm
          IMPORTING ir_container  TYPE REF TO cl_gui_container ,
      redraw_menutree
          IMPORTING it_nodes      TYPE treev_ntab
                    it_items      TYPE STANDARD TABLE
                    ir_container  TYPE REF TO cl_gui_container
          CHANGING  cr_menutree   TYPE REF TO cl_gui_list_tree ,
      tab_block_context
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_format
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_postprocessing
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_root_others
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_techinfo
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_formdescr
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_component
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_loop
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_relpath
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_relpath_apr
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_relpath_cellrng
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_relpath_val
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_val_layout
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_val_validation
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_sheet_tb
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_printtitles
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_sheetprotection
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_pgbrk
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_draft
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_area
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_direction
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_mergecells
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_colrow_prop
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_colrow_group
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_autofitmerged
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_respattern_place
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_drwstat
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_drwsize
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_chart
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_tree_layout
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      tab_block_grid_layout
          CHANGING  ct_nodes      TYPE treev_ntab
                    ct_items      TYPE STANDARD TABLE ,
      format_text1
          IMPORTING iv_offset     TYPE any
                    iv_match      TYPE any
          EXPORTING ev_text       TYPE any .

ENDCLASS .                    &quot;lcl_wb_protab DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_wb_protab IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_wb_protab IMPLEMENTATION .
  METHOD constructor .
    super-&gt;constructor( ) .

    r_container = ir_container .

    DATA:
      ls_captions       TYPE sbptcaptn  ,
      lt_captions       TYPE sbptcaptns .

    ls_captions-caption+2 = v_text-t067 .   &quot; text: Form properties
    ls_captions-icon      = icon_object_list .
    ls_captions-no_close  = abap_on .
    ls_captions-invisible = abap_on .
    ls_captions-name      = &apos;ROOT&apos; .
    APPEND ls_captions TO lt_captions .
*
    ls_captions-caption+2 = v_text-t068 .   &quot; text: Component.
    ls_captions-icon      = icon_tools .
    ls_captions-no_close  = abap_on .
    ls_captions-invisible = abap_on .
    ls_captions-name      = &apos;COMMON&apos; .
    APPEND ls_captions TO lt_captions .
*
    ls_captions-caption+2 = v_text-t069 .   &quot; text: Properties of the component
    ls_captions-icon      = icon_tools .
    ls_captions-no_close  = abap_on .
    ls_captions-invisible = abap_on .
    ls_captions-name      = &apos;PROPERTIES&apos; .
    APPEND ls_captions TO lt_captions .
*
    ls_captions-caption+2 = v_text-t070 .   &quot; text: Messages
    ls_captions-icon      = icon_error_protocol .
    ls_captions-no_close  = abap_on .
    ls_captions-invisible = abap_on .
    ls_captions-name      = &apos;MESSAGES&apos; .
    APPEND ls_captions TO lt_captions .
*
    ls_captions-caption   = space .
    ls_captions-icon      = icon_tools .
    ls_captions-no_close  = abap_on .
    ls_captions-invisible = abap_off .
    ls_captions-name      = &apos;DUMMY&apos; .
    APPEND ls_captions TO lt_captions .

    CREATE OBJECT r_container_bar
      EXPORTING
        parent        = r_container
        captions      = lt_captions
        active_id     = 1
        style         = cl_gui_container_bar_2=&gt;c_style_fix
*       style         = cl_gui_container_bar_2=&gt;c_style_outlook
        close_buttons = space
      EXCEPTIONS
        OTHERS        = 7.
    IF sy-subrc NE 0 .
      EXIT .
    ENDIF .

    SET HANDLER hndl_tab_clicked FOR r_container_bar .

  ENDMETHOD .                    &quot;constructor
  METHOD free .
    IF r_menutree_rt IS BOUND .
      r_menutree_rt-&gt;free( ) .
      FREE r_menutree_rt .
    ENDIF.
    IF r_menutree_cm IS BOUND .
      r_menutree_cm-&gt;free( ) .
      FREE r_menutree_cm .
    ENDIF.
    IF r_menutree_pr IS BOUND .
      r_menutree_pr-&gt;free( ) .
      FREE r_menutree_pr .
    ENDIF.
    IF r_container_bar IS BOUND .
      r_container_bar-&gt;free( ) .
      FREE r_container_bar .
    ENDIF.
    IF r_container IS BOUND .
      r_container-&gt;free( ) .
      FREE r_container .
    ENDIF .
  ENDMETHOD .                    &quot;free
  METHOD redraw_dummy .
    v_rt_show = abap_off .
    v_cm_show = abap_off .
    v_pr_show = abap_off .
    v_ms_show = abap_off .
    v_dm_show = abap_on .

    v_dummy_text = iv_text .


*------ make tabs visible or hidden
    r_container_bar-&gt;set_cell_visible( id = c_tab_id-root        visible = v_rt_show ) .
    r_container_bar-&gt;set_cell_visible( id = c_tab_id-common      visible = v_cm_show ) .
    r_container_bar-&gt;set_cell_visible( id = c_tab_id-adjustments visible = v_pr_show ) .
    r_container_bar-&gt;set_cell_visible( id = c_tab_id-messages    visible = v_ms_show ) .
    r_container_bar-&gt;set_cell_visible( id = c_tab_id-dummy       visible = v_dm_show ) .

*------ set dummy tab active
    r_container_bar-&gt;set_active( id = c_tab_id-dummy ) .

*------ set icon
    IF iv_icon IS NOT INITIAL .
      DATA ls_caption TYPE sbptcaptn .
      ls_caption-caption   = space .
      ls_caption-icon      = iv_icon .
      ls_caption-no_close  = abap_on .
      ls_caption-invisible = abap_on .
      ls_caption-name      = &apos;DUMMY&apos; .
      r_container_bar-&gt;set_cell_caption( id = c_tab_id-dummy
                                         caption =  ls_caption ) .
    ENDIF .

  ENDMETHOD .                    &quot;redraw_dummy
  METHOD redraw .

    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties ,
      ls_form_excp          TYPE lcl_form=&gt;ty_s_exceptions ,
      lv_sheet_compname     TYPE ty_char100 ,
      lv_sheet_compname_ds  TYPE ty_char100 ,
      ls_ms_retmess         TYPE bapiret2 ,
      lv_ms_error           TYPE flag ,
      ls_ctxt_prop_ds       TYPE lcl_context=&gt;ty_s_properties ,
      lt_ctxt_prop_ds       TYPE lcl_context=&gt;ty_t_properties .

*------ retrieve a general data
    CLEAR s_form_prop .
    s_form_prop  = ir_formtemplate-&gt;node_get_properties( iv_form_id ) .
    ls_form_excp = ir_formtemplate-&gt;node_get_exceptions( iv_form_id ) .
    CHECK ir_formtemplate-&gt;v_retcode NE c_retcode-error .

    CLEAR s_comp_types .
    READ TABLE ir_formtemplate-&gt;t_comp_types INTO s_comp_types
      WITH KEY comp_type = s_form_prop-comp_type
      BINARY SEARCH .

    ir_formtemplate-&gt;node_get_protab_relevance(
            EXPORTING is_properties = s_form_prop
            IMPORTING ev_rt_show    = v_rt_show
                      ev_cm_show    = v_cm_show
                      ev_pr_show    = v_pr_show
                      ev_ms_show    = v_ms_show ) .
    CHECK ir_formtemplate-&gt;v_retcode NE ir_formtemplate-&gt;c_retcode-error .

    v_form_id           = iv_form_id .
    v_formdescr         = ir_formtemplate-&gt;v_formdescr .
    v_devclass          = ir_formtemplate-&gt;v_devclass .
    v_extension         = ir_formtemplate-&gt;r_exceltemplate-&gt;v_extension .
    v_created_uname     = ir_formtemplate-&gt;v_created_uname .
    v_created_datum     = ir_formtemplate-&gt;v_created_datum .
    v_changed_uname     = ir_formtemplate-&gt;v_changed_uname .
    v_changed_datum     = ir_formtemplate-&gt;v_changed_datum .
    v_contextname       = ir_formtemplate-&gt;r_context-&gt;v_contextname .
    v_contextshortdescr = ir_formtemplate-&gt;r_context-&gt;v_contextshortdescr .
    t_ms_retmess        = ls_form_excp-t_retmess .

    LOOP AT t_ms_retmess INTO ls_ms_retmess WHERE type CA &apos;EAX&apos; .
      IF s_presets_dt-mesgtab_when_error IS INITIAL .
        MESSAGE ID ls_ms_retmess-id
              TYPE &apos;S&apos;
            NUMBER ls_ms_retmess-number
              WITH ls_ms_retmess-message_v1
                   ls_ms_retmess-message_v2
                   ls_ms_retmess-message_v3
                   ls_ms_retmess-message_v4 DISPLAY LIKE &apos;E&apos; .
      ENDIF .

      lv_ms_error = abap_on .
      EXIT .
    ENDLOOP .

    &quot; print titles
    CLEAR v_tb_printtitles_r_name .
    IF s_form_prop-tb_printtitles_r IS NOT INITIAL .
      ls_form_prop = ir_formtemplate-&gt;node_get_properties( s_form_prop-tb_printtitles_r ) .
      IF ir_formtemplate-&gt;v_retcode NE c_retcode-error .
        v_tb_printtitles_r_name = ls_form_prop-comp_name .
      ENDIF .
    ENDIF .

    CLEAR v_tb_printtitles_c_name .
    IF s_form_prop-tb_printtitles_c IS NOT INITIAL .
      ls_form_prop = ir_formtemplate-&gt;node_get_properties( s_form_prop-tb_printtitles_c ) .
      IF ir_formtemplate-&gt;v_retcode NE c_retcode-error .
        v_tb_printtitles_c_name = ls_form_prop-comp_name .
      ENDIF .
    ENDIF .

    &quot; dataset name
    DO 1 TIMES .
      CLEAR v_dataset_name .
      CHECK s_form_prop-dataset_id IS NOT INITIAL .

      CLEAR ls_form_prop .
      ls_form_prop = ir_formtemplate-&gt;node_get_properties( s_form_prop-dataset_id ) .
      v_dataset_name = ls_form_prop-comp_name .
      CHECK ls_form_prop-id IS NOT INITIAL .

      ir_formtemplate-&gt;node_get_legacy_info( EXPORTING iv_id = iv_form_id
                                             IMPORTING ev_tb_sheet_compname = lv_sheet_compname ) .

      ir_formtemplate-&gt;node_get_legacy_info( EXPORTING iv_id = ls_form_prop-id
                                             IMPORTING ev_tb_sheet_compname = lv_sheet_compname_ds ) .
      CHECK lv_sheet_compname_ds NE lv_sheet_compname .
      CONCATENATE v_dataset_name &apos;~(&apos;
                  v_text-t238     &quot;text: On the sheet
                  &apos;:~&apos; lv_sheet_compname_ds &apos;)&apos; INTO v_dataset_name .
      TRANSLATE v_dataset_name USING &apos;~ &apos; .
    ENDDO .

    &quot; dataset and field name for data validation formula
    DO 1 TIMES .
      CLEAR v_valvld_for1_dataset_name .
      CLEAR v_valvld_for1_dataset_field .

      CHECK s_form_prop-cb_valvld_for1_dataset_id IS NOT INITIAL .

      CLEAR ls_form_prop .
      ls_form_prop = ir_formtemplate-&gt;node_get_properties( s_form_prop-cb_valvld_for1_dataset_id ) .
      v_valvld_for1_dataset_name = ls_form_prop-comp_name .

      CHECK s_form_prop-cb_valvld_for1_dataset_fld IS NOT INITIAL .

      ir_formtemplate-&gt;get_grid_fldseqprop(
          EXPORTING iv_id           = s_form_prop-cb_valvld_for1_dataset_id
          IMPORTING et_ctxt_prop    = lt_ctxt_prop_ds[] ).

      READ TABLE lt_ctxt_prop_ds INTO ls_ctxt_prop_ds
        WITH KEY comp_fullpath = s_form_prop-cb_valvld_for1_dataset_fld
                 comp_type     = lcl_context=&gt;c_comp_type-element .
      CHECK sy-subrc EQ 0 .

      v_valvld_for1_dataset_field = ls_ctxt_prop_ds-comp_name .
      IF ls_ctxt_prop_ds-comp_shortdescr IS NOT INITIAL .
        CONCATENATE v_valvld_for1_dataset_field ` (`
                    ls_ctxt_prop_ds-comp_shortdescr `)`
               INTO v_valvld_for1_dataset_field .
      ENDIF .
    ENDDO .

*------ make changes (to provide redrawing)
    r_container_bar-&gt;set_active( id = c_tab_id-dummy ) .

*------ set active tab
    IF iv_activetab_id IS NOT INITIAL .
      r_container_bar-&gt;set_active( id = iv_activetab_id ) .
    ELSEIF lv_ms_error IS NOT INITIAL
       AND s_presets_dt-mesgtab_when_error IS NOT INITIAL .
      r_container_bar-&gt;set_active( id = c_tab_id-messages ) .
    ELSE .
      CASE abap_on .
        WHEN v_rt_show. r_container_bar-&gt;set_active( id = c_tab_id-root ) .
        WHEN v_pr_show. r_container_bar-&gt;set_active( id = c_tab_id-adjustments ) .
        WHEN v_cm_show. r_container_bar-&gt;set_active( id = c_tab_id-common ) .
        WHEN OTHERS .
      ENDCASE .
    ENDIF .

*------ make the tabs visible or hidden
    r_container_bar-&gt;set_cell_visible( id = c_tab_id-root        visible = v_rt_show ) .
    r_container_bar-&gt;set_cell_visible( id = c_tab_id-common      visible = v_cm_show ) .
    r_container_bar-&gt;set_cell_visible( id = c_tab_id-adjustments visible = v_pr_show ) .
    r_container_bar-&gt;set_cell_visible( id = c_tab_id-messages    visible = v_ms_show ) .
    IF v_rt_show IS NOT INITIAL
    OR v_cm_show IS NOT INITIAL
    OR v_pr_show IS NOT INITIAL
    OR v_ms_show IS NOT INITIAL .
      r_container_bar-&gt;set_cell_visible( id = c_tab_id-dummy  visible = abap_off ) .
    ENDIF .

*------
    IF v_cm_show IS NOT INITIAL .
      DATA ls_caption TYPE sbptcaptn .
      CONCATENATE &apos;~~&apos; s_form_prop-comp_name
                  &apos;~~&apos; s_form_prop-comp_descr INTO ls_caption-caption .
      SET LOCALE LANGUAGE sy-langu .
      TRANSLATE ls_caption-caption USING &apos;~ &apos; .
      ls_caption-icon      = s_comp_types-icon .
      ls_caption-no_close  = abap_on .
      ls_caption-invisible = abap_on .
      ls_caption-name      = &apos;COMMON&apos; .
      r_container_bar-&gt;set_cell_caption( id = c_tab_id-common  caption = ls_caption ) .
    ENDIF .
  ENDMETHOD .                    &quot;redraw
  METHOD hndl_tab_clicked .
    CASE id .
      WHEN c_tab_id-root .        redraw_tab_rt( container ) .
      WHEN c_tab_id-common .      redraw_tab_cm( container ) .
      WHEN c_tab_id-adjustments . redraw_tab_pr( container ) .
      WHEN c_tab_id-messages .    redraw_tab_ms( container ) .
      WHEN c_tab_id-dummy .       redraw_tab_dm( container ) .
    ENDCASE .
  ENDMETHOD .                    &quot;hndl_tab_clicked
  METHOD redraw_tab_rt .
    CHECK v_rt_show EQ abap_on .

    DATA:
      lt_nodes          TYPE treev_ntab ,
      lt_items          TYPE STANDARD TABLE OF mtreeitm
                             WITH DEFAULT KEY .
    tab_block_formdescr(
          CHANGING ct_nodes = lt_nodes
                   ct_items = lt_items ) .

    tab_block_context(
          CHANGING ct_nodes = lt_nodes
                   ct_items = lt_items ) .

    tab_block_format(
          CHANGING ct_nodes = lt_nodes
                   ct_items = lt_items ) .

    tab_block_postprocessing(
          CHANGING ct_nodes = lt_nodes
                   ct_items = lt_items ) .

    tab_block_root_others(
          CHANGING ct_nodes = lt_nodes
                   ct_items = lt_items ) .

    tab_block_techinfo(
          CHANGING ct_nodes = lt_nodes
                   ct_items = lt_items ) .

    redraw_menutree(
          EXPORTING it_nodes = lt_nodes
                    it_items = lt_items
                    ir_container = ir_container
          CHANGING  cr_menutree = r_menutree_rt ) .

  ENDMETHOD .                    &quot;redraw_tab_rt
  METHOD redraw_tab_cm .
    CHECK v_cm_show EQ abap_on .

    DATA:
      lt_nodes          TYPE treev_ntab ,
      lt_items          TYPE STANDARD TABLE OF mtreeitm
                             WITH DEFAULT KEY .

    tab_block_component( CHANGING ct_nodes = lt_nodes
                                     ct_items = lt_items ) .

    redraw_menutree( EXPORTING it_nodes = lt_nodes
                               it_items = lt_items
                               ir_container = ir_container
                     CHANGING  cr_menutree  = r_menutree_cm ) .

  ENDMETHOD .                    &quot;redraw_tab_cm
  METHOD redraw_tab_pr .
    CHECK v_pr_show EQ abap_on .

    DATA:
      lt_nodes          TYPE treev_ntab,
      lt_items          TYPE STANDARD TABLE OF mtreeitm
                             WITH DEFAULT KEY .

    CASE s_comp_types-comp_type .
      WHEN lcl_form=&gt;c_comp_type-sheet .
        tab_block_sheet_tb(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_relpath_val(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_relpath_apr(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_printtitles(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_sheetprotection(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

      WHEN lcl_form=&gt;c_comp_type-folder .
        tab_block_relpath(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_relpath_apr(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_direction(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_relpath_cellrng(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_colrow_group(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_pgbrk(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_draft(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

      WHEN lcl_form=&gt;c_comp_type-loopstep .
        tab_block_relpath(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_loop(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

      WHEN lcl_form=&gt;c_comp_type-pattern .
        tab_block_area(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_relpath_apr(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_direction(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_colrow_prop(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_autofitmerged(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

      WHEN lcl_form=&gt;c_comp_type-respattern .
        tab_block_area(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_relpath_apr(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_direction(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_mergecells(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_respattern_place(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_colrow_prop(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_autofitmerged(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

      WHEN lcl_form=&gt;c_comp_type-field .
        tab_block_area(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_relpath_val(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_val_layout(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_val_validation(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

      WHEN lcl_form=&gt;c_comp_type-drawing .
        tab_block_area(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_drwsize(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_relpath_apr(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_drwstat(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        IF s_form_prop-tb_drwstat_flag IS INITIAL .
          tab_block_relpath_val(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .
        ENDIF .

      WHEN lcl_form=&gt;c_comp_type-chart .
        tab_block_area(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_drwsize(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_relpath_apr(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_chart(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

      WHEN lcl_form=&gt;c_comp_type-tree .
        tab_block_area(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_relpath_val(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_direction(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_tree_layout(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

      WHEN lcl_form=&gt;c_comp_type-grid .
        tab_block_area(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_relpath_val(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_direction(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

        tab_block_grid_layout(
              CHANGING ct_nodes = lt_nodes
                       ct_items = lt_items ) .

      WHEN OTHERS .
    ENDCASE .


    redraw_menutree( EXPORTING it_nodes = lt_nodes
                               it_items = lt_items
                               ir_container = ir_container
                     CHANGING  cr_menutree  = r_menutree_pr ) .
  ENDMETHOD .                    &quot;redraw_tab_pr
  METHOD redraw_tab_ms .
    CHECK v_ms_show EQ abap_on .

    DATA:
      lt_ms_logh            TYPE bal_t_logh ,
      ls_log                TYPE bal_s_log ,
      ls_msg                TYPE bal_s_msg ,
      ls_display_profile    TYPE bal_s_prof ,
      ls_retmess            TYPE bapiret2 .

    IF v_ms_logh IS INITIAL .
      ls_log-extnumber = &apos;COMP_MESSAGES&apos; .
      CALL FUNCTION &apos;BAL_LOG_CREATE&apos;
        EXPORTING
          i_s_log      = ls_log
        IMPORTING
          e_log_handle = v_ms_logh
        EXCEPTIONS
          OTHERS       = 1.
      CHECK sy-subrc EQ 0 .
      INSERT v_ms_logh INTO TABLE lt_ms_logh .

      CALL FUNCTION &apos;BAL_DSP_PROFILE_NO_TREE_GET&apos;
        IMPORTING
          e_s_display_profile = ls_display_profile.
      ls_display_profile-no_toolbar = abap_on .

      CALL FUNCTION &apos;BAL_CNTL_CREATE&apos;
        EXPORTING
          i_container         = ir_container
          i_s_display_profile = ls_display_profile
          i_t_log_handle      = lt_ms_logh
        IMPORTING
          e_control_handle    = v_ms_cnth
        EXCEPTIONS
          OTHERS              = 0.
    ENDIF .

    IF lt_ms_logh[] IS INITIAL .
      INSERT v_ms_logh INTO TABLE lt_ms_logh .
    ENDIF .

    CALL FUNCTION &apos;BAL_LOG_MSG_DELETE_ALL&apos;
      EXPORTING
        i_log_handle = v_ms_logh
      EXCEPTIONS
        OTHERS       = 0.

    LOOP AT t_ms_retmess INTO ls_retmess .
      CLEAR ls_msg .
      ls_msg-msgty = ls_retmess-type .
      ls_msg-msgid = ls_retmess-id .
      ls_msg-msgno = ls_retmess-number .
      ls_msg-msgv1 = ls_retmess-message_v1 .
      ls_msg-msgv2 = ls_retmess-message_v2 .
      ls_msg-msgv3 = ls_retmess-message_v3 .
      ls_msg-msgv4 = ls_retmess-message_v4 .

      CALL FUNCTION &apos;BAL_LOG_MSG_ADD&apos;
        EXPORTING
          i_log_handle = v_ms_logh
          i_s_msg      = ls_msg
        EXCEPTIONS
          OTHERS       = 0.
    ENDLOOP .

    CALL FUNCTION &apos;BAL_CNTL_REFRESH&apos;
      EXPORTING
        i_control_handle = v_ms_cnth
        i_t_log_handle   = lt_ms_logh
      EXCEPTIONS
        OTHERS           = 0.

  ENDMETHOD .                    &quot;redraw_tab_ms
  METHOD redraw_tab_dm .
    CHECK v_dm_show EQ abap_on .

    DATA:
      lr_html_document    TYPE REF TO cl_dd_document ,
      lv_text             TYPE sdydo_text_element .

    CREATE OBJECT lr_html_document .

    lr_html_document-&gt;underline( ) .

    lv_text = v_dummy_text .
    lr_html_document-&gt;add_text( text = lv_text
                                sap_style = cl_dd_document=&gt;heading ).
    lr_html_document-&gt;underline( ) .
    lr_html_document-&gt;merge_document( ) .
    lr_html_document-&gt;display_document( parent = ir_container ) .
  ENDMETHOD .                    &quot;redraw_tab_dm
  METHOD redraw_menutree .
    DATA:
      ls_events         TYPE cntl_simple_event ,
      lt_events         TYPE cntl_simple_events ,
      ls_node           TYPE treev_node ,
      lt_collapsed      TYPE treev_nks .

    IF cr_menutree IS NOT BOUND .
      CREATE OBJECT cr_menutree
        EXPORTING
          parent              = ir_container
          node_selection_mode = cl_gui_list_tree=&gt;node_sel_mode_single
          item_selection      = abap_on
          with_headers        = &apos; &apos;
        EXCEPTIONS
          OTHERS              = 6.
      IF sy-subrc NE 0 .
        MESSAGE i000(lp) WITH v_text-t072 . &quot; text: Error Creating Control
        EXIT .
      ENDIF .

      ls_events-eventid = cl_gui_list_tree=&gt;eventid_button_click .
      APPEND ls_events TO lt_events .
      ls_events-eventid = cl_gui_list_tree=&gt;eventid_checkbox_change .
      APPEND ls_events TO lt_events .

      cr_menutree-&gt;set_registered_events(
          EXPORTING events = lt_events
          EXCEPTIONS OTHERS = 3 ) .
      IF sy-subrc NE 0 .
        MESSAGE i000(lp) WITH v_text-t072 . &quot; text: Error Creating Control
        EXIT .
      ENDIF .

      SET HANDLER hndl_button_click    FOR cr_menutree .
*     SET HANDLER hndl_checkbox_change FOR cr_menutree .
    ENDIF .

    cr_menutree-&gt;delete_all_nodes( ) .

    cr_menutree-&gt;add_nodes_and_items(
        EXPORTING node_table = it_nodes
                  item_table = it_items
                  item_table_structure_name = &apos;MTREEITM&apos;
        EXCEPTIONS OTHERS = 7 ) .
    IF sy-subrc NE 0 .
      MESSAGE i000(lp) WITH v_text-t072 . &quot; text: Error Creating Control
      EXIT .
    ENDIF .

    cr_menutree-&gt;expand_root_nodes(
        EXPORTING level_count = 10
                  expand_subtree = abap_on
        EXCEPTIONS OTHERS = 0 ) .

    LOOP AT it_nodes INTO ls_node WHERE expander IS NOT INITIAL .
      COLLECT ls_node-node_key INTO lt_collapsed .
    ENDLOOP .

    IF lt_collapsed[] IS NOT INITIAL .
      cr_menutree-&gt;collapse_nodes(
          EXPORTING node_key_table = lt_collapsed
          EXCEPTIONS OTHERS = 0 ) .
    ENDIF .

  ENDMETHOD .                    &quot;redraw_menutree
  METHOD hndl_button_click .
    DATA lv_fcode       TYPE ui_func .

*   translate button click (in the tree of properties tab) to user command

    CASE sender .
      WHEN r_menutree_rt .
        IF     node_key EQ c_nkey-cntxt_name        AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-context_change .
        ELSEIF node_key EQ c_nkey-formdescr_name    AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-formdescr_change .
        ELSEIF node_key EQ c_nkey-format_line1      AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-format_change .
        ELSEIF node_key EQ c_nkey-postproc_line1    AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-postproc_vbs_code  .
        ELSEIF node_key EQ c_nkey-postproc_line1    AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-postproc_vbs_tables .
        ELSEIF node_key EQ c_nkey-root_others_line1 AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-definednames_dont_remove .
        ENDIF .
      WHEN r_menutree_cm .
        IF     node_key EQ c_nkey-component         AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-compname_change .
        ENDIF .
      WHEN r_menutree_pr .
        IF     node_key EQ c_nkey-relpath_line1     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_relpath_change_f4 .
        ELSEIF node_key EQ c_nkey-relpath_line1     AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-cb_relpath_change_mn .
        ELSEIF node_key EQ c_nkey-relpath_line1     AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-cb_relpath_delete .

        ELSEIF node_key EQ c_nkey-aprpath_line1     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_aprpath_change_f4 .
        ELSEIF node_key EQ c_nkey-aprpath_line1     AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-cb_aprpath_change_mn .
        ELSEIF node_key EQ c_nkey-aprpath_line1     AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-cb_aprpath_delete .
        ELSEIF node_key EQ c_nkey-aprpath_line2     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_aprchar_change .

        ELSEIF node_key EQ c_nkey-cellrng_line1     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_cellrng_change_f4 .
        ELSEIF node_key EQ c_nkey-cellrng_line1     AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-cb_cellrng_change_mn .
        ELSEIF node_key EQ c_nkey-cellrng_line1     AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-cb_cellrng_delete .
        ELSEIF node_key EQ c_nkey-cellrng_line2     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_cellrng_change_char .

        ELSEIF node_key EQ c_nkey-valpath_line1     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_valpath_change_f4 .
        ELSEIF node_key EQ c_nkey-valpath_line1     AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-cb_valpath_change_mn .
        ELSEIF node_key EQ c_nkey-valpath_line1     AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-cb_valpath_delete .
        ELSEIF node_key EQ c_nkey-valpath_line2     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_valpath_sub .
        ELSEIF node_key EQ c_nkey-valpath_line3     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_valchar_change .
        ELSEIF node_key EQ c_nkey-valpath_line4     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_valconv_change .

        ELSEIF node_key EQ c_nkey-valvalid_line12   AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_valvld_attrpath_change_f4 .
        ELSEIF node_key EQ c_nkey-valvalid_line12   AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-cb_valvld_attrpath_change_mn .
        ELSEIF node_key EQ c_nkey-valvalid_line12   AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-cb_valvld_attrpath_delete .

        ELSEIF node_key EQ c_nkey-valvalid_line21   AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_valvld_for1_template .
        ELSEIF node_key EQ c_nkey-valvalid_line22   AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_valvld_for1_relpath .
        ELSEIF node_key EQ c_nkey-valvalid_line23   AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_valvld_for1_dataset_id .
        ELSEIF node_key EQ c_nkey-valvalid_line23   AND item_name EQ &apos;4&apos; .
          lv_fcode = c_fcode-cb_valvld_for1_dataset_fld .

        ELSEIF node_key EQ c_nkey-valvalid_line31   AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_valvld_for2_template .
        ELSEIF node_key EQ c_nkey-valvalid_line32   AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_valvld_for2_relpath .

        ELSEIF node_key EQ c_nkey-loop_line1        AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-cb_loop_from_to .

        ELSEIF node_key EQ c_nkey-sheet_line1       AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_sheetname_change .
        ELSEIF node_key EQ c_nkey-sheet_line1       AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-tb_sheetname_delete .
        ELSEIF node_key EQ c_nkey-sheet_line1       AND item_name EQ &apos;4&apos; .
          lv_fcode = c_fcode-tb_sheetstate .
        ELSEIF node_key EQ c_nkey-sheetprot_line1   AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_sheetprot_change .
        ELSEIF node_key EQ c_nkey-sheetprot_line1   AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-tb_sheetprot_delete .

        ELSEIF node_key EQ c_nkey-area_line1        AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_area_setcells .
        ELSEIF node_key EQ c_nkey-area_line1        AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-tb_area_settextmark .
        ELSEIF node_key EQ c_nkey-area_line1        AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-tb_area_delete .

        ELSEIF node_key EQ c_nkey-vallayout_line1   AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_valstring_change .
        ELSEIF node_key EQ c_nkey-vallayout_line2   AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_valformula_change .
        ELSEIF node_key EQ c_nkey-vallayout_line3   AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_valmatrix_change .

        ELSEIF node_key EQ c_nkey-direction_line1   AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_direction_change .

        ELSEIF node_key EQ c_nkey-colrow_prop_line1 AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_rowprop_change .
        ELSEIF node_key EQ c_nkey-colrow_prop_line1 AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-tb_colprop_change .

        ELSEIF node_key EQ c_nkey-respatt_place_line1 AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_respattern_before .
        ELSEIF node_key EQ c_nkey-respatt_place_line1 AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-tb_respattern_after .

        ELSEIF node_key EQ c_nkey-colrow_grp_line1  AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_rowgroup_change .
        ELSEIF node_key EQ c_nkey-colrow_grp_line1  AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-tb_rowgroup_clp_change .
        ELSEIF node_key EQ c_nkey-colrow_grp_line1  AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-tb_colgroup_change .
        ELSEIF node_key EQ c_nkey-colrow_grp_line1  AND item_name EQ &apos;4&apos; .
          lv_fcode = c_fcode-tb_colgroup_clp_change .

        ELSEIF node_key EQ c_nkey-drwstat_line1     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_drwstflag_change .
        ELSEIF node_key EQ c_nkey-drwstat_line2     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_drwstname_change .
        ELSEIF node_key EQ c_nkey-drwstat_line2     AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-tb_drwstname_delete .

        ELSEIF node_key EQ c_nkey-drwsize_line1     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_drwsize_fit .
        ELSEIF node_key EQ c_nkey-drwsize_line1     AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-tb_drwsize_context .
        ELSEIF node_key EQ c_nkey-drwsize_line2     AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-tb_drwsize_h_f4 .
        ELSEIF node_key EQ c_nkey-drwsize_line2     AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-tb_drwsize_h_mn .
        ELSEIF node_key EQ c_nkey-drwsize_line3     AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-tb_drwsize_w_f4 .
        ELSEIF node_key EQ c_nkey-drwsize_line3     AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-tb_drwsize_w_mn .

        ELSEIF node_key EQ c_nkey-pgbrk_line1       AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_pgbreak_top .
        ELSEIF node_key EQ c_nkey-pgbrk_line2       AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_pgbreak_left .
        ELSEIF node_key EQ c_nkey-nopgbrk_line1     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_nopgbreak_top .
        ELSEIF node_key EQ c_nkey-nopgbrk_line2     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_nopgbreak_left .

        ELSEIF node_key EQ c_nkey-printtitles_line1 AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-tb_printtitles_rows_change .
        ELSEIF node_key EQ c_nkey-printtitles_line1 AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-tb_printtitles_rows_delete .
        ELSEIF node_key EQ c_nkey-printtitles_line2 AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-tb_printtitles_cols_change .
        ELSEIF node_key EQ c_nkey-printtitles_line2 AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-tb_printtitles_cols_delete .

        ELSEIF node_key EQ c_nkey-mergecells_line1  AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_mergecells_change .

        ELSEIF node_key EQ c_nkey-autofitmrg_line1  AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tb_autofitmerged_off .
        ELSEIF node_key EQ c_nkey-autofitmrg_line1  AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-tb_autofitmerged_r .
        ELSEIF node_key EQ c_nkey-autofitmrg_line1  AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-tb_autofitmerged_c .

        ELSEIF node_key EQ c_nkey-treelayout_line1  AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tree_layout_rotate .
        ELSEIF node_key EQ c_nkey-treelayout_line2  AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tree_layout_stru .
        ELSEIF node_key EQ c_nkey-treelayout_line2  AND item_name EQ &apos;4&apos; .
          lv_fcode = c_fcode-tree_layout_exp_coll .
        ELSEIF node_key EQ c_nkey-treelayout_line4  AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tree_layout_head .
        ELSEIF node_key EQ c_nkey-treelayout_line5  AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tree_layout_colhier .
        ELSEIF node_key EQ c_nkey-treelayout_line5  AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-tree_layout_colhier_after .
        ELSEIF node_key EQ c_nkey-treelayout_line5  AND item_name EQ &apos;4&apos; .
          lv_fcode = c_fcode-tree_layout_colhier_shift .
        ELSEIF node_key EQ c_nkey-treelayout_line6  AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tree_layout_colother .
        ELSEIF node_key EQ c_nkey-treelayout_line61 AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tree_layout_colother_wdh .
        ELSEIF node_key EQ c_nkey-treelayout_line62 AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-tree_layout_allowformulas .

        ELSEIF node_key EQ c_nkey-gridlayout_line1  AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-grid_layout_rotate .
        ELSEIF node_key EQ c_nkey-gridlayout_line2  AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-grid_layout_head .
        ELSEIF node_key EQ c_nkey-gridlayout_line2  AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-grid_layout_head_titles .
        ELSEIF node_key EQ c_nkey-gridlayout_line3  AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-grid_fldseq .
        ELSEIF node_key EQ c_nkey-gridlayout_line3  AND item_name EQ &apos;3&apos; .
          lv_fcode = c_fcode-grid_fldprop .
        ELSEIF node_key EQ c_nkey-gridlayout_line4  AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-grid_layout_allowformulas . .

        ELSEIF node_key EQ c_nkey-chart_model       AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-chart_model_change .
        ELSEIF node_key EQ c_nkey-chart_model       AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-chart_model_delete .
        ELSEIF node_key EQ c_nkey-chart_title       AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-chart_title .
        ELSEIF node_key EQ c_nkey-chart_title_catax AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-chart_title_catax .
        ELSEIF node_key EQ c_nkey-chart_title_valax AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-chart_title_valax .
        ELSEIF node_key EQ c_nkey-chart_title_ser   AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-chart_title_series .
        ELSEIF node_key EQ c_nkey-chart_dtset_1     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-chart_dtset_change .
        ELSEIF node_key EQ c_nkey-chart_dtset_1     AND item_name EQ &apos;2&apos; .
          lv_fcode = c_fcode-chart_dtset_delete .
        ELSEIF node_key EQ c_nkey-chart_dtset_2     AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-chart_dtset_series .

        ELSEIF node_key EQ c_nkey-draft_line1       AND item_name EQ &apos;1&apos; .
          lv_fcode = c_fcode-draft_change .
        ENDIF .

      WHEN OTHERS .
    ENDCASE .

    CHECK lv_fcode IS NOT INITIAL .

    RAISE EVENT evnt_fcode
      EXPORTING ev_form_id  = v_form_id
                ev_fcode    = lv_fcode .
  ENDMETHOD .                    &quot;hndl_button_click
  METHOD tab_block_context .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-cntxt .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-cntxt .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t073 . &quot; text: Name of the context
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-cntxt_name .
    ls_nodes-relatkey   = c_nkey-cntxt .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-cntxt_name .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-cntxt_name .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF v_contextname IS INITIAL .
      ls_items-text     = v_text-t074 . &quot; text: &lt;...not assigned...&gt;
    ELSE .
      ls_items-text     = v_contextname .
    ENDIF .
    APPEND ls_items TO ct_items .

    IF v_contextname IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-cntxt_name .
      ls_items-item_name  = &apos;3&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      CONCATENATE &apos;(&apos; v_contextshortdescr &apos;)&apos; INTO ls_items-text+2.
      APPEND ls_items TO ct_items .
    ENDIF .

  ENDMETHOD .                    &quot;tab_block_context
  METHOD tab_block_format .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-format .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-format .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t327 . &quot; text: File format
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-format_line1 .
    ls_nodes-relatkey   = c_nkey-format .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-format_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-format_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    CASE v_extension .
      WHEN c_extension_xlsx .     ls_items-text = v_text-t328 . &quot; text: Without VBA-macro  .XLSX
      WHEN c_extension_xlsm .     ls_items-text = v_text-t329 . &quot; text: VBA-macro-enabled  .XLSM
    ENDCASE .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_format
  METHOD tab_block_postprocessing .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-postprocessing .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-postprocessing .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t287 . &quot; text: Final post processing
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-postproc_line1 .
    ls_nodes-relatkey   = c_nkey-postprocessing .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-postproc_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-text       = &apos; VBScript&apos; .
    CASE s_form_prop-postproc_vbs_code .
      WHEN space  . ls_items-t_image = icon_abap_local .
      WHEN OTHERS . ls_items-t_image = icon_abap .
    ENDCASE .
    APPEND ls_items TO ct_items .

    CHECK s_form_prop-postproc_vbs_code IS NOT INITIAL .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-postproc_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
*   ls_items-text       = v_text-t288 . &quot; text: Provide tables
    ls_items-t_image    = icon_report_call .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_postprocessing
  METHOD tab_block_root_others .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-root_others .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-root_others .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t346 . &quot; text: Other options
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-root_others_line1 .
    ls_nodes-relatkey   = c_nkey-root_others .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-root_others_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF s_form_prop-definednames_dont_remove IS INITIAL .
      ls_items-t_image  = icon_wd_iframe .
    ELSE .
      ls_items-t_image  = icon_checkbox .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-root_others_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    ls_items-text       = v_text-t347 . &quot; text: Keep named ranges of template
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_root_others
  METHOD tab_block_techinfo .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm ,
      lv_datum10        TYPE ty_char10 .

*------ TECHNICAL INFORMATION
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-techinfo .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-techinfo .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t147 . &quot; text: Technical information
    APPEND ls_items TO ct_items .

*------ CREATED BY
    IF v_created_uname IS NOT INITIAL
    OR v_created_datum IS NOT INITIAL .
      CLEAR ls_nodes .
      ls_nodes-node_key   = c_nkey-created .
      ls_nodes-relatkey   = c_nkey-techinfo .
      ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
      ls_nodes-n_image    = icon_space .
      ls_nodes-exp_image  = icon_space .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      APPEND ls_nodes TO ct_nodes .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-created .
      ls_items-item_name  = &apos;1&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      CONCATENATE v_text-t148  &apos;:&apos; INTO ls_items-text .   &quot; text: Created by
      APPEND ls_items TO ct_items .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-created .
      ls_items-item_name  = &apos;2&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
      WRITE v_created_datum TO lv_datum10 DD/MM/YYYY .
      CONCATENATE v_created_uname lv_datum10 INTO ls_items-text+1 SEPARATED BY space .
      APPEND ls_items TO ct_items .
    ENDIF .


*------ CHANGED BY
    IF v_changed_uname IS NOT INITIAL
    OR v_changed_datum IS NOT INITIAL .
      CLEAR ls_nodes .
      ls_nodes-node_key   = c_nkey-changed .
      ls_nodes-relatkey   = c_nkey-techinfo .
      ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
      ls_nodes-n_image    = icon_space .
      ls_nodes-exp_image  = icon_space .
      APPEND ls_nodes TO ct_nodes .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-changed .
      ls_items-item_name  = &apos;1&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      CONCATENATE v_text-t149  &apos;:&apos; INTO ls_items-text . &quot; text: Changed by
      APPEND ls_items TO ct_items .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-changed .
      ls_items-item_name  = &apos;2&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
      WRITE v_changed_datum TO lv_datum10 DD/MM/YYYY .
      CONCATENATE v_changed_uname lv_datum10 INTO ls_items-text+1 SEPARATED BY space .
      APPEND ls_items TO ct_items .
    ENDIF .


*------ PACKAGE
    IF v_devclass IS NOT INITIAL .
      CLEAR ls_nodes .
      ls_nodes-node_key   = c_nkey-devclass .
      ls_nodes-relatkey   = c_nkey-techinfo .
      ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
      ls_nodes-n_image    = icon_space .
      ls_nodes-exp_image  = icon_space .
      APPEND ls_nodes TO ct_nodes .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-devclass .
      ls_items-item_name  = &apos;1&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      CONCATENATE v_text-t150  &apos;:&apos; INTO ls_items-text . &quot; text: Package
      APPEND ls_items TO ct_items .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-devclass .
      ls_items-item_name  = &apos;2&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
      ls_items-text+1     = v_devclass .
      APPEND ls_items TO ct_items .
    ENDIF .

  ENDMETHOD .                    &quot;tab_block_techinfo
  METHOD tab_block_formdescr .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-formdescr .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-formdescr .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t075 .   &quot; text: Form description
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-formdescr_name .
    ls_nodes-relatkey   = c_nkey-formdescr .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-formdescr_name .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-formdescr_name .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF v_formdescr IS INITIAL .
      ls_items-text     = space .
    ELSE .
      ls_items-text     = v_formdescr .
    ENDIF .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_formdescr
  METHOD tab_block_component .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-component .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-component .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t076 .  &quot; text: Name/ description
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-component_line1 .
    ls_nodes-relatkey   = c_nkey-component .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-component_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-t_image    = s_comp_types-icon .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-component_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = s_form_prop-comp_name .
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-component_line2 .
    ls_nodes-relatkey   = c_nkey-component .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-component_line2 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    ls_items-text       = s_form_prop-comp_descr .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_component
  METHOD tab_block_loop .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
    DATA:
      lv_icon           TYPE icon_d ,
      lv_text           TYPE ty_char100 ,
      lv_loop_from      TYPE ty_char100 ,
      lv_loop_to        TYPE ty_char100 .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-loop .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-loop .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t261 .  &quot; text: Row processing
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-loop_line1 .
    ls_nodes-relatkey   = c_nkey-loop .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-loop_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-loop_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .

*   presets
    IF s_form_prop-cb_loop_from IS INITIAL .
      s_form_prop-cb_loop_from = 1 .
    ENDIF .

    IF  s_form_prop-cb_loop_from  EQ 1
    AND s_form_prop-cb_loop_to    IS INITIAL .
      ls_items-text+1   = v_text-t262 .  &quot; text: All rows
      APPEND ls_items TO ct_items .

    ELSE .
      ls_items-text+1   = v_text-t163 .  &quot; text: row(s)
      APPEND ls_items TO ct_items .

*     calculations
      lv_loop_from  = s_form_prop-cb_loop_from .  CONDENSE lv_loop_from NO-GAPS .
      lv_loop_to    = s_form_prop-cb_loop_to   .  CONDENSE lv_loop_to   NO-GAPS .

      IF s_form_prop-cb_loop_to IS INITIAL .
        IF s_form_prop-cb_loop_from  EQ 1 .
          lv_icon = icon_select_all .
          lv_text = v_text-t262 .  &quot; text: All rows
        ELSE  .
          lv_icon = icon_greater_equal_green .
          lv_text = lv_loop_from .
        ENDIF .

      ELSE .
        IF s_form_prop-cb_loop_from  EQ s_form_prop-cb_loop_to .
          lv_icon = icon_equal_green .
          lv_text = lv_loop_from .

        ELSEIF s_form_prop-cb_loop_from EQ 1 .
          lv_icon = icon_less_equal_green .
          lv_text = lv_loop_to .

        ELSE .
          lv_icon = icon_interval_include_green .

          CONCATENATE v_text-t264    &quot; text: from
                      lv_loop_from
                      v_text-t265    &quot; text: to
                      lv_loop_to
                 INTO lv_text SEPARATED BY space .
        ENDIF .
      ENDIF .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-loop_line1 .
      ls_items-item_name  = &apos;3&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      ls_items-t_image    = lv_icon .
      APPEND ls_items TO ct_items .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-loop_line1 .
      ls_items-item_name  = &apos;4&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      ls_items-text+1     = lv_text .
      APPEND ls_items TO ct_items .
    ENDIF .

  ENDMETHOD .                    &quot;tab_block_loop
  METHOD tab_block_relpath .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-relpath .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-relpath .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t077 . &quot; text: Binding with context
    IF s_form_prop-comp_type EQ lcl_form=&gt;c_comp_type-folder .
      CONCATENATE ls_items-text
                  v_text-t078 &quot; text: (optional)
             INTO ls_items-text SEPARATED BY space .
    ENDIF .
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-relpath_line1 .
    ls_nodes-relatkey   = c_nkey-relpath .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-relpath_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-relpath_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change_password .&quot;icon_create_note .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-relpath_line1 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_delete .
    IF s_form_prop-cb_relpath IS INITIAL .
      ls_items-disabled = abap_on .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-relpath_line1 .
    ls_items-item_name  = &apos;4&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF s_form_prop-cb_relpath IS INITIAL .
      ls_items-text     = v_text-t074 . &quot; text: &lt;...not assigned...&gt;
    ELSE .
      format_path( EXPORTING iv_source    = s_form_prop-cb_relpath
                   CHANGING  cv_formatted = ls_items-text ) .
    ENDIF .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_relpath
  METHOD tab_block_relpath_apr .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-aprpath .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-aprpath .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t079 . &quot; text: Appearance at runtime:
    IF s_form_prop-cb_apr_relpath IS INITIAL .
      CONCATENATE ls_items-text
                  v_text-t080   &quot; text: Always
             INTO ls_items-text SEPARATED BY space .
    ELSE .
      CONCATENATE ls_items-text
                  v_text-t081   &quot; text: Only when field contains value
             INTO ls_items-text SEPARATED BY space .
    ENDIF .
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-aprpath_line1 .
    ls_nodes-relatkey   = c_nkey-aprpath .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-aprpath_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-aprpath_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change_password .&quot;icon_create_note .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-aprpath_line1 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_delete .
    IF s_form_prop-cb_apr_relpath IS INITIAL .
      ls_items-disabled   = abap_on .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-aprpath_line1 .
    ls_items-item_name  = &apos;4&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    format_path( EXPORTING iv_source    = s_form_prop-cb_apr_relpath
                 CHANGING  cv_formatted = ls_items-text ) .
    APPEND ls_items TO ct_items .

*------
    CHECK s_form_prop-cb_apr_relpath IS NOT INITIAL .
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-aprpath_line2 .
    ls_nodes-relatkey   = c_nkey-aprpath .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-aprpath_line2 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-t_image    = icon_change .
    format_text1( EXPORTING iv_offset = s_form_prop-cb_apr_offset
                            iv_match  = s_form_prop-cb_apr_match
                  IMPORTING ev_text   = ls_items-text ) .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_relpath_apr
  METHOD tab_block_relpath_val .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm ,
      lv_char_tmp       TYPE ty_char100 .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-valpath .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valpath .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    IF s_form_prop-comp_type EQ lcl_form=&gt;c_comp_type-sheet .
      ls_items-text     = v_text-t082 .   &quot; text: Sheet name at runtime
      IF s_form_prop-cb_val_relpath IS INITIAL .
        CONCATENATE ls_items-text
                    v_text-t083           &quot; text: Auto
               INTO ls_items-text SEPARATED BY space .
      ELSE .
        CONCATENATE ls_items-text
                    v_text-t084           &quot; text: get Value from field
               INTO ls_items-text SEPARATED BY space .
      ENDIF .
    ELSE .
      ls_items-text     = v_text-t011 .   &quot; text: Value
    ENDIF .
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-valpath_line1 .
    ls_nodes-relatkey   = c_nkey-valpath .
    IF s_form_prop-cb_val_sub_req IS NOT INITIAL .
      ls_nodes-isfolder = abap_on .
    ENDIF .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valpath_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valpath_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change_password .&quot;icon_create_note .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valpath_line1 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_delete .
    IF s_form_prop-cb_val_relpath IS INITIAL .
      ls_items-disabled = abap_on .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valpath_line1 .
    ls_items-item_name  = &apos;4&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF s_form_prop-cb_val_relpath IS INITIAL .
      ls_items-text     = space .
    ELSE .
      format_path( EXPORTING iv_source    = s_form_prop-cb_val_relpath
                   CHANGING  cv_formatted = ls_items-text ) .
    ENDIF .
    APPEND ls_items TO ct_items .

*------
    IF s_form_prop-cb_val_sub_req IS NOT INITIAL .
      CLEAR ls_nodes .
      ls_nodes-node_key   = c_nkey-valpath_line2 .
      ls_nodes-relatkey   = c_nkey-valpath_line1 .
      ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
      ls_nodes-n_image    = icon_expand_all .
      ls_nodes-exp_image  = icon_expand_all .
      APPEND ls_nodes TO ct_nodes .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-valpath_line2 .
      ls_items-item_name  = &apos;1&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      ls_items-t_image    = icon_table_settings .
      ls_items-text       = space .
      APPEND ls_items TO ct_items .

      IF s_form_prop-cb_val_sub_row IS NOT INITIAL
      OR s_form_prop-cb_val_sub_col IS NOT INITIAL .
        CLEAR ls_items .
        ls_items-node_key   = c_nkey-valpath_line2 .
        ls_items-item_name  = &apos;2&apos; .
        ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
        ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
        ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
        lv_char_tmp = s_form_prop-cb_val_sub_row .
        CONDENSE lv_char_tmp .
        CONCATENATE v_text-t236 &apos;:~&apos;  &quot; text: Table row
                    lv_char_tmp &apos;~/~&apos;
                    v_text-t237 &apos;:~&apos;  &quot; text: Column
                    s_form_prop-cb_val_sub_col
               INTO ls_items-text .
        TRANSLATE ls_items-text USING &apos;~ &apos; .
      ENDIF .
      APPEND ls_items TO ct_items .
    ENDIF .

*------
    IF  s_form_prop-comp_type NE lcl_form=&gt;c_comp_type-drawing
    AND s_form_prop-comp_type NE lcl_form=&gt;c_comp_type-tree
    AND s_form_prop-comp_type NE lcl_form=&gt;c_comp_type-grid
    AND s_form_prop-cb_val_relpath IS NOT INITIAL .
      CLEAR ls_nodes .
      ls_nodes-node_key   = c_nkey-valpath_line3 .
      ls_nodes-relatkey   = c_nkey-valpath .
      ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
      ls_nodes-n_image    = icon_space .
      ls_nodes-exp_image  = icon_space .
      APPEND ls_nodes TO ct_nodes .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-valpath_line3 .
      ls_items-item_name  = &apos;1&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      ls_items-t_image    = icon_change .
      format_text1( EXPORTING iv_offset = s_form_prop-cb_val_offset
                              iv_match  = s_form_prop-cb_val_match
                    IMPORTING ev_text   = ls_items-text ) .
      APPEND ls_items TO ct_items .
    ENDIF .

*------
    IF  s_form_prop-comp_type NE lcl_form=&gt;c_comp_type-drawing
    AND s_form_prop-comp_type NE lcl_form=&gt;c_comp_type-tree
    AND s_form_prop-comp_type NE lcl_form=&gt;c_comp_type-grid
    AND s_form_prop-cb_val_relpath IS NOT INITIAL .
      CLEAR ls_nodes .
      ls_nodes-node_key   = c_nkey-valpath_line4 .
      ls_nodes-relatkey   = c_nkey-valpath .
      ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
      ls_nodes-n_image    = icon_space .
      ls_nodes-exp_image  = icon_space .
      APPEND ls_nodes TO ct_nodes .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-valpath_line4 .
      ls_items-item_name  = &apos;1&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      ls_items-text       = v_text-t085 .     &quot; text: convert value to ext.format
      IF s_form_prop-cb_val_convert IS INITIAL .
        ls_items-t_image  = icon_wd_iframe .
      ELSE .
        ls_items-t_image  = icon_checkbox .
      ENDIF .
      APPEND ls_items TO ct_items .
    ENDIF .

  ENDMETHOD .                    &quot;tab_block_relpath_val
  METHOD tab_block_relpath_cellrng .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-cellrng .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-cellrng .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t330 . &quot; text: Name of Cell range
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-cellrng_line1 .
    ls_nodes-relatkey   = c_nkey-cellrng .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-cellrng_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-cellrng_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change_password .&quot;icon_create_note .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-cellrng_line1 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_delete .
    IF s_form_prop-cb_cellrng_relpath IS INITIAL .
      ls_items-disabled   = abap_on .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-cellrng_line1 .
    ls_items-item_name  = &apos;4&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    format_path( EXPORTING iv_source    = s_form_prop-cb_cellrng_relpath
                 CHANGING  cv_formatted = ls_items-text ) .
    APPEND ls_items TO ct_items .

*------
    CHECK s_form_prop-cb_cellrng_relpath IS NOT INITIAL .
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-cellrng_line2 .
    ls_nodes-relatkey   = c_nkey-cellrng .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-cellrng_line2 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-t_image    = icon_change .
    format_text1( EXPORTING iv_offset = s_form_prop-cb_cellrng_offset
                            iv_match  = s_form_prop-cb_cellrng_match
                  IMPORTING ev_text   = ls_items-text ) .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_relpath_cellrng
  METHOD tab_block_val_layout .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-vallayout .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-vallayout .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t185 .   &quot; text: Layout options
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-vallayout_line1 .
    ls_nodes-relatkey   = c_nkey-vallayout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-vallayout_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    IF  s_form_prop-tb_val_matrix  IS INITIAL
    AND s_form_prop-tb_val_formula IS INITIAL .
      ls_items-t_image  = icon_radiobutton .
    ELSE .
      ls_items-t_image  = icon_wd_radio_button_empty .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-vallayout_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t011 .     &quot; text: Value
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-vallayout_line2 .
    ls_nodes-relatkey   = c_nkey-vallayout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-vallayout_line2 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    IF s_form_prop-tb_val_formula IS INITIAL .
      ls_items-t_image  = icon_wd_radio_button_empty .
    ELSE .
      ls_items-t_image  = icon_radiobutton .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-vallayout_line2 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t268 .     &quot; text: Formula
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-vallayout_line3 .
    ls_nodes-relatkey   = c_nkey-vallayout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    IF s_form_prop-tb_val_matrix IS NOT INITIAL .
      ls_nodes-isfolder = abap_on .
    ENDIF .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-vallayout_line3 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    IF s_form_prop-tb_area_textmark IS NOT INITIAL .
      ls_items-disabled = abap_on .
    ENDIF .
    IF s_form_prop-tb_val_matrix IS INITIAL .
      ls_items-t_image  = icon_wd_radio_button_empty .
    ELSE .
      ls_items-t_image  = icon_radiobutton .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-vallayout_line3 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t216 .     &quot; text: Matrix (one char per cell)
    APPEND ls_items TO ct_items .

    IF s_form_prop-tb_val_matrix IS NOT INITIAL .
      DATA:
        lv_interval_rows  TYPE ty_char10 ,
        lv_interval_cols  TYPE ty_char10 .

      WRITE s_form_prop-tb_val_matr_r TO lv_interval_rows LEFT-JUSTIFIED .
      WRITE s_form_prop-tb_val_matr_c TO lv_interval_cols LEFT-JUSTIFIED .

      CLEAR ls_nodes .
      ls_nodes-node_key   = c_nkey-vallayout_line31 .
      ls_nodes-relatkey   = c_nkey-vallayout_line3 .
      ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
      ls_nodes-n_image    = icon_space .
      ls_nodes-exp_image  = icon_space .
      APPEND ls_nodes TO ct_nodes .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-vallayout_line31 .
      ls_items-item_name  = &apos;1&apos; .
      ls_items-t_image    = icon_space .
      APPEND ls_items TO ct_items .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-vallayout_line31 .
      ls_items-item_name  = &apos;2&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      CONCATENATE v_text-t217       &quot; text: Interval:
                  v_text-t162       &quot; text: column(s)
                  lv_interval_cols &apos;/&apos;
                  v_text-t163       &quot; text: row(s)
                  lv_interval_rows
             INTO ls_items-text SEPARATED BY space .
      CONDENSE ls_items-text .
      APPEND ls_items TO ct_items .
    ENDIF .

  ENDMETHOD .                    &quot;tab_block_val_layout
  METHOD tab_block_val_validation .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-valvalid .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    IF  s_form_prop-cb_valvld_attr_relpath    IS INITIAL
    AND s_form_prop-cb_valvld_for1_dataset_id IS INITIAL
    AND s_form_prop-cb_valvld_for1_relpath    IS INITIAL
    AND s_form_prop-cb_valvld_for2_relpath    IS INITIAL .
      ls_nodes-expander = &apos;-&apos; .
    ENDIF .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t348 .   &quot; text: Data validation
    APPEND ls_items TO ct_items .

*====== Attributes
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-valvalid_line1 .
    ls_nodes-relatkey   = c_nkey-valvalid .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    =
    ls_nodes-exp_image  = icon_oo_attribute .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t349 .   &quot; text: Attributes (from template)
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-valvalid_line11 .
    ls_nodes-relatkey   = c_nkey-valvalid_line1 .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line11 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t350 .   &quot; text: Table for dynamic substitution (field/value)
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-valvalid_line12 .
    ls_nodes-relatkey   = c_nkey-valvalid_line1 .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line12 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line12 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change_password .&quot;icon_create_note .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line12 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_delete .
    IF s_form_prop-cb_valvld_attr_relpath IS INITIAL .
      ls_items-disabled = abap_on .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line12 .
    ls_items-item_name  = &apos;4&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF s_form_prop-cb_valvld_attr_relpath IS INITIAL .
      ls_items-text     = v_text-t074 . &quot; text: &lt;...not assigned...&gt;
    ELSE .
      format_path( EXPORTING iv_source    = s_form_prop-cb_valvld_attr_relpath
                   CHANGING  cv_formatted = ls_items-text ) .
    ENDIF .
    APPEND ls_items TO ct_items .

*====== Formula1
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-valvalid_line2 .
    ls_nodes-relatkey   = c_nkey-valvalid .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    =
    ls_nodes-exp_image  = icon_parameter_import .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line2 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    CONCATENATE `( 1 ) ` v_text-t351         &quot; text: Value (Formula)
           INTO ls_items-text .
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-valvalid_line21 .
    ls_nodes-relatkey   = c_nkey-valvalid_line2 .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line21 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    IF  s_form_prop-cb_valvld_for1_dataset_id  IS INITIAL
    AND s_form_prop-cb_valvld_for1_relpath     IS INITIAL .
      ls_items-t_image  = icon_radiobutton .
    ELSE .
      ls_items-t_image  = icon_wd_radio_button_empty .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line21 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t299 .     &quot; text: From template
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-valvalid_line22 .
    ls_nodes-relatkey   = c_nkey-valvalid_line2 .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line22 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    IF  s_form_prop-cb_valvld_for1_dataset_id  IS INITIAL
    AND s_form_prop-cb_valvld_for1_relpath     IS NOT INITIAL .
      ls_items-t_image  = icon_radiobutton .
    ELSE .
      ls_items-t_image  = icon_wd_radio_button_empty .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line22 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t339 .     &quot; text: From context field
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line22 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF s_form_prop-cb_valvld_for1_relpath IS NOT INITIAL .
      format_path( EXPORTING iv_source    = s_form_prop-cb_valvld_for1_relpath
                   CHANGING  cv_formatted = ls_items-text ) .
    ENDIF .
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-valvalid_line23 .
    ls_nodes-relatkey   = c_nkey-valvalid_line2 .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line23 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    IF  s_form_prop-cb_valvld_for1_dataset_id  IS NOT INITIAL
    AND s_form_prop-cb_valvld_for1_relpath     IS INITIAL .
      ls_items-t_image  = icon_radiobutton .
    ELSE .
      ls_items-t_image  = icon_wd_radio_button_empty .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line23 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t352 .     &quot; text: From Grid
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line23 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF v_valvld_for1_dataset_name IS NOT INITIAL .
      ls_items-text = v_valvld_for1_dataset_name .
    ENDIF .
    APPEND ls_items TO ct_items .

    IF s_form_prop-cb_valvld_for1_dataset_id  IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-valvalid_line23 .
      ls_items-item_name  = &apos;4&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-t_image    = icon_choose_columns .
      APPEND ls_items TO ct_items .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-valvalid_line23 .
      ls_items-item_name  = &apos;5&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
      ls_items-text       = v_valvld_for1_dataset_field .
      APPEND ls_items TO ct_items .
    ENDIF .


*====== Formula2
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-valvalid_line3 .
    ls_nodes-relatkey   = c_nkey-valvalid .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    =
    ls_nodes-exp_image  = icon_parameter_import .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line3 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    CONCATENATE `( 2 ) ` v_text-t351         &quot; text: Value (Formula)
           INTO ls_items-text .
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-valvalid_line31 .
    ls_nodes-relatkey   = c_nkey-valvalid_line3 .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line31 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    IF s_form_prop-cb_valvld_for2_relpath IS INITIAL .
      ls_items-t_image  = icon_radiobutton .
    ELSE .
      ls_items-t_image  = icon_wd_radio_button_empty .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line31 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t299 .     &quot; text: From template
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-valvalid_line32 .
    ls_nodes-relatkey   = c_nkey-valvalid_line3 .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line32 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    IF s_form_prop-cb_valvld_for2_relpath IS NOT INITIAL .
      ls_items-t_image  = icon_radiobutton .
    ELSE .
      ls_items-t_image  = icon_wd_radio_button_empty .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line32 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t339 .     &quot; text: From context field
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-valvalid_line32 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF s_form_prop-cb_valvld_for2_relpath IS NOT INITIAL .
      format_path( EXPORTING iv_source    = s_form_prop-cb_valvld_for2_relpath
                   CHANGING  cv_formatted = ls_items-text ) .
    ENDIF .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_val_validation
  METHOD tab_block_sheet_tb .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-sheet .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-sheet .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t086 .     &quot; text: Binding with sheet of the template
    APPEND ls_items TO ct_items .

*------ template worksheet
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-sheet_line1 .
    ls_nodes-relatkey   = c_nkey-sheet .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-sheet_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-sheet_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_delete .
    IF s_form_prop-tb_sheetname IS INITIAL .
      ls_items-disabled = abap_on .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-sheet_line1 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF s_form_prop-tb_sheetname IS INITIAL .
      ls_items-text     = v_text-t074 .     &quot; text: &lt;...not assigned...&gt;
    ELSE.
      ls_items-text     = s_form_prop-tb_sheetname .
    ENDIF .
    APPEND ls_items TO ct_items .

*------ state of the sheet ( Visible / Hidden )
    IF s_form_prop-tb_sheetname IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-sheet_line1 .
      ls_items-item_name  = &apos;4&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
      CASE s_form_prop-tb_sheetstate .
        WHEN space  . ls_items-t_image = icon_presence .  ls_items-text = v_text-t259 . &quot; text: Visible
        WHEN OTHERS . ls_items-t_image = icon_absence  .  ls_items-text = v_text-t260 . &quot; text: Hidden
      ENDCASE .
      CONCATENATE v_text-t258       &quot; text: Runtime state
                  &apos;:&apos; ls_items-text
             INTO ls_items-text SEPARATED BY space .
      SHIFT ls_items-text RIGHT BY 1 PLACES .
      APPEND ls_items TO ct_items .
    ENDIF .

  ENDMETHOD .                    &quot;tab_block_sheet_tb
  METHOD tab_block_printtitles .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-printtitles .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-printtitles .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t152 .     &quot; text: Print titles
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-printtitles_line1 .
    ls_nodes-relatkey   = c_nkey-printtitles .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-printtitles_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    ls_items-text       = v_text-t092 .     &quot; text: Rows
    ls_items-text+8     = &apos;:&apos; .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-printtitles_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-printtitles_line1 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_delete .
    IF s_form_prop-tb_printtitles_r IS INITIAL .
      ls_items-disabled = abap_on .
    ENDIF .
    APPEND ls_items TO ct_items .

    IF s_form_prop-tb_printtitles_r IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-printtitles_line1 .
      ls_items-item_name  = &apos;4&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
      ls_items-text       = v_tb_printtitles_r_name .
      APPEND ls_items TO ct_items .
    ENDIF .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-printtitles_line2 .
    ls_nodes-relatkey   = c_nkey-printtitles .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-printtitles_line2 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    ls_items-text       = v_text-t093 .     &quot; text: Columns
    ls_items-text+8     = &apos;:&apos; .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-printtitles_line2 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-printtitles_line2 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_delete .
    IF s_form_prop-tb_printtitles_c IS INITIAL .
      ls_items-disabled = abap_on .
    ENDIF .
    APPEND ls_items TO ct_items .

    IF s_form_prop-tb_printtitles_c IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-printtitles_line2 .
      ls_items-item_name  = &apos;4&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
      ls_items-text       = v_tb_printtitles_c_name .
      APPEND ls_items TO ct_items .
    ENDIF .

  ENDMETHOD .                    &quot;tab_block_printtitles
  METHOD tab_block_sheetprotection .
    DATA:
      ls_nodes           TYPE treev_node ,
      ls_items           TYPE mtreeitm ,
      ls_sheetprotection TYPE ty_s_sheetprotection .

    ls_sheetprotection = lcl_form=&gt;conv_sheetprotection_st( s_form_prop-tb_sheetprotection ) .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-sheetprot .
    ls_nodes-isfolder   = abap_on .
    IF ls_sheetprotection IS INITIAL .
      ls_nodes-n_image  = icon_unlocked .
    ELSE .
      ls_nodes-n_image  = icon_locked .
    ENDIF .
    ls_nodes-exp_image  = ls_nodes-n_image .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-sheetprot .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t298 .     &quot; text: Sheet protection
    APPEND ls_items TO ct_items .

*------ template worksheet
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-sheetprot_line1 .
    ls_nodes-relatkey   = c_nkey-sheetprot .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-sheetprot_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-sheetprot_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_delete .
    IF ls_sheetprotection IS INITIAL .
      ls_items-disabled = abap_on .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-sheetprot_line1 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    CASE ls_sheetprotection-mode .
      WHEN c_sheetprotection_mode-off .           ls_items-text = v_text-t276 .     &quot; text: Off
      WHEN c_sheetprotection_mode-from_template . ls_items-text = v_text-t299 .     &quot; text: From template
      WHEN c_sheetprotection_mode-from_context .  ls_items-text = v_text-t300 .     &quot; text: From context
      WHEN c_sheetprotection_mode-static .        ls_items-text = v_text-t301 .     &quot; text: Static
    ENDCASE .
    APPEND ls_items TO ct_items .

    CHECK ls_sheetprotection-mode EQ c_sheetprotection_mode-from_context .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-sheetprot_line1 .
    ls_items-item_name  = &apos;4&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF ls_sheetprotection-cb_val_relpath IS INITIAL .
      ls_items-text     = space .
    ELSE .
      format_path( EXPORTING iv_source    = ls_sheetprotection-cb_val_relpath
                   CHANGING  cv_formatted = ls_items-text ) .
    ENDIF .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_sheetprotection
  METHOD tab_block_pgbrk .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm ,
      lv_char_tmp       TYPE ty_char100 .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-pgbrk .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-pgbrk .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t223 .     &quot; text: Insert page break (at the beginning)
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-pgbrk_line1 .
    ls_nodes-relatkey   = c_nkey-pgbrk .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-pgbrk_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t154 .     &quot; text: Horizontal
    IF s_form_prop-tb_pgbrk_top IS INITIAL .
      ls_items-t_image  = icon_wd_iframe .
    ELSE .
      ls_items-t_image  = icon_checkbox .
    ENDIF .
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-pgbrk_line2 .
    ls_nodes-relatkey   = c_nkey-pgbrk .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-pgbrk_line2 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t155 .     &quot; text: Vertical
    IF s_form_prop-tb_pgbrk_left IS INITIAL .
      ls_items-t_image  = icon_wd_iframe .
    ELSE .
      ls_items-t_image  = icon_checkbox .
    ENDIF .
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-nopgbrk .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-nopgbrk .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t153 .     &quot; text: Preventing of automatic page breaks (inside)
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-nopgbrk_line1 .
    ls_nodes-relatkey   = c_nkey-nopgbrk .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-nopgbrk_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t154 .     &quot; text: Horizontal
    IF s_form_prop-tb_nopgbrk_top IS INITIAL .
      ls_items-t_image  = icon_wd_iframe .
    ELSE .
      ls_items-t_image  = icon_checkbox .
    ENDIF .
    APPEND ls_items TO ct_items .

    IF s_form_prop-tb_nopgbrk_top IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-nopgbrk_line1 .
      ls_items-item_name  = &apos;2&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      IF s_form_prop-tb_nopgbrk_top_shift IS INITIAL .
        ls_items-text     = v_text-t160 . &quot; text: shift pagebreak to the top border
      ELSE .
        ls_items-text     = v_text-t161 . &quot; text: shift pagebreak: &amp; row(s) higher than top border

        lv_char_tmp = s_form_prop-tb_nopgbrk_top_shift . CONDENSE lv_char_tmp NO-GAPS .
        REPLACE FIRST OCCURRENCE OF &apos;&amp;&apos; IN ls_items-text WITH lv_char_tmp .
      ENDIF .
      APPEND ls_items TO ct_items .
    ENDIF .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-nopgbrk_line2 .
    ls_nodes-relatkey   = c_nkey-nopgbrk .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-nopgbrk_line2 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t155 .     &quot; text: Vertical
    IF s_form_prop-tb_nopgbrk_left IS INITIAL .
      ls_items-t_image  = icon_wd_iframe .
    ELSE .
      ls_items-t_image  = icon_checkbox .
    ENDIF .
    APPEND ls_items TO ct_items .

    IF s_form_prop-tb_nopgbrk_left IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-nopgbrk_line2 .
      ls_items-item_name  = &apos;2&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .

      IF s_form_prop-tb_nopgbrk_left_shift IS INITIAL .
        ls_items-text     = v_text-t158 .  &quot; text: shift pagebreak to the left-side border
      ELSE .
        ls_items-text     = v_text-t159 .  &quot; text: shift pagebreak: &amp; column(s) outside the left border

        lv_char_tmp = s_form_prop-tb_nopgbrk_left_shift . CONDENSE lv_char_tmp NO-GAPS .
        REPLACE FIRST OCCURRENCE OF &apos;&amp;&apos; IN ls_items-text WITH lv_char_tmp .
      ENDIF .
      APPEND ls_items TO ct_items .
    ENDIF .

  ENDMETHOD .                    &quot;tab_block_pgbrk
  METHOD tab_block_draft .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-draft .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-draft .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t195 .     &quot; text: Draft
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-draft_line1 .
    ls_nodes-relatkey   = c_nkey-draft .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-draft_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF s_form_prop-draft_subtree IS INITIAL .
      ls_items-t_image  = icon_wd_iframe .
    ELSE .
      ls_items-t_image  = icon_checkbox .
    ENDIF .
    APPEND ls_items TO ct_items .

    IF s_form_prop-draft_subtree IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-draft_line1 .
      ls_items-item_name  = &apos;2&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
      ls_items-t_image    = icon_delete_template .
      APPEND ls_items TO ct_items .
    ENDIF .

  ENDMETHOD .                    &quot;tab_block_draft
  METHOD tab_block_area .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-area .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-area .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t087 .     &quot; text: Area in the template
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-area_line1 .
    ls_nodes-relatkey   = c_nkey-area .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-area_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    IF s_form_prop-comp_type EQ lcl_form=&gt;c_comp_type-field .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-area_line1 .
      ls_items-item_name  = &apos;2&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-t_image    = icon_fast_entry .
      APPEND ls_items TO ct_items .
    ENDIF .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-area_line1 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_delete .
    IF  s_form_prop-tb_area_top      IS INITIAL
    AND s_form_prop-tb_area_left     IS INITIAL
    AND s_form_prop-tb_area_rows     IS INITIAL
    AND s_form_prop-tb_area_columns  IS INITIAL
    AND s_form_prop-tb_area_textmark IS INITIAL .
      ls_items-disabled = abap_on .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-area_line1 .
    ls_items-item_name  = &apos;4&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF s_form_prop-tb_area_top     IS NOT INITIAL
    OR s_form_prop-tb_area_left    IS NOT INITIAL
    OR s_form_prop-tb_area_rows    IS NOT INITIAL
    OR s_form_prop-tb_area_columns IS NOT INITIAL .
      DATA:
        lv_top            TYPE ty_char100 ,
        lv_left           TYPE ty_char100 ,
        lv_rows           TYPE ty_char100 ,
        lv_columns        TYPE ty_char100 .
      WRITE:
        s_form_prop-tb_area_top  TO lv_top LEFT-JUSTIFIED ,
        s_form_prop-tb_area_left TO lv_left LEFT-JUSTIFIED ,
        s_form_prop-tb_area_rows TO lv_rows LEFT-JUSTIFIED ,
        s_form_prop-tb_area_columns TO lv_columns LEFT-JUSTIFIED .

      IF  s_form_prop-comp_type EQ lcl_form=&gt;c_comp_type-field
      AND s_form_prop-tb_val_matrix IS INITIAL .
        CONCATENATE &apos;Top:&apos; lv_top &apos;Left:&apos; lv_left
        INTO ls_items-text SEPARATED BY space .
      ELSE .
        CONCATENATE &apos;Top:&apos; lv_top &apos;Left:&apos; lv_left &apos;Rows:&apos; lv_rows &apos;Columns:&apos; lv_columns
        INTO ls_items-text SEPARATED BY space .
      ENDIF .

    ELSEIF s_form_prop-tb_area_textmark IS NOT INITIAL .
      CONCATENATE v_text-t272         &quot; text: Mark in the text
                  &apos;:&apos; s_form_prop-tb_area_textmark INTO ls_items-text SEPARATED BY space .
    ELSE .
      ls_items-text = v_text-t074 .   &quot; text: &lt;...not assigned...&gt;
    ENDIF .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_area
  METHOD tab_block_direction .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes.
    ls_nodes-node_key   = c_nkey-direction .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-direction .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t088 . &quot; text: Output direction at runtime
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-direction_line1 .
    ls_nodes-relatkey   = c_nkey-direction .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-direction_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    CASE s_form_prop-tb_direction .
      WHEN lcl_form=&gt;c_tb_direction-left2right .
        ls_items-t_image    = icon_trend_unchanged .
      WHEN lcl_form=&gt;c_tb_direction-up2down .
        ls_items-t_image    = icon_trend_down .
    ENDCASE .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-direction_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    CASE s_form_prop-tb_direction .
      WHEN lcl_form=&gt;c_tb_direction-left2right .
        ls_items-text   = v_text-t089 . &quot; text: Right
      WHEN lcl_form=&gt;c_tb_direction-up2down .
        ls_items-text   = v_text-t090 . &quot; text: Down
    ENDCASE .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_direction
  METHOD tab_block_mergecells .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes.
    ls_nodes-node_key   = c_nkey-mergecells .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-mergecells .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t176 . &quot; text: Merge cells
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-mergecells_line1 .
    ls_nodes-relatkey   = c_nkey-mergecells .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-mergecells_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    CASE s_form_prop-tb_mergecells .
      WHEN lcl_form=&gt;c_tb_mergecells-rows .
        ls_items-t_image = icon_wd_view_set_t_layout_270 .
      WHEN lcl_form=&gt;c_tb_mergecells-cols .
        ls_items-t_image = icon_wd_view_set_t_layout .
    ENDCASE .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-mergecells_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    CASE s_form_prop-tb_mergecells .
      WHEN lcl_form=&gt;c_tb_mergecells-rows .
        ls_items-text   = v_text-t177 . &quot; text: Span rows
      WHEN lcl_form=&gt;c_tb_mergecells-cols .
        ls_items-text   = v_text-t178 . &quot; text: Span columns
    ENDCASE .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_mergecells
  METHOD tab_block_colrow_prop .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes.
    ls_nodes-node_key   = c_nkey-colrow_prop .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-colrow_prop .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t091 .   &quot; text: Copy properties
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-colrow_prop_line1 .
    ls_nodes-relatkey   = c_nkey-colrow_prop .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-colrow_prop_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t092 .   &quot; text: Rows
    IF s_form_prop-tb_rowprop IS INITIAL .
      ls_items-t_image  = icon_wd_iframe .
    ELSE .
      ls_items-t_image  = icon_checkbox .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-colrow_prop_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t093 .   &quot; text: Columns
    IF s_form_prop-tb_colprop IS INITIAL .
      ls_items-t_image  = icon_wd_iframe .
    ELSE .
      ls_items-t_image  = icon_checkbox .
    ENDIF .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_colrow_prop
  METHOD tab_block_colrow_group .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes.
    ls_nodes-node_key   = c_nkey-colrow_grp .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-colrow_grp .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t094 .   &quot; text: Group
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-colrow_grp_line1 .
    ls_nodes-relatkey   = c_nkey-colrow_grp .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-colrow_grp_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t092 .   &quot; text: Rows
    IF s_form_prop-tb_rowgroup IS INITIAL .
      ls_items-t_image  = icon_wd_iframe .
    ELSE .
      ls_items-t_image  = icon_checkbox .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-colrow_grp_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = space .
    IF s_form_prop-tb_rowgroup IS INITIAL .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-t_image  = icon_space .
    ELSEIF s_form_prop-tb_rowgroup_clp IS INITIAL .
      ls_items-class    = cl_gui_list_tree=&gt;item_class_button .
      ls_items-t_image  = icon_collapse .
    ELSE .
      ls_items-class    = cl_gui_list_tree=&gt;item_class_button .
      ls_items-t_image  = icon_expand .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-colrow_grp_line1 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t093 .   &quot; text: Columns
    IF s_form_prop-tb_colgroup IS INITIAL .
      ls_items-t_image  = icon_wd_iframe .
    ELSE .
      ls_items-t_image  = icon_checkbox .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-colrow_grp_line1 .
    ls_items-item_name  = &apos;4&apos; .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = space .
    IF s_form_prop-tb_colgroup IS INITIAL .
      ls_items-class    = cl_gui_list_tree=&gt;item_class_text .
      ls_items-t_image  = icon_space .
    ELSEIF s_form_prop-tb_colgroup_clp IS INITIAL .
      ls_items-class    = cl_gui_list_tree=&gt;item_class_button .
      ls_items-t_image  = icon_collapse .
    ELSE .
      ls_items-class    = cl_gui_list_tree=&gt;item_class_button .
      ls_items-t_image  = icon_expand .
    ENDIF .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_colrow_group
  METHOD tab_block_autofitmerged .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes.
    ls_nodes-node_key   = c_nkey-autofitmrg .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-autofitmrg .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t275 .   &quot; text: AutoFit for merged cells
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-autofitmrg_line1 .
    ls_nodes-relatkey   = c_nkey-autofitmrg .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-autofitmrg_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t276 .   &quot; text: Off
    IF  s_form_prop-tb_autofitmerged_r IS INITIAL
    AND s_form_prop-tb_autofitmerged_c IS INITIAL .
      ls_items-t_image  = icon_radiobutton .
    ELSE .
      ls_items-t_image  = icon_wd_radio_button_empty .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-autofitmrg_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t277 .   &quot; text: Row height
    CASE s_form_prop-tb_autofitmerged_r .
      WHEN space  . ls_items-t_image  = icon_wd_radio_button_empty .
      WHEN OTHERS . ls_items-t_image  = icon_radiobutton .
    ENDCASE .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-autofitmrg_line1 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t278 .   &quot; text: Column width
    CASE s_form_prop-tb_autofitmerged_c .
      WHEN space  . ls_items-t_image  = icon_wd_radio_button_empty .
      WHEN OTHERS . ls_items-t_image  = icon_radiobutton .
    ENDCASE .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_autofitmerged
  METHOD tab_block_respattern_place .
    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes.
    ls_nodes-node_key   = c_nkey-respatt_place .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-respatt_place .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t355 .   &quot; text: Place relative to Subarea
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-respatt_place_line1 .
    ls_nodes-relatkey   = c_nkey-respatt_place .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-respatt_place_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t356 .   &quot; text: Before
    CASE s_form_prop-tb_respattern_place .
      WHEN lcl_form=&gt;c_respattern_place-before_subarea . ls_items-t_image  = icon_radiobutton .
      WHEN lcl_form=&gt;c_respattern_place-after_subarea  . ls_items-t_image  = icon_wd_radio_button_empty .
    ENDCASE .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-respatt_place_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t357 .   &quot; text: After
    CASE s_form_prop-tb_respattern_place .
      WHEN lcl_form=&gt;c_respattern_place-before_subarea . ls_items-t_image  = icon_wd_radio_button_empty .
      WHEN lcl_form=&gt;c_respattern_place-after_subarea  . ls_items-t_image  = icon_radiobutton .
    ENDCASE .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_respattern_place
  METHOD tab_block_drwstat .

    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes.
    ls_nodes-node_key   = c_nkey-drwstat .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwstat .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t140 .   &quot; text: Source
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-drwstat_line1 .
    ls_nodes-relatkey   = c_nkey-drwstat .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwstat_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    IF s_form_prop-tb_drwstat_flag IS INITIAL .
      ls_items-t_image  = icon_binary_document .
      ls_items-text+1   = v_text-t141 .   &quot; text: Rawdata from context field
    ELSE .
      ls_items-t_image  = icon_jpg .
      ls_items-text+1   = v_text-t142 .   &quot; text: Drawing, located on the sheet
    ENDIF .
    APPEND ls_items TO ct_items .

    CHECK s_form_prop-tb_drwstat_flag IS NOT INITIAL .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-drwstat_line2 .
    ls_nodes-relatkey   = c_nkey-drwstat .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwstat_line2 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwstat_line2 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_delete .
    IF s_form_prop-tb_drwstat_name IS INITIAL .
      ls_items-disabled = abap_on .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwstat_line2 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    IF s_form_prop-tb_drwstat_name IS INITIAL .
      ls_items-text     = v_text-t074 .   &quot; text: &lt;...not assigned...&gt;
    ELSE .
      ls_items-text     = s_form_prop-tb_drwstat_name .
    ENDIF .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_drwstat
  METHOD tab_block_drwsize .

    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
*------
    CLEAR ls_nodes.
    ls_nodes-node_key   = c_nkey-drwsize .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    = icon_dummy .
    ls_nodes-exp_image  = icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwsize .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t337 .   &quot; text: Size
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-drwsize_line1 .
    ls_nodes-relatkey   = c_nkey-drwsize .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwsize_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text+1     = v_text-t338 .   &quot; text: Fit within area
    CASE s_form_prop-drawing_size .
      WHEN lcl_form=&gt;c_drawing_size-fit_within_area  . ls_items-t_image  = icon_radiobutton .
      WHEN lcl_form=&gt;c_drawing_size-from_context .     ls_items-t_image  = icon_wd_radio_button_empty .
    ENDCASE .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwsize_line1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text+1     = v_text-t339 .   &quot; text: From context field
    CASE s_form_prop-drawing_size .
      WHEN lcl_form=&gt;c_drawing_size-fit_within_area  . ls_items-t_image  = icon_wd_radio_button_empty .
      WHEN lcl_form=&gt;c_drawing_size-from_context .     ls_items-t_image  = icon_radiobutton .
    ENDCASE .
    APPEND ls_items TO ct_items .

    CHECK s_form_prop-drawing_size EQ lcl_form=&gt;c_drawing_size-from_context .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-drwsize_line2 .
    ls_nodes-relatkey   = c_nkey-drwsize .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwsize_line2 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    ls_items-text       = v_text-t340 .     &quot; text: Height
    ls_items-text+8     = &apos;:&apos; .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwsize_line2 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwsize_line2 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change_password .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwsize_line2 .
    ls_items-item_name  = &apos;4&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF s_form_prop-drawing_size_h_relpath IS INITIAL .
      ls_items-text     = v_text-t074 . &quot; text: &lt;...not assigned...&gt;
    ELSE .
      format_path( EXPORTING iv_source    = s_form_prop-drawing_size_h_relpath
                   CHANGING  cv_formatted = ls_items-text ) .
    ENDIF .
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-drwsize_line3 .
    ls_nodes-relatkey   = c_nkey-drwsize .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwsize_line3 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    ls_items-text       = v_text-t341 .     &quot; text: Width
    ls_items-text+8     = &apos;:&apos; .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwsize_line3 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwsize_line3 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change_password .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-drwsize_line3 .
    ls_items-item_name  = &apos;4&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF s_form_prop-drawing_size_w_relpath IS INITIAL .
      ls_items-text     = v_text-t074 . &quot; text: &lt;...not assigned...&gt;
    ELSE .
      format_path( EXPORTING iv_source    = s_form_prop-drawing_size_w_relpath
                   CHANGING  cv_formatted = ls_items-text ) .
    ENDIF .
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_drwsize
  METHOD tab_block_chart .

    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm .
    DATA:
      lv_dataset_series_assigned  TYPE ty_char10 ,
      lv_dataset_series_all       TYPE ty_char10 ,
      lt_dataset_series_tab       TYPE ty_t_dataset_series_tab .

*------ Layout options
    CLEAR ls_nodes.
    ls_nodes-node_key   = c_nkey-chart_layout .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    =
    ls_nodes-exp_image  = icon_layout_control .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_layout .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t185 .   &quot; text: Layout options
    APPEND ls_items TO ct_items .

*------ Model
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-chart_model .
    ls_nodes-relatkey   = c_nkey-chart_layout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    =
    ls_nodes-exp_image  = icon_gis_bar .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_model .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-t_image    = icon_change .
    ls_items-text+1     = v_text-t233 .   &quot; text: Model
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_model .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_delete .
    IF s_form_prop-tb_drwstat_name IS INITIAL .
      ls_items-disabled = abap_on .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_model .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF s_form_prop-tb_drwstat_name IS INITIAL .
      ls_items-text     = v_text-t074 .   &quot; text: &lt;...not assigned...&gt;
    ELSE .
      ls_items-text     = s_form_prop-tb_drwstat_name .
    ENDIF .
    APPEND ls_items TO ct_items .


*------ Chart title (mode, path)
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-chart_title .
    ls_nodes-relatkey   = c_nkey-chart_layout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    =
    ls_nodes-exp_image  = icon_wd_caption .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_title .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_title .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text+1     = v_text-t251 .   &quot; text: Chart title
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_title .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    ls_items-text(1)    = &apos;:&apos; .
    CASE s_form_prop-chart_title .
      WHEN space .  ls_items-text+2 = v_text-t253 .  &quot; text: from Model (statically)
      WHEN OTHERS . ls_items-text+2 = v_text-t254 .  &quot; text: from Context
    ENDCASE .
    APPEND ls_items TO ct_items .

    IF s_form_prop-chart_title IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-chart_title .
      ls_items-item_name  = &apos;4&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
      ls_items-text(1)    = &apos;:&apos; .
      IF s_form_prop-chart_title_relpath IS INITIAL .
        ls_items-text+2   = v_text-t074 . &quot; text: &lt;...not assigned...&gt;
      ELSE .
        format_path( EXPORTING iv_source    = s_form_prop-chart_title_relpath
                     CHANGING  cv_formatted = ls_items-text+2 ) .
      ENDIF .
      APPEND ls_items TO ct_items .
    ENDIF .


*------ Category Axis title (mode, path)
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-chart_title_catax .
    ls_nodes-relatkey   = c_nkey-chart_layout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    =
    ls_nodes-exp_image  = icon_wd_label .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_title_catax .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_title_catax .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text+1     = v_text-t344 .   &quot; text: Category Axis title
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_title_catax .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    ls_items-text(1)    = &apos;:&apos; .
    CASE s_form_prop-chart_catax_title .
      WHEN space  . ls_items-text+2 = v_text-t253 .  &quot; text: from Model (statically)
      WHEN &apos;1&apos;    . ls_items-text+2 = v_text-t255 .  &quot; text: from Dataset grid column captions
      WHEN OTHERS . ls_items-text+2 = v_text-t254 .  &quot; text: from Context
    ENDCASE .
    APPEND ls_items TO ct_items .

    IF s_form_prop-chart_catax_title IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-chart_title_catax .
      ls_items-item_name  = &apos;4&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
      ls_items-text(1)    = &apos;:&apos; .
      IF s_form_prop-chart_catax_title_relpath IS INITIAL .
        ls_items-text+2   = v_text-t074 . &quot; text: &lt;...not assigned...&gt;
      ELSE .
        format_path( EXPORTING iv_source    = s_form_prop-chart_catax_title_relpath
                     CHANGING  cv_formatted = ls_items-text+2 ) .
      ENDIF .
      APPEND ls_items TO ct_items .
    ENDIF .


*------ Value Axis title (mode, path)
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-chart_title_valax .
    ls_nodes-relatkey   = c_nkey-chart_layout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    =
    ls_nodes-exp_image  = icon_wd_label .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_title_valax .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_title_valax .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text+1     = v_text-t343 .   &quot; text: Value Axis title
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_title_valax .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    ls_items-text(1)    = &apos;:&apos; .
    CASE s_form_prop-chart_valax_title .
      WHEN space .  ls_items-text+2 = v_text-t253 .  &quot; text: from Model (statically)
      WHEN OTHERS . ls_items-text+2 = v_text-t254 .  &quot; text: from Context
    ENDCASE .
    APPEND ls_items TO ct_items .

    IF s_form_prop-chart_valax_title IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-chart_title_valax .
      ls_items-item_name  = &apos;4&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
      ls_items-text(1)    = &apos;:&apos; .
      IF s_form_prop-chart_valax_title_relpath IS INITIAL .
        ls_items-text+2   = v_text-t074 . &quot; text: &lt;...not assigned...&gt;
      ELSE .
        format_path( EXPORTING iv_source    = s_form_prop-chart_valax_title_relpath
                     CHANGING  cv_formatted = ls_items-text+2 ) .
      ENDIF .
      APPEND ls_items TO ct_items .
    ENDIF .


*------ Series title (mode)
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-chart_title_ser .
    ls_nodes-relatkey   = c_nkey-chart_layout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    =
    ls_nodes-exp_image  = icon_wd_label .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_title_ser .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_change .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_title_ser .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text+1     = v_text-t252 .             &quot; text: Series name
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_title_ser .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    ls_items-text(1)    = &apos;:&apos; .
    CASE s_form_prop-chart_series_title .
      WHEN space .  ls_items-text+2 = v_text-t253 .  &quot; text: from Model (statically)
      WHEN OTHERS . ls_items-text+2 = v_text-t255 .  &quot; text: from Dataset grid column captions
    ENDCASE .
    APPEND ls_items TO ct_items .

*------ DataSource
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-chart_dtset .
    ls_nodes-relatkey   = space .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    =
    ls_nodes-exp_image  = icon_wd_table .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_dtset .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text+1     = v_text-t234 .   &quot; text: Dataset
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-chart_dtset_1 .
    ls_nodes-relatkey   = c_nkey-chart_dtset .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    =
    ls_nodes-exp_image  = icon_table_settings .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_dtset_1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-t_image    = icon_change .
    ls_items-text+1     = v_text-t225 .   &quot; text: Grid
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_dtset_1 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_delete .
    IF s_form_prop-dataset_id IS INITIAL .
      ls_items-disabled = abap_on .
    ENDIF .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_dtset_1 .
    ls_items-item_name  = &apos;3&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .
    IF s_form_prop-dataset_id IS INITIAL .
      ls_items-text     = v_text-t074 .   &quot; text: &lt;...not assigned...&gt;
    ELSE .
      ls_items-text     = v_dataset_name .
    ENDIF .
    APPEND ls_items TO ct_items .

*------ Series
    CHECK s_form_prop-dataset_id IS NOT INITIAL .

    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-chart_dtset_2 .
    ls_nodes-relatkey   = c_nkey-chart_dtset .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    =
    ls_nodes-exp_image  = icon_choose_columns .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_dtset_2 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-t_image    = icon_change .
    ls_items-text+1     = v_text-t235 .   &quot; text: Series
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-chart_dtset_2 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_fixed .

    lt_dataset_series_tab[] = lcl_formtemplate=&gt;conv_dataset_series_st( s_form_prop-dataset_series ) .
    DELETE lt_dataset_series_tab WHERE seridx EQ c_chart_category_idx .
    lv_dataset_series_all   = LINES( lt_dataset_series_tab[] ) .
    LOOP AT lt_dataset_series_tab TRANSPORTING NO FIELDS WHERE dtsfld IS NOT INITIAL .
      ADD 1 TO lv_dataset_series_assigned .
    ENDLOOP .
    IF lv_dataset_series_assigned IS INITIAL .
      ls_items-text+2   = v_text-t074 .   &quot; text: &lt;...not assigned...&gt;
    ELSEIF lv_dataset_series_assigned EQ lv_dataset_series_all .
      ls_items-t_image  = icon_complete .
    ELSE .
      CONCATENATE lv_dataset_series_assigned
                  v_text-t246             &quot; text: from
                  lv_dataset_series_all
             INTO ls_items-text SEPARATED BY space .
      CONDENSE ls_items-text+2 .
    ENDIF .

    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_chart
  METHOD tab_block_tree_layout .

    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm ,
      ls_tree_layout    TYPE ty_s_tree_layout ,
      lv_int            TYPE i ,
      lv_text           TYPE ty_char100 .

    lcl_form=&gt;conv_container_fs(
        EXPORTING iv_field      = s_form_prop-tree_layout
        IMPORTING es_structure  = ls_tree_layout ) .

*------
    CLEAR ls_nodes.
    ls_nodes-node_key   = c_nkey-treelayout .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    =
    ls_nodes-exp_image  = icon_layout_control . &quot;icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-treelayout .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t185 .   &quot; text: Layout options
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-treelayout_line1 .
    ls_nodes-relatkey   = c_nkey-treelayout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-treelayout_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    CASE ls_tree_layout-rotate .
      WHEN space  .
        ls_items-t_image = icon_bw_apd_transformation .
        ls_items-text+1  = v_text-t187 .   &quot; text: standard orientation
      WHEN OTHERS .
        ls_items-t_image = icon_bw_rotate_left .
        ls_items-text+1  = v_text-t186 .   &quot; text: rotate 90 CCW
    ENDCASE .
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-treelayout_line2 .
    ls_nodes-relatkey   = c_nkey-treelayout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-treelayout_line2 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    CASE ls_tree_layout-stru .
      WHEN space  .   ls_items-t_image  = icon_wd_iframe .
      WHEN OTHERS .   ls_items-t_image  = icon_checkbox .
    ENDCASE .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-treelayout_line2 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text+1     = v_text-t188 .   &quot; text: structure
    APPEND ls_items TO ct_items .

    IF ls_tree_layout-stru IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-treelayout_line2 .
      ls_items-item_name  = &apos;3&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      ls_items-text       = v_text-t205 .   &quot; text: . Initial state of nodes:
      APPEND ls_items TO ct_items .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-treelayout_line2 .
      ls_items-item_name  = &apos;4&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      CASE ls_tree_layout-stru_exp_coll .
        WHEN lcl_form=&gt;c_stru_exp_coll-expanded .
          ls_items-t_image = icon_collapse .
          ls_items-text+1  = v_text-t193 .   &quot; text: All expanded
        WHEN lcl_form=&gt;c_stru_exp_coll-collapsed .
          ls_items-t_image = icon_expand .
          ls_items-text+1  = v_text-t194 .   &quot; text: All Collapsed
        WHEN OTHERS .
          ls_items-t_image = icon_paw_item .
          ls_items-text+1  = v_text-t204 .   &quot; text: Actual (from TreeControl)
      ENDCASE .
      APPEND ls_items TO ct_items .
    ENDIF .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-treelayout_line4 .
    ls_nodes-relatkey   = c_nkey-treelayout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-treelayout_line4 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    CASE ls_tree_layout-head .
      WHEN space  . ls_items-t_image  = icon_wd_iframe .
      WHEN OTHERS . ls_items-t_image  = icon_checkbox .
    ENDCASE .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-treelayout_line4 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text+1     = v_text-t189 .   &quot; text: header
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-treelayout_line5 .
    ls_nodes-relatkey   = c_nkey-treelayout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-treelayout_line5 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    CASE ls_tree_layout-col_hier .
      WHEN space  . ls_items-t_image  = icon_wd_iframe .
      WHEN OTHERS . ls_items-t_image  = icon_checkbox .
    ENDCASE .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-treelayout_line5 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text+1     = v_text-t190 .   &quot; text: hierarchy column
    APPEND ls_items TO ct_items .

    IF ls_tree_layout-col_hier IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-treelayout_line5 .
      ls_items-item_name  = &apos;3&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      ls_items-t_image    = icon_change .
      CASE ls_tree_layout-col_hier_after .
        WHEN space  . ls_items-text+1 = v_text-t199 . &quot; text: Before
        WHEN OTHERS . ls_items-text+1 = v_text-t200 . &quot; text: After
      ENDCASE .
      APPEND ls_items TO ct_items .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-treelayout_line5 .
      ls_items-item_name  = &apos;4&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      ls_items-t_image    = icon_change .
      lv_text = lv_int = ls_tree_layout-col_hier_shift .
      CONDENSE lv_text NO-GAPS .

      CONCATENATE v_text-t191             &quot; text: shift
                  &apos;:&apos; lv_text INTO ls_items-text+1 SEPARATED BY space .
      APPEND ls_items TO ct_items .
    ENDIF .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-treelayout_line6 .
    ls_nodes-relatkey   = c_nkey-treelayout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    IF  ls_tree_layout-col_othr IS NOT INITIAL .
      ls_nodes-isfolder = abap_on .
    ENDIF .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-treelayout_line6 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    CASE ls_tree_layout-col_othr .
      WHEN space  . ls_items-t_image  = icon_wd_iframe .
      WHEN OTHERS . ls_items-t_image  = icon_checkbox .
    ENDCASE .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-treelayout_line6 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text+1     = v_text-t192 .   &quot; text: other columns
    APPEND ls_items TO ct_items .

    IF  ls_tree_layout-col_othr IS NOT INITIAL .
*------
      CLEAR ls_nodes .
      ls_nodes-node_key   = c_nkey-treelayout_line61 .
      ls_nodes-relatkey   = c_nkey-treelayout_line6 .
      ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
      ls_nodes-n_image    = icon_space .
      ls_nodes-exp_image  = icon_space .
      APPEND ls_nodes TO ct_nodes .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-treelayout_line61 .
      ls_items-item_name  = &apos;1&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      IF ls_tree_layout-col_othr_width IS INITIAL
      OR ls_tree_layout-col_othr_width EQ 0 .
        ls_items-t_image  = icon_wd_iframe .
      ELSE .
        ls_items-t_image  = icon_checkbox .
      ENDIF .
      APPEND ls_items TO ct_items .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-treelayout_line61 .
      ls_items-item_name  = &apos;2&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      IF ls_tree_layout-col_othr_width IS INITIAL
      OR ls_tree_layout-col_othr_width EQ 0 .
        ls_items-text+1   = v_text-t201 . &quot; text: width from f.cat.
      ELSE .
        lv_text = lv_int = ls_tree_layout-col_othr_width .
        CONDENSE lv_text .
        CONCATENATE v_text-t201             &quot; text: width from f.cat.
                    &apos;~(&apos; v_text-t202        &quot; text: multiplier
                    &apos;:~&apos; lv_text &apos;)&apos;
               INTO ls_items-text+1 .
        SET LOCALE LANGUAGE sy-langu .
        TRANSLATE ls_items-text USING &apos;~ &apos; .
      ENDIF .
      APPEND ls_items TO ct_items .

*------
      CLEAR ls_nodes .
      ls_nodes-node_key   = c_nkey-treelayout_line62 .
      ls_nodes-relatkey   = c_nkey-treelayout_line6 .
      ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
      ls_nodes-n_image    = icon_space .
      ls_nodes-exp_image  = icon_space .
      APPEND ls_nodes TO ct_nodes .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-treelayout_line62 .
      ls_items-item_name  = &apos;1&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      CASE ls_tree_layout-allow_formulas .
        WHEN space  . ls_items-t_image  = icon_wd_iframe .
        WHEN OTHERS . ls_items-t_image  = icon_checkbox .
      ENDCASE .
      APPEND ls_items TO ct_items .

      CLEAR ls_items .
      ls_items-node_key   = c_nkey-treelayout_line62 .
      ls_items-item_name  = &apos;2&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
      ls_items-text+1     = v_text-t269 .   &quot; text: allow formulas
      APPEND ls_items TO ct_items .
    ENDIF .

  ENDMETHOD .                    &quot;tab_block_tree_layout
  METHOD tab_block_grid_layout .

    DATA:
      ls_nodes          TYPE treev_node ,
      ls_items          TYPE mtreeitm ,
      ls_grid_layout    TYPE ty_s_grid_layout .

    lcl_form=&gt;conv_container_fs(
        EXPORTING iv_field      = s_form_prop-grid_layout
        IMPORTING es_structure  = ls_grid_layout ) .

*------
    CLEAR ls_nodes.
    ls_nodes-node_key   = c_nkey-gridlayout .
    ls_nodes-isfolder   = abap_on .
    ls_nodes-n_image    =
    ls_nodes-exp_image  = icon_layout_control . &quot;icon_dummy .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-gridlayout .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text       = v_text-t185 .   &quot; text: Layout options
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-gridlayout_line1 .
    ls_nodes-relatkey   = c_nkey-gridlayout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-gridlayout_line1 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    CASE ls_grid_layout-rotate .
      WHEN space  .
        ls_items-t_image = icon_bw_apd_transformation .
        ls_items-text+1  = v_text-t187 .   &quot; text: standard orientation
      WHEN OTHERS .
        ls_items-t_image = icon_bw_rotate_left .
        ls_items-text+1  = v_text-t186 .   &quot; text: rotate 90 CCW
    ENDCASE .
    APPEND ls_items TO ct_items .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-gridlayout_line2 .
    ls_nodes-relatkey   = c_nkey-gridlayout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-gridlayout_line2 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    CASE ls_grid_layout-head .
      WHEN space  . ls_items-t_image  = icon_wd_iframe .
      WHEN OTHERS . ls_items-t_image  = icon_checkbox .
    ENDCASE .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-gridlayout_line2 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text+1     = v_text-t189 .   &quot; text: header
    APPEND ls_items TO ct_items .

    IF ls_grid_layout-head IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-gridlayout_line2 .
      ls_items-item_name  = &apos;3&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-t_image    = icon_change .

      CASE ls_grid_layout-head_titles .
        WHEN lcl_form=&gt;c_head_titles-tech  .  ls_items-text = v_text-t229 . &quot; text: Tech.names
        WHEN lcl_form=&gt;c_head_titles-descr .  ls_items-text = v_text-t230 . &quot; text: Descriptions
        WHEN OTHERS .
          CONCATENATE v_text-t229 &apos;-&apos;     &quot; text: Tech.names
                      v_text-t230         &quot; text: Descriptions
                 INTO ls_items-text SEPARATED BY space .
      ENDCASE .
      APPEND ls_items TO ct_items .
    ENDIF .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-gridlayout_line3 .
    ls_nodes-relatkey   = c_nkey-gridlayout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-gridlayout_line3 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-t_image    = icon_choose_columns .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-gridlayout_line3 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .

    DATA lv_count TYPE ty_char10 .
    IF s_form_prop-grid_fldseq IS INITIAL .
      ls_items-text+1   = v_text-t226 .   &quot; text: columns
    ELSE .
      FIND ALL OCCURRENCES OF c_fldseq_separator
                           IN s_form_prop-grid_fldseq MATCH COUNT lv_count .
      ADD 1 TO lv_count .
      CONDENSE lv_count NO-GAPS .

      CONCATENATE v_text-t226             &quot; text: columns
                  &apos;(&apos; lv_count &apos;)&apos;
             INTO ls_items-text+1 SEPARATED BY space .
    ENDIF .
    APPEND ls_items TO ct_items .

    IF s_form_prop-grid_fldseq IS NOT INITIAL .
      CLEAR ls_items .
      ls_items-node_key   = c_nkey-gridlayout_line3 .
      ls_items-item_name  = &apos;3&apos; .
      ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
      ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
      ls_items-t_image    = icon_tools .
      APPEND ls_items TO ct_items .
    ENDIF .

*------
    CLEAR ls_nodes .
    ls_nodes-node_key   = c_nkey-gridlayout_line4 .
    ls_nodes-relatkey   = c_nkey-gridlayout .
    ls_nodes-relatship  = cl_gui_list_tree=&gt;relat_last_child .
    ls_nodes-n_image    = icon_space .
    ls_nodes-exp_image  = icon_space .
    APPEND ls_nodes TO ct_nodes .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-gridlayout_line4 .
    ls_items-item_name  = &apos;1&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_button .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    CASE ls_grid_layout-allow_formulas .
      WHEN space  . ls_items-t_image  = icon_wd_iframe .
      WHEN OTHERS . ls_items-t_image  = icon_checkbox .
    ENDCASE .
    APPEND ls_items TO ct_items .

    CLEAR ls_items .
    ls_items-node_key   = c_nkey-gridlayout_line4 .
    ls_items-item_name  = &apos;2&apos; .
    ls_items-class      = cl_gui_list_tree=&gt;item_class_text .
    ls_items-alignment  = cl_gui_list_tree=&gt;align_auto .
    ls_items-font       = cl_gui_list_tree=&gt;item_font_prop .
    ls_items-text+1     = v_text-t269 .   &quot; text: allow formulas
    APPEND ls_items TO ct_items .

  ENDMETHOD .                    &quot;tab_block_grid_layout
  METHOD format_text1 .
    DATA:
      lv_char_offset      TYPE ty_char100 ,
      lv_char_match       TYPE ty_char100 .

    lv_char_offset = iv_offset .   CONDENSE lv_char_offset .
    lv_char_match  = iv_match  .   CONDENSE lv_char_match  .

    IF  iv_offset EQ 0
    AND iv_match  EQ 0 .
      ev_text = v_text-t095 .             &quot; text: The entire value
    ELSEIF iv_offset EQ 0
       AND iv_match  NE 0 .
      CONCATENATE v_text-t096             &quot; text: first
                  &apos;_&apos; lv_char_match &apos;_&apos;
                  v_text-t097             &quot; text: characters
              INTO ev_text SEPARATED BY space .
    ELSEIF iv_offset NE 0
       AND iv_match  EQ 0 .
      CONCATENATE v_text-t098             &quot; text: from position
                  lv_char_offset &apos;,_&apos;
                  v_text-t099             &quot; text: all subsequent
                  INTO ev_text .
    ELSE .
      CONCATENATE v_text-t098             &quot; text: from position
                  &apos;:_&apos; lv_char_offset INTO lv_char_offset .
      CONCATENATE v_text-t097             &quot; text: characters
                  &apos;:_&apos; lv_char_match  INTO lv_char_match .
      CONCATENATE lv_char_offset &apos;,_&apos; lv_char_match INTO ev_text .
    ENDIF .
    TRANSLATE ev_text USING &apos;_ &apos; .
  ENDMETHOD .                    &quot;format_text1
ENDCLASS .                    &quot;lcl_wb_protab IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_workbench DEFINITION
*----------------------------------------------------------------------*
*       the form builder application
*----------------------------------------------------------------------*
CLASS lcl_workbench DEFINITION INHERITING FROM lcl_root .
  PUBLIC SECTION .
    METHODS:
      constructor
          IMPORTING iv_formname       TYPE any OPTIONAL
                    iv_action         TYPE any
          EXCEPTIONS process_terminated ,
      free ,
      action_edit
          IMPORTING iv_formname       TYPE any
          EXCEPTIONS process_terminated ,
      action_create
          IMPORTING iv_formname       TYPE any
                    iv_with_template  TYPE flag DEFAULT space
          EXCEPTIONS process_terminated ,
      action_copy
          IMPORTING iv_formname       TYPE any
          EXCEPTIONS process_terminated ,
      action_delete
          IMPORTING iv_formname       TYPE any
          EXCEPTIONS process_terminated ,
      action_export
          IMPORTING iv_formname       TYPE any
          EXCEPTIONS process_terminated ,
      action_import
          IMPORTING iv_formname       TYPE any
          EXCEPTIONS process_terminated ,
      new_formname_to_selscreen
          IMPORTING iv_formname       TYPE any ,
      pbo ,
      popup_compname
          IMPORTING iv_comp_type      TYPE any
          CHANGING  cv_retcode        TYPE any
                    cv_comp_name      TYPE any
                    cv_comp_descr     TYPE any ,
      popup_comp_types
          IMPORTING iv_title          TYPE any OPTIONAL
                    it_comp_types     TYPE ty_t_comp_types
                    iv_wizard_mode_allow TYPE any
          EXPORTING ev_comp_type      TYPE any
                    ev_wizard_mode    TYPE any
                    ev_cancel         TYPE flag ,
      popup_component
          IMPORTING iv_title          TYPE any OPTIONAL
                    iv_comp_type      TYPE any
          EXPORTING es_form_prop      TYPE lcl_form=&gt;ty_s_properties
                    ev_cancel         TYPE flag ,
      popup_textmark
          CHANGING  cv_retcode        TYPE any
                    cv_textmark       TYPE any ,
      popup_ctxtfield
          IMPORTING iv_cb_fullpath_parent TYPE any
                    iv_f4_strategy    TYPE i
                    iv_manual         TYPE flag OPTIONAL
          CHANGING  cv_cb_relpath     TYPE ty_comp_path
                    cv_cb_comp_type   TYPE ty_comp_type OPTIONAL
                    cv_cancel         TYPE flag OPTIONAL ,
      popup_ctxtfield_sub
          IMPORTING iv_cb_fullpath_parent TYPE any
                    iv_cb_relpath     TYPE ty_comp_path
          CHANGING  cv_cb_val_sub_col TYPE any
                    cv_cb_val_sub_row TYPE i
                    cs_ctxt_prop      TYPE lcl_context=&gt;ty_s_properties
                    cv_cancel         TYPE flag OPTIONAL ,
      popup_ctxtfield_callback
          IMPORTING is_nodetab        TYPE seucomm
                    iv_uc             TYPE any
          CHANGING  cv_exit           TYPE flag
                    cv_list_refresh   TYPE flag ,
      popup_ctxtmulti
          IMPORTING iv_cb_fullpath_parent TYPE any
          CHANGING  ct_comp_paths     TYPE ty_t_ctxtmulti
                    cv_cancel         TYPE flag OPTIONAL ,
      popup_ctxtmulti_callback
          IMPORTING is_nodetab        TYPE seucomm
                    iv_uc             TYPE any
          CHANGING  cv_exit           TYPE flag
                    cv_list_refresh   TYPE flag ,
      popup_charpos
          IMPORTING iv_length         TYPE any
          CHANGING  cv_offset         TYPE any
                    cv_match          TYPE any
                    cv_cancel         TYPE flag OPTIONAL ,
      popup_matrix_interval
          CHANGING  cv_rows           TYPE any
                    cv_cols           TYPE any
                    cv_cancel         TYPE flag OPTIONAL ,
      popup_tbsheet
          RETURNING value(rv_name)    TYPE ty_char31 ,
      popup_tbdrawing
          IMPORTING iv_sheetname      TYPE any
                    iv_vector         TYPE flag OPTIONAL
                    iv_bitmap         TYPE flag OPTIONAL
                    iv_chart          TYPE flag OPTIONAL
          RETURNING value(rv_name)    TYPE ty_char100 ,
      popup_dataset_id
          IMPORTING iv_id             TYPE lcl_form=&gt;ty_s_hierarchy-id
                    iv_same_sheet     TYPE flag OPTIONAL
          CHANGING  cv_dataset_id     TYPE lcl_form=&gt;ty_s_hierarchy-id ,
      popup_dataset_series
          CHANGING  cs_form_prop      TYPE lcl_form=&gt;ty_s_properties ,
      popup_dataset_field
          IMPORTING iv_dataset_id     TYPE lcl_form=&gt;ty_s_hierarchy-id
          CHANGING  cv_fieldname      TYPE string ,
      popup_devclass
          IMPORTING iv_objid          TYPE any
          RETURNING value(rv_devclass) TYPE tadir-devclass ,
      popup_pgbrk
          IMPORTING iv_top            TYPE any OPTIONAL
                    iv_left           TYPE any OPTIONAL
          CHANGING  cv_shift          TYPE any ,
      popup_printtitles
          IMPORTING iv_sheetname      TYPE any
                    iv_rows           TYPE any OPTIONAL
                    iv_cols           TYPE any OPTIONAL
          CHANGING  cv_comp_id        TYPE any ,
      popup_grid_fldseq
          CHANGING  cs_form_prop      TYPE lcl_form=&gt;ty_s_properties ,
      popup_grid_fldprop
          CHANGING  cs_form_prop      TYPE lcl_form=&gt;ty_s_properties ,
      popup_vbs_code_editor
          CHANGING  cv_vbs_code       TYPE any
                    cv_cancel         TYPE flag OPTIONAL ,
      popup_vbs_tables
          CHANGING  cv_vbs_tables     TYPE any
                    cv_cancel         TYPE flag OPTIONAL .

    CLASS-METHODS:
      class_constructor ,
      popup_postprocessing_info ,
      popup_to_confirm
          IMPORTING iv_text           TYPE any
                    iv_text_button_1  TYPE any OPTIONAL
                    iv_icon_button_1  TYPE any OPTIONAL
                    iv_text_button_2  TYPE any OPTIONAL
                    iv_icon_button_2  TYPE any OPTIONAL
          RETURNING value(rv_answer_okey) TYPE flag ,
      popup_to_get_value
          IMPORTING iv_title          TYPE any OPTIONAL
                    iv_tabname        TYPE any
                    iv_fieldname      TYPE any
                    iv_fieldtext      TYPE any OPTIONAL
                    iv_obligatory     TYPE any OPTIONAL
                    iv_2tabname       TYPE any OPTIONAL
                    iv_2fieldname     TYPE any OPTIONAL
                    iv_2fieldtext     TYPE any OPTIONAL
                    iv_2obligatory    TYPE any OPTIONAL
                    iv_3tabname       TYPE any OPTIONAL
                    iv_3fieldname     TYPE any OPTIONAL
                    iv_3fieldtext     TYPE any OPTIONAL
                    iv_3obligatory    TYPE any OPTIONAL
                    iv_4tabname       TYPE any OPTIONAL
                    iv_4fieldname     TYPE any OPTIONAL
                    iv_4fieldtext     TYPE any OPTIONAL
                    iv_4obligatory    TYPE any OPTIONAL
          EXPORTING ev_cancel         TYPE any
          CHANGING  cv_value          TYPE any
                    cv_2value         TYPE any OPTIONAL
                    cv_3value         TYPE any OPTIONAL
                    cv_4value         TYPE any OPTIONAL ,
      popup_to_decide
          IMPORTING iv_title          TYPE any OPTIONAL
                    iv_text           TYPE any OPTIONAL
                    iv_text2          TYPE any OPTIONAL
                    iv_text_rb1       TYPE any
                    iv_text_rb2       TYPE any OPTIONAL
                    iv_text_rb3       TYPE any OPTIONAL
                    iv_text_rb4       TYPE any OPTIONAL
                    iv_text_rb5       TYPE any OPTIONAL
                    iv_text_rb6       TYPE any OPTIONAL
                    iv_text_rb7       TYPE any OPTIONAL
                    iv_text_rb8       TYPE any OPTIONAL
          EXPORTING ev_cancel         TYPE flag
          CHANGING  cv_selected_rb    TYPE any ,
      popup_sheetprotection_static
          EXPORTING ev_cancel         TYPE any
          CHANGING  cs_sheetprotection TYPE ty_s_sheetprotection ,
      popup_sheetprotection_password
          EXPORTING ev_cancel         TYPE any
          CHANGING  cv_password       TYPE any ,
      popup_file_select
          IMPORTING iv_title          TYPE any OPTIONAL
          RETURNING value(rv_fullpath) TYPE string ,
      popup_formname_f4
          CHANGING  cv_formname       TYPE any .

    CLASS-DATA:
      popup_ctxtfield_id      TYPE snodetext-id ,
      popup_ctxtfield_cancel  TYPE flag .
    CONSTANTS:
      BEGIN OF c_action ,
        edit              TYPE syucomm VALUE &apos;EDIT&apos;   ,
        create            TYPE syucomm VALUE &apos;CREATE&apos; ,
        crea_t            TYPE syucomm VALUE &apos;CREA_T&apos; ,
        copy              TYPE syucomm VALUE &apos;COPY&apos;   ,
        delete            TYPE syucomm VALUE &apos;DELETE&apos; ,
        export            TYPE syucomm VALUE &apos;EXPORT&apos; ,
        import            TYPE syucomm VALUE &apos;IMPORT&apos; ,
        help              TYPE syucomm VALUE &apos;HELP&apos;   ,
        preset            TYPE syucomm VALUE &apos;PRESET&apos; ,
        prese2            TYPE syucomm VALUE &apos;PRESE2&apos; ,
      END   OF c_action .

  PRIVATE SECTION.
    DATA:
      r_cont_splitter1    TYPE REF TO cl_gui_splitter_container ,
      r_cont_splitter2    TYPE REF TO cl_gui_splitter_container ,
      r_cont_4splitter2   TYPE REF TO cl_gui_container ,
      r_cont_root         TYPE REF TO cl_gui_docking_container ,
      r_cont_4formtree    TYPE REF TO cl_gui_container ,
      r_cont_4protab      TYPE REF TO cl_gui_container ,
      r_cont_4template    TYPE REF TO cl_gui_container ,
      r_appltoolbar       TYPE REF TO lcl_wb_appltoolbar ,
      r_excelole          TYPE REF TO lcl_wb_ole ,
      r_formtree          TYPE REF TO lcl_wb_formtree ,
      r_protab            TYPE REF TO lcl_wb_protab ,
      r_formtemplate      TYPE REF TO lcl_formtemplate .
    DATA:
      v_oletempl_viewmode TYPE flag ,
      v_initialized       TYPE flag ,
      v_mass_processing   TYPE flag ,
      v_extension         TYPE ty_char10 .
    METHODS:
      init_containers ,
      init_appltoolbar ,
      init_excelole ,
      init_formtree ,
      init_protab ,
      tech_template_sync
          IMPORTING iv_new_extension  TYPE ty_char10 OPTIONAL
          RETURNING value(rv_okey)    TYPE flag ,
      tech_fcode_dispatch
          IMPORTING iv_fcode          TYPE any
                    iv_form_id        TYPE snode-id OPTIONAL ,
      tech_presets_dt_save ,
      tech_presets_rt_save ,
      hndl_fcode_appl
          FOR EVENT evnt_fcode OF lcl_wb_appltoolbar
          IMPORTING ev_fcode ,
      hndl_fcode_comp
          FOR EVENT evnt_fcode OF lcl_wb_formtree
          IMPORTING ev_fcode ev_form_id ,
      hndl_fcode_ptab
          FOR EVENT evnt_fcode OF lcl_wb_protab
          IMPORTING ev_fcode ev_form_id ,
      hndl_fcode_tmpl
          FOR EVENT evnt_fcode OF lcl_wb_ole
          IMPORTING ev_fcode ,
      hndl_comp_move
          FOR EVENT evnt_comp_move OF lcl_wb_formtree
          IMPORTING sender ev_drag_drop_object ,
      actn_appl_save ,
      actn_appl_save_as ,
      actn_appl_activate ,
      actn_appl_actualize ,
      actn_appl_viewmode ,
      actn_appl_help
          IMPORTING iv_url TYPE any ,
      actn_appl_presets ,
      actn_appl_presets_designtime ,
      actn_appl_presets_runtime ,
      actn_appl_close_template ,
      actn_appl_mass_processing ,
      actn_comp_selected
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_comp_add
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_child          TYPE flag OPTIONAL
                    iv_sibling        TYPE flag OPTIONAL ,
      actn_comp_clone
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_comp_clone_mass ,
      actn_comp_delete
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_comp_delete_mass ,
      actn_comp_tbshift_mass ,
      actn_comp_move_sibling_up
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_comp_move_sibling_down
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_compname_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_formdescr_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_format_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_context_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_cb_loop_from_to
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_cb_relpath_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_relpath_mn     TYPE flag OPTIONAL , &quot; --&gt;&gt; manual
      actn_cb_relpath_delete
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_cb_val_vld_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_attrpath_f4    TYPE flag OPTIONAL   &quot; --&gt;&gt; search-help
                    iv_attrpath_mn    TYPE flag OPTIONAL   &quot; --&gt;&gt; manual
                    iv_attrpath_del   TYPE flag OPTIONAL
                    iv_for1_template  TYPE flag OPTIONAL
                    iv_for1_relpath   TYPE flag OPTIONAL
                    iv_for1_dataset_id  TYPE flag OPTIONAL
                    iv_for1_dataset_fld TYPE flag OPTIONAL
                    iv_for2_template  TYPE flag OPTIONAL
                    iv_for2_relpath   TYPE flag OPTIONAL ,
      actn_cb_apr_relpath_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_relpath_f4     TYPE flag OPTIONAL   &quot; --&gt;&gt; search-help
                    iv_relpath_mn     TYPE flag OPTIONAL , &quot; --&gt;&gt; manual
      actn_cb_apr_relpath_delete
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_cb_cellrng_relpth_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_relpath_f4     TYPE flag OPTIONAL   &quot; --&gt;&gt; search-help
                    iv_relpath_mn     TYPE flag OPTIONAL , &quot; --&gt;&gt; manual
      actn_cb_cellrng_relpth_delete
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_cb_val_relpath_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_relpath_f4     TYPE flag OPTIONAL &quot; --&gt;&gt; search-help
                    iv_relpath_mn     TYPE flag OPTIONAL &quot; --&gt;&gt; manual
                    iv_charpos        TYPE flag OPTIONAL
                    iv_convertion     TYPE flag OPTIONAL
                    iv_sub            TYPE flag OPTIONAL ,
      actn_cb_val_relpath_delete
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_tb_val_layout_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_valformula     TYPE flag OPTIONAL
                    iv_valmatrix      TYPE flag OPTIONAL ,
      actn_tb_sheetname_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_tb_sheetname_delete
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_tb_sheetstate
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_tb_sheetprotection
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_change         TYPE flag OPTIONAL
                    iv_delete         TYPE flag OPTIONAL ,
      actn_tb_area_delete
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_tb_area_setcells
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_tb_area_settextmark
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_tb_direction_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_tb_colrow_prop_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_columns        TYPE flag OPTIONAL
                    iv_rows           TYPE flag OPTIONAL ,
      actn_tb_colrow_group_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_clp            TYPE flag OPTIONAL
                    iv_columns        TYPE flag OPTIONAL
                    iv_rows           TYPE flag OPTIONAL ,
      actn_tb_drwstatflag_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_tb_drwstatname_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_change         TYPE flag OPTIONAL
                    iv_delete         TYPE flag OPTIONAL ,
      actn_tb_drwsize_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_fit            TYPE flag OPTIONAL
                    iv_context        TYPE flag OPTIONAL
                    iv_h_f4           TYPE flag OPTIONAL
                    iv_h_mn           TYPE flag OPTIONAL
                    iv_w_f4           TYPE flag OPTIONAL
                    iv_w_mn           TYPE flag OPTIONAL ,
      actn_tb_pgbreak
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_top            TYPE flag OPTIONAL
                    iv_left           TYPE flag OPTIONAL
                    iv_nopgbreak      TYPE flag DEFAULT space ,
      actn_tb_printtitles
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_cols           TYPE flag OPTIONAL
                    iv_rows           TYPE flag OPTIONAL
                    iv_change         TYPE flag OPTIONAL
                    iv_delete         TYPE flag OPTIONAL ,
      actn_tb_mergecells_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_tb_autofitmerged_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_rows           TYPE flag DEFAULT space
                    iv_cols           TYPE flag DEFAULT space ,
      actn_tb_respattern_place
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_before         TYPE flag DEFAULT space
                    iv_after          TYPE flag DEFAULT space ,
      actn_draft_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id ,
      actn_tree_layout_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_rotate         TYPE flag OPTIONAL
                    iv_stru           TYPE flag OPTIONAL
                    iv_stru_exp_coll  TYPE flag OPTIONAL
                    iv_head           TYPE flag OPTIONAL
                    iv_col_hier       TYPE flag OPTIONAL
                    iv_col_hier_after TYPE flag OPTIONAL
                    iv_col_hier_shift TYPE flag OPTIONAL
                    iv_col_othr       TYPE flag OPTIONAL
                    iv_col_othr_width TYPE flag OPTIONAL
                    iv_col_othr_allowformulas
                                      TYPE flag OPTIONAL ,
      actn_grid_layout_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_rotate         TYPE flag OPTIONAL
                    iv_head           TYPE flag OPTIONAL
                    iv_head_titles    TYPE flag OPTIONAL
                    iv_fldseq         TYPE flag OPTIONAL
                    iv_fldprop        TYPE flag OPTIONAL
                    iv_allowformulas  TYPE flag OPTIONAL ,
      actn_chart_change
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_model_change   TYPE flag OPTIONAL
                    iv_model_delete   TYPE flag OPTIONAL
                    iv_title          TYPE flag OPTIONAL
                    iv_title_catax    TYPE flag OPTIONAL
                    iv_title_valax    TYPE flag OPTIONAL
                    iv_title_series   TYPE flag OPTIONAL
                    iv_dtset_change   TYPE flag OPTIONAL
                    iv_dtset_delete   TYPE flag OPTIONAL
                    iv_dtset_series   TYPE flag OPTIONAL ,
      actn_postproccessing
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_vbs_code       TYPE flag OPTIONAL
                    iv_vbs_tables     TYPE flag OPTIONAL ,
      actn_root_others
          IMPORTING iv_alvtree_nkey   TYPE lvc_nkey
                    iv_form_id        TYPE snode-id
                    iv_definednames_dont_remove TYPE flag OPTIONAL .

ENDCLASS .                    &quot;lcl_workbench DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_workbench IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_workbench IMPLEMENTATION .
  METHOD class_constructor .
    tech_presets_dt_load( ) .
    tech_presets_rt_load( ) .
  ENDMETHOD .                    &quot;class_constructor
  METHOD constructor .
    super-&gt;constructor( ) .

    IF v_gui_available IS INITIAL .
      MESSAGE e000(lp)
         WITH v_text-t125       &quot;  text: Process is flowing in OFF-line mode
      RAISING process_terminated .
    ENDIF .

    CASE iv_action .
      WHEN lcl_workbench=&gt;c_action-edit   . action_edit(   EXPORTING iv_formname = iv_formname  EXCEPTIONS OTHERS = 1 ) .
      WHEN lcl_workbench=&gt;c_action-create . action_create( EXPORTING iv_formname = iv_formname  EXCEPTIONS OTHERS = 1 ) .
      WHEN lcl_workbench=&gt;c_action-crea_t . action_create( EXPORTING iv_formname = iv_formname  iv_with_template = abap_on  EXCEPTIONS OTHERS = 1 ) .
      WHEN lcl_workbench=&gt;c_action-copy   . action_copy(   EXPORTING iv_formname = iv_formname  EXCEPTIONS OTHERS = 1 ) .
      WHEN lcl_workbench=&gt;c_action-delete . action_delete( EXPORTING iv_formname = iv_formname  EXCEPTIONS OTHERS = 1 ) .
      WHEN lcl_workbench=&gt;c_action-export . action_export( EXPORTING iv_formname = iv_formname  EXCEPTIONS OTHERS = 1 ) .
      WHEN lcl_workbench=&gt;c_action-import . action_import( EXPORTING iv_formname = iv_formname  EXCEPTIONS OTHERS = 1 ) .
      WHEN lcl_workbench=&gt;c_action-help   . actn_appl_help( iv_url = v_text-url1 ) .
      WHEN lcl_workbench=&gt;c_action-preset . actn_appl_presets( ) .
      WHEN OTHERS .
        MESSAGE e000(lp)
           WITH v_text-t104     &quot;text: Function has not been processed
        RAISING process_terminated .
    ENDCASE .
    CHECK sy-subrc NE 0 .

    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
       WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
    RAISING process_terminated .

  ENDMETHOD .                    &quot;constructor
  METHOD free .
    tech_presets_dt_save( ) .

    IF r_appltoolbar IS BOUND .
      r_appltoolbar-&gt;free( ) .
      FREE r_appltoolbar .
    ENDIF .
    IF r_excelole IS BOUND .
      r_excelole-&gt;free( ) .
      FREE r_excelole .
    ENDIF .
    IF r_formtree IS BOUND .
      r_formtree-&gt;free( ) .
      FREE r_formtree .
    ENDIF .
    IF r_protab IS BOUND .
      r_protab-&gt;free( ) .
      FREE r_protab .
    ENDIF .
  ENDMETHOD .                    &quot;free
  METHOD action_edit .
    IF iv_formname IS INITIAL .
      MESSAGE s000(lp) WITH v_text-t013     &quot; text: Specify a name of the form
      RAISING process_terminated .

    ELSEIF lcl_form=&gt;get_devclass( iv_formname ) IS INITIAL .
      MESSAGE i000(lp)
         WITH v_text-t016                   &quot; text: Form is not found
              &apos;:&apos; iv_formname
      RAISING process_terminated .
    ENDIF .

    CREATE OBJECT r_formtemplate
      EXPORTING
        iv_formname   = iv_formname
        iv_create_new = space
        iv_editor     = abap_on
      EXCEPTIONS
        OTHERS        = 1.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      RAISE process_terminated .
    ENDIF .

  ENDMETHOD .                    &quot;action_edit
  METHOD action_create .
    IF iv_formname IS INITIAL .
      MESSAGE s000(lp) WITH v_text-t013     &quot; text: Specify a name of the form
      RAISING process_terminated .

    ELSEIF lcl_form=&gt;get_devclass( iv_formname ) IS NOT INITIAL .
      MESSAGE i000(lp)
         WITH v_text-t014                   &quot; text: A form already exists with the name
              iv_formname
      RAISING process_terminated .
    ENDIF .

    DATA lv_template_path TYPE string .
    IF iv_with_template IS NOT INITIAL .
      lv_template_path = popup_file_select( v_text-t209 ) . &quot; text: Upload XLSX-template from frontend
      IF lv_template_path IS INITIAL .
        MESSAGE s000(lp) WITH v_text-t100   &quot; text: Operation was terminated by the user
        RAISING process_terminated .
      ENDIF .
    ENDIF .

    CREATE OBJECT r_formtemplate
      EXPORTING
        iv_formname      = iv_formname
        iv_create_new    = abap_on
        iv_editor        = abap_on
        iv_template_path = lv_template_path
      EXCEPTIONS
        OTHERS           = 1.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      RAISE process_terminated .
    ENDIF .

    r_formtemplate-&gt;autostructure_create( ) .
  ENDMETHOD .                    &quot;action_create
  METHOD action_copy .
    IF iv_formname IS INITIAL .
      MESSAGE s000(lp) WITH v_text-t013     &quot; text: Specify a name of the form
      RAISING process_terminated .

    ELSEIF lcl_form=&gt;get_devclass( iv_formname ) IS INITIAL .
      MESSAGE i000(lp)
         WITH v_text-t016                   &quot; text: Form is not found
              &apos;:&apos; iv_formname
      RAISING process_terminated .
    ENDIF .


    DATA:
      ls_oldkey           TYPE wwwdatatab ,
      ls_newkey           TYPE wwwdatatab ,
      lv_formname_new     TYPE ty_char30 ,
      lv_cancel           TYPE flag .

    popup_to_get_value(
        EXPORTING iv_title      = v_text-t166  &quot; text: Save as...
                  iv_tabname    = &apos;MASSD_F4_ATT&apos;
                  iv_fieldname  = &apos;TABNAME&apos;
                  iv_fieldtext  = v_text-t167  &quot; text: New form name
                  iv_obligatory = abap_on
        IMPORTING ev_cancel     = lv_cancel
        CHANGING  cv_value      = lv_formname_new ) .

    CHECK lv_cancel IS INITIAL .

    IF lv_formname_new EQ iv_formname .
      MESSAGE i000(lp) WITH v_text-t168   &quot; text: Specify another form name
      RAISING process_terminated .
    ENDIF .

    IF lcl_form=&gt;get_devclass( lv_formname_new ) IS NOT INITIAL .
      MESSAGE i000(lp)
         WITH v_text-t014                   &quot; text: A form already exists with the name
              lv_formname_new
      RAISING process_terminated .
    ENDIF .

    ls_oldkey-relid = lcl_form=&gt;c_relid .
    ls_oldkey-objid = lcl_form=&gt;conv_formname_ei( iv_formname ) .

    ls_newkey-relid = lcl_form=&gt;c_relid .
    ls_newkey-objid = lcl_form=&gt;conv_formname_ei( lv_formname_new ) .

    CALL FUNCTION &apos;COPY_WEB_OBJECT&apos;
      EXPORTING
        oldkey = ls_oldkey
        newkey = ls_newkey.

*   return new form name to parameter of initial screen
    new_formname_to_selscreen( lv_formname_new ) .

  ENDMETHOD .                    &quot;action_copy
  METHOD action_delete .
    IF iv_formname IS INITIAL .
      MESSAGE s000(lp) WITH v_text-t013     &quot; text: Specify a name of the form
      RAISING process_terminated .

    ELSEIF lcl_form=&gt;get_devclass( iv_formname ) IS INITIAL .
      MESSAGE i000(lp)
         WITH v_text-t016                   &quot; text: Form is not found
              &apos;:&apos; iv_formname
      RAISING process_terminated .
    ENDIF .

    DATA ls_key   TYPE wwwdatatab .
    DATA lv_text  TYPE ty_char100 .

    IF abap_on EQ lcl_form=&gt;enq_check( iv_formname ) .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
      RAISING process_terminated .
    ENDIF .

    CONCATENATE v_text-t101                 &quot; text: Delete form
                &apos;?&apos; iv_formname
           INTO lv_text SEPARATED BY space .
    CHECK abap_on EQ popup_to_confirm( iv_text = lv_text ) .

    ls_key-relid = lcl_form=&gt;c_relid .
    ls_key-objid = lcl_form=&gt;conv_formname_ei( iv_formname ) .

    CALL FUNCTION &apos;DELETE_WEB_OBJECT&apos;
      EXPORTING
        key              = ls_key
      EXCEPTIONS
        object_not_found = 1
        OTHERS           = 2.
    IF sy-subrc EQ 0 .
      MESSAGE i000(lp)
         WITH v_text-t017                   &quot; text: Form
              iv_formname
              v_text-t102 .                 &quot; text: was deleted
    ELSE .
      MESSAGE i000(lp)
         WITH v_text-t016                   &quot; text: Form is not found
              &apos;:&apos; iv_formname
      RAISING process_terminated .
    ENDIF .

  ENDMETHOD .                    &quot;action_delete
  METHOD action_export .
    IF iv_formname IS INITIAL .
      MESSAGE s000(lp) WITH v_text-t013     &quot; text: Specify a name of the form
      RAISING process_terminated .

    ELSEIF lcl_form=&gt;get_devclass( iv_formname ) IS INITIAL .
      MESSAGE i000(lp)
         WITH v_text-t016                   &quot; text: Form is not found
              &apos;:&apos; iv_formname
      RAISING process_terminated .
    ENDIF .

    DATA:
      ls_key            TYPE wwwdatatab ,
      lt_mime           TYPE STANDARD TABLE OF w3mime ,
      lv_fullpath       TYPE string ,
      lv_directory      TYPE string ,
      lv_filename       TYPE string ,
      lv_fileseparator  TYPE ty_char1 ,
      lv_filesize       TYPE ty_char10 ,
      lv_filesize_i     TYPE i .

*   get full path for saving file
    cl_gui_frontend_services=&gt;directory_browse(
        CHANGING selected_folder = lv_directory
        EXCEPTIONS OTHERS        = 4 ) .
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
      RAISING process_terminated .
    ENDIF .
    CHECK lv_directory IS NOT INITIAL .

    cl_gui_frontend_services=&gt;get_file_separator(
        CHANGING file_separator = lv_fileseparator
        EXCEPTIONS OTHERS       = 4 ) .
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
      RAISING process_terminated .
    ENDIF .

    CONCATENATE iv_formname c_extension_xlsx
           INTO lv_filename .

    CONCATENATE lv_directory
                lv_fileseparator
                lv_filename
           INTO lv_fullpath .

*   get content
    ls_key-relid = lcl_form=&gt;c_relid .
    ls_key-objid = lcl_form=&gt;conv_formname_ei( iv_formname ) .

    CALL FUNCTION &apos;WWWDATA_IMPORT&apos;
      EXPORTING
        key    = ls_key
      TABLES
        mime   = lt_mime
      EXCEPTIONS
        OTHERS = 1.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
      RAISING process_terminated .
    ENDIF .

    CALL FUNCTION &apos;WWWPARAMS_READ&apos;
      EXPORTING
        relid = ls_key-relid
        objid = ls_key-objid
        name  = &apos;filesize&apos;
      IMPORTING
        value = lv_filesize.
    CHECK lv_filesize GT 0 .
    lv_filesize_i = lv_filesize .

*   save content as file with specified full path
    cl_gui_frontend_services=&gt;gui_download(
        EXPORTING   filename      = lv_fullpath
                    filetype      = &apos;BIN&apos;
                    bin_filesize  = lv_filesize_i
        CHANGING    data_tab      = lt_mime
        EXCEPTIONS  OTHERS        = 24 ) .
    IF sy-subrc EQ 0 .
      MESSAGE i000(lp)
         WITH v_text-t256       &quot; text: File
              lv_filename
              v_text-t257       &quot; text: is saved in the directory
              lv_directory .
    ELSE .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
      RAISING process_terminated .
    ENDIF .

  ENDMETHOD .                    &quot;action_export
  METHOD action_import .

    DATA:
      ls_key            TYPE wwwdatatab ,
      lv_formname       TYPE massd_f4_att-tabname ,
      lv_formdescr      TYPE wwwdatatab-text .
    DATA:
      lv_cancel         TYPE flag .

*   popup to get Form name and Description
    popup_to_get_value(
        EXPORTING iv_title       = v_text-t013     &quot; text: Specify a name of the form
                  iv_tabname     = &apos;MASSD_F4_ATT&apos;
                  iv_fieldname   = &apos;TABNAME&apos;
                  iv_fieldtext   = v_text-t167     &quot; text: New form name
                  iv_obligatory  = abap_on
                  iv_2tabname    = &apos;WWWDATATAB&apos;
                  iv_2fieldname  = &apos;TEXT&apos;
                  iv_2fieldtext  = v_text-t058     &quot; text: Description
                  iv_2obligatory = space
        IMPORTING ev_cancel      = lv_cancel
        CHANGING  cv_value       = lv_formname
                  cv_2value      = lv_formdescr ) .
    CHECK lv_cancel IS INITIAL .

*   check existence
    IF lcl_form=&gt;get_devclass( lv_formname ) IS NOT INITIAL .
      MESSAGE i000(lp)
         WITH v_text-t014                   &quot; text: A form already exists with the name
              lv_formname
      RAISING process_terminated .
    ENDIF .

*   lock an object
    IF lcl_form=&gt;enq_lock( iv_formname = lv_formname ) IS NOT INITIAL .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
      RAISING process_terminated .
    ENDIF .

*   upload file
    ls_key-relid = lcl_form=&gt;c_relid .
    ls_key-objid = lcl_form=&gt;conv_formname_ei( lv_formname ) .
    ls_key-text  = lv_formdescr .

    CALL FUNCTION &apos;UPLOAD_WEB_OBJECT&apos;
      EXPORTING
        key = ls_key.

*   unlock the object
    lcl_form=&gt;enq_unlock( iv_formname = lv_formname ) .

*   return new form name to parameter of initial screen
    new_formname_to_selscreen( lv_formname ) .

  ENDMETHOD .                    &quot;action_import
  METHOD new_formname_to_selscreen .
*   return new form name to parameter of initial screen
    DATA:
      ls_callstack      TYPE abap_callstack_line ,
      lt_callstack      TYPE abap_callstack ,
      lv_form_parname   TYPE string .
    FIELD-SYMBOLS:
      &lt;lv_form&gt;         TYPE ANY .

    CALL FUNCTION &apos;SYSTEM_CALLSTACK&apos;
      IMPORTING
        callstack = lt_callstack[].

    READ TABLE lt_callstack INTO ls_callstack
      WITH KEY blocktype   = &apos;MODULE (PAI)&apos;
               blockname   = &apos;%_END_OF_SCREEN&apos;
               flag_system = &apos;X&apos; .
    CHECK sy-subrc EQ 0 .

    CONCATENATE `(` ls_callstack-mainprogram `)PV_FORM` INTO lv_form_parname .

    ASSIGN (lv_form_parname) TO &lt;lv_form&gt; .
    CHECK &lt;lv_form&gt; IS ASSIGNED .

    CATCH SYSTEM-EXCEPTIONS OTHERS = 0 .
      &lt;lv_form&gt; = iv_formname .
    ENDCATCH .
  ENDMETHOD .                    &quot;new_formname_to_selscreen
  METHOD pbo .
    CHECK v_initialized IS INITIAL .
    v_initialized = abap_on .

    init_containers( ) .
    init_appltoolbar( ) .
    init_excelole( ) .
    init_formtree( ) .
    init_protab( ) .
  ENDMETHOD .                    &quot;pbo
  METHOD init_containers .

    CREATE OBJECT r_cont_root
      EXPORTING
        lifetime  = cntl_lifetime_dynpro
        extension = cl_gui_docking_container=&gt;ws_maximizebox
      EXCEPTIONS
        OTHERS    = 6.

    CREATE OBJECT r_cont_splitter1
      EXPORTING
        parent  = r_cont_root
        rows    = 1
        columns = 2
      EXCEPTIONS
        OTHERS  = 1.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      EXIT .
    ENDIF .
    r_cont_splitter1-&gt;set_row_mode(
            EXPORTING mode = cl_gui_splitter_container=&gt;mode_absolute ) .
    r_cont_splitter1-&gt;set_column_width( id = 1 width = s_presets_dt-leftframe_width ) .

    r_cont_4splitter2 = r_cont_splitter1-&gt;get_container( row = 1   column = 1 ) .
    r_cont_4template  = r_cont_splitter1-&gt;get_container( row = 1   column = 2 ) .

    CREATE OBJECT r_cont_splitter2
      EXPORTING
        parent  = r_cont_4splitter2
        rows    = 2
        columns = 1
      EXCEPTIONS
        OTHERS  = 1.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      EXIT .
    ENDIF .

    r_cont_4formtree = r_cont_splitter2-&gt;get_container( row = 1   column = 1 ) .
    r_cont_4protab   = r_cont_splitter2-&gt;get_container( row = 2   column = 1 ) .
  ENDMETHOD .                    &quot;init_containers
  METHOD init_appltoolbar .
    CREATE OBJECT r_appltoolbar
      EXPORTING
        iv_mass_processing = v_mass_processing
      EXCEPTIONS
        OTHERS             = 1.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      EXIT .
    ENDIF .
    SET HANDLER hndl_fcode_appl FOR r_appltoolbar .
  ENDMETHOD .                    &quot;init_appltoolbar
  METHOD init_excelole .
    DATA lv_document_rawdata TYPE xstring .
    lv_document_rawdata = r_formtemplate-&gt;r_exceltemplate-&gt;rawdata_get( ) .

    CREATE OBJECT r_excelole
      EXPORTING
        ir_container        = r_cont_4template
        iv_document_rawdata = lv_document_rawdata
        iv_viewmode         = v_oletempl_viewmode &quot; --&gt; inplace/ flow
      EXCEPTIONS
        OTHERS              = 1.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      EXIT .
    ENDIF .

    SET HANDLER hndl_fcode_tmpl FOR r_excelole .

    CALL FUNCTION &apos;FLUSH&apos;
      EXCEPTIONS
        OTHERS = 0.
    cl_gui_cfw=&gt;dispatch( ) .

  ENDMETHOD .                    &quot;init_excelole
  METHOD init_formtree .
    CREATE OBJECT r_formtree
      EXPORTING
        ir_container       = r_cont_4formtree
        ir_formtemplate    = r_formtemplate
        iv_mass_processing = v_mass_processing
      EXCEPTIONS
        OTHERS             = 1.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      EXIT .
    ENDIF .

    SET HANDLER hndl_fcode_comp FOR r_formtree .
    SET HANDLER hndl_comp_move  FOR r_formtree .
  ENDMETHOD .                    &quot;init_formtree
  METHOD init_protab .
    CREATE OBJECT r_protab
      EXPORTING
        ir_container = r_cont_4protab
      EXCEPTIONS
        OTHERS       = 1.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      EXIT .
    ENDIF .

    SET HANDLER hndl_fcode_ptab FOR r_protab .

    r_protab-&gt;redraw( ir_formtemplate = r_formtemplate
                      iv_form_id = r_formtemplate-&gt;v_root_id ) .
  ENDMETHOD .                    &quot;init_protab
  METHOD tech_template_sync .
    msg_init( ) .

    r_excelole-&gt;application_availability_check( ) .
    msg_add( r_excelole ) .
    CHECK v_retcode NE c_retcode-error .

    DATA:
      lt_document_table   TYPE tsfmime ,
      lv_document_size    TYPE i ,
      lv_extension        TYPE ty_char10 .

    IF r_formtemplate-&gt;r_exceltemplate IS BOUND .
      CASE iv_new_extension .
        WHEN space .  lv_extension = r_formtemplate-&gt;r_exceltemplate-&gt;v_extension .
        WHEN OTHERS.  lv_extension = iv_new_extension .
      ENDCASE .
    ENDIF .
    IF lv_extension IS INITIAL .
      lv_extension = c_extension_xlsx .
    ENDIF .

    r_excelole-&gt;rawdata_get_as_table(
        EXPORTING iv_extension      = lv_extension
        IMPORTING et_document_table = lt_document_table
                  ev_document_size  = lv_document_size ) .
    IF lt_document_table[] IS INITIAL
    OR lv_document_size IS INITIAL .
      MESSAGE e000(lp) WITH v_text-t173 INTO v_dummy .  &quot; text: an actual data were not obtained from Excel !
      msg_syst_catch( ) .
      v_retcode = c_retcode-error .

    ELSE .
      r_formtemplate-&gt;set_template(
          EXPORTING it_document_table = lt_document_table
                    iv_document_size  = lv_document_size ) .
      IF r_formtemplate-&gt;v_retcode EQ c_retcode-error .
        MESSAGE e000(lp) WITH v_text-t336               &quot; text: Error while reading template file
                         INTO v_dummy .
        msg_syst_catch( ) .

        MESSAGE e000(lp) WITH v_text-t332               &quot; text: The most probable reason is
                              v_text-t333               &quot; text: Your current SAP GUI version
                              v_text-t334               &quot; text: does not work properly with MS Excel.
                              v_text-t335               &quot; text: Try to update SAP GUI to latest version .
                         INTO v_dummy .
        msg_syst_catch( ) .
        v_retcode = c_retcode-error .
      ENDIF .
    ENDIF .

    CHECK v_retcode NE c_retcode-error .
    r_formtemplate-&gt;check_subtree( ) .

  ENDMETHOD .                    &quot;tech_template_sync
  METHOD tech_fcode_dispatch .

*======================================================================
*   preliminary works
*======================================================================
    msg_init( ) .

    IF  iv_form_id IS SUPPLIED
    AND iv_form_id IS NOT INITIAL .
      DATA ls_links TYPE lcl_wb_formtree=&gt;ty_s_links .
      READ TABLE r_formtree-&gt;t_links INTO ls_links WITH KEY form_id = iv_form_id .
      CHECK sy-subrc EQ 0 .
    ENDIF .

    CASE iv_fcode .
      WHEN lcl_wb_formtree=&gt;c_fcode-comp_selected .
        r_excelole-&gt;selection_get( ) .
      WHEN lcl_wb_formtree=&gt;c_fcode-comp_move_sibling_up
        OR lcl_wb_formtree=&gt;c_fcode-comp_move_sibling_down .
      WHEN OTHERS .
        tech_template_sync( ) .
        CHECK msg_check_errors_and_show( me ) IS INITIAL .
    ENDCASE .

*======================================================================
*   command processing
*======================================================================
    DEFINE mk_callmethod .
      call method me-&gt;&amp;1
        exporting
          iv_alvtree_nkey = ls_links-alvtree_nkey
          iv_form_id      = ls_links-form_id.
    END-OF-DEFINITION .

    DEFINE mk_callmeth_2 .
      call method me-&gt;&amp;1
        exporting
          iv_alvtree_nkey = ls_links-alvtree_nkey
          iv_form_id      = ls_links-form_id
          &amp;2              = abap_on.
    END-OF-DEFINITION .

    CASE iv_fcode .
*     -----------&gt;&gt; application
      WHEN lcl_wb_appltoolbar=&gt;c_fcode-appl_save .            actn_appl_save( ) .
      WHEN lcl_wb_appltoolbar=&gt;c_fcode-appl_save_as .         actn_appl_save_as( ) .
      WHEN lcl_wb_appltoolbar=&gt;c_fcode-appl_activate .        actn_appl_activate( ) .
      WHEN lcl_wb_appltoolbar=&gt;c_fcode-appl_actualize .       actn_appl_actualize( ) .
      WHEN lcl_wb_appltoolbar=&gt;c_fcode-appl_viewmode .        actn_appl_viewmode( ) .
      WHEN lcl_wb_appltoolbar=&gt;c_fcode-appl_help .            actn_appl_help( iv_url = v_text-url2 ) .
      WHEN lcl_wb_appltoolbar=&gt;c_fcode-appl_presets_designtime . actn_appl_presets_designtime( ) .
      WHEN lcl_wb_appltoolbar=&gt;c_fcode-appl_presets_runtime . actn_appl_presets_runtime( ) .
      WHEN lcl_wb_appltoolbar=&gt;c_fcode-appl_mass_processing . actn_appl_mass_processing( ) .

*     -----------&gt;&gt; ole-template
      WHEN lcl_wb_ole=&gt;c_fcode-close_template .               actn_appl_close_template( ) .

*     -----------&gt;&gt; components tree
      WHEN lcl_wb_formtree=&gt;c_fcode-comp_selected .           mk_callmethod: actn_comp_selected .
      WHEN lcl_wb_formtree=&gt;c_fcode-comp_add_child .          mk_callmeth_2: actn_comp_add  iv_child .
*        actn_comp_add(
*                    iv_alvtree_nkey = ls_links-alvtree_nkey
*                    iv_form_id      = ls_links-form_id
*                    iv_child        = abap_on ) .
      WHEN lcl_wb_formtree=&gt;c_fcode-comp_add_sibling .        mk_callmeth_2: actn_comp_add  iv_sibling .
      WHEN lcl_wb_formtree=&gt;c_fcode-comp_clone .              mk_callmethod: actn_comp_clone .
      WHEN lcl_wb_formtree=&gt;c_fcode-comp_clone_mass .         actn_comp_clone_mass( ) .
      WHEN lcl_wb_formtree=&gt;c_fcode-comp_delete .             mk_callmethod: actn_comp_delete .
      WHEN lcl_wb_formtree=&gt;c_fcode-comp_delete_mass .        actn_comp_delete_mass( ) .
      WHEN lcl_wb_formtree=&gt;c_fcode-comp_move_sibling_up .    mk_callmethod: actn_comp_move_sibling_up .
      WHEN lcl_wb_formtree=&gt;c_fcode-comp_move_sibling_down .  mk_callmethod: actn_comp_move_sibling_down .
      WHEN lcl_wb_formtree=&gt;c_fcode-comp_tbshift_mass .       actn_comp_tbshift_mass( ) .

*     -----------&gt;&gt; properties tab
      WHEN lcl_wb_protab=&gt;c_fcode-formdescr_change .          mk_callmethod: actn_formdescr_change .
      WHEN lcl_wb_protab=&gt;c_fcode-format_change .             mk_callmethod: actn_format_change .
      WHEN lcl_wb_protab=&gt;c_fcode-context_change .            mk_callmethod: actn_context_change .
      WHEN lcl_wb_protab=&gt;c_fcode-compname_change .           mk_callmethod: actn_compname_change .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_loop_from_to .           mk_callmethod: actn_cb_loop_from_to .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_relpath_change_mn .      mk_callmeth_2: actn_cb_relpath_change       iv_relpath_mn . &quot; --&gt;&gt; manual
      WHEN lcl_wb_protab=&gt;c_fcode-cb_relpath_change_f4 .      mk_callmethod: actn_cb_relpath_change .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_relpath_delete .         mk_callmethod: actn_cb_relpath_delete .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_aprpath_change_mn .      mk_callmeth_2: actn_cb_apr_relpath_change   iv_relpath_mn . &quot; --&gt;&gt; manual
      WHEN lcl_wb_protab=&gt;c_fcode-cb_aprpath_change_f4 .      mk_callmeth_2: actn_cb_apr_relpath_change   iv_relpath_f4 . &quot; --&gt;&gt; search-help
      WHEN lcl_wb_protab=&gt;c_fcode-cb_aprchar_change .         mk_callmethod: actn_cb_apr_relpath_change .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_aprpath_delete .         mk_callmethod: actn_cb_apr_relpath_delete .

      WHEN lcl_wb_protab=&gt;c_fcode-cb_cellrng_change_mn .      mk_callmeth_2: actn_cb_cellrng_relpth_change   iv_relpath_mn . &quot; --&gt;&gt; manual
      WHEN lcl_wb_protab=&gt;c_fcode-cb_cellrng_change_f4 .      mk_callmeth_2: actn_cb_cellrng_relpth_change   iv_relpath_f4 . &quot; --&gt;&gt; search-help
      WHEN lcl_wb_protab=&gt;c_fcode-cb_cellrng_change_char .    mk_callmethod: actn_cb_cellrng_relpth_change .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_cellrng_delete .         mk_callmethod: actn_cb_cellrng_relpth_delete .

      WHEN lcl_wb_protab=&gt;c_fcode-cb_valpath_change_mn .      mk_callmeth_2: actn_cb_val_relpath_change   iv_relpath_mn . &quot; --&gt;&gt; manual
      WHEN lcl_wb_protab=&gt;c_fcode-cb_valpath_change_f4 .      mk_callmeth_2: actn_cb_val_relpath_change   iv_relpath_f4 . &quot; --&gt;&gt; search-help
      WHEN lcl_wb_protab=&gt;c_fcode-cb_valpath_sub .            mk_callmeth_2: actn_cb_val_relpath_change   iv_sub .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_valchar_change .         mk_callmeth_2: actn_cb_val_relpath_change   iv_charpos .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_valpath_delete .         mk_callmethod: actn_cb_val_relpath_delete .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_valconv_change .         mk_callmeth_2: actn_cb_val_relpath_change   iv_convertion .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_valstring_change .       mk_callmethod: actn_tb_val_layout_change .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_valformula_change .      mk_callmeth_2: actn_tb_val_layout_change    iv_valformula .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_valmatrix_change .       mk_callmeth_2: actn_tb_val_layout_change    iv_valmatrix .

      WHEN lcl_wb_protab=&gt;c_fcode-cb_valvld_attrpath_change_f4 .  mk_callmeth_2: actn_cb_val_vld_change    iv_attrpath_f4 .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_valvld_attrpath_change_mn .  mk_callmeth_2: actn_cb_val_vld_change    iv_attrpath_mn .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_valvld_attrpath_delete .     mk_callmeth_2: actn_cb_val_vld_change    iv_attrpath_del .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_valvld_for1_template .       mk_callmeth_2: actn_cb_val_vld_change    iv_for1_template .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_valvld_for1_relpath .        mk_callmeth_2: actn_cb_val_vld_change    iv_for1_relpath .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_valvld_for1_dataset_id .     mk_callmeth_2: actn_cb_val_vld_change    iv_for1_dataset_id .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_valvld_for1_dataset_fld .    mk_callmeth_2: actn_cb_val_vld_change    iv_for1_dataset_fld .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_valvld_for2_template .       mk_callmeth_2: actn_cb_val_vld_change    iv_for2_template .
      WHEN lcl_wb_protab=&gt;c_fcode-cb_valvld_for2_relpath .        mk_callmeth_2: actn_cb_val_vld_change    iv_for2_relpath .

      WHEN lcl_wb_protab=&gt;c_fcode-tb_sheetname_change .       mk_callmethod: actn_tb_sheetname_change .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_sheetname_delete .       mk_callmethod: actn_tb_sheetname_delete .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_sheetstate .             mk_callmethod: actn_tb_sheetstate .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_sheetprot_change .       mk_callmeth_2: actn_tb_sheetprotection      iv_change .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_sheetprot_delete .       mk_callmeth_2: actn_tb_sheetprotection      iv_delete .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_area_setcells .          mk_callmethod: actn_tb_area_setcells .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_area_settextmark .       mk_callmethod: actn_tb_area_settextmark .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_area_delete .            mk_callmethod: actn_tb_area_delete .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_direction_change .       mk_callmethod: actn_tb_direction_change .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_rowprop_change .         mk_callmeth_2: actn_tb_colrow_prop_change   iv_rows .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_colprop_change .         mk_callmeth_2: actn_tb_colrow_prop_change   iv_columns .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_rowgroup_change .        mk_callmeth_2: actn_tb_colrow_group_change  iv_rows .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_colgroup_change .        mk_callmeth_2: actn_tb_colrow_group_change  iv_columns .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_rowgroup_clp_change .
        actn_tb_colrow_group_change(
                    iv_alvtree_nkey = ls_links-alvtree_nkey
                    iv_form_id      = ls_links-form_id
                    iv_clp          = abap_on
                    iv_rows         = abap_on ) .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_colgroup_clp_change .
        actn_tb_colrow_group_change(
                    iv_alvtree_nkey = ls_links-alvtree_nkey
                    iv_form_id      = ls_links-form_id
                    iv_clp          = abap_on
                    iv_columns      = abap_on ) .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_drwstflag_change .       mk_callmethod: actn_tb_drwstatflag_change .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_drwstname_change .       mk_callmeth_2: actn_tb_drwstatname_change   iv_change .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_drwstname_delete .       mk_callmeth_2: actn_tb_drwstatname_change   iv_delete .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_drwsize_fit .            mk_callmeth_2: actn_tb_drwsize_change       iv_fit .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_drwsize_context .        mk_callmeth_2: actn_tb_drwsize_change       iv_context .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_drwsize_h_f4 .           mk_callmeth_2: actn_tb_drwsize_change       iv_h_f4 .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_drwsize_h_mn .           mk_callmeth_2: actn_tb_drwsize_change       iv_h_mn .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_drwsize_w_f4 .           mk_callmeth_2: actn_tb_drwsize_change       iv_w_f4 .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_drwsize_w_mn .           mk_callmeth_2: actn_tb_drwsize_change       iv_w_mn .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_printtitles_rows_change .
        actn_tb_printtitles(
                    iv_alvtree_nkey = ls_links-alvtree_nkey
                    iv_form_id      = ls_links-form_id
                    iv_rows         = abap_on
                    iv_change       = abap_on ) .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_printtitles_rows_delete .
        actn_tb_printtitles(
                    iv_alvtree_nkey = ls_links-alvtree_nkey
                    iv_form_id      = ls_links-form_id
                    iv_rows         = abap_on
                    iv_delete       = abap_on ) .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_printtitles_cols_change .
        actn_tb_printtitles(
                    iv_alvtree_nkey = ls_links-alvtree_nkey
                    iv_form_id      = ls_links-form_id
                    iv_cols         = abap_on
                    iv_change       = abap_on ) .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_printtitles_cols_delete .
        actn_tb_printtitles(
                    iv_alvtree_nkey = ls_links-alvtree_nkey
                    iv_form_id      = ls_links-form_id
                    iv_cols         = abap_on
                    iv_delete       = abap_on ) .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_pgbreak_left .           mk_callmeth_2: actn_tb_pgbreak              iv_left .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_pgbreak_top .            mk_callmeth_2: actn_tb_pgbreak              iv_top .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_nopgbreak_left .
        actn_tb_pgbreak(
                    iv_alvtree_nkey = ls_links-alvtree_nkey
                    iv_form_id      = ls_links-form_id
                    iv_left         = abap_on
                    iv_nopgbreak    = abap_on ) .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_nopgbreak_top .
        actn_tb_pgbreak(
                    iv_alvtree_nkey = ls_links-alvtree_nkey
                    iv_form_id      = ls_links-form_id
                    iv_top          = abap_on
                    iv_nopgbreak    = abap_on ) .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_mergecells_change .      mk_callmethod: actn_tb_mergecells_change .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_autofitmerged_off .
        actn_tb_autofitmerged_change(
                    iv_alvtree_nkey = ls_links-alvtree_nkey
                    iv_form_id      = ls_links-form_id
                    iv_rows         = abap_off
                    iv_cols         = abap_off ) .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_autofitmerged_r .
        actn_tb_autofitmerged_change(
                    iv_alvtree_nkey = ls_links-alvtree_nkey
                    iv_form_id      = ls_links-form_id
                    iv_rows         = abap_on
                    iv_cols         = abap_off ) .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_respattern_before .
        actn_tb_respattern_place(
                    iv_alvtree_nkey = ls_links-alvtree_nkey
                    iv_form_id      = ls_links-form_id
                    iv_before       = abap_on ) .
      WHEN lcl_wb_protab=&gt;c_fcode-tb_respattern_after .
        actn_tb_respattern_place(
                    iv_alvtree_nkey = ls_links-alvtree_nkey
                    iv_form_id      = ls_links-form_id
                    iv_after        = abap_on ) .
      WHEN lcl_wb_protab=&gt;c_fcode-draft_change .              mk_callmethod: actn_draft_change .
      WHEN lcl_wb_protab=&gt;c_fcode-tree_layout_rotate .        mk_callmeth_2: actn_tree_layout_change      iv_rotate .
      WHEN lcl_wb_protab=&gt;c_fcode-tree_layout_exp_coll .      mk_callmeth_2: actn_tree_layout_change      iv_stru_exp_coll .
      WHEN lcl_wb_protab=&gt;c_fcode-tree_layout_stru .          mk_callmeth_2: actn_tree_layout_change      iv_stru .
      WHEN lcl_wb_protab=&gt;c_fcode-tree_layout_head .          mk_callmeth_2: actn_tree_layout_change      iv_head .
      WHEN lcl_wb_protab=&gt;c_fcode-tree_layout_colhier .       mk_callmeth_2: actn_tree_layout_change      iv_col_hier .
      WHEN lcl_wb_protab=&gt;c_fcode-tree_layout_colhier_after . mk_callmeth_2: actn_tree_layout_change      iv_col_hier_after .
      WHEN lcl_wb_protab=&gt;c_fcode-tree_layout_colhier_shift . mk_callmeth_2: actn_tree_layout_change      iv_col_hier_shift .
      WHEN lcl_wb_protab=&gt;c_fcode-tree_layout_colother .      mk_callmeth_2: actn_tree_layout_change      iv_col_othr .
      WHEN lcl_wb_protab=&gt;c_fcode-tree_layout_colother_wdh .  mk_callmeth_2: actn_tree_layout_change      iv_col_othr_width .
      WHEN lcl_wb_protab=&gt;c_fcode-tree_layout_allowformulas . mk_callmeth_2: actn_tree_layout_change      iv_col_othr_allowformulas .
      WHEN lcl_wb_protab=&gt;c_fcode-grid_layout_rotate .        mk_callmeth_2: actn_grid_layout_change      iv_rotate .
      WHEN lcl_wb_protab=&gt;c_fcode-grid_layout_head .          mk_callmeth_2: actn_grid_layout_change      iv_head .
      WHEN lcl_wb_protab=&gt;c_fcode-grid_layout_head_titles .   mk_callmeth_2: actn_grid_layout_change      iv_head_titles .
      WHEN lcl_wb_protab=&gt;c_fcode-grid_fldseq .               mk_callmeth_2: actn_grid_layout_change      iv_fldseq .
      WHEN lcl_wb_protab=&gt;c_fcode-grid_fldprop .              mk_callmeth_2: actn_grid_layout_change      iv_fldprop .
      WHEN lcl_wb_protab=&gt;c_fcode-grid_layout_allowformulas . mk_callmeth_2: actn_grid_layout_change      iv_allowformulas .
      WHEN lcl_wb_protab=&gt;c_fcode-chart_model_change .        mk_callmeth_2: actn_chart_change            iv_model_change .
      WHEN lcl_wb_protab=&gt;c_fcode-chart_model_delete .        mk_callmeth_2: actn_chart_change            iv_model_delete .
      WHEN lcl_wb_protab=&gt;c_fcode-chart_title .               mk_callmeth_2: actn_chart_change            iv_title .
      WHEN lcl_wb_protab=&gt;c_fcode-chart_title_catax .         mk_callmeth_2: actn_chart_change            iv_title_catax .
      WHEN lcl_wb_protab=&gt;c_fcode-chart_title_valax .         mk_callmeth_2: actn_chart_change            iv_title_valax .
      WHEN lcl_wb_protab=&gt;c_fcode-chart_title_series .        mk_callmeth_2: actn_chart_change            iv_title_series .
      WHEN lcl_wb_protab=&gt;c_fcode-chart_dtset_change .        mk_callmeth_2: actn_chart_change            iv_dtset_change .
      WHEN lcl_wb_protab=&gt;c_fcode-chart_dtset_delete .        mk_callmeth_2: actn_chart_change            iv_dtset_delete .
      WHEN lcl_wb_protab=&gt;c_fcode-chart_dtset_series .        mk_callmeth_2: actn_chart_change            iv_dtset_series .
      WHEN lcl_wb_protab=&gt;c_fcode-postproc_vbs_code .         mk_callmeth_2: actn_postproccessing         iv_vbs_code .
      WHEN lcl_wb_protab=&gt;c_fcode-postproc_vbs_tables .       mk_callmeth_2: actn_postproccessing         iv_vbs_tables .
      WHEN lcl_wb_protab=&gt;c_fcode-definednames_dont_remove .  mk_callmeth_2: actn_root_others             iv_definednames_dont_remove .
*     -----------&gt;&gt;
      WHEN OTHERS .
        MESSAGE s000(lp) WITH v_text-t104 .   &quot; text: Function has not been processed
    ENDCASE .

*======================================================================
*   post-processing
*======================================================================
    CASE iv_fcode .
      WHEN lcl_wb_formtree=&gt;c_fcode-comp_selected .
      WHEN OTHERS .
        r_formtree-&gt;redraw( ir_formtemplate = r_formtemplate ) .
    ENDCASE .

  ENDMETHOD .                    &quot;tech_fcode_dispatch
  METHOD popup_postprocessing_info .
    DATA lv_button_pressed  TYPE i .
    DATA lv_url(30000)      TYPE c .

    IF sy-langu EQ &apos;R&apos; .
      CALL FUNCTION &apos;POPUP_FOR_INTERACTION&apos;
        EXPORTING
          headline       = &apos;ÐÐ½Ð¸Ð¼Ð°Ð½Ð¸Ðµ!&apos;
          text1          = &apos;ÐÐ°Ð½Ð½Ð°Ñ Ð¾Ð¿ÑÐ¸Ñ ÑÐµÐ°Ð»Ð¸Ð·Ð¾Ð²Ð°Ð½Ð° ÐÐ¾ÑÑ-Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ¾Ð¹ OLE/VBScript.&apos;
          text2          = &apos;ÐÑÐ¸Ð¼ÐµÐ½ÑÐ¹ÑÐµ Ð¿Ð¾ÑÑ-Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÑ Ð¿ÑÐ¸ ÐºÑÐ°Ð¹Ð½ÐµÐ¹ Ð½ÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ÑÑÐ¸, Ñ.Ðº. :&apos;
          text3          = &apos;- Ð¾Ð½Ð° Ð±ÑÐ´ÐµÑ Ð¸Ð³Ð½Ð¾ÑÐ¸ÑÐ¾Ð²Ð°ÑÑÑÑ Ð² ÑÐ¾Ð½Ð¾Ð²Ð¾Ð¼ ÑÐµÐ¶Ð¸Ð¼Ðµ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ñ;&apos;
          text4          = &apos;- Ð¾Ð½Ð° Ð¼Ð¾Ð¶ÐµÑ ÑÑÑÐµÑÑÐ²ÐµÐ½Ð½Ð¾ Ð·Ð°Ð¼ÐµÐ´Ð»Ð¸ÑÑ Ð²ÑÐ²Ð¾Ð´ ÑÐ¾ÑÐ¼Ñ;&apos;
          button_1       = icon_checked
          button_2       = &apos;@0S@ ÐÐ¾Ð´ÑÐ¾Ð±Ð½ÐµÐµ&apos;
        IMPORTING
          button_pressed = lv_button_pressed.
    ELSE .
      CALL FUNCTION &apos;POPUP_FOR_INTERACTION&apos;
        EXPORTING
          headline       = &apos;Notice!&apos;
          text1          = &apos;The option is implemented via OLE/VBScript Post-processing.&apos;
          text2          = &apos;Use post-processing only when it is quite necessary, because:&apos;
          text3          = &apos;- it will be ignored in background run-time mode;&apos;
          text4          = &apos;- it is able to reduce performance;&apos;
          button_1       = icon_checked
          button_2       = &apos;@0S@ More info about it&apos;
        IMPORTING
          button_pressed = lv_button_pressed.
    ENDIF .
    CHECK lv_button_pressed EQ 2 .

    lv_url = v_text-url3 .
    CALL FUNCTION &apos;CALL_BROWSER&apos;
      EXPORTING
        url    = lv_url
      EXCEPTIONS
        OTHERS = 6.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
    ENDIF .
  ENDMETHOD .                    &quot;popup_postprocessing_info
  METHOD popup_to_confirm .
    DATA:
      lv_answer         TYPE ty_char1 ,
      lv_text           TYPE ty_char1024 ,
      lv_text_button_1  TYPE ty_char1024 ,
      lv_icon_button_1  TYPE icon-name ,
      lv_text_button_2  TYPE ty_char1024 ,
      lv_icon_button_2  TYPE icon-name .

    lv_text = iv_text .

    IF iv_text_button_1 IS INITIAL .
      lv_text_button_1 = v_text-t106 .          &quot; text: Continue
    ELSE .
      lv_text_button_1 = iv_text_button_1 .
    ENDIF .
    IF iv_icon_button_1 IS INITIAL .
      lv_icon_button_1 = &apos;ICON_OKAY&apos; .
    ELSE .
      lv_icon_button_1 = iv_icon_button_1 .
    ENDIF .
    IF iv_text_button_2 IS INITIAL .
      lv_text_button_2 = v_text-t107 .          &quot; text: Cancel
    ELSE .
      lv_text_button_2 = iv_text_button_2 .
    ENDIF .
    IF iv_icon_button_2 IS INITIAL .
      lv_icon_button_2 = &apos;ICON_CANCEL&apos; .
    ELSE .
      lv_icon_button_2 = iv_icon_button_2 .
    ENDIF .

    CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
      EXPORTING
        titlebar              = v_text-t105     &quot; text: Notice!
        text_question         = lv_text
        text_button_1         = lv_text_button_1
        icon_button_1         = lv_icon_button_1
        text_button_2         = lv_text_button_2
        icon_button_2         = lv_icon_button_2
        default_button        = &apos;2&apos;
        display_cancel_button = space
      IMPORTING
        answer                = lv_answer
      EXCEPTIONS
        OTHERS                = 0.
    IF lv_answer EQ 2 .
      rv_answer_okey = abap_off .
      MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
    ELSE .
      rv_answer_okey = abap_on .
    ENDIF .

  ENDMETHOD .                    &quot;popup_to_confirm
  METHOD popup_to_get_value .
    DATA:
      lv_retcode              TYPE ty_char1 ,
      ls_fields               TYPE sval ,
      lt_fields               TYPE STANDARD TABLE OF sval .

    CLEAR ev_cancel .

    ls_fields-tabname     = iv_tabname .
    ls_fields-fieldname   = iv_fieldname .
    ls_fields-fieldtext   = iv_fieldtext .
    ls_fields-value       = cv_value .
    ls_fields-field_obl   = iv_obligatory .
    APPEND ls_fields TO lt_fields .

    IF iv_2tabname IS NOT INITIAL .
      ls_fields-tabname   = iv_2tabname .
      ls_fields-fieldname = iv_2fieldname .
      ls_fields-fieldtext = iv_2fieldtext .
      ls_fields-value     = cv_2value .
      ls_fields-field_obl = iv_2obligatory .
      APPEND ls_fields TO lt_fields .
    ENDIF .

    IF iv_3tabname IS NOT INITIAL .
      ls_fields-tabname   = iv_3tabname .
      ls_fields-fieldname = iv_3fieldname .
      ls_fields-fieldtext = iv_3fieldtext .
      ls_fields-value     = cv_3value .
      ls_fields-field_obl = iv_3obligatory .
      APPEND ls_fields TO lt_fields .
    ENDIF .

    IF iv_4tabname IS NOT INITIAL .
      ls_fields-tabname   = iv_4tabname .
      ls_fields-fieldname = iv_4fieldname .
      ls_fields-fieldtext = iv_4fieldtext .
      ls_fields-value     = cv_4value .
      ls_fields-field_obl = iv_4obligatory .
      APPEND ls_fields TO lt_fields .
    ENDIF .

    CALL FUNCTION &apos;POPUP_GET_VALUES&apos;
      EXPORTING
        popup_title = iv_title
      IMPORTING
        returncode  = lv_retcode
      TABLES
        fields      = lt_fields
      EXCEPTIONS
        OTHERS      = 2.
    IF sy-subrc NE 0 .
      ev_cancel = abap_on .
      MESSAGE ID sy-msgid TYPE &apos;S&apos; NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      EXIT .
    ENDIF .
    IF lv_retcode NE space .
      ev_cancel = abap_on .
      MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
      EXIT .
    ENDIF .

    LOOP AT lt_fields INTO ls_fields .
      CASE sy-tabix .
        WHEN 1 .  cv_value  = ls_fields-value .
        WHEN 2 .  cv_2value = ls_fields-value .
        WHEN 3 .  cv_3value = ls_fields-value .
        WHEN 4 .  cv_4value = ls_fields-value .
      ENDCASE .
    ENDLOOP .
  ENDMETHOD .                    &quot;popup_to_get_value
  METHOD popup_sheetprotection_static .
    DATA:
      lv_answer             TYPE ty_char1 ,
      ls_decide_lines       TYPE spopli ,
      lt_decide_lines       TYPE STANDARD TABLE OF spopli .

    CLEAR ev_cancel .

    ls_decide_lines-selflag   = cs_sheetprotection-selectlockedcells .
    ls_decide_lines-varoption = v_text-t302 .   &quot; text: Select Locked Cells
    ls_decide_lines-varoption+64(1) = &apos;`&apos; .
    APPEND ls_decide_lines TO lt_decide_lines .

    ls_decide_lines-selflag   = cs_sheetprotection-selectunlockedcells .
    ls_decide_lines-varoption = v_text-t303 .   &quot; text: Select Unlocked Cells
    APPEND ls_decide_lines TO lt_decide_lines .

    ls_decide_lines-selflag   = cs_sheetprotection-formatcells .
    ls_decide_lines-varoption = v_text-t304 .   &quot; text: Format Cells
    APPEND ls_decide_lines TO lt_decide_lines .

    ls_decide_lines-selflag   = cs_sheetprotection-formatcolumns .
    ls_decide_lines-varoption = v_text-t305 .   &quot; text: Format Columns
    APPEND ls_decide_lines TO lt_decide_lines .

    ls_decide_lines-selflag   = cs_sheetprotection-formatrows .
    ls_decide_lines-varoption = v_text-t306 .   &quot; text: Format Rows
    APPEND ls_decide_lines TO lt_decide_lines .

    ls_decide_lines-selflag   = cs_sheetprotection-insertcolumns .
    ls_decide_lines-varoption = v_text-t307 .   &quot; text: Insert Columns
    APPEND ls_decide_lines TO lt_decide_lines .

    ls_decide_lines-selflag   = cs_sheetprotection-insertrows .
    ls_decide_lines-varoption = v_text-t308 .   &quot; text: Insert Rows
    APPEND ls_decide_lines TO lt_decide_lines .

    ls_decide_lines-selflag   = cs_sheetprotection-inserthyperlinks .
    ls_decide_lines-varoption = v_text-t309 .   &quot; text: Insert Hyperlinks
    APPEND ls_decide_lines TO lt_decide_lines .

    ls_decide_lines-selflag   = cs_sheetprotection-deletecolumns .
    ls_decide_lines-varoption = v_text-t310 .   &quot; text: Delete Columns
    APPEND ls_decide_lines TO lt_decide_lines .

    ls_decide_lines-selflag   = cs_sheetprotection-deleterows .
    ls_decide_lines-varoption = v_text-t311 .   &quot; text: Delete Rows
    APPEND ls_decide_lines TO lt_decide_lines .

    ls_decide_lines-selflag   = cs_sheetprotection-sort .
    ls_decide_lines-varoption = v_text-t312 .   &quot; text: Sort
    APPEND ls_decide_lines TO lt_decide_lines .

    ls_decide_lines-selflag   = cs_sheetprotection-autofilter .
    ls_decide_lines-varoption = v_text-t313 .   &quot; text: Auto Filter
    APPEND ls_decide_lines TO lt_decide_lines .

    ls_decide_lines-selflag   = cs_sheetprotection-pivottables .
    ls_decide_lines-varoption = v_text-t314 .   &quot; text: Pivot Tables
    APPEND ls_decide_lines TO lt_decide_lines .

    ls_decide_lines-selflag   = cs_sheetprotection-objects .
    ls_decide_lines-varoption = v_text-t315 .   &quot; text: Objects
    APPEND ls_decide_lines TO lt_decide_lines .

    ls_decide_lines-selflag   = cs_sheetprotection-scenarios .
    ls_decide_lines-varoption = v_text-t316 .   &quot; text: Scenarios
    APPEND ls_decide_lines TO lt_decide_lines .

    CALL FUNCTION &apos;POPUP_TO_DECIDE_LIST&apos;
      EXPORTING
        mark_flag = abap_on       &quot;--&gt;&gt; checkbox
        mark_max  = 0
        textline1 = v_text-t317                &quot; text: Allow all users of this worksheet to:
        titel     = v_text-t298                &quot; text: Sheet protection
      IMPORTING
        answer    = lv_answer
      TABLES
        t_spopli  = lt_decide_lines
      EXCEPTIONS
        OTHERS    = 0.

    CASE lv_answer .
      WHEN &apos;A&apos; .
        ev_cancel = abap_on .
        MESSAGE s000(lp) WITH v_text-t100 .     &quot; text: Operation was terminated by the user
        RETURN .

      WHEN OTHERS .
        LOOP AT lt_decide_lines INTO ls_decide_lines .
          CASE sy-tabix .
            WHEN 01 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-selectlockedcells .
            WHEN 02 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-selectunlockedcells .
            WHEN 03 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-formatcells .
            WHEN 04 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-formatcolumns .
            WHEN 05 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-formatrows .
            WHEN 06 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-insertcolumns .
            WHEN 07 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-insertrows .
            WHEN 08 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-inserthyperlinks .
            WHEN 09 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-deletecolumns .
            WHEN 10 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-deleterows .
            WHEN 11 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-sort .
            WHEN 12 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-autofilter .
            WHEN 13 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-pivottables .
            WHEN 14 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-objects .
            WHEN 15 .   MOVE ls_decide_lines-selflag TO cs_sheetprotection-scenarios .
          ENDCASE .
        ENDLOOP .
    ENDCASE .

  ENDMETHOD .                    &quot;popup_sheetprotection_static
  METHOD popup_sheetprotection_password .

*   --------------------------
*   password      | hash-function
*   --------------------------
*   SAP12345      | EBF1
*   QwErTy        | DEFB
*   Hello555      | E5C7
*   %tgb^yhn      | 8541
*   R$^*h&amp;!19fS	  | 9922
*   DL7!Etj@6$s	  | C8F6
*   R(dkS$9!@Sn	  | C931
*   --------------------------

    CLEAR ev_cancel .

    DATA:
      lv_selected           TYPE ty_char1,
      lv_text_rb1           TYPE string .

    CONCATENATE &apos;@MG@&apos;
                v_text-t276  &quot; --&gt;&gt; text: Off
           INTO lv_text_rb1 .

    CASE cv_password .
      WHEN &apos;EBF1&apos; .   lv_selected = &apos;2&apos; .
      WHEN &apos;DEFB&apos; .   lv_selected = &apos;3&apos; .
      WHEN &apos;E5C7&apos; .   lv_selected = &apos;4&apos; .
      WHEN &apos;8541&apos; .   lv_selected = &apos;5&apos; .
      WHEN &apos;9922&apos; .   lv_selected = &apos;6&apos; .
      WHEN &apos;C8F6&apos; .   lv_selected = &apos;7&apos; .
      WHEN &apos;C931&apos; .   lv_selected = &apos;8&apos; .
      WHEN OTHERS .   lv_selected = &apos;1&apos; .
    ENDCASE .

    popup_to_decide(  EXPORTING iv_title       = v_text-t298                &quot; --&gt;&gt; text: Sheet protection
                                iv_text        = v_text-t318                &quot; --&gt;&gt; text: Password to unprotect sheet:
                                iv_text_rb1    = lv_text_rb1
                                iv_text_rb2    = &apos;SAP12345&apos;
                                iv_text_rb3    = &apos;QwErTy&apos;
                                iv_text_rb4    = &apos;Hello555&apos;
                                iv_text_rb5    = &apos;%tgb^yhn&apos;
                                iv_text_rb6    = &apos;R$^*h&amp;!19fS&apos;
                                iv_text_rb7    = &apos;DL7!Etj@6$s&apos;
                                iv_text_rb8    = &apos;R(dkS$9!@Sn&apos;
                      IMPORTING ev_cancel      = ev_cancel
                      CHANGING  cv_selected_rb = lv_selected ) .

    CHECK ev_cancel IS INITIAL .
    CASE lv_selected .
      WHEN &apos;1&apos; . cv_password = space .
      WHEN &apos;2&apos; . cv_password = &apos;EBF1&apos; .
      WHEN &apos;3&apos; . cv_password = &apos;DEFB&apos; .
      WHEN &apos;4&apos; . cv_password = &apos;E5C7&apos; .
      WHEN &apos;5&apos; . cv_password = &apos;8541&apos; .
      WHEN &apos;6&apos; . cv_password = &apos;9922&apos; .
      WHEN &apos;7&apos; . cv_password = &apos;C8F6&apos; .
      WHEN &apos;8&apos; . cv_password = &apos;C931&apos; .
    ENDCASE .

  ENDMETHOD .                    &quot;popup_sheetprotection_password
  METHOD popup_to_decide .
    CLEAR ev_cancel .

    DATA:
      lv_answer             TYPE ty_char1 ,
      lv_cursorline         TYPE sy-lilli ,
      ls_decide_lines       TYPE spopli ,
      lt_decide_lines       TYPE STANDARD TABLE OF spopli .

    ls_decide_lines-varoption = iv_text_rb1 .
    ls_decide_lines-varoption+64(1) = &apos;`&apos; .
    APPEND ls_decide_lines TO lt_decide_lines .
    IF iv_text_rb2 IS SUPPLIED .
      ls_decide_lines-varoption = iv_text_rb2 .
      APPEND ls_decide_lines TO lt_decide_lines .
    ENDIF .
    IF iv_text_rb3 IS SUPPLIED .
      ls_decide_lines-varoption = iv_text_rb3 .
      APPEND ls_decide_lines TO lt_decide_lines .
    ENDIF .
    IF iv_text_rb4 IS SUPPLIED .
      ls_decide_lines-varoption = iv_text_rb4 .
      APPEND ls_decide_lines TO lt_decide_lines .
    ENDIF .
    IF iv_text_rb5 IS SUPPLIED .
      ls_decide_lines-varoption = iv_text_rb5 .
      APPEND ls_decide_lines TO lt_decide_lines .
    ENDIF .
    IF iv_text_rb6 IS SUPPLIED .
      ls_decide_lines-varoption = iv_text_rb6 .
      APPEND ls_decide_lines TO lt_decide_lines .
    ENDIF .
    IF iv_text_rb7 IS SUPPLIED .
      ls_decide_lines-varoption = iv_text_rb7 .
      APPEND ls_decide_lines TO lt_decide_lines .
    ENDIF .
    IF iv_text_rb8 IS SUPPLIED .
      ls_decide_lines-varoption = iv_text_rb8 .
      APPEND ls_decide_lines TO lt_decide_lines .
    ENDIF .

    lv_cursorline = cv_selected_rb .

    CALL FUNCTION &apos;POPUP_TO_DECIDE_LIST&apos;
      EXPORTING
        cursorline = lv_cursorline
        mark_flag  = space       &quot;--&gt;&gt; radiobutton
        textline1  = iv_text
        textline2  = iv_text2
        titel      = iv_title
      IMPORTING
        answer     = lv_answer
      TABLES
        t_spopli   = lt_decide_lines
      EXCEPTIONS
        OTHERS     = 0.

    CASE lv_answer .
      WHEN &apos;A&apos; .
        MESSAGE s000(lp) WITH v_text-t100 . &quot; text: Operation was terminated by the user
        ev_cancel   = abap_on .

      WHEN OTHERS .
        cv_selected_rb = lv_answer .
    ENDCASE .

  ENDMETHOD .                    &quot;popup_to_decide
  METHOD popup_file_select .
    DATA:
      lv_title          TYPE string ,
      lv_directory      TYPE string ,
      lv_directory_char TYPE ty_char255 ,
      lv_rc             TYPE i ,
      lv_user_action    TYPE i ,
      lt_filetable      TYPE filetable .
    FIELD-SYMBOLS:
      &lt;filetable&gt;       TYPE file_table .
    CONSTANTS:
      lc_idparam_default_directory
                        TYPE tpara-paramid VALUE &apos;ZXLWB_DEFDIR_IMP&apos;.

*  --&gt;&gt; import default folder from ABAP-memory
    GET PARAMETER ID lc_idparam_default_directory FIELD lv_directory_char .&quot;#EC EXISTS
    lv_directory = lv_directory_char .

*  --&gt;&gt; get XML-files
    lv_title = iv_title .
    cl_gui_frontend_services=&gt;file_open_dialog(
      EXPORTING   window_title              = lv_title
                  default_extension         = &apos;*.XLSX&apos;
                  file_filter               = &apos;XLSX-files (*.XLSX) |*.XLSX|&apos;
                  initial_directory         = lv_directory
                  multiselection            = abap_off
      CHANGING    file_table                = lt_filetable
                  rc                        = lv_rc
                  user_action               = lv_user_action
      EXCEPTIONS  file_open_dialog_failed   = 1
                  cntl_error                = 2
                  error_no_gui              = 3
                  not_supported_by_gui      = 4
                  OTHERS                    = 5 ).
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      EXIT .
    ENDIF .
    IF lv_user_action EQ cl_gui_frontend_services=&gt;action_cancel
    OR lt_filetable IS INITIAL .
      MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
      EXIT .
    ENDIF .

    READ TABLE lt_filetable ASSIGNING &lt;filetable&gt; INDEX 1 .
    CHECK sy-subrc EQ 0 .
    rv_fullpath = &lt;filetable&gt;-filename .

*  --&gt;&gt; export default folder to ABAP-memory
    CALL FUNCTION &apos;SO_SPLIT_FILE_AND_PATH&apos;
      EXPORTING
        full_name = rv_fullpath
      IMPORTING
        file_path = lv_directory
      EXCEPTIONS
        OTHERS    = 2.
    IF sy-subrc EQ 0 .
      lv_directory_char = lv_directory .
      SET PARAMETER ID lc_idparam_default_directory FIELD lv_directory_char .&quot;#EC EXISTS
    ENDIF .
  ENDMETHOD .                    &quot;popup_file_select
  METHOD popup_compname .
    DATA:
      lv_fieldtext        TYPE sval-fieldtext ,
      ls_comp_types       TYPE ty_s_comp_types .

    CLEAR cv_retcode .

    READ TABLE r_formtemplate-&gt;t_comp_types INTO ls_comp_types
    WITH TABLE KEY comp_type = iv_comp_type .
    CHECK sy-subrc EQ 0 .

    CONCATENATE ls_comp_types-icon ls_comp_types-description
    INTO lv_fieldtext SEPARATED BY space .

    popup_to_get_value(
        EXPORTING iv_title       = v_text-t108     &quot; text: Specify a unique name of the component
                  iv_tabname     = &apos;MASSD_F4_ATT&apos;
                  iv_fieldname   = &apos;TABNAME&apos;
                  iv_fieldtext   = lv_fieldtext
                  iv_obligatory  = abap_on
                  iv_2tabname    = &apos;WWWDATATAB&apos;
                  iv_2fieldname  = &apos;TEXT&apos;
        IMPORTING ev_cancel      = cv_retcode
        CHANGING  cv_value       = cv_comp_name
                  cv_2value      = cv_comp_descr ) .
  ENDMETHOD .                    &quot;popup_compname
  METHOD popup_comp_types .
    CLEAR ev_cancel .
    CLEAR ev_comp_type .
    CLEAR ev_wizard_mode .

    TYPES:
      BEGIN OF ty_s_comp_types_f4 ,
        order             TYPE i ,
        comp_type         TYPE ty_comp_type ,
        icon              TYPE icon_d ,
        description       TYPE ty_char100 ,
        icon2             TYPE icon_d ,
      END   OF ty_s_comp_types_f4 ,
      ty_t_comp_types_f4  TYPE STANDARD TABLE OF ty_s_comp_types_f4 .
    DATA:
      ls_comp_types       TYPE ty_s_comp_types .
    DATA:
      lv_title            TYPE ty_char100 ,
      lv_screen_end_line  TYPE i ,
      ls_fct_f4           TYPE lvc_s_fcat ,
      lt_fct_f4           TYPE lvc_t_fcat ,
      ls_excl_f4          TYPE lvc_s_excl ,
      lt_excl_f4          TYPE lvc_t_excl ,
      ls_selfield         TYPE slis_selfield ,
      lv_exit             TYPE flag ,
      lv_icon2_flag       TYPE flag ,
      ls_comp_types_f4    TYPE ty_s_comp_types_f4 ,
      lt_comp_types_f4    TYPE ty_t_comp_types_f4 ,
      ls_ctxt_prop        TYPE lcl_context=&gt;ty_s_properties ,
      ls_form_excp        TYPE lcl_form=&gt;ty_s_exceptions ,
      lv_cancel           TYPE flag ,
      lv_cb_fullpath      TYPE ty_comp_path ,
      ls_comp_paths       TYPE ty_s_ctxtmulti ,
      lt_comp_paths       TYPE ty_t_ctxtmulti .

    LOOP AT it_comp_types INTO ls_comp_types .
      CLEAR ls_comp_types_f4 .
      MOVE-CORRESPONDING ls_comp_types TO ls_comp_types_f4 .
      CASE ls_comp_types-comp_type .
        WHEN lcl_form=&gt;c_comp_type-sheet .      ls_comp_types_f4-order = 1  .
        WHEN lcl_form=&gt;c_comp_type-folder .     ls_comp_types_f4-order = 2  .
        WHEN lcl_form=&gt;c_comp_type-loopstep .   ls_comp_types_f4-order = 3  .
        WHEN lcl_form=&gt;c_comp_type-pattern .    ls_comp_types_f4-order = 4  .
        WHEN lcl_form=&gt;c_comp_type-respattern . ls_comp_types_f4-order = 5  .
        WHEN lcl_form=&gt;c_comp_type-field .
          ls_comp_types_f4-order  = 6 .
          ls_comp_types_f4-icon2  = icon_wd_custom_controller . &quot; --&gt;&gt; WIZARD (create fields via context)
          lv_icon2_flag           = abap_on .
        WHEN lcl_form=&gt;c_comp_type-drawing .    ls_comp_types_f4-order = 7  .
        WHEN lcl_form=&gt;c_comp_type-chart .      ls_comp_types_f4-order = 8 .
        WHEN lcl_form=&gt;c_comp_type-grid .       ls_comp_types_f4-order = 9  .
        WHEN lcl_form=&gt;c_comp_type-tree .       ls_comp_types_f4-order = 10  .
      ENDCASE .
      APPEND ls_comp_types_f4 TO lt_comp_types_f4 .
    ENDLOOP .
    SORT lt_comp_types_f4 BY order .


    ls_excl_f4-func = &apos;%SC&apos;  . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;RNT&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OL0&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ODN&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OUP&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ILT&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ELP&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .

    ls_fct_f4-fieldname     = &apos;ICON&apos; .
    ls_fct_f4-outputlen     = 4 .
    APPEND ls_fct_f4 TO lt_fct_f4 .
    ls_fct_f4-fieldname     = &apos;DESCRIPTION&apos; .
    IF  lv_icon2_flag IS NOT INITIAL
    AND iv_wizard_mode_allow IS NOT INITIAL .
      ls_fct_f4-outputlen   = 19 .
      APPEND ls_fct_f4 TO lt_fct_f4 .
      ls_fct_f4-fieldname   = &apos;ICON2&apos; .
      ls_fct_f4-outputlen   = 3 .
    ELSE .
      ls_fct_f4-outputlen   = 22 .
    ENDIF .
    APPEND ls_fct_f4 TO lt_fct_f4 .

    CASE iv_title .
      WHEN space  . lv_title = v_text-t121 .    &quot; text: Choose a component
      WHEN OTHERS . lv_title = iv_title .
    ENDCASE .

    lv_screen_end_line = LINES( lt_comp_types_f4 ) + 6 .
    IF lv_screen_end_line &gt; 20 .
      lv_screen_end_line = 20 .
    ENDIF .

    CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
      EXPORTING
        i_title               = lv_title
        it_fieldcatalog       = lt_fct_f4[]
        it_status_excl        = lt_excl_f4[]
        i_screen_start_column = 10
        i_screen_start_line   = 5
        i_screen_end_column   = 40
        i_screen_end_line     = lv_screen_end_line
      IMPORTING
        es_selfield           = ls_selfield
        e_exit                = ev_cancel
      TABLES
        t_outtab              = lt_comp_types_f4[].

    IF ev_cancel IS NOT INITIAL .
      MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
      EXIT .
    ENDIF .

    CHECK ls_selfield-tabindex NE 0 .
    READ TABLE lt_comp_types_f4 INTO ls_comp_types_f4 INDEX ls_selfield-tabindex .
    CHECK sy-subrc EQ 0 .
    ev_comp_type = ls_comp_types_f4-comp_type .

    IF  ls_selfield-fieldname   EQ &apos;ICON2&apos;
    AND ls_comp_types_f4-icon2  IS NOT INITIAL .
      ev_wizard_mode = abap_on .
    ENDIF .

  ENDMETHOD .                    &quot;popup_comp_types
  METHOD popup_component .
    TYPES:
      BEGIN OF ty_s_outtab_f4 ,
        id                TYPE lcl_form=&gt;ty_s_properties-dataset_id ,
        comp_name         TYPE lcl_form=&gt;ty_s_properties-comp_name ,
        sheet_compname    TYPE lcl_form=&gt;ty_s_properties-comp_name ,
      END   OF ty_s_outtab_f4 ,
      ty_t_outtab_f4      TYPE STANDARD TABLE OF ty_s_outtab_f4 .
    DATA:
      lv_title            TYPE ty_char100 ,
      ls_fct_f4           TYPE lvc_s_fcat ,
      lt_fct_f4           TYPE lvc_t_fcat ,
      ls_excl_f4          TYPE lvc_s_excl ,
      lt_excl_f4          TYPE lvc_t_excl ,
      ls_selfield         TYPE slis_selfield ,
      ls_outtab_f4        TYPE ty_s_outtab_f4 ,
      lt_outtab_f4        TYPE ty_t_outtab_f4 ,
      ls_form_prop        TYPE lcl_form=&gt;ty_s_properties .
    CLEAR:
      es_form_prop ,
      ev_cancel .

    LOOP AT r_formtemplate-&gt;t_properties INTO ls_form_prop
      WHERE comp_type EQ iv_comp_type .

      CLEAR ls_outtab_f4 .
*   Component Id / Name
      ls_outtab_f4-id = ls_form_prop-id .
      ls_outtab_f4-comp_name = ls_form_prop-comp_name .
*   Sheet Name
      r_formtemplate-&gt;node_get_legacy_info( EXPORTING iv_id = ls_form_prop-id
                                            IMPORTING ev_tb_sheet_compname = ls_outtab_f4-sheet_compname ) .
      APPEND ls_outtab_f4 TO lt_outtab_f4 .
    ENDLOOP .

    CHECK lt_outtab_f4[] IS NOT INITIAL .

    ls_excl_f4-func = &apos;%SC&apos;  . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;RNT&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OL0&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ODN&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OUP&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ILT&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ELP&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .

    CLEAR ls_fct_f4 .
    ls_fct_f4-fieldname   = &apos;COMP_NAME&apos; .
    ls_fct_f4-coltext     = v_text-t068 .     &quot;	text: Component
    ls_fct_f4-outputlen   = 20 .
    ls_fct_f4-hotspot     = abap_on .
    APPEND ls_fct_f4 TO lt_fct_f4 .
    CLEAR ls_fct_f4 .
    ls_fct_f4-fieldname   = &apos;SHEET_COMPNAME&apos; .
    ls_fct_f4-coltext     = v_text-t238 .	    &quot;	text: On the sheet
    ls_fct_f4-outputlen   = 15 .
    ls_fct_f4-emphasize   = &apos;C500&apos; .
    APPEND ls_fct_f4 TO lt_fct_f4 .

    CASE iv_title .
      WHEN space  . lv_title = v_text-t068 .  &quot; text: Component
      WHEN OTHERS . lv_title = iv_title .
    ENDCASE .

    CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
      EXPORTING
        i_title               = lv_title
        it_fieldcatalog       = lt_fct_f4[]
        it_status_excl        = lt_excl_f4[]
        i_screen_start_column = 10
        i_screen_start_line   = 5
        i_screen_end_column   = 50
        i_screen_end_line     = 15
      IMPORTING
        es_selfield           = ls_selfield
        e_exit                = ev_cancel
      TABLES
        t_outtab              = lt_outtab_f4[].

    IF ev_cancel IS NOT INITIAL .
      MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
      EXIT .
    ENDIF .

    CHECK ls_selfield-tabindex NE 0 .
    READ TABLE lt_outtab_f4 INTO ls_outtab_f4 INDEX ls_selfield-tabindex .
    CHECK sy-subrc EQ 0 .

    READ TABLE r_formtemplate-&gt;t_properties INTO es_form_prop WITH KEY id = ls_outtab_f4-id .

  ENDMETHOD .                    &quot;popup_component
  METHOD popup_textmark .
    DATA:
      lv_fieldtext        TYPE sval-fieldtext .

    CLEAR cv_retcode .

    CONCATENATE icon_fast_entry v_text-t272      &quot; Text: Mark in the text
    INTO lv_fieldtext SEPARATED BY space .

    popup_to_get_value(
        EXPORTING iv_title       = v_text-t273   &quot; Text: Char.sequence, which has to be replaced by the Value
                  iv_tabname     = &apos;BDCDATA&apos;
                  iv_fieldname   = &apos;FVAL&apos;
                  iv_fieldtext   = lv_fieldtext
                  iv_obligatory  = abap_on
        IMPORTING ev_cancel      = cv_retcode
        CHANGING  cv_value       = cv_textmark ) .
  ENDMETHOD .                    &quot;popup_textmark
  METHOD popup_ctxtfield .
    DATA:
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      ls_ctxt_hier          TYPE lcl_context=&gt;ty_s_hierarchy ,
      lt_ctxt_hier          TYPE lcl_context=&gt;ty_t_hierarchy ,
      lv_offset             TYPE i ,
      lv_exit               TYPE flag ,
      lv_fullpath           TYPE string ,
      ls_nodetab            TYPE seucomm .

    CLEAR popup_ctxtfield_id .
    CLEAR popup_ctxtfield_cancel .
    CLEAR cv_cancel .

*======================================================================
*   get a subtree of relevant context components
*======================================================================
    r_formtemplate-&gt;r_context-&gt;subtree_get(
        EXPORTING iv_begin_fullpath = iv_cb_fullpath_parent
                  iv_f4_strategy = iv_f4_strategy
        IMPORTING et_hierarchy = lt_ctxt_hier ) .
    IF lt_ctxt_hier[] IS INITIAL .
      MESSAGE s000(lp) WITH v_text-t109 . &quot; text: Relevant nodes were not found in the context .
      EXIT .
    ENDIF .


    CASE iv_manual .
*======================================================================
      WHEN space .  &quot; display the popup tree of search-help
*======================================================================
        CALL FUNCTION &apos;RS_TREE_SET_CURRENT_TREE&apos;
          TABLES
            nodeinfo = lt_ctxt_hier.

        CALL FUNCTION &apos;RS_TREE_EXPAND&apos;
          EXPORTING
            node_id = 1
          EXCEPTIONS
            OTHERS  = 0.

        CALL FUNCTION &apos;RS_TREE_LIST_DISPLAY&apos;
          EXPORTING
            callback_program      = sy-repid
            callback_gui_status   = &apos;POPUP_CTXTFIELD_CB_GUI_STATUS&apos;
            callback_user_command = &apos;POPUP_CTXTFIELD_UCOMM&apos;
            screen_start_column   = 5
            screen_start_line     = 5
            screen_end_column     = 70
            screen_end_line       = 30
            use_control           = stree_use_control
            layout_mode           = stree_layout_compressed.


        IF popup_ctxtfield_id IS INITIAL
        OR popup_ctxtfield_cancel IS NOT INITIAL .
          MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
          cv_cancel = abap_on .
          RETURN .

        ELSE .
          ls_ctxt_prop = r_formtemplate-&gt;r_context-&gt;node_get( popup_ctxtfield_id ) .
          CLEAR popup_ctxtfield_id .

          lv_offset = STRLEN( iv_cb_fullpath_parent ) .
          cv_cb_relpath = ls_ctxt_prop-comp_fullpath+lv_offset .
          SHIFT cv_cb_relpath LEFT DELETING LEADING &apos;-&apos; .
          cv_cb_comp_type = ls_ctxt_prop-comp_type .
        ENDIF .

*======================================================================
      WHEN OTHERS . &quot; display field for manually input of path
*======================================================================
        DO .
*           popup screen to manual input
          popup_to_get_value(
              EXPORTING iv_title       = v_text-t077     &quot; text: Binding with context
                        iv_tabname     = &apos;SYST&apos;
                        iv_fieldname   = &apos;ULINE&apos;
                        iv_fieldtext   = v_text-t077     &quot; text: Binding with context
                        iv_obligatory  = abap_on
              IMPORTING ev_cancel      = cv_cancel
              CHANGING  cv_value       = cv_cb_relpath ) .
          IF cv_cancel IS NOT INITIAL .
            MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
            RETURN .
          ENDIF .

*           check specified path
          CASE iv_cb_fullpath_parent .
            WHEN space  . lv_fullpath = cv_cb_relpath .
            WHEN OTHERS . CONCATENATE iv_cb_fullpath_parent &apos;-&apos; cv_cb_relpath INTO lv_fullpath .
          ENDCASE .

          READ TABLE r_formtemplate-&gt;r_context-&gt;t_properties INTO ls_ctxt_prop
            WITH KEY comp_fullpath = lv_fullpath .
          IF sy-subrc NE 0 .
            MESSAGE s000(lp) WITH v_text-t110 .   &quot; text: Component is not allowed for choice
            CONTINUE .
          ENDIF .

          READ TABLE lt_ctxt_hier INTO ls_ctxt_hier WITH KEY hide = ls_ctxt_prop-id .
          IF sy-subrc NE 0 .
            MESSAGE s000(lp) WITH v_text-t110 .   &quot; text: Component is not allowed for choice
            CONTINUE .
          ENDIF .

          MOVE-CORRESPONDING ls_ctxt_hier TO ls_nodetab .
          CLEAR lv_exit .
          popup_ctxtfield_callback(
              EXPORTING is_nodetab        = ls_nodetab
                        iv_uc             = &apos;TRPI&apos;
              CHANGING  cv_exit           = lv_exit
                        cv_list_refresh   = lv_exit ) .
          IF lv_exit IS INITIAL .
            CONTINUE .
          ENDIF .

          cv_cb_comp_type = ls_ctxt_prop-comp_type .
          RETURN .
        ENDDO .
    ENDCASE .

  ENDMETHOD .                    &quot;popup_ctxtfield
  METHOD popup_ctxtfield_callback .
    CHECK iv_uc EQ &apos;TRPI&apos; .

    DATA ls_ctxt_prop TYPE lcl_context=&gt;ty_s_properties .
    DATA lv_allow TYPE flag .

    ls_ctxt_prop = r_formtemplate-&gt;r_context-&gt;node_get( is_nodetab-hide ) .

    DO 1 TIMES .
      lv_allow = abap_off .
      CASE r_formtemplate-&gt;r_context-&gt;v_f4_strategy .
        WHEN r_formtemplate-&gt;r_context-&gt;c_f4_strategy-loopstep
          OR r_formtemplate-&gt;r_context-&gt;c_f4_strategy-grid .
          CHECK ls_ctxt_prop-comp_type EQ r_formtemplate-&gt;r_context-&gt;c_comp_type-table .
        WHEN r_formtemplate-&gt;r_context-&gt;c_f4_strategy-folder .
          CHECK ls_ctxt_prop-comp_type EQ r_formtemplate-&gt;r_context-&gt;c_comp_type-struct .
        WHEN r_formtemplate-&gt;r_context-&gt;c_f4_strategy-value .
          CHECK ls_ctxt_prop-comp_type EQ r_formtemplate-&gt;r_context-&gt;c_comp_type-element
             OR ls_ctxt_prop-comp_type EQ r_formtemplate-&gt;r_context-&gt;c_comp_type-table .
        WHEN r_formtemplate-&gt;r_context-&gt;c_f4_strategy-apr_relpath .
          CHECK ls_ctxt_prop-comp_type EQ r_formtemplate-&gt;r_context-&gt;c_comp_type-element .
        WHEN r_formtemplate-&gt;r_context-&gt;c_f4_strategy-tree .
          CHECK ls_ctxt_prop-comp_type EQ r_formtemplate-&gt;r_context-&gt;c_comp_type-tree
             OR ls_ctxt_prop-comp_type EQ r_formtemplate-&gt;r_context-&gt;c_comp_type-tree_s .
        WHEN OTHERS .
      ENDCASE .
      lv_allow = abap_on .
    ENDDO .

    IF lv_allow EQ abap_on .
      popup_ctxtfield_id = ls_ctxt_prop-id .
      cv_exit = abap_on .
    ELSE .
      MESSAGE s000(lp) WITH v_text-t110 .   &quot; text: Component is not allowed for choice
    ENDIF .
  ENDMETHOD .                    &quot;popup_ctxtfield_callback
  METHOD popup_ctxtfield_sub .
*          EXPORTING iv_cb_fullpath_parent TYPE any
*                    iv_cb_relpath     TYPE ty_comp_path
*          CHANGING  cv_cb_val_sub_col TYPE any
*                    cv_cb_val_sub_row TYPE i
*                    cv_cancel         TYPE flag OPTIONAL ,
    TYPES:
      BEGIN OF ty_s_outtab_f4 ,
        id                TYPE snode-id ,
        fieldname         TYPE ty_char100 ,
      END   OF ty_s_outtab_f4 ,
      ty_t_outtab_f4      TYPE STANDARD TABLE OF ty_s_outtab_f4 .
    DATA:
      lv_begin_fullpath   TYPE ty_comp_path ,
      lt_ctxt_hier        TYPE lcl_context=&gt;ty_t_hierarchy ,
      ls_ctxt_prop        TYPE lcl_context=&gt;ty_s_properties ,
      lt_ctxt_prop        TYPE lcl_context=&gt;ty_t_properties .
    DATA:
      lv_title            TYPE ty_char100 ,
      ls_fct_f4           TYPE lvc_s_fcat ,
      lt_fct_f4           TYPE lvc_t_fcat ,
      ls_excl_f4          TYPE lvc_s_excl ,
      lt_excl_f4          TYPE lvc_t_excl ,
      ls_selfield         TYPE slis_selfield ,
      lv_exit             TYPE flag ,
      ls_outtab_f4        TYPE ty_s_outtab_f4 ,
      lt_outtab_f4        TYPE ty_t_outtab_f4 .

    lv_begin_fullpath =
    get_fullpath( iv_parent_fullpath = iv_cb_fullpath_parent
                  iv_relpath         = iv_cb_relpath ) .

    r_formtemplate-&gt;r_context-&gt;gridfld_get(
        EXPORTING iv_begin_fullpath  = lv_begin_fullpath
        IMPORTING et_hierarchy       = lt_ctxt_hier
                  et_properties      = lt_ctxt_prop ) .

    LOOP AT lt_ctxt_prop INTO ls_ctxt_prop
      WHERE comp_type EQ r_formtemplate-&gt;r_context-&gt;c_comp_type-table
        AND comp_fullpath NE lv_begin_fullpath .

      CONCATENATE ls_ctxt_prop-comp_fullpath &apos;*&apos; INTO ls_ctxt_prop-comp_fullpath .
      DELETE lt_ctxt_prop WHERE comp_fullpath CP ls_ctxt_prop-comp_fullpath .
    ENDLOOP .

    LOOP AT lt_ctxt_prop INTO ls_ctxt_prop
      WHERE comp_type EQ lcl_context=&gt;c_comp_type-element  .

      CLEAR ls_outtab_f4 .
      ls_outtab_f4-id = ls_ctxt_prop-id .
      CONCATENATE ls_ctxt_prop-comp_name &apos;~~~(&apos;
                  ls_ctxt_prop-comp_shortdescr &apos;)&apos;
             INTO ls_outtab_f4-fieldname .
      TRANSLATE ls_outtab_f4-fieldname USING &apos;~ &apos; .
      APPEND ls_outtab_f4 TO lt_outtab_f4 .
    ENDLOOP .

    CHECK lt_outtab_f4[] IS NOT INITIAL .

    ls_excl_f4-func = &apos;%SC&apos;  . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;RNT&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OL0&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ODN&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OUP&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ILT&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ELP&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .

    ls_fct_f4-fieldname   = &apos;FIELDNAME&apos; .
    ls_fct_f4-outputlen   = 50 .
    APPEND ls_fct_f4 TO lt_fct_f4 .

    lv_title = v_text-t226 .    &quot; text: columns

    CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
      EXPORTING
        i_title               = lv_title
        it_fieldcatalog       = lt_fct_f4[]
        it_status_excl        = lt_excl_f4[]
        i_screen_start_column = 10
        i_screen_start_line   = 5
        i_screen_end_column   = 40
        i_screen_end_line     = 10
      IMPORTING
        es_selfield           = ls_selfield
        e_exit                = cv_cancel
      TABLES
        t_outtab              = lt_outtab_f4[].

    IF cv_cancel IS NOT INITIAL .
      MESSAGE s000(lp) WITH v_text-t100 .	    &quot;	text: Operation was terminated by the user
      EXIT .
    ENDIF .

    CHECK ls_selfield-tabindex NE 0 .
    READ TABLE lt_outtab_f4 INTO ls_outtab_f4 INDEX ls_selfield-tabindex .
    CHECK sy-subrc EQ 0 .

    READ TABLE lt_ctxt_prop INTO ls_ctxt_prop WITH KEY id = ls_outtab_f4-id .
    CHECK sy-subrc EQ 0 .

    cv_cb_val_sub_col = ls_ctxt_prop-comp_name .
    cs_ctxt_prop      = ls_ctxt_prop .

    DO .
      popup_to_get_value(
          EXPORTING iv_title      = v_text-t126  &quot; --&gt;&gt; text: Specify new value
                    iv_tabname    = &apos;ALPDBUIALV&apos;
                    iv_fieldname  = &apos;INDEX&apos;
                    iv_fieldtext  = v_text-t236  &quot; --&gt;&gt; text: Table row
                    iv_obligatory = abap_on
          IMPORTING ev_cancel     = cv_cancel
          CHANGING  cv_value      = cv_cb_val_sub_row ) .
      CHECK cv_cancel IS NOT INITIAL
         OR cv_cb_val_sub_row IS NOT INITIAL .
      EXIT . &quot; --&gt;&gt; do
    ENDDO .

  ENDMETHOD .                    &quot;popup_ctxtfield_sub
  METHOD popup_ctxtmulti .

    DATA:
      lt_hierarchy          TYPE lcl_context=&gt;ty_t_hierarchy ,
      lv_offset             TYPE i ,
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      ls_marktab            TYPE snodetext ,
      lt_marktab            TYPE STANDARD TABLE OF snodetext ,
      ls_comp_paths         TYPE ty_s_ctxtmulti .

    CLEAR popup_ctxtfield_cancel .
    CLEAR ct_comp_paths .

*   get a subtree of relevant context components
    r_formtemplate-&gt;r_context-&gt;subtree_get(
        EXPORTING iv_begin_fullpath = iv_cb_fullpath_parent
                  iv_f4_strategy = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-value
        IMPORTING et_hierarchy = lt_hierarchy ) .
    IF lt_hierarchy[] IS INITIAL .
      MESSAGE s000(lp) WITH v_text-t109 . &quot; text: Relevant nodes were not found in the context .
      EXIT .
    ENDIF .

*   display the popup tree
    CALL FUNCTION &apos;RS_TREE_SET_CURRENT_TREE&apos;
      TABLES
        nodeinfo = lt_hierarchy.

    CALL FUNCTION &apos;RS_TREE_EXPAND&apos;
      EXPORTING
        node_id = 1
      EXCEPTIONS
        OTHERS  = 0.

    CALL FUNCTION &apos;RS_TREE_LIST_DISPLAY&apos;
      EXPORTING
        callback_program      = sy-repid
        callback_gui_status   = &apos;POPUP_CTXTMULTI_CB_GUI_STATUS&apos;
        callback_user_command = &apos;POPUP_CTXTMULTI_UCOMM&apos;
        screen_start_column   = 5
        screen_start_line     = 5
        screen_end_column     = 70
        screen_end_line       = 30
        use_control           = stree_use_control
        layout_mode           = stree_layout_compressed.


    IF popup_ctxtfield_cancel IS NOT INITIAL
    OR sy-ucomm	              EQ &apos;CANC&apos; .
      MESSAGE s000(lp) WITH v_text-t100 .  &quot; text: Operation was terminated by the user
      cv_cancel = abap_on .
    ELSE .
      CALL FUNCTION &apos;RS_TREE_GET_MARKED_NODES&apos;
        EXPORTING
          with_subtree = space
        TABLES
          marktab      = lt_marktab.
      LOOP AT lt_marktab INTO ls_marktab .
        ls_ctxt_prop = r_formtemplate-&gt;r_context-&gt;node_get( ls_marktab-hide ) .
        CHECK ls_ctxt_prop-comp_type EQ r_formtemplate-&gt;r_context-&gt;c_comp_type-element .

        CLEAR ls_comp_paths .
        ls_comp_paths-comp_type       = lcl_form=&gt;c_comp_type-field .
        ls_comp_paths-comp_name       = ls_ctxt_prop-comp_name .
        ls_comp_paths-comp_shortdescr = ls_ctxt_prop-comp_shortdescr .

        lv_offset = STRLEN( iv_cb_fullpath_parent ) .
        ls_comp_paths-cb_relpath = ls_ctxt_prop-comp_fullpath+lv_offset .
        SHIFT ls_comp_paths-cb_relpath LEFT DELETING LEADING &apos;-&apos; .

        APPEND ls_comp_paths TO ct_comp_paths .
      ENDLOOP .
      IF ct_comp_paths[] IS INITIAL .
        MESSAGE s000(lp) WITH v_text-t100 .  &quot; text: Operation was terminated by the user
        cv_cancel = abap_on .
        EXIT .
      ENDIF .

    ENDIF .

  ENDMETHOD .                    &quot;popup_ctxtmulti
  METHOD popup_ctxtmulti_callback .

    DATA:
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      lt_marktab            TYPE STANDARD TABLE OF snodetext ,
      ls_node_info          TYPE snodetext .

    CASE iv_uc .
      WHEN &apos;CANC&apos; .
        MESSAGE s000(lp) WITH v_text-t100 .     &quot; text: Operation was terminated by the user
        popup_ctxtfield_cancel = abap_on .
        cv_exit = abap_on .

      WHEN &apos;TRA1&apos; .
        CALL FUNCTION &apos;RS_TREE_GET_MARKED_NODES&apos;
          EXPORTING
            with_subtree = space
          TABLES
            marktab      = lt_marktab.
        IF lt_marktab[] IS INITIAL .
          MESSAGE s000(lp) WITH v_text-t181 .   &quot; text: Select components to be added
        ELSE .
          cv_exit = abap_on .
        ENDIF .

      WHEN OTHERS .
        ls_ctxt_prop = r_formtemplate-&gt;r_context-&gt;node_get( is_nodetab-hide ) .
        IF ls_ctxt_prop-comp_type NE r_formtemplate-&gt;r_context-&gt;c_comp_type-element .
          MESSAGE s000(lp) WITH v_text-t110 .   &quot; text: Component is not allowed for choice
          EXIT .
        ENDIF .

        MOVE-CORRESPONDING is_nodetab TO ls_node_info .

        CASE ls_node_info-nodeicon .
          WHEN lcl_context=&gt;c_comp_icon-element .
            ls_node_info-nodeicon = icon_okay .
          WHEN icon_okay .
            ls_node_info-nodeicon = lcl_context=&gt;c_comp_icon-element .
          WHEN OTHERS .
        ENDCASE.

        CALL FUNCTION &apos;RS_TREE_SET_NODE&apos;
          EXPORTING
            node_info = ls_node_info
          EXCEPTIONS
            OTHERS    = 0.

        CASE ls_node_info-nodeicon .
          WHEN lcl_context=&gt;c_comp_icon-element .
            CALL FUNCTION &apos;RS_TREE_RESET_LOCK&apos;
              EXPORTING
                node_id      = ls_node_info-id
                with_subtree = space
              EXCEPTIONS
                OTHERS       = 0.

          WHEN icon_okay .
            CALL FUNCTION &apos;RS_TREE_SET_LOCK&apos;
              EXPORTING
                node_id      = ls_node_info-id
                with_subtree = space
              EXCEPTIONS
                OTHERS       = 0.

          WHEN OTHERS .
        ENDCASE.

        cv_list_refresh = abap_on .
    ENDCASE .

  ENDMETHOD .                    &quot;popup_ctxtmulti_callback
  METHOD popup_charpos .
    DATA:
      lv_match          TYPE i , &quot;sval-value ,
      lv_offset         TYPE i , &quot;sval-value ,
      lv_title          TYPE ty_char100 ,
      lv_length         TYPE i .

    CLEAR cv_cancel .

    WRITE iv_length TO lv_title LEFT-JUSTIFIED .
    CONCATENATE v_text-t111                       &quot; text: Field length
                lv_title
           INTO lv_title SEPARATED BY space .

    DO .
      CLEAR lv_offset .
      IF cv_offset IS NOT INITIAL .
        lv_offset   = cv_offset .
      ENDIF .

      CLEAR lv_match  .
      IF cv_match  IS NOT INITIAL .
        lv_match    = cv_match .
      ENDIF .

      popup_to_get_value(
          EXPORTING iv_title       = lv_title
                    iv_tabname     = &apos;SYST&apos;
                    iv_fieldname   = &apos;INDEX&apos;
                    iv_fieldtext   = v_text-t098    &quot; text: from position
                    iv_2tabname    = &apos;SYST&apos;
                    iv_2fieldname  = &apos;TABIX&apos;
                    iv_2fieldtext  = v_text-t024    &quot; text: Chars number
          IMPORTING ev_cancel      = cv_cancel
          CHANGING  cv_value       = lv_offset
                    cv_2value      = lv_match ) .

      IF cv_cancel IS NOT INITIAL .
        EXIT . &quot; --&gt;&gt; do
      ENDIF .

      lv_length = lv_offset + lv_match .
      IF lv_length GT iv_length .
        MESSAGE i000(lp)
        WITH v_text-t024 lv_length      &quot; text: Chars number
             v_text-t025 iv_length .    &quot; text: overlap the field length
      ELSE .
        cv_offset = lv_offset.
        cv_match  = lv_match .
        EXIT . &quot; --&gt;&gt; do
      ENDIF .
    ENDDO .

  ENDMETHOD .                    &quot;popup_charpos
  METHOD popup_matrix_interval .
    DATA lv_title TYPE ty_char100 .

    CONCATENATE v_text-t216 &apos;.&apos;           &quot; text: Matrix (one char per cell)
                v_text-t217               &quot; text: Interval:
           INTO lv_title SEPARATED BY space .

    popup_to_get_value(
        EXPORTING iv_title       = lv_title
                  iv_tabname     = &apos;SYST&apos;
                  iv_fieldname   = &apos;INDEX&apos;
                  iv_fieldtext   = v_text-t162    &quot; text: column(s)
                  iv_2tabname    = &apos;SYST&apos;
                  iv_2fieldname  = &apos;TABIX&apos;
                  iv_2fieldtext  = v_text-t163    &quot; text: row(s)
        CHANGING  cv_value       = cv_cols
                  cv_2value      = cv_rows ) .
  ENDMETHOD .                    &quot;popup_matrix_interval
  METHOD popup_tbsheet .
    TYPES:
      BEGIN OF ty_s_sheets_f4 ,
        name              TYPE ty_char31 ,
      END   OF ty_s_sheets_f4 ,
      ty_t_sheets_f4      TYPE STANDARD TABLE OF ty_s_sheets_f4 .
    DATA:
      lv_title            TYPE ty_char100 ,
      ls_fct_f4           TYPE lvc_s_fcat ,
      lt_fct_f4           TYPE lvc_t_fcat ,
      ls_excl_f4          TYPE lvc_s_excl ,
      lt_excl_f4          TYPE lvc_t_excl ,
      ls_selfield         TYPE slis_selfield ,
      lv_exit             TYPE flag ,
      ls_sheets           TYPE lcl_exceltemplate=&gt;ty_s_sheets ,
      ls_sheets_f4        TYPE ty_s_sheets_f4 ,
      lt_sheets_f4        TYPE ty_t_sheets_f4 .

    CLEAR rv_name .

    LOOP AT r_formtemplate-&gt;r_exceltemplate-&gt;s_model-t_sheets INTO ls_sheets .
      ls_sheets_f4-name = ls_sheets-name .
      APPEND ls_sheets_f4 TO lt_sheets_f4 .
    ENDLOOP .
    IF lt_sheets_f4[] IS INITIAL .
      MESSAGE i000(lp) WITH v_text-t112 .   &quot; text: Error while searching sheets in the template
      EXIT .
    ENDIF .

    ls_excl_f4-func = &apos;%SC&apos;  . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;RNT&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OL0&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ODN&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OUP&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ILT&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ELP&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .

    ls_fct_f4-fieldname   = &apos;NAME&apos; .
    ls_fct_f4-outputlen   = 35 .
    APPEND ls_fct_f4 TO lt_fct_f4 .

    lv_title = v_text-t113 .  &quot; text: Select a sheet of the template

    CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
      EXPORTING
        i_title               = lv_title
        it_fieldcatalog       = lt_fct_f4[]
        it_status_excl        = lt_excl_f4[]
        i_screen_start_column = 10
        i_screen_start_line   = 5
        i_screen_end_column   = 40
        i_screen_end_line     = 10
      IMPORTING
        es_selfield           = ls_selfield
        e_exit                = lv_exit
      TABLES
        t_outtab              = lt_sheets_f4[].

    IF lv_exit IS NOT INITIAL .
      MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
      EXIT .
    ENDIF .

    CHECK ls_selfield-tabindex NE 0 .
    READ TABLE lt_sheets_f4 INTO ls_sheets_f4 INDEX ls_selfield-tabindex .
    CHECK sy-subrc EQ 0 .

    rv_name = ls_sheets_f4-name .
  ENDMETHOD .                    &quot;popup_tbsheet
  METHOD popup_tbdrawing .
    TYPES:
      BEGIN OF ty_s_drawings_f4 ,
        name              TYPE ty_char100 ,
      END   OF ty_s_drawings_f4 ,
      ty_t_drawings_f4    TYPE STANDARD TABLE OF ty_s_drawings_f4 .
    DATA:
      lv_title            TYPE ty_char100 ,
      ls_fct_f4           TYPE lvc_s_fcat ,
      lt_fct_f4           TYPE lvc_t_fcat ,
      ls_excl_f4          TYPE lvc_s_excl ,
      lt_excl_f4          TYPE lvc_t_excl ,
      ls_selfield         TYPE slis_selfield ,
      lv_exit             TYPE flag ,
      ls_sheets           TYPE lcl_exceltemplate=&gt;ty_s_sheets ,
      ls_drawings         TYPE lcl_exceltemplate=&gt;ty_s_drawings_tmp ,
      ls_drawings_f4      TYPE ty_s_drawings_f4 ,
      lt_drawings_f4      TYPE ty_t_drawings_f4 .

    CLEAR rv_name .
    ls_sheets = r_formtemplate-&gt;r_exceltemplate-&gt;get_sheet( iv_sheetname ) .

    LOOP AT ls_sheets-sheetdata_template-t_drawings INTO ls_drawings .
      CASE ls_drawings-drawing_type .
        WHEN r_formtemplate-&gt;r_exceltemplate-&gt;c_drawing_type-vector .
          CHECK iv_vector IS NOT INITIAL .
        WHEN r_formtemplate-&gt;r_exceltemplate-&gt;c_drawing_type-bitmap .
          CHECK iv_bitmap IS NOT INITIAL .
        WHEN r_formtemplate-&gt;r_exceltemplate-&gt;c_drawing_type-chart .
          CHECK iv_chart IS NOT INITIAL .
        WHEN OTHERS . EXIT .
      ENDCASE .

      ls_drawings_f4-name = ls_drawings-name .
      APPEND ls_drawings_f4 TO lt_drawings_f4 .
    ENDLOOP .

    IF lt_drawings_f4[] IS INITIAL .
      CASE abap_on .
        WHEN iv_vector OR iv_bitmap .
          MESSAGE i000(lp) WITH v_text-t144     &quot; text: There are no drawings on the sheet
                                iv_sheetname .
        WHEN iv_chart .
          MESSAGE i000(lp) WITH v_text-t240     &quot; text: There are no Charts on the worksheet
                                iv_sheetname .
        WHEN OTHERS .
      ENDCASE .
      EXIT .
    ENDIF .

    ls_excl_f4-func = &apos;%SC&apos;  . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;RNT&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OL0&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ODN&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OUP&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ILT&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ELP&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .

    ls_fct_f4-fieldname   = &apos;NAME&apos; .
    ls_fct_f4-outputlen   = 35 .
    APPEND ls_fct_f4 TO lt_fct_f4 .

    CONCATENATE v_text-t143   &quot; text: Select a drawing on the sheet
                iv_sheetname
                INTO lv_title SEPARATED BY space .

    CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
      EXPORTING
        i_title               = lv_title
        it_fieldcatalog       = lt_fct_f4[]
        it_status_excl        = lt_excl_f4[]
        i_screen_start_column = 10
        i_screen_start_line   = 5
        i_screen_end_column   = 40
        i_screen_end_line     = 10
      IMPORTING
        es_selfield           = ls_selfield
        e_exit                = lv_exit
      TABLES
        t_outtab              = lt_drawings_f4[].

    IF lv_exit IS NOT INITIAL .
      MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
      EXIT .
    ENDIF .

    CHECK ls_selfield-tabindex NE 0 .
    READ TABLE lt_drawings_f4 INTO ls_drawings_f4 INDEX ls_selfield-tabindex .
    CHECK sy-subrc EQ 0 .

    rv_name = ls_drawings_f4-name .
  ENDMETHOD .                    &quot;popup_tbdrawing
  METHOD popup_dataset_id .
    TYPES:
      BEGIN OF ty_s_outtab_f4 ,
        grid_id           TYPE lcl_form=&gt;ty_s_properties-dataset_id ,
        grid_compname     TYPE lcl_form=&gt;ty_s_properties-comp_name ,
        sheet_compname    TYPE lcl_form=&gt;ty_s_properties-comp_name ,
      END   OF ty_s_outtab_f4 ,
      ty_t_outtab_f4      TYPE STANDARD TABLE OF ty_s_outtab_f4 .
    DATA:
      lv_title            TYPE ty_char100 ,
      ls_fct_f4           TYPE lvc_s_fcat ,
      lt_fct_f4           TYPE lvc_t_fcat ,
      ls_excl_f4          TYPE lvc_s_excl ,
      lt_excl_f4          TYPE lvc_t_excl ,
      ls_selfield         TYPE slis_selfield ,
      lv_exit             TYPE flag ,
      ls_outtab_f4        TYPE ty_s_outtab_f4 ,
      lt_outtab_f4        TYPE ty_t_outtab_f4 ,
      ls_datasets         TYPE ty_s_nodetab ,
      lt_datasets         TYPE ty_t_nodetab ,
      ls_form_prop        TYPE lcl_form=&gt;ty_s_properties .

    r_formtemplate-&gt;get_relevant_datasets(
        EXPORTING iv_id         = iv_id
                  iv_same_sheet = iv_same_sheet
        RECEIVING rt_datasets   = lt_datasets ) .
    IF lt_datasets[] IS INITIAL .
      MESSAGE s000(lp) WITH v_text-t120 .	&quot;	text: Relevant components are missing
      EXIT .
    ENDIF .

    LOOP AT lt_datasets INTO ls_datasets .
      CLEAR ls_outtab_f4 .
*   Grid (ie dataset) Id
      ls_outtab_f4-grid_id = ls_datasets-id .
*   Grid (ie dataset) Name
      CLEAR ls_form_prop .
      ls_form_prop = r_formtemplate-&gt;node_get_properties( ls_datasets-id ) .
      ls_outtab_f4-grid_compname = ls_form_prop-comp_name .
*   Sheet Name
      r_formtemplate-&gt;node_get_legacy_info( EXPORTING iv_id = ls_datasets-id
                                            IMPORTING ev_tb_sheet_compname = ls_outtab_f4-sheet_compname ) .
      APPEND ls_outtab_f4 TO lt_outtab_f4 .
    ENDLOOP .

    ls_excl_f4-func = &apos;%SC&apos;  . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;RNT&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OL0&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ODN&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OUP&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ILT&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ELP&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .

    CLEAR ls_fct_f4 .
    ls_fct_f4-fieldname   = &apos;GRID_COMPNAME&apos; .
    ls_fct_f4-coltext     = v_text-t225 .	&quot;	text: Grid
    ls_fct_f4-outputlen   = 20 .
    ls_fct_f4-hotspot     = abap_on .
    APPEND ls_fct_f4 TO lt_fct_f4 .
    CLEAR ls_fct_f4 .
    ls_fct_f4-fieldname   = &apos;SHEET_COMPNAME&apos; .
    ls_fct_f4-coltext     = v_text-t238 .	&quot;	text: On the sheet
    ls_fct_f4-outputlen   = 15 .
    ls_fct_f4-emphasize   = &apos;C500&apos; .
    APPEND ls_fct_f4 TO lt_fct_f4 .

    lv_title = v_text-t234 .  &quot; text: Dataset

    CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
      EXPORTING
        i_title               = lv_title
        it_fieldcatalog       = lt_fct_f4[]
        it_status_excl        = lt_excl_f4[]
        i_screen_start_column = 10
        i_screen_start_line   = 5
        i_screen_end_column   = 50
        i_screen_end_line     = 15
      IMPORTING
        es_selfield           = ls_selfield
        e_exit                = lv_exit
      TABLES
        t_outtab              = lt_outtab_f4[].

    IF lv_exit IS NOT INITIAL .
      MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
      EXIT .
    ENDIF .

    CHECK ls_selfield-tabindex NE 0 .
    READ TABLE lt_outtab_f4 INTO ls_outtab_f4 INDEX ls_selfield-tabindex .
    CHECK sy-subrc EQ 0 .

    cv_dataset_id = ls_outtab_f4-grid_id .
  ENDMETHOD .                    &quot;popup_dataset_id
  METHOD popup_dataset_series .
    TYPES:
      BEGIN OF ty_s_outtab_dtsfld ,
        dtsfld              TYPE string ,
        dtsfld_text         TYPE ty_char100 ,
      END   OF ty_s_outtab_dtsfld ,
      ty_t_outtab_dtsfld    TYPE STANDARD TABLE OF ty_s_outtab_dtsfld .
    TYPES:
      BEGIN OF ty_s_outtab_link ,
        seridx              TYPE string ,
        sercap              TYPE string ,
        dtsfld              TYPE string ,
        sernum              TYPE ty_char100 ,
        dtsfld_text         TYPE ty_char100 ,
        status              TYPE icon_d ,
      END   OF ty_s_outtab_link ,
      ty_t_outtab_link      TYPE STANDARD TABLE OF ty_s_outtab_link .
    DATA:
      ls_form_prop_ds       TYPE lcl_form=&gt;ty_s_properties ,
      ls_ctxt_prop_ds       TYPE lcl_context=&gt;ty_s_properties ,
      lt_ctxt_prop_ds       TYPE lcl_context=&gt;ty_t_properties ,
      ls_fldseq             TYPE lcl_form=&gt;ty_s_grid_fldseq ,
      lt_fldseq             TYPE lcl_form=&gt;ty_t_grid_fldseq ,
      ls_drawings           TYPE lcl_excel=&gt;ty_s_drawings_tmp ,
      ls_chart_series       TYPE lcl_excel=&gt;ty_s_chart_series ,
      ls_dataset_series_tab TYPE ty_s_dataset_series_tab ,
      lt_dataset_series_tab TYPE ty_t_dataset_series_tab ,
      lv_tb_sheetname       TYPE lcl_form=&gt;ty_s_properties-tb_sheetname .
    DATA:
      lv_title_link         TYPE ty_char100 ,
      lv_title_dtsfld       TYPE ty_char100 ,
      lv_exit_link          TYPE flag ,
      lv_exit_dtsfld        TYPE flag ,
      ls_fct                TYPE lvc_s_fcat ,
      lt_fct_link           TYPE lvc_t_fcat ,
      lt_fct_dtsfld         TYPE lvc_t_fcat ,
      ls_excl               TYPE lvc_s_excl ,
      lt_excl_link          TYPE lvc_t_excl ,
      lt_excl_dtsfld        TYPE lvc_t_excl ,
      ls_selfield           TYPE slis_selfield ,
      lt_outtab_link        TYPE ty_t_outtab_link ,
      lt_outtab_dtsfld      TYPE ty_t_outtab_dtsfld .
    FIELD-SYMBOLS:
      &lt;outtab_link&gt;         TYPE ty_s_outtab_link ,
      &lt;outtab_dtsfld&gt;       TYPE ty_s_outtab_dtsfld .

    CHECK cs_form_prop-dataset_id IS NOT INITIAL .
    CHECK cs_form_prop-tb_drwstat_name IS NOT INITIAL .

*   chart: Sheet
    r_formtemplate-&gt;node_get_legacy_info( EXPORTING iv_id = cs_form_prop-id
                                          IMPORTING ev_tb_sheetname = lv_tb_sheetname ) .
    CHECK lv_tb_sheetname IS NOT INITIAL .

*   chart: Model (series)
    ls_drawings = r_formtemplate-&gt;r_exceltemplate-&gt;get_drawing_static(
                  iv_sheetname    = lv_tb_sheetname
                  iv_drwstat_name = cs_form_prop-tb_drwstat_name ) .
    CHECK ls_drawings-chart_series[] IS NOT INITIAL .

*   dataset: Properties
    ls_form_prop_ds = r_formtemplate-&gt;node_get_properties( cs_form_prop-dataset_id ) .

*   dataset: Available fields
    r_formtemplate-&gt;get_grid_fldseqprop(
        EXPORTING iv_id           = ls_form_prop_ds-id
        IMPORTING et_ctxt_prop    = lt_ctxt_prop_ds[]
                  et_fldseq       = lt_fldseq[] ) .
    CHECK lt_ctxt_prop_ds[] IS NOT INITIAL .

*   dataset: Link between Chart series and Dataset fields
    lt_dataset_series_tab[] = r_formtemplate-&gt;conv_dataset_series_st( cs_form_prop-dataset_series ) .

*   popup parameters: Common
    ls_excl-func = &apos;%SC&apos;  . APPEND ls_excl TO: lt_excl_link , lt_excl_dtsfld .
    ls_excl-func = &apos;&amp;RNT&apos; . APPEND ls_excl TO: lt_excl_link , lt_excl_dtsfld .
    ls_excl-func = &apos;&amp;OL0&apos; . APPEND ls_excl TO: lt_excl_link , lt_excl_dtsfld .
    ls_excl-func = &apos;&amp;ODN&apos; . APPEND ls_excl TO: lt_excl_link , lt_excl_dtsfld .
    ls_excl-func = &apos;&amp;OUP&apos; . APPEND ls_excl TO: lt_excl_link , lt_excl_dtsfld .
    ls_excl-func = &apos;&amp;ILT&apos; . APPEND ls_excl TO: lt_excl_link , lt_excl_dtsfld .
    ls_excl-func = &apos;&amp;ELP&apos; . APPEND ls_excl TO: lt_excl_link , lt_excl_dtsfld .
    ls_excl-func = &apos;&amp;ONT&apos; . APPEND ls_excl TO: lt_excl_link .

*   popup parameters: Dataset fields
*         -&gt;&gt; Title
    lv_title_dtsfld = v_text-t227 .  &quot; text: available columns set

*         -&gt;&gt; Fieldcatalog
    CLEAR ls_fct .
    ls_fct-fieldname   = &apos;DTSFLD_TEXT&apos; .
    ls_fct-outputlen   = 25 .
    ls_fct-hotspot     = abap_on .
    CONCATENATE v_text-t226  	      &quot;	text: columns
            &apos;(&apos; v_text-t234 &apos;)&apos;     &quot;	text: Dataset
           INTO ls_fct-coltext SEPARATED BY space .
    APPEND ls_fct TO lt_fct_dtsfld .

*         -&gt;&gt; Output table
    LOOP AT lt_fldseq INTO ls_fldseq  .
      READ TABLE lt_ctxt_prop_ds INTO ls_ctxt_prop_ds
        WITH KEY comp_fullpath = ls_fldseq-field
                 comp_type     = lcl_context=&gt;c_comp_type-element  .
      CHECK sy-subrc EQ 0 .

      APPEND INITIAL LINE TO lt_outtab_dtsfld ASSIGNING &lt;outtab_dtsfld&gt; .
      &lt;outtab_dtsfld&gt;-dtsfld  = ls_fldseq-field .
      CONCATENATE ls_ctxt_prop_ds-comp_name &apos;~~~(&apos;
                  ls_ctxt_prop_ds-comp_shortdescr &apos;)&apos;
             INTO &lt;outtab_dtsfld&gt;-dtsfld_text .
      TRANSLATE &lt;outtab_dtsfld&gt;-dtsfld_text USING &apos;~ &apos; .
    ENDLOOP .


*   popup parameters: Link
*         -&gt;&gt; Title
    lv_title_link = v_text-t245 .  &quot; text: Link between Chart series and Dataset fields

*         -&gt;&gt; Fieldcatalog
    CLEAR ls_fct .
    ls_fct-fieldname   = &apos;SERNUM&apos; .
    ls_fct-coltext     = v_text-t235 .  &quot; text: Series
    ls_fct-outputlen   = 6 .
    ls_fct-emphasize   = &apos;C500&apos; .
    APPEND ls_fct TO lt_fct_link .

    CLEAR ls_fct .
    ls_fct-fieldname   = &apos;SERCAP&apos; .
    ls_fct-outputlen   = 35 .
    ls_fct-emphasize   = &apos;C500&apos; .
    CONCATENATE v_text-t235  	      &quot;	text: Series
            &apos;(&apos; v_text-t232 &apos;)&apos;     &quot;	text: Chart
           INTO ls_fct-coltext SEPARATED BY space .
    APPEND ls_fct TO lt_fct_link .

    CLEAR ls_fct .
    ls_fct-fieldname   = &apos;STATUS&apos; .
    ls_fct-coltext     = v_text-t056 .  &quot; text: Status
    ls_fct-outputlen   = 3 .
    ls_fct-emphasize   = &apos;C510&apos; .
    ls_fct-icon        = abap_on .
    APPEND ls_fct TO lt_fct_link .

    CLEAR ls_fct .
    ls_fct-fieldname   = &apos;DTSFLD_TEXT&apos; .
    ls_fct-outputlen   = 40 .
    ls_fct-hotspot     = abap_on .
    CONCATENATE v_text-t226  	      &quot;	text: columns
            &apos;(&apos; v_text-t234 &apos;)&apos;     &quot;	text: Dataset
           INTO ls_fct-coltext SEPARATED BY space .
    APPEND ls_fct TO lt_fct_link .

*         -&gt;&gt; Output table
    SORT ls_drawings-chart_series BY idx .

    CLEAR ls_chart_series .
    ls_chart_series-idx       = c_chart_category_idx .
    ls_chart_series-caption   = v_text-t250 .     &quot;  text: Horizontal (Category) axis labels
    APPEND ls_chart_series TO ls_drawings-chart_series .

    LOOP AT ls_drawings-chart_series INTO ls_chart_series .
      APPEND INITIAL LINE TO lt_outtab_link ASSIGNING &lt;outtab_link&gt; .
      &lt;outtab_link&gt;-seridx      = ls_chart_series-idx     .
      &lt;outtab_link&gt;-sercap      = ls_chart_series-caption .
      IF ls_chart_series-idx EQ c_chart_category_idx .
        &lt;outtab_link&gt;-sernum    = icon_draw_arrow .
      ELSE .
        &lt;outtab_link&gt;-sernum    = sy-tabix . CONDENSE &lt;outtab_link&gt;-sernum .
      ENDIF .
      &lt;outtab_link&gt;-status      = icon_absence .
      &lt;outtab_link&gt;-dtsfld_text = v_text-t074 .   &quot;  text: &lt;...not assigned...&gt;

      READ TABLE lt_dataset_series_tab INTO ls_dataset_series_tab
        WITH KEY seridx = &lt;outtab_link&gt;-seridx .
      CHECK sy-subrc EQ 0
        AND ls_dataset_series_tab-dtsfld IS NOT INITIAL .
      &lt;outtab_link&gt;-status      = icon_alert .&quot;icon_message_error_small .
      &lt;outtab_link&gt;-dtsfld      = ls_dataset_series_tab-dtsfld .

      READ TABLE lt_ctxt_prop_ds INTO ls_ctxt_prop_ds
        WITH KEY comp_fullpath  = &lt;outtab_link&gt;-dtsfld .
      CHECK sy-subrc EQ 0 .

      CONCATENATE ls_ctxt_prop_ds-comp_name &apos;~~~(&apos;
                  ls_ctxt_prop_ds-comp_shortdescr &apos;)&apos;
             INTO &lt;outtab_link&gt;-dtsfld_text .
      TRANSLATE &lt;outtab_link&gt;-dtsfld_text USING &apos;~ &apos; .

      READ TABLE lt_outtab_dtsfld ASSIGNING &lt;outtab_dtsfld&gt;
        WITH KEY dtsfld = ls_dataset_series_tab-dtsfld .
      CHECK sy-subrc EQ 0 .
      &lt;outtab_link&gt;-status      = icon_presence .
    ENDLOOP .

    DO .
*     popup display: Link
      CLEAR lv_exit_link .
      CLEAR ls_selfield .
      CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
        EXPORTING
          i_title               = lv_title_link
          it_fieldcatalog       = lt_fct_link[]
          it_status_excl        = lt_excl_link[]
          i_screen_start_column = 10
          i_screen_start_line   = 5
          i_screen_end_column   = 100
          i_screen_end_line     = 15
        IMPORTING
          es_selfield           = ls_selfield
          e_exit                = lv_exit_link
        TABLES
          t_outtab              = lt_outtab_link[].
      IF lv_exit_link IS NOT INITIAL .
        EXIT . &quot; --&gt;&gt; do
      ENDIF .

      CHECK ls_selfield-tabindex NE 0 .
      READ TABLE lt_outtab_link ASSIGNING &lt;outtab_link&gt; INDEX ls_selfield-tabindex .
      CHECK sy-subrc EQ 0 .

*     popup display: Dataset fields
      CLEAR lv_exit_dtsfld .
      CLEAR ls_selfield .
      CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
        EXPORTING
          i_title               = lv_title_dtsfld
          it_fieldcatalog       = lt_fct_dtsfld[]
          it_status_excl        = lt_excl_dtsfld[]
          i_screen_start_column = 10
          i_screen_start_line   = 5
          i_screen_end_column   = 50
          i_screen_end_line     = 15
        IMPORTING
          es_selfield           = ls_selfield
          e_exit                = lv_exit_dtsfld
        TABLES
          t_outtab              = lt_outtab_dtsfld[].
      IF lv_exit_dtsfld IS NOT INITIAL .
        MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
        CHECK 1 = 2 .
      ENDIF .

      CHECK ls_selfield-tabindex NE 0 .
      READ TABLE lt_outtab_dtsfld ASSIGNING &lt;outtab_dtsfld&gt; INDEX ls_selfield-tabindex .
      CHECK sy-subrc EQ 0 .
      &lt;outtab_link&gt;-dtsfld      = &lt;outtab_dtsfld&gt;-dtsfld .
      &lt;outtab_link&gt;-dtsfld_text = &lt;outtab_dtsfld&gt;-dtsfld_text .
      &lt;outtab_link&gt;-status      = icon_presence .
    ENDDO .

*   convert ALV-outtab to result table
    CLEAR lt_dataset_series_tab[] .
    LOOP AT lt_outtab_link ASSIGNING &lt;outtab_link&gt; .
      CLEAR ls_dataset_series_tab .
      MOVE-CORRESPONDING &lt;outtab_link&gt; TO ls_dataset_series_tab .
      APPEND ls_dataset_series_tab TO lt_dataset_series_tab .
    ENDLOOP .

*   return result
    cs_form_prop-dataset_series = r_formtemplate-&gt;conv_dataset_series_ts( lt_dataset_series_tab[] ) .

  ENDMETHOD .                    &quot;popup_dataset_series
  METHOD popup_dataset_field .
    TYPES:
      BEGIN OF ty_s_outtab_dtsfld ,
        dtsfld              TYPE string ,
        dtsfld_text         TYPE ty_char100 ,
      END   OF ty_s_outtab_dtsfld ,
      ty_t_outtab_dtsfld    TYPE STANDARD TABLE OF ty_s_outtab_dtsfld .
    DATA:
      ls_form_prop_ds       TYPE lcl_form=&gt;ty_s_properties ,
      ls_ctxt_prop_ds       TYPE lcl_context=&gt;ty_s_properties ,
      lt_ctxt_prop_ds       TYPE lcl_context=&gt;ty_t_properties ,
      ls_fldseq             TYPE lcl_form=&gt;ty_s_grid_fldseq ,
      lt_fldseq             TYPE lcl_form=&gt;ty_t_grid_fldseq .
    DATA:
      lv_title_dtsfld       TYPE ty_char100 ,
      lv_exit_dtsfld        TYPE flag ,
      ls_fct                TYPE lvc_s_fcat ,
      lt_fct_dtsfld         TYPE lvc_t_fcat ,
      ls_excl               TYPE lvc_s_excl ,
      lt_excl_dtsfld        TYPE lvc_t_excl ,
      ls_selfield           TYPE slis_selfield ,
      lt_outtab_dtsfld      TYPE ty_t_outtab_dtsfld .
    FIELD-SYMBOLS:
      &lt;outtab_dtsfld&gt;       TYPE ty_s_outtab_dtsfld .

    CHECK iv_dataset_id IS NOT INITIAL .

*   dataset: Properties
    ls_form_prop_ds = r_formtemplate-&gt;node_get_properties( iv_dataset_id ) .

*   dataset: Available fields
    r_formtemplate-&gt;get_grid_fldseqprop(
        EXPORTING iv_id           = ls_form_prop_ds-id
        IMPORTING et_ctxt_prop    = lt_ctxt_prop_ds[]
                  et_fldseq       = lt_fldseq[] ) .
    CHECK lt_ctxt_prop_ds[] IS NOT INITIAL .

*   popup parameters: Common
    ls_excl-func = &apos;%SC&apos;  . APPEND ls_excl TO: lt_excl_dtsfld .
    ls_excl-func = &apos;&amp;RNT&apos; . APPEND ls_excl TO: lt_excl_dtsfld .
    ls_excl-func = &apos;&amp;OL0&apos; . APPEND ls_excl TO: lt_excl_dtsfld .
    ls_excl-func = &apos;&amp;ODN&apos; . APPEND ls_excl TO: lt_excl_dtsfld .
    ls_excl-func = &apos;&amp;OUP&apos; . APPEND ls_excl TO: lt_excl_dtsfld .
    ls_excl-func = &apos;&amp;ILT&apos; . APPEND ls_excl TO: lt_excl_dtsfld .
    ls_excl-func = &apos;&amp;ELP&apos; . APPEND ls_excl TO: lt_excl_dtsfld .

*         -&gt;&gt; Title
    lv_title_dtsfld = v_text-t227 .  &quot; text: available columns set

*         -&gt;&gt; Fieldcatalog
    CLEAR ls_fct .
    ls_fct-fieldname   = &apos;DTSFLD_TEXT&apos; .
    ls_fct-outputlen   = 25 .
    ls_fct-hotspot     = abap_on .
    CONCATENATE v_text-t226  	      &quot;	text: columns
            &apos;(&apos; v_text-t234 &apos;)&apos;     &quot;	text: Dataset
           INTO ls_fct-coltext SEPARATED BY space .
    APPEND ls_fct TO lt_fct_dtsfld .

*         -&gt;&gt; Output table
    LOOP AT lt_fldseq INTO ls_fldseq  .
      READ TABLE lt_ctxt_prop_ds INTO ls_ctxt_prop_ds
        WITH KEY comp_fullpath = ls_fldseq-field
                 comp_type     = lcl_context=&gt;c_comp_type-element  .
      CHECK sy-subrc EQ 0 .

      APPEND INITIAL LINE TO lt_outtab_dtsfld ASSIGNING &lt;outtab_dtsfld&gt; .
      &lt;outtab_dtsfld&gt;-dtsfld  = ls_fldseq-field .
      CONCATENATE ls_ctxt_prop_ds-comp_name &apos;~~~(&apos;
                  ls_ctxt_prop_ds-comp_shortdescr &apos;)&apos;
             INTO &lt;outtab_dtsfld&gt;-dtsfld_text .
      TRANSLATE &lt;outtab_dtsfld&gt;-dtsfld_text USING &apos;~ &apos; .
    ENDLOOP .


*   popup display: Dataset fields
    CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
      EXPORTING
        i_title               = lv_title_dtsfld
        it_fieldcatalog       = lt_fct_dtsfld[]
        it_status_excl        = lt_excl_dtsfld[]
        i_screen_start_column = 10
        i_screen_start_line   = 5
        i_screen_end_column   = 50
        i_screen_end_line     = 15
      IMPORTING
        es_selfield           = ls_selfield
        e_exit                = lv_exit_dtsfld
      TABLES
        t_outtab              = lt_outtab_dtsfld[].
    IF lv_exit_dtsfld IS NOT INITIAL .
      MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
      RETURN .
    ENDIF .

    CHECK ls_selfield-tabindex NE 0 .
    READ TABLE lt_outtab_dtsfld ASSIGNING &lt;outtab_dtsfld&gt; INDEX ls_selfield-tabindex .
    CHECK sy-subrc EQ 0 .
    cv_fieldname = &lt;outtab_dtsfld&gt;-dtsfld .

  ENDMETHOD .                    &quot;popup_dataset_field
  METHOD popup_formname_f4 .

*=======================================================================
* prepare selection criteria
*=======================================================================
    DATA:
      so_objid          TYPE RANGE OF wwwdatatab-objid ,
      so_text           TYPE RANGE OF wwwdatatab-text ,
      so_devcl          TYPE RANGE OF tadir-devclass ,
      lv_title          TYPE ty_char100 ,
      lv_back           TYPE ty_char1 .
    FIELD-SYMBOLS:
      &lt;objid&gt;           LIKE LINE OF so_objid .

*     call report with additional parameters
    lv_title = lcl_root=&gt;v_text-t136 . &quot; text: Search the XLSX-form
    FREE MEMORY ID &apos;webrfc&apos; .

    IF cv_formname IS NOT INITIAL .
      APPEND INITIAL LINE TO so_objid ASSIGNING &lt;objid&gt; .
      &lt;objid&gt;-sign   = &apos;I&apos; .
      &lt;objid&gt;-option = &apos;EQ&apos; .
      &lt;objid&gt;-low    = cv_formname .
      FIND FIRST OCCURRENCE OF &apos;*&apos; IN cv_formname .
      IF sy-subrc EQ 0 .
        &lt;objid&gt;-option = &apos;CP&apos; .
      ELSE .
        FIND FIRST OCCURRENCE OF &apos;+&apos; IN cv_formname .
        IF sy-subrc EQ 0 .
          &lt;objid&gt;-option = &apos;CP&apos; .
        ENDIF .
      ENDIF .
    ENDIF .

    SUBMIT rswwwshw VIA SELECTION-SCREEN
      WITH r_relid  EQ lcl_form=&gt;c_relid
      WITH r_title  EQ lv_title
      WITH so_objid IN so_objid
       AND RETURN .

*     r_back is space -&gt; F3 pressed else r_back = N
    IMPORT back TO lv_back FROM MEMORY ID &apos;webrfc&apos; .
    CHECK lv_back EQ &apos;N&apos; .

*     retrieve and process selection criteria
    IMPORT so_objid TO so_objid
           so_text  TO so_text
           so_devcl TO so_devcl FROM MEMORY ID &apos;%_RSWWWSHW_SEL&apos; .
    IF so_objid IS INITIAL .
      APPEND INITIAL LINE TO so_objid ASSIGNING &lt;objid&gt; .
      &lt;objid&gt;-sign   = &apos;I&apos; .
      &lt;objid&gt;-option = &apos;CP&apos; .
      &lt;objid&gt;-low    = &apos;*&apos; .
    ENDIF .

    LOOP AT so_objid ASSIGNING &lt;objid&gt; .
      &lt;objid&gt;-low = lcl_form=&gt;conv_formname_ei( &lt;objid&gt;-low ) .
    ENDLOOP .

*=======================================================================
* prepare the output dataset
*=======================================================================
    DATA lt_outtab   TYPE STANDARD TABLE OF wwwdatatab .
    FIELD-SYMBOLS &lt;outtab&gt;  TYPE wwwdatatab .

    SELECT *
      FROM wwwdata    AS f
     INNER JOIN tadir AS p
        ON f~objid    EQ p~obj_name
      INTO CORRESPONDING FIELDS OF TABLE lt_outtab
     WHERE f~text     IN so_text
       AND f~srtf2    EQ 0
       AND f~relid    EQ lcl_form=&gt;c_relid
       AND p~pgmid    EQ lcl_form=&gt;c_pgmid
       AND p~object   EQ lcl_form=&gt;c_object
       AND p~devclass IN so_devcl
       AND p~obj_name IN so_objid .

    IF lt_outtab[] IS INITIAL .
      MESSAGE s000(lp) WITH lcl_root=&gt;v_text-t137 . &quot; text: Data was not found.
      EXIT .
    ENDIF .
    SORT lt_outtab  BY devclass objid ASCENDING .

    LOOP AT lt_outtab ASSIGNING &lt;outtab&gt; .
      &lt;outtab&gt;-objid = lcl_form=&gt;conv_formname_ie( &lt;outtab&gt;-objid ) .
    ENDLOOP .

*=======================================================================
* display the grid
*=======================================================================
    DATA:
      lt_fct_f4         TYPE lvc_t_fcat ,
      ls_excl_f4        TYPE lvc_s_excl ,
      lt_excl_f4        TYPE lvc_t_excl ,
      ls_selfield       TYPE slis_selfield ,
      lv_exit           TYPE flag .
    FIELD-SYMBOLS:
      &lt;fct_f4&gt;          TYPE lvc_s_fcat .

*     prepare fieldcatalog
    CALL FUNCTION &apos;LVC_FIELDCATALOG_MERGE&apos;
      EXPORTING
        i_structure_name   = &apos;WWWDATATAB&apos;
        i_bypassing_buffer = abap_off
      CHANGING
        ct_fieldcat        = lt_fct_f4
      EXCEPTIONS
        OTHERS             = 3.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      EXIT .
    ENDIF .
    LOOP AT lt_fct_f4 ASSIGNING &lt;fct_f4&gt; .
      CASE &lt;fct_f4&gt;-fieldname .
        WHEN &apos;OBJID&apos; .    &lt;fct_f4&gt;-col_pos = 1 .    &lt;fct_f4&gt;-outputlen = 20 .   &lt;fct_f4&gt;-emphasize = &apos;C500&apos; .
        WHEN &apos;TEXT&apos; .     &lt;fct_f4&gt;-col_pos = 2 .    &lt;fct_f4&gt;-outputlen = 20 .
        WHEN &apos;DEVCLASS&apos; . &lt;fct_f4&gt;-col_pos = 3 .    &lt;fct_f4&gt;-outputlen = 15 .
        WHEN &apos;TDATE&apos; .    &lt;fct_f4&gt;-col_pos = 4 .
        WHEN &apos;TTIME&apos; .    &lt;fct_f4&gt;-col_pos = 5 .
        WHEN OTHERS.      &lt;fct_f4&gt;-tech = abap_on .
      ENDCASE .
    ENDLOOP .

*     exclude some buttons
    ls_excl_f4-func = &apos;%SC&apos;  .  APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;RNT&apos; .  APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OL0&apos; .  APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ODN&apos; .  APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OUP&apos; .  APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ILT&apos; .  APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ONT&apos; .  APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ELP&apos; .  APPEND ls_excl_f4 TO lt_excl_f4 .

*     popup list
    CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
      EXPORTING
        i_title         = lv_title
        it_fieldcatalog = lt_fct_f4[]
        it_status_excl  = lt_excl_f4[]
      IMPORTING
        es_selfield     = ls_selfield
        e_exit          = lv_exit
      TABLES
        t_outtab        = lt_outtab[].
    CHECK lv_exit IS INITIAL .

*=======================================================================
* result
*=======================================================================
    CHECK ls_selfield-tabindex NE 0 .
    READ TABLE lt_outtab ASSIGNING &lt;outtab&gt; INDEX ls_selfield-tabindex .
    CHECK sy-subrc EQ 0 .

    cv_formname =  &lt;outtab&gt;-objid .
  ENDMETHOD .                    &quot;popup_formname_f4
  METHOD popup_devclass .
    CLEAR rv_devclass .

    DATA ls_tadir  TYPE tadir .
    ls_tadir-pgmid      = lcl_form=&gt;c_pgmid .
    ls_tadir-object     = lcl_form=&gt;c_object .
    ls_tadir-obj_name   = iv_objid .
    ls_tadir-srcsystem  = sy-sysid .
    ls_tadir-author     = sy-uname .
    ls_tadir-masterlang = sy-langu .

    CALL FUNCTION &apos;TRINT_TADIR_POPUP&apos;
      EXPORTING
        wi_existence_check        = abap_on
        wi_message_enter_devclass = abap_on
        wi_tadir                  = ls_tadir
        wi_no_tadir               = abap_on
        wi_no_tdevc               = abap_on
        wi_no_delete_function     = abap_on
      IMPORTING
        we_tadir_new              = ls_tadir
      EXCEPTIONS
        display_mode              = 1
        exit                      = 2
        OTHERS                    = 15.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
    ENDIF .
    rv_devclass = ls_tadir-devclass .
  ENDMETHOD .                    &quot;popup_devclass
  METHOD popup_pgbrk .

    DATA:
      lv_fieldtext        TYPE sval-fieldtext ,
      lv_value            TYPE sval-value ,
      lv_cancel           TYPE flag .

    IF iv_top IS NOT INITIAL .
      lv_fieldtext = v_text-t163 .    &quot; text: row(s)
    ELSEIF iv_left IS NOT INITIAL .
      lv_fieldtext = v_text-t162 .    &quot; text: column(s)
    ENDIF .
    IF cv_shift IS NOT INITIAL .
      lv_value     = cv_shift .
    ENDIF .

    popup_to_get_value(
        EXPORTING iv_title      = v_text-t156  &quot; --&gt;&gt; text: Extend unbroken area
                  iv_tabname    = &apos;SYST&apos;
                  iv_fieldname  = &apos;INDEX&apos;
                  iv_fieldtext  = lv_fieldtext
        IMPORTING ev_cancel     = lv_cancel
        CHANGING  cv_value      = lv_value ) .

    CHECK lv_cancel IS INITIAL .
    cv_shift = lv_value .

  ENDMETHOD .                    &quot;popup_pgbrk
  METHOD popup_printtitles .

    TYPES:
      BEGIN OF ty_s_patterns_f4 ,
        id                TYPE lcl_form=&gt;ty_s_properties-id ,
        comp_name         TYPE lcl_form=&gt;ty_s_properties-comp_name,
        comp_descr        TYPE lcl_form=&gt;ty_s_properties-comp_descr,
      END   OF ty_s_patterns_f4 ,
      ty_t_patterns_f4    TYPE STANDARD TABLE OF ty_s_patterns_f4 .
    DATA:
      lv_title            TYPE ty_char100 ,
      ls_fct_f4           TYPE lvc_s_fcat ,
      lt_fct_f4           TYPE lvc_t_fcat ,
      ls_excl_f4          TYPE lvc_s_excl ,
      lt_excl_f4          TYPE lvc_t_excl ,
      ls_selfield         TYPE slis_selfield ,
      lv_exit             TYPE flag ,
      ls_form_prop        TYPE lcl_form=&gt;ty_s_properties ,
      ls_patternarea      TYPE lcl_form=&gt;ty_s_patternarea ,
      ls_patterns_f4      TYPE ty_s_patterns_f4 ,
      lt_patterns_f4      TYPE ty_t_patterns_f4 .

    LOOP AT r_formtemplate-&gt;t_patternarea INTO ls_patternarea
      WHERE sheetname EQ iv_sheetname .

      ls_form_prop = r_formtemplate-&gt;node_get_properties( ls_patternarea-areaid ) .
      CHECK r_formtemplate-&gt;v_retcode EQ c_retcode-okey .

      CLEAR ls_patterns_f4 .
      ls_patterns_f4-id         = ls_form_prop-id .
      ls_patterns_f4-comp_name  = ls_form_prop-comp_name .
      ls_patterns_f4-comp_descr = ls_form_prop-comp_descr .
      APPEND ls_patterns_f4 TO lt_patterns_f4 .
    ENDLOOP .

    IF lt_patterns_f4[] IS INITIAL .
      MESSAGE i000(lp) WITH v_text-t164 .   &quot; text: Patterns are not found
      EXIT .
    ENDIF .

    ls_excl_f4-func = &apos;%SC&apos;  . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;RNT&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OL0&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ODN&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;OUP&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ILT&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .
    ls_excl_f4-func = &apos;&amp;ELP&apos; . APPEND ls_excl_f4 TO lt_excl_f4 .

    ls_fct_f4-fieldname   = &apos;COMP_NAME&apos; .
    ls_fct_f4-outputlen   = 30 .
    APPEND ls_fct_f4 TO lt_fct_f4 .
    ls_fct_f4-fieldname   = &apos;COMP_DESCR&apos; .
    ls_fct_f4-outputlen   = 35 .
    APPEND ls_fct_f4 TO lt_fct_f4 .

    lv_title = v_text-t165 .  &quot; text: Select a pattern

    CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
      EXPORTING
        i_title               = lv_title
        it_fieldcatalog       = lt_fct_f4[]
        it_status_excl        = lt_excl_f4[]
        i_screen_start_column = 10
        i_screen_start_line   = 5
        i_screen_end_column   = 80
        i_screen_end_line     = 10
      IMPORTING
        es_selfield           = ls_selfield
        e_exit                = lv_exit
      TABLES
        t_outtab              = lt_patterns_f4[].

    IF lv_exit IS NOT INITIAL .
      MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
      EXIT .
    ENDIF .

    CHECK ls_selfield-tabindex  NE 0 .
    READ TABLE lt_patterns_f4 INTO ls_patterns_f4 INDEX ls_selfield-tabindex .
    CHECK sy-subrc EQ 0 .

    cv_comp_id = ls_patterns_f4-id .

  ENDMETHOD .                    &quot;popup_printtitles
  METHOD popup_grid_fldseq .
    DATA:
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      lt_ctxt_prop          TYPE lcl_context=&gt;ty_t_properties ,
      ls_fldseq             TYPE lcl_form=&gt;ty_s_grid_fldseq ,
      lt_fldseq             TYPE lcl_form=&gt;ty_t_grid_fldseq ,
      ls_fields             TYPE lvc_s_objs ,
      lt_fields             TYPE lvc_t_objs ,
      lt_fields_included    TYPE STANDARD TABLE OF lvc_s_objs ,
      lt_fields_excluded    TYPE STANDARD TABLE OF lvc_s_objs ,
      lv_title_left         TYPE sy-title ,
      lv_title_right        TYPE sy-title ,
      lv_popup_title        TYPE sy-title ,
      ls_layout             TYPE lvc_s_daly ,
      lv_exit               TYPE flag .

    r_formtemplate-&gt;get_grid_fldseqprop(
        EXPORTING iv_id           = cs_form_prop-id
        IMPORTING et_ctxt_prop    = lt_ctxt_prop[]
                  et_fldseq       = lt_fldseq[] ) .

    CHECK lt_ctxt_prop[] IS NOT INITIAL .

    LOOP AT lt_ctxt_prop INTO ls_ctxt_prop
      WHERE comp_type EQ lcl_context=&gt;c_comp_type-element  .

      CLEAR ls_fields .
      ls_fields-id = ls_ctxt_prop-id .
      CONCATENATE ls_ctxt_prop-comp_name &apos;~~~(&apos;
                  ls_ctxt_prop-comp_shortdescr &apos;)&apos;
             INTO ls_fields-text .
      TRANSLATE ls_fields-text USING &apos;~ &apos; .
      APPEND ls_fields TO lt_fields .
    ENDLOOP .

    lt_fields_excluded[] = lt_fields[] .

    LOOP AT lt_fldseq INTO ls_fldseq .
      READ TABLE lt_ctxt_prop INTO ls_ctxt_prop WITH KEY comp_fullpath = ls_fldseq-field .
      CHECK sy-subrc EQ 0 .
      READ TABLE lt_fields INTO ls_fields WITH KEY id = ls_ctxt_prop-id .
      CHECK sy-subrc EQ 0 .
      APPEND ls_fields TO lt_fields_included .
      DELETE lt_fields_excluded WHERE id EQ ls_ctxt_prop-id .
    ENDLOOP .

*   popup to select fields
    lv_popup_title      = v_text-t228 .   &quot; --&gt;&gt; text: Setting up columns in the output table
    lv_title_left       = v_text-t226 .   &quot; --&gt;&gt; text: columns
    lv_title_right      = v_text-t227 .   &quot; --&gt;&gt; text: available columns set
    ls_layout-no_icons  = abap_on .

    CALL FUNCTION &apos;REUSE_DOUBLE_ALV&apos;
      EXPORTING
        i_title_left         = lv_title_left
        i_title_right        = lv_title_right
        i_popup_title        = lv_popup_title
        is_layout_double_alv = ls_layout
      IMPORTING
        e_cancelled          = lv_exit
      TABLES
        t_leftx              = lt_fields_included
        t_rightx             = lt_fields_excluded.

    IF lv_exit IS NOT INITIAL
    OR lt_fields_included[] IS INITIAL .
      MESSAGE s000(lp) WITH v_text-t100 .	&quot; --&gt;&gt; text: Operation was terminated by the user
      EXIT .
    ENDIF .

*   return value
    CLEAR lt_fldseq .

    LOOP AT lt_fields_included INTO ls_fields .
      READ TABLE lt_ctxt_prop INTO ls_ctxt_prop WITH KEY id = ls_fields-id .
      CHECK sy-subrc EQ 0 .
      ls_fldseq-field = ls_ctxt_prop-comp_fullpath .
      APPEND ls_fldseq TO lt_fldseq .
    ENDLOOP .
    cs_form_prop-grid_fldseq = r_formtemplate-&gt;conv_grid_fldseq_ts( lt_fldseq ) .

  ENDMETHOD .                    &quot;popup_grid_fldseq
  METHOD popup_grid_fldprop .
    TYPES:
      BEGIN OF ty_s_outtab ,
        field               TYPE string ,
        field_text          TYPE ty_char255 ,
        marker              TYPE icon_d ,
        autofitmerged       TYPE icon_d ,
      END   OF ty_s_outtab ,
      ty_t_outtab           TYPE STANDARD TABLE OF ty_s_outtab .
    DATA:
      lt_fldprop            TYPE lcl_form=&gt;ty_t_grid_fldprop ,
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      lt_ctxt_prop          TYPE lcl_context=&gt;ty_t_properties .
    DATA:
      lv_title              TYPE ty_char100 ,
      lv_exit               TYPE flag ,
      ls_fct                TYPE lvc_s_fcat ,
      lt_fct                TYPE lvc_t_fcat ,
      ls_excl               TYPE lvc_s_excl ,
      lt_excl               TYPE lvc_t_excl ,
      ls_selfield           TYPE slis_selfield ,
      lt_outtab             TYPE ty_t_outtab ,
      lv_selected           TYPE ty_char1 ,
      lv_info_flag          TYPE flag .
    FIELD-SYMBOLS:
      &lt;outtab&gt;              TYPE ty_s_outtab ,
      &lt;fldprop&gt;             TYPE lcl_form=&gt;ty_s_grid_fldprop .

    r_formtemplate-&gt;get_grid_fldseqprop(
        EXPORTING iv_id           = cs_form_prop-id
        IMPORTING et_ctxt_prop    = lt_ctxt_prop[]
                  et_fldprop      = lt_fldprop[] ) .

    CHECK lt_fldprop[] IS NOT INITIAL .

*   popup parameters:
*         -&gt;&gt; Excluded functions
    ls_excl-func = &apos;%SC&apos;  . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;RNT&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;OL0&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ODN&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;OUP&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ILT&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ELP&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ONT&apos; . APPEND ls_excl TO lt_excl .
*         -&gt;&gt; Title
    lv_title = v_text-t279 .  &quot; text: Properties of the Grid columns

*         -&gt;&gt; Fieldcatalog
    CLEAR ls_fct .
    ls_fct-fieldname   = &apos;MARKER&apos; .
    ls_fct-outputlen   = 2 .
    ls_fct-icon        = abap_on .
    APPEND ls_fct TO lt_fct .
    CLEAR ls_fct .
    ls_fct-fieldname   = &apos;FIELD_TEXT&apos; .
    ls_fct-outputlen   = 70 .
    ls_fct-coltext     = v_text-t227 .  &quot; text: available columns set
    APPEND ls_fct TO lt_fct .
    CLEAR ls_fct .
    ls_fct-fieldname   = &apos;AUTOFITMERGED&apos; .
    ls_fct-outputlen   = 7 .
    ls_fct-coltext     = &apos;AutoFit&apos; .
    ls_fct-tooltip     = v_text-t275 .  &quot; text: AutoFit for merged cells
    ls_fct-icon        = abap_on .
    ls_fct-hotspot     = abap_on .
    ls_fct-emphasize   = &apos;C500&apos; .
    APPEND ls_fct TO lt_fct .

*         -&gt;&gt; Output table
    LOOP AT lt_fldprop ASSIGNING &lt;fldprop&gt; .
      READ TABLE lt_ctxt_prop INTO ls_ctxt_prop
        WITH KEY comp_fullpath = &lt;fldprop&gt;-field
                 comp_type     = lcl_context=&gt;c_comp_type-element  .
      CHECK sy-subrc EQ 0 .

*     field
      APPEND INITIAL LINE TO lt_outtab ASSIGNING &lt;outtab&gt; .
      &lt;outtab&gt;-field  = &lt;fldprop&gt;-field .

*     field text
      format_path( EXPORTING iv_source    = ls_ctxt_prop-comp_name
                   CHANGING  cv_formatted = &lt;outtab&gt;-field_text  ) .
      CONCATENATE &lt;outtab&gt;-field_text &apos;~~~(&apos;
                  ls_ctxt_prop-comp_shortdescr &apos;)&apos;
             INTO &lt;outtab&gt;-field_text .
      TRANSLATE &lt;outtab&gt;-field_text USING &apos;~ &apos; .

*     marker
      IF  &lt;fldprop&gt;-autofitmerged_r IS INITIAL
      AND &lt;fldprop&gt;-autofitmerged_c IS INITIAL .
        &lt;outtab&gt;-marker = icon_rating_neutral .
      ELSE .
        &lt;outtab&gt;-marker = icon_rating_positive .
      ENDIF .

*     &apos;autofit merged cells&apos; property
      &lt;outtab&gt;-autofitmerged = icon_distribute_configuration .
    ENDLOOP .

    DO .
*     popup display: column list
      CLEAR lv_exit .
      CLEAR ls_selfield .
      CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
        EXPORTING
          i_title               = lv_title
          it_fieldcatalog       = lt_fct[]
          it_status_excl        = lt_excl[]
          i_screen_start_column = 10
          i_screen_start_line   = 5
          i_screen_end_column   = 100
          i_screen_end_line     = 15
        IMPORTING
          es_selfield           = ls_selfield
          e_exit                = lv_exit
        TABLES
          t_outtab              = lt_outtab[].
      IF lv_exit IS NOT INITIAL .
        EXIT . &quot; --&gt;&gt; do
      ENDIF .

      CHECK ls_selfield-tabindex NE 0 .
      READ TABLE lt_outtab ASSIGNING &lt;outtab&gt; INDEX ls_selfield-tabindex .
      CHECK sy-subrc EQ 0 .

      READ TABLE lt_fldprop ASSIGNING &lt;fldprop&gt; WITH KEY field = &lt;outtab&gt;-field .
      CHECK sy-subrc EQ 0 .

      CASE ls_selfield-fieldname .
        WHEN &apos;AUTOFITMERGED&apos; .
          IF &lt;fldprop&gt;-autofitmerged_r IS NOT INITIAL .
            lv_selected = 2 .
          ELSEIF &lt;fldprop&gt;-autofitmerged_c IS NOT INITIAL .
            lv_selected = 3 .
          ELSE .
            lv_selected = 1 .
          ENDIF .

          popup_to_decide(  EXPORTING iv_title       = &lt;outtab&gt;-field_text
                                      iv_text        = v_text-t275                &quot; --&gt;&gt; text: AutoFit for merged cells
                                      iv_text_rb1    = v_text-t276                &quot; --&gt;&gt; text: Off
                                      iv_text_rb2    = v_text-t277                &quot; --&gt;&gt; text: Row height
                                      iv_text_rb3    = v_text-t278                &quot; --&gt;&gt; text: Col.width
                            CHANGING  cv_selected_rb = lv_selected ) .
          CASE lv_selected .
            WHEN &apos;1&apos; . &lt;fldprop&gt;-autofitmerged_r = abap_off . &lt;fldprop&gt;-autofitmerged_c = abap_off .
            WHEN &apos;2&apos; . &lt;fldprop&gt;-autofitmerged_r = abap_on  . &lt;fldprop&gt;-autofitmerged_c = abap_off .
            WHEN &apos;3&apos; . &lt;fldprop&gt;-autofitmerged_r = abap_off . &lt;fldprop&gt;-autofitmerged_c = abap_on .
            WHEN &apos;A&apos; .
          ENDCASE .
          IF  &lt;fldprop&gt;-autofitmerged_r IS INITIAL
          AND &lt;fldprop&gt;-autofitmerged_c IS INITIAL .
            &lt;outtab&gt;-marker = icon_rating_neutral .
          ELSE .
            &lt;outtab&gt;-marker = icon_rating_positive .

            IF lv_info_flag IS INITIAL .
              lv_info_flag = abap_on .
              popup_postprocessing_info( ) .
            ENDIF .
          ENDIF .

        WHEN OTHERS .

      ENDCASE .
    ENDDO .

*   return result
    cs_form_prop-grid_fldprop = r_formtemplate-&gt;conv_grid_fldprop_ts( lt_fldprop ) .

  ENDMETHOD .                    &quot;popup_grid_fldprop
  METHOD popup_vbs_code_editor .
    TYPES:
      ty_v_content        TYPE c LENGTH 255 .
    DATA:
      lv_content          TYPE ty_v_content ,
      lt_content          TYPE STANDARD TABLE OF ty_v_content,
      lv_changed          TYPE s38e-buf_varied ,
      lv_subrc            TYPE sy-subrc ,
      lv_vbs_code_tmp     TYPE string ,
      lv_vbs_code_before  TYPE string .

    cv_cancel          = abap_on .
    lv_vbs_code_before = cv_vbs_code .

    IF cv_vbs_code IS INITIAL .
      popup_postprocessing_info( ) .

      cv_vbs_code = r_formtemplate-&gt;vbs_code_default_get( ) .
    ENDIF .

    SPLIT cv_vbs_code
       AT cl_abap_char_utilities=&gt;cr_lf
       INTO TABLE lt_content .

    CALL FUNCTION &apos;EDITOR_TABLE&apos;
      IMPORTING
        changed = lv_changed
        subrc   = lv_subrc
      TABLES
        content = lt_content.
    IF lv_subrc NE 0 .
      MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
      RETURN .
    ELSEIF lv_changed IS INITIAL .
      MESSAGE s000(lp) WITH v_text-t289 .	&quot;	text: There are no changes
      RETURN .
    ENDIF .

    CLEAR cv_vbs_code .
    CLEAR cv_cancel   .

    LOOP AT lt_content INTO lv_content .
      CASE sy-tabix .
        WHEN 1 .
          cv_vbs_code = lv_content .
        WHEN OTHERS .
          CONCATENATE cv_vbs_code lv_content
                 INTO cv_vbs_code
                 SEPARATED BY cl_abap_char_utilities=&gt;cr_lf .
      ENDCASE .
    ENDLOOP .

    r_formtemplate-&gt;vbs_code_validate( CHANGING cv_vbs_code = cv_vbs_code ) .

    IF cv_vbs_code NE lv_vbs_code_before .
      CLEAR cv_cancel .
    ENDIF .

  ENDMETHOD .                    &quot;popup_vbs_code_editor
  METHOD popup_vbs_tables .
    TYPES:
      BEGIN OF ty_s_outtab ,
        icon_checkbox       TYPE icon_d ,
        table_name          TYPE string ,
        cb_relpath          TYPE string ,
        cb_relpath_out      TYPE ty_char255 ,
        cb_shortdescr       TYPE ty_char255 ,
      END   OF ty_s_outtab ,
      ty_t_outtab           TYPE STANDARD TABLE OF ty_s_outtab .
    DATA:
      lt_vbs_tables_tab_r   TYPE ty_t_vbs_tables_tab ,
      lt_vbs_tables_tab_s   TYPE ty_t_vbs_tables_tab .
    DATA:
      lv_title              TYPE ty_char100 ,
      lv_exit               TYPE flag ,
      ls_fct                TYPE lvc_s_fcat ,
      lt_fct                TYPE lvc_t_fcat ,
      ls_excl               TYPE lvc_s_excl ,
      lt_excl               TYPE lvc_t_excl ,
      ls_selfield           TYPE slis_selfield ,
      lt_outtab             TYPE ty_t_outtab ,
      lv_selected           TYPE ty_char1 ,
      lv_vbs_tables_before  TYPE string .
    FIELD-SYMBOLS:
      &lt;ls_vbs_tables_tab_r&gt; TYPE ty_s_vbs_tables_tab ,
      &lt;ls_vbs_tables_tab_s&gt; TYPE ty_s_vbs_tables_tab ,
      &lt;ls_outtab&gt;           TYPE ty_s_outtab .

    cv_cancel            = abap_on .
    lv_vbs_tables_before = cv_vbs_tables .

*------ get relevant context nested tables (on root level)
    lt_vbs_tables_tab_r = r_formtemplate-&gt;get_relevant_vbs_tables( ) .

*------ get chosen tables list
    lt_vbs_tables_tab_s = r_formtemplate-&gt;conv_vbs_tables_st( cv_vbs_tables ) .

*------ convert tables list to output table
    LOOP AT lt_vbs_tables_tab_r ASSIGNING &lt;ls_vbs_tables_tab_r&gt; .

      APPEND INITIAL LINE TO lt_outtab ASSIGNING &lt;ls_outtab&gt; .
      &lt;ls_outtab&gt;-cb_relpath     = &lt;ls_vbs_tables_tab_r&gt;-cb_relpath .
      &lt;ls_outtab&gt;-cb_shortdescr  = &lt;ls_vbs_tables_tab_r&gt;-cb_shortdescr .

      format_path( EXPORTING iv_source    = &lt;ls_outtab&gt;-cb_relpath
                   CHANGING  cv_formatted = &lt;ls_outtab&gt;-cb_relpath_out ) .

      READ TABLE lt_vbs_tables_tab_s ASSIGNING &lt;ls_vbs_tables_tab_s&gt;
        WITH KEY cb_relpath = &lt;ls_outtab&gt;-cb_relpath .
      CASE sy-subrc .
        WHEN 0 .
          &lt;ls_outtab&gt;-table_name    = &lt;ls_vbs_tables_tab_s&gt;-table_name .
          &lt;ls_outtab&gt;-icon_checkbox = icon_checkbox .
        WHEN OTHERS .
          &lt;ls_outtab&gt;-icon_checkbox = icon_wd_iframe .
      ENDCASE .
    ENDLOOP .

*------ prepare popup parameters:
*         -&gt;&gt; Excluded functions
    ls_excl-func = &apos;%SC&apos;  . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;RNT&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;OL0&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ODN&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;OUP&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ILT&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ELP&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ONT&apos; . APPEND ls_excl TO lt_excl .
*         -&gt;&gt; Title
    lv_title = v_text-t291 .  &quot; text: Tables for transferring data to Final VBScript post-processing

*         -&gt;&gt; Fieldcatalog
    CLEAR ls_fct .
    ls_fct-fieldname   = &apos;ICON_CHECKBOX&apos; .
    ls_fct-outputlen   = 5 .
    ls_fct-icon        = abap_on .
    ls_fct-hotspot     = abap_on .
    ls_fct-emphasize   = &apos;C500&apos; .
    APPEND ls_fct TO lt_fct .
    CLEAR ls_fct .
    ls_fct-fieldname   = &apos;CB_RELPATH_OUT&apos; .
    ls_fct-outputlen   = 40 .
    ls_fct-coltext     = v_text-t077 .  &quot; text: Binding with context
    APPEND ls_fct TO lt_fct .
    CLEAR ls_fct .
    ls_fct-fieldname   = &apos;CB_SHORTDESCR&apos; .
    ls_fct-outputlen   = 30 .
    ls_fct-coltext     = v_text-t058 .  &quot; text: Description
    APPEND ls_fct TO lt_fct .
    CLEAR ls_fct .
    ls_fct-fieldname   = &apos;TABLE_NAME&apos; .
    ls_fct-outputlen   = 30 .
    ls_fct-coltext     = v_text-t294 .  &quot; text: Table name
    ls_fct-hotspot     = abap_on .
    ls_fct-emphasize   = &apos;C500&apos; .
    APPEND ls_fct TO lt_fct .

    DO .
*------ display popup-list
      CLEAR lv_exit .
      CLEAR ls_selfield .
      CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
        EXPORTING
          i_title               = lv_title
          it_fieldcatalog       = lt_fct[]
          it_status_excl        = lt_excl[]
          i_screen_start_column = 10
          i_screen_start_line   = 5
          i_screen_end_column   = 130
          i_screen_end_line     = 15
        IMPORTING
          es_selfield           = ls_selfield
          e_exit                = lv_exit
        TABLES
          t_outtab              = lt_outtab[].
      IF lv_exit IS NOT INITIAL .
        EXIT . &quot; --&gt;&gt; do
      ENDIF .

*------ interaction
      CHECK ls_selfield-tabindex NE 0 .
      READ TABLE lt_outtab ASSIGNING &lt;ls_outtab&gt; INDEX ls_selfield-tabindex .
      CHECK sy-subrc EQ 0 .

      CASE ls_selfield-fieldname .
        WHEN &apos;ICON_CHECKBOX&apos; .
          CASE &lt;ls_outtab&gt;-icon_checkbox .
            WHEN icon_checkbox  .
              &lt;ls_outtab&gt;-table_name    = space .
              &lt;ls_outtab&gt;-icon_checkbox = icon_wd_iframe .

            WHEN icon_wd_iframe .
              popup_to_get_value(
                  EXPORTING iv_title       = &lt;ls_outtab&gt;-cb_relpath_out
                            iv_tabname     = &apos;MASSD_F4_ATT&apos;
                            iv_fieldname   = &apos;TABNAME&apos;
                            iv_fieldtext   = v_text-t292            &quot; text: Specify Table name
                            iv_obligatory  = abap_on
                  CHANGING  cv_value       = &lt;ls_outtab&gt;-table_name ) .

              CHECK &lt;ls_outtab&gt;-table_name IS NOT INITIAL .
              &lt;ls_outtab&gt;-icon_checkbox = icon_checkbox .
          ENDCASE .

        WHEN &apos;TABLE_NAME&apos; .
          popup_to_get_value(
              EXPORTING iv_title       = &lt;ls_outtab&gt;-cb_relpath_out
                        iv_tabname     = &apos;MASSD_F4_ATT&apos;
                        iv_fieldname   = &apos;TABNAME&apos;
                        iv_fieldtext   = v_text-t292                &quot; text: Specify Table name
                        iv_obligatory  = abap_on
              CHANGING  cv_value       = &lt;ls_outtab&gt;-table_name ) .
      ENDCASE .
    ENDDO .

*------ convert output table to tab.list format
    CLEAR lt_vbs_tables_tab_s .
    LOOP AT lt_outtab ASSIGNING &lt;ls_outtab&gt;
      WHERE icon_checkbox EQ icon_checkbox .
      APPEND INITIAL LINE TO lt_vbs_tables_tab_s ASSIGNING &lt;ls_vbs_tables_tab_s&gt; .

      &lt;ls_vbs_tables_tab_s&gt;-table_name = &lt;ls_outtab&gt;-table_name .
      &lt;ls_vbs_tables_tab_s&gt;-cb_relpath = &lt;ls_outtab&gt;-cb_relpath .
    ENDLOOP .

*------ set tables list
    cv_vbs_tables = r_formtemplate-&gt;conv_vbs_tables_ts( lt_vbs_tables_tab_s ) .
    IF cv_vbs_tables NE lv_vbs_tables_before .
      CLEAR cv_cancel .
    ENDIF .

  ENDMETHOD .                    &quot;popup_vbs_tables
  METHOD hndl_fcode_appl .
    tech_fcode_dispatch( iv_fcode = ev_fcode ) .
  ENDMETHOD .                    &quot;hndl_fcode_appl
  METHOD hndl_fcode_ptab .
    tech_fcode_dispatch( iv_fcode = ev_fcode
                         iv_form_id = ev_form_id ) .
  ENDMETHOD .                    &quot;hndl_fcode_ptab
  METHOD hndl_fcode_tmpl .
    tech_fcode_dispatch( iv_fcode = ev_fcode ).
  ENDMETHOD.                    &quot;hndl_fcode_tmpl
  METHOD hndl_fcode_comp .
    tech_fcode_dispatch( iv_fcode = ev_fcode
                         iv_form_id = ev_form_id ) .
  ENDMETHOD .                    &quot;hndl_fcode_comp
  METHOD hndl_comp_move .
    msg_init( ) .

    DATA:
      lr_dragdrop_data  TYPE REF TO lcl_wb_formtree_drgdrpdata .

    CATCH SYSTEM-EXCEPTIONS move_cast_error = 1 .
      lr_dragdrop_data ?= ev_drag_drop_object-&gt;object .
    ENDCATCH .
    IF sy-subrc NE 0 .
      lr_dragdrop_data-&gt;v_terminated = abap_on .
      EXIT .
    ENDIF .

*------ syncronize template with buffer
    tech_template_sync( ) .
    IF v_retcode EQ c_retcode-error .
      lr_dragdrop_data-&gt;v_terminated = abap_on .
      msg_check_errors_and_show( me ) .
      EXIT .
    ENDIF .

*------ request a user confirmation
    IF space EQ popup_to_confirm( iv_text = v_text-t119 ) .  &quot; text: Moving of the component
      lr_dragdrop_data-&gt;v_terminated = abap_on .
      EXIT .
    ENDIF .

*------ move in buffer
    r_formtemplate-&gt;node_move(
          iv_id_source = lr_dragdrop_data-&gt;v_source_form_id
          iv_id_target = lr_dragdrop_data-&gt;v_target_form_id ) .
    IF r_formtemplate-&gt;v_retcode EQ r_formtemplate-&gt;c_retcode-error .
      lr_dragdrop_data-&gt;v_terminated = abap_on .
      msg_check_errors_and_show( EXPORTING iv_any = r_formtemplate ) .
      EXIT .
    ENDIF .

    lr_dragdrop_data-&gt;r_formtemplate = r_formtemplate .

*------ redraw controls
    r_protab-&gt;redraw( iv_form_id    = lr_dragdrop_data-&gt;v_source_form_id
                      ir_formtemplate = r_formtemplate ) .

  ENDMETHOD .                    &quot;hndl_comp_move
  METHOD actn_comp_selected .
    msg_init( ) .

    DATA ls_form_prop       TYPE lcl_form=&gt;ty_s_properties .
    DATA ls_form_excp       TYPE lcl_form=&gt;ty_s_exceptions .
    DATA lv_tb_sheetname    TYPE ty_char31 .
    DATA lv_sheet_only      TYPE flag .
    DATA lv_sheet_not_found TYPE flag .

    r_protab-&gt;redraw( iv_form_id      = iv_form_id
                      ir_formtemplate = r_formtemplate ) .

    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    r_formtemplate-&gt;node_get_legacy_info(
          EXPORTING iv_id           = iv_form_id
          IMPORTING es_exceptions   = ls_form_excp
                    ev_tb_sheetname = lv_tb_sheetname ) .

    IF  ls_form_prop-comp_type EQ lcl_form=&gt;c_comp_type-field
    AND ls_form_prop-tb_area_textmark IS NOT INITIAL .
      ls_form_prop-id = r_formtemplate-&gt;node_get_parent( ls_form_prop-id ) . &quot; --&gt;&gt; get parent PATTERN

      ls_form_prop = r_formtemplate-&gt;node_get_properties( ls_form_prop-id ) .
      CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .
    ENDIF .

    CASE ls_form_prop-comp_type .
      WHEN r_formtemplate-&gt;c_comp_type-pattern
        OR r_formtemplate-&gt;c_comp_type-respattern
        OR r_formtemplate-&gt;c_comp_type-field
        OR r_formtemplate-&gt;c_comp_type-drawing
        OR r_formtemplate-&gt;c_comp_type-chart
        OR r_formtemplate-&gt;c_comp_type-tree
        OR r_formtemplate-&gt;c_comp_type-grid .
        lv_sheet_only = abap_off .
      WHEN OTHERS.
        lv_sheet_only = abap_on .
    ENDCASE.

    lv_sheet_not_found =
    r_excelole-&gt;selection_set( iv_sheet        = lv_tb_sheetname
                               iv_sheet_only   = lv_sheet_only
                               iv_area_top     = ls_form_prop-tb_area_top
                               iv_area_left    = ls_form_prop-tb_area_left
                               iv_area_rows    = ls_form_prop-tb_area_rows
                               iv_area_columns = ls_form_prop-tb_area_columns ) .
    IF  lv_sheet_not_found    IS NOT INITIAL
    AND ls_form_excp-tb_sheetname EQ c_retcode-okey .
      tech_template_sync( ) .
      CHECK msg_check_errors_and_show( me ) IS INITIAL .
      r_formtree-&gt;redraw( r_formtemplate ) .
    ENDIF .

  ENDMETHOD .                    &quot;actn_comp_selected
  METHOD actn_comp_add .
    msg_init( ) .

    DATA:
      ls_form_prop        TYPE lcl_form=&gt;ty_s_properties ,
      ls_new_form_prop    TYPE lcl_form=&gt;ty_s_properties ,
      ls_comp_types       TYPE ty_s_comp_types ,
      lt_comp_types       TYPE ty_t_comp_types .
    DATA:
      lv_form_id_parent   TYPE snode-id ,
      lv_form_id_sibling  TYPE snode-id ,
      ls_ctxt_prop        TYPE lcl_context=&gt;ty_s_properties ,
      ls_form_excp        TYPE lcl_form=&gt;ty_s_exceptions ,
      lv_cancel           TYPE flag ,
      lv_wizard_mode      TYPE flag ,
      lv_cb_fullpath      TYPE ty_comp_path ,
      ls_comp_paths       TYPE ty_s_ctxtmulti ,
      lt_comp_paths       TYPE ty_t_ctxtmulti .

*------------ read an actual node
    CASE abap_on .
      WHEN iv_child .
        lv_form_id_parent = iv_form_id .

      WHEN iv_sibling .
        CASE iv_form_id .
          WHEN r_formtemplate-&gt;v_root_id .
            MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
            EXIT .
        ENDCASE .
        lv_form_id_sibling  = iv_form_id .
        lv_form_id_parent   = r_formtemplate-&gt;node_get_parent( iv_form_id ) .
        CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .
    ENDCASE .

    ls_form_prop = r_formtemplate-&gt;node_get_skipfolders( lv_form_id_parent ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    ls_form_excp = r_formtemplate-&gt;node_get_exceptions( ls_form_prop-id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ request a new component type
    lt_comp_types =
    r_formtemplate-&gt;get_relevant_child_comptypes( ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    IF lt_comp_types[] IS INITIAL .
      MESSAGE i000(lp) WITH v_text-t120 .   &quot; text: Relevant components are missing
      EXIT .
    ENDIF .

    popup_comp_types(
        EXPORTING it_comp_types     = lt_comp_types
                  iv_wizard_mode_allow = abap_on
        IMPORTING ev_comp_type      = ls_new_form_prop-comp_type
                  ev_wizard_mode    = lv_wizard_mode
                  ev_cancel         = lv_cancel ) .

    CHECK lv_cancel IS INITIAL .

    CASE lv_wizard_mode .
      WHEN space .
*======================================================================
*   common mode
*======================================================================

*------------ request the new component name/ description
        DATA lv_retcode  TYPE ty_char1 .

        popup_compname(
            EXPORTING iv_comp_type  = ls_new_form_prop-comp_type
            CHANGING  cv_retcode    = lv_retcode
                      cv_comp_name  = ls_new_form_prop-comp_name
                      cv_comp_descr = ls_new_form_prop-comp_descr ) .
        CHECK lv_retcode IS INITIAL .
        CHECK ls_new_form_prop-comp_name IS NOT INITIAL .

*------------ add the new component node into the form buffer
        ls_new_form_prop-id =
        r_formtemplate-&gt;node_add( iv_comp_type  = ls_new_form_prop-comp_type
                                  iv_comp_name  = ls_new_form_prop-comp_name
                                  iv_comp_descr = ls_new_form_prop-comp_descr
                                  iv_parent_id  = lv_form_id_parent
                                  iv_sibling_id = lv_form_id_sibling ) .
        CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ add the new node into the tree
        r_formtree-&gt;node_add( ir_formtemplate    = r_formtemplate
                              iv_form_id         = ls_new_form_prop-id
                              iv_alvtree_nkey    = iv_alvtree_nkey
                              iv_sibling         = iv_sibling ) .

      WHEN OTHERS .
*======================================================================
*   WIZARD MODE (create fields via context)
*======================================================================
        CASE ls_new_form_prop-comp_type .
          WHEN lcl_form=&gt;c_comp_type-field .
            IF ls_form_excp-cb_relpath EQ c_retcode-legacy .
              MESSAGE s000(lp)
              WITH v_text-t127    &quot; text: Firstly, eliminate problems due context binding
                   v_text-t021 .  &quot; text: on the upper levels
              EXIT .
            ENDIF .

*------------ get a full path of context binding
            r_formtemplate-&gt;node_get_legacy_info(
                EXPORTING iv_id          = lv_form_id_parent
                IMPORTING ev_cb_fullpath = lv_cb_fullpath ) .

*------------ popup-dialog to request a new context binding
            popup_ctxtmulti(
                EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                CHANGING  ct_comp_paths         = lt_comp_paths
                          cv_cancel             = lv_cancel ) .
            CHECK lv_cancel IS INITIAL .

            LOOP AT lt_comp_paths INTO ls_comp_paths .
              CLEAR ls_new_form_prop .
              ls_new_form_prop-comp_type      = ls_comp_paths-comp_type .
              ls_new_form_prop-comp_name      = ls_comp_paths-comp_name .
              ls_new_form_prop-comp_descr     = ls_comp_paths-comp_shortdescr .
              ls_new_form_prop-cb_val_relpath = ls_comp_paths-cb_relpath .

*------------ add the new component node into the form buffer
              ls_new_form_prop-id =
              r_formtemplate-&gt;node_add( iv_comp_type  = ls_new_form_prop-comp_type
                                        iv_comp_name  = ls_new_form_prop-comp_name
                                        iv_comp_descr = ls_new_form_prop-comp_descr
                                        iv_parent_id  = lv_form_id_parent
                                        iv_sibling_id = lv_form_id_sibling ) .
              CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ add the new node into the tree
              r_formtree-&gt;node_add( ir_formtemplate    = r_formtemplate
                                    iv_form_id         = ls_new_form_prop-id
                                    iv_alvtree_nkey    = iv_alvtree_nkey
                                    iv_sibling         = iv_sibling ) .

*------------ update properties
              r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_new_form_prop ) .
              CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .
            ENDLOOP .

          WHEN OTHERS .
*             not processing
            RETURN .
        ENDCASE .
    ENDCASE .

    DATA lt_expanded_nodes TYPE lvc_t_nkey .
    r_formtree-&gt;get_expanded_nodes( CHANGING ct_expanded_nodes = lt_expanded_nodes ) .
    READ TABLE lt_expanded_nodes TRANSPORTING NO FIELDS WITH KEY table_line = iv_alvtree_nkey .
    CHECK sy-subrc NE 0 .
    r_formtree-&gt;expand_node( EXPORTING  i_node_key       = iv_alvtree_nkey
                                        i_level_count    = 1
                                        i_expand_subtree = abap_off
                             EXCEPTIONS OTHERS        = 0 ) .
  ENDMETHOD .                    &quot;actn_comp_add
  METHOD actn_comp_clone .
    DATA lv_form_id_new     TYPE snode-id .
    DATA lv_form_id_parent  TYPE snode-id .

*------ request a user confirmation
    CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t172 ) .  &quot; text: Clone component

*------ clone node in the buffer
    lv_form_id_parent = r_formtemplate-&gt;node_get_parent( iv_form_id ) .
    lv_form_id_new    = r_formtemplate-&gt;node_clone( iv_id_sample        = iv_form_id
                                                    iv_id_target_parent = lv_form_id_parent ) .

    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------ add the new node into the tree
    r_formtree-&gt;node_add( ir_formtemplate    = r_formtemplate
                          iv_form_id         = lv_form_id_new
                          iv_alvtree_nkey    = iv_alvtree_nkey
                          iv_sibling         = abap_on ) .
*------ redraw controls
    r_formtree-&gt;redraw( EXPORTING iv_form_id = lv_form_id_parent
                                  ir_formtemplate = r_formtemplate ).

  ENDMETHOD .                    &quot;actn_comp_clone
  METHOD actn_comp_clone_mass .
    msg_init( ) .

    DATA:
      lv_node_key           TYPE lvc_nkey ,
      lt_node_key           TYPE lvc_t_nkey ,
      ls_links              TYPE lcl_wb_formtree=&gt;ty_s_links ,
      lv_tabix              TYPE sy-tabix ,
      lv_cancel             TYPE flag ,
      lv_form_id_new        TYPE lcl_form=&gt;ty_s_properties-id ,
      lv_alvtree_nkey_tar   TYPE lvc_nkey ,
      ls_properties_tmp     TYPE lcl_form=&gt;ty_s_properties ,
      ls_properties_tar     TYPE lcl_form=&gt;ty_s_properties ,
      ls_properties_src     TYPE lcl_form=&gt;ty_s_properties ,
      lt_properties_src     TYPE lcl_form=&gt;ty_t_properties ,
      lv_comp_type_tar      TYPE lcl_form=&gt;ty_s_properties-comp_type ,
      lv_comp_type_src      TYPE lcl_form=&gt;ty_s_properties-comp_type ,
      lt_comp_types_tar     TYPE ty_t_comp_types ,
      ls_comp_types_tar     TYPE ty_s_comp_types ,
      ls_comp_types_tmp     TYPE ty_s_comp_types ,
      lt_comp_types_tmp     TYPE ty_t_comp_types ,
      lv_rename_prefix      TYPE sy-tvar1 ,
      lv_rename_postfix     TYPE sy-tvar2 ,
      lv_rename_find        TYPE sy-tvar3 ,
      lv_rename_peplacement TYPE sy-tvar4 .

*============ GET SOURCE (SELECTED) COMPONENTS

*------ get selected nodes
    r_formtree-&gt;get_selected_nodes( CHANGING ct_selected_nodes = lt_node_key
                                    EXCEPTIONS OTHERS = 0 ) .

*------ check: all selected components must have the same type
    LOOP AT lt_node_key INTO lv_node_key .

      READ TABLE r_formtree-&gt;t_links INTO ls_links
        WITH KEY alvtree_nkey = lv_node_key .
      CHECK sy-subrc EQ 0 .
      CHECK ls_links-form_id NE r_formtemplate-&gt;v_root_id .

      READ TABLE r_formtemplate-&gt;t_properties INTO ls_properties_src
        WITH KEY id = ls_links-form_id .
      CHECK sy-subrc EQ 0 .

      APPEND ls_properties_src TO lt_properties_src .
    ENDLOOP .

    LOOP AT lt_properties_src INTO ls_properties_src .
      lv_tabix = sy-tabix .
      LOOP AT lt_properties_src INTO ls_properties_tmp .
        CHECK sy-tabix NE lv_tabix .

        CHECK space NE  r_formtemplate-&gt;is_component_subnode_of(
                            iv_form_id         = ls_properties_tmp-id
                            iv_form_id_checked = ls_properties_src-id ) .

        DELETE lt_properties_src INDEX lv_tabix .
        EXIT .
      ENDLOOP .
    ENDLOOP .

    IF lt_properties_src IS INITIAL .
      MESSAGE s000(lp) WITH lcl_root=&gt;v_text-t066 . &quot; text: Select the node
      EXIT .
    ENDIF .

    LOOP AT lt_properties_src INTO ls_properties_src .
      IF lv_comp_type_src IS INITIAL .
        lv_comp_type_src = ls_properties_src-comp_type .

      ELSEIF lv_comp_type_src NE ls_properties_src-comp_type .
        MESSAGE s000(lp) WITH lcl_root=&gt;v_text-t320 . &quot; text: Components must have same type
        RETURN .
      ENDIF .
    ENDLOOP .

    CHECK lv_comp_type_src IS NOT INITIAL .

*============ REQUEST TARGET (PARENT) COMPONENT

*------------ get suitable parent component types
    CLEAR lt_comp_types_tar .
    LOOP AT r_formtemplate-&gt;t_comp_types INTO ls_comp_types_tmp .
      CLEAR ls_properties_tmp .
      ls_properties_tmp-comp_type = ls_comp_types_tmp-comp_type .

      lt_comp_types_tmp = r_formtemplate-&gt;get_relevant_child_comptypes( ls_properties_tmp ) .
      READ TABLE lt_comp_types_tmp TRANSPORTING NO FIELDS
        WITH KEY comp_type = lv_comp_type_src .
      CHECK sy-subrc EQ 0 .

      READ TABLE r_formtemplate-&gt;t_properties TRANSPORTING NO FIELDS
        WITH KEY comp_type = ls_comp_types_tmp-comp_type .
      CHECK sy-subrc EQ 0 .

      APPEND ls_comp_types_tmp TO lt_comp_types_tar .
    ENDLOOP .

*------------ request target parent component TYPE
    DESCRIBE TABLE lt_comp_types_tar[] .
    CASE sy-tfill .
      WHEN 0 .
        MESSAGE i000(lp) WITH v_text-t120 .   &quot; text: Relevant components are missing
        EXIT .

      WHEN 1 .
        READ TABLE lt_comp_types_tar INTO ls_comp_types_tar INDEX 1 .
        lv_comp_type_tar = ls_comp_types_tar-comp_type .

      WHEN OTHERS .
        popup_comp_types(
            EXPORTING iv_title          = v_text-t321   &quot; text: Specify target parent component
                      it_comp_types     = lt_comp_types_tar
                      iv_wizard_mode_allow = abap_off
            IMPORTING ev_comp_type      = lv_comp_type_tar
                      ev_cancel         = lv_cancel ) .
        CHECK lv_cancel IS INITIAL .
    ENDCASE .

*------------ request target parent component NAME
    popup_component(
        EXPORTING iv_title          = v_text-t321   &quot; text: Specify target parent component
                  iv_comp_type      = lv_comp_type_tar
        IMPORTING es_form_prop      = ls_properties_tar
                  ev_cancel         = lv_cancel ) .
    CHECK lv_cancel IS INITIAL .

    READ TABLE r_formtree-&gt;t_links INTO ls_links
      WITH KEY form_id = ls_properties_tar-id .
    CHECK sy-subrc EQ 0 .

    lv_alvtree_nkey_tar = ls_links-alvtree_nkey .

*============ REQUEST RENAMING FEATURES
    popup_to_get_value(
        EXPORTING iv_title       = v_text-t322    &quot; text: Renaming features
                  iv_tabname     = &apos;SYST&apos;
                  iv_fieldname   = &apos;TVAR1&apos;
                  iv_fieldtext   = v_text-t323    &quot; text: add Prefix
                  iv_2tabname    = &apos;SYST&apos;
                  iv_2fieldname  = &apos;TVAR2&apos;
                  iv_2fieldtext  = v_text-t324    &quot; text: add Postfix
                  iv_3tabname    = &apos;SYST&apos;
                  iv_3fieldname  = &apos;TVAR3&apos;
                  iv_3fieldtext  = v_text-t325    &quot; text: Find text...
                  iv_4tabname    = &apos;SYST&apos;
                  iv_4fieldname  = &apos;TVAR4&apos;
                  iv_4fieldtext  = v_text-t326    &quot; text: ... and replace with
        IMPORTING ev_cancel      = lv_cancel
        CHANGING  cv_value       = lv_rename_prefix
                  cv_2value      = lv_rename_postfix
                  cv_3value      = lv_rename_find
                  cv_4value      = lv_rename_peplacement ) .
    CHECK lv_cancel IS INITIAL .

*============ CLONING
    LOOP AT lt_properties_src INTO ls_properties_src .

*------ clone node in the buffer
      lv_form_id_new = r_formtemplate-&gt;node_clone( iv_id_sample           = ls_properties_src-id
                                                   iv_id_target_parent    = ls_properties_tar-id
                                                   iv_rename_prefix       = lv_rename_prefix
                                                   iv_rename_postfix      = lv_rename_postfix
                                                   iv_rename_find         = lv_rename_find
                                                   iv_rename_replacement  = lv_rename_peplacement ) .

      CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------ add the new node into the tree
      r_formtree-&gt;node_add( ir_formtemplate    = r_formtemplate
                            iv_form_id         = lv_form_id_new
                            iv_alvtree_nkey    = lv_alvtree_nkey_tar ) .
    ENDLOOP .

*============ REDRAW CONTROLS
    r_formtree-&gt;redraw( EXPORTING iv_form_id = ls_properties_tar-id
                                  ir_formtemplate = r_formtemplate ).

  ENDMETHOD .                    &quot;actn_comp_clone_mass
  METHOD actn_comp_delete .
    msg_init( ) .

*------ request a user confirmation
    CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t122 ) .   &quot; text: RemovÐµ the component from the form

*------ delete component from buffer
    r_formtemplate-&gt;node_del( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------ delete component from tree control
    r_formtree-&gt;node_del( iv_alvtree_nkey ) .

*------ redraw controls
    r_protab-&gt;redraw( ir_formtemplate = r_formtemplate
                      iv_form_id      = r_formtemplate-&gt;v_root_id
                      iv_activetab_id = r_protab-&gt;c_tab_id-root ) .

  ENDMETHOD .                    &quot;actn_comp_delete
  METHOD actn_comp_delete_mass .
    msg_init( ) .

    DATA:
      lv_node_key       TYPE lvc_nkey ,
      lt_node_key       TYPE lvc_t_nkey ,
      lt_links_old      TYPE lcl_wb_formtree=&gt;ty_t_links ,
      ls_links          TYPE lcl_wb_formtree=&gt;ty_s_links .

*------ get selected nodes
    r_formtree-&gt;get_selected_nodes( CHANGING ct_selected_nodes = lt_node_key
                                    EXCEPTIONS OTHERS = 0 ) .
    IF lt_node_key IS INITIAL .
      MESSAGE s000(lp) WITH lcl_root=&gt;v_text-t066 . &quot; text: Select the node
      EXIT .
    ENDIF .

*------ request a user confirmation
    CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t122 ) .   &quot; text: RemovÐµ the component from the form

*------ fix old nodes
    lt_links_old[] = r_formtree-&gt;t_links[] .

*------ delete components from ALV-tree
    LOOP AT lt_node_key INTO lv_node_key .
      READ TABLE r_formtree-&gt;t_links INTO ls_links
        WITH KEY alvtree_nkey = lv_node_key .
      CHECK sy-subrc EQ 0 .
      CHECK ls_links-form_id NE r_formtemplate-&gt;v_root_id .

      r_formtree-&gt;node_del( iv_alvtree_nkey = lv_node_key ) .
    ENDLOOP .

*------ delete components from buffer
    LOOP AT lt_links_old INTO ls_links .
      READ TABLE r_formtree-&gt;t_links TRANSPORTING NO FIELDS
        WITH KEY alvtree_nkey = ls_links-alvtree_nkey .
      CHECK sy-subrc NE 0 .

      READ TABLE r_formtemplate-&gt;t_properties TRANSPORTING NO FIELDS
        WITH KEY id = ls_links-form_id .
      CHECK sy-subrc EQ 0 .

      r_formtemplate-&gt;node_del( ls_links-form_id ) .
    ENDLOOP .

  ENDMETHOD .                    &quot;actn_comp_delete_mass
  METHOD actn_comp_tbshift_mass .
    msg_init( ) .

    DATA:
      lv_node_key       TYPE lvc_nkey ,
      lt_node_key       TYPE lvc_t_nkey ,
      ls_links          TYPE lcl_wb_formtree=&gt;ty_s_links ,
      ls_form_prop      TYPE lcl_form=&gt;ty_s_properties ,
      lv_shift_top      TYPE i ,
      lv_shift_left     TYPE i ,
      lv_tb_area_top    TYPE i ,
      lv_tb_area_left   TYPE i ,
      lv_changed        TYPE flag ,
      lv_cancel         TYPE flag .

*------ get selected nodes
    r_formtree-&gt;get_selected_nodes( CHANGING ct_selected_nodes = lt_node_key
                                    EXCEPTIONS OTHERS = 0 ) .
    IF lt_node_key IS INITIAL .
      MESSAGE s000(lp) WITH lcl_root=&gt;v_text-t066 . &quot; text: Select the node
      EXIT .
    ENDIF .

*------ request shift coordinates
    popup_to_get_value(
        EXPORTING iv_title       = v_text-t220     &quot; text: Shift template binding coordinates
                  iv_tabname     = &apos;SYST&apos;
                  iv_fieldname   = &apos;INDEX&apos;
                  iv_fieldtext   = v_text-t163     &quot; text: row(s)
                  iv_2tabname    = &apos;SYST&apos;
                  iv_2fieldname  = &apos;TABIX&apos;
                  iv_2fieldtext  = v_text-t162     &quot; text: column(s)
        IMPORTING ev_cancel      = lv_cancel
        CHANGING  cv_value       = lv_shift_top
                  cv_2value      = lv_shift_left ) .

    CHECK lv_cancel IS INITIAL .

    IF  lv_shift_top  IS INITIAL
    AND lv_shift_left IS INITIAL .
      MESSAGE s000(lp) WITH v_text-t221 . &quot; test: Nothing to change
      EXIT .
    ENDIF .


*------ delete components from ALV-tree
    LOOP AT lt_node_key INTO lv_node_key .
      READ TABLE r_formtree-&gt;t_links INTO ls_links
        WITH KEY alvtree_nkey = lv_node_key .
      CHECK sy-subrc EQ 0 .

      ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_id = ls_links-form_id ) .

      CASE ls_form_prop-comp_type .
        WHEN r_formtemplate-&gt;c_comp_type-root
          OR r_formtemplate-&gt;c_comp_type-sheet
          OR r_formtemplate-&gt;c_comp_type-loopstep
          OR r_formtemplate-&gt;c_comp_type-folder .
          CONTINUE .

        WHEN OTHERS .
          CHECK ls_form_prop-tb_area_rows GT 0 .
          CHECK ls_form_prop-tb_area_columns GT 0 .

          lv_tb_area_top  = ls_form_prop-tb_area_top  + lv_shift_top  .
          lv_tb_area_left = ls_form_prop-tb_area_left + lv_shift_left .

          CHECK ( lv_tb_area_top  GT 0 AND lv_tb_area_top  NE ls_form_prop-tb_area_top )
             OR ( lv_tb_area_left GT 0 AND lv_tb_area_left NE ls_form_prop-tb_area_left ) .

          IF lv_tb_area_top  GT 0 .
            ls_form_prop-tb_area_top = lv_tb_area_top .
          ENDIF .
          IF lv_tb_area_left GT 0 .
            ls_form_prop-tb_area_left = lv_tb_area_left .
          ENDIF .

          r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
          lv_changed = abap_on .
      ENDCASE .
    ENDLOOP .

    IF lv_changed IS INITIAL .
      MESSAGE s000(lp) WITH v_text-t221 . &quot; test: Nothing to change
      EXIT .
    ENDIF .

    r_formtemplate-&gt;check_subtree( ) .

  ENDMETHOD .                    &quot;actn_comp_tbshift_mass
  METHOD actn_comp_move_sibling_up .
    msg_init( ) .

    r_formtemplate-&gt;node_move_sibling_up( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    DATA lv_prev_nkey    TYPE lvc_nkey .
    r_formtree-&gt;get_prev_sibling( EXPORTING i_node_key = iv_alvtree_nkey
                                  IMPORTING e_prev_node_key = lv_prev_nkey ) .
    r_formtree-&gt;move_node(
      EXPORTING i_node_key   = lv_prev_nkey
                i_relatkey   = iv_alvtree_nkey
                i_relatship  = cl_gui_column_tree=&gt;relat_next_sibling
      EXCEPTIONS OTHERS = 1 ) .
    IF sy-subrc NE 0 .
      actn_appl_actualize( ) . &quot; --&gt;&gt; hard redraw tree
    ENDIF .
  ENDMETHOD .                    &quot;actn_comp_move_sibling_up
  METHOD actn_comp_move_sibling_down .
    msg_init( ) .

    r_formtemplate-&gt;node_move_sibling_down( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    DATA lv_next_nkey    TYPE lvc_nkey .
    r_formtree-&gt;get_next_sibling( EXPORTING i_node_key = iv_alvtree_nkey
                                  IMPORTING e_next_node_key = lv_next_nkey ) .
    r_formtree-&gt;move_node(
      EXPORTING i_node_key   = lv_next_nkey
                i_relatkey   = iv_alvtree_nkey
                i_relatship  = cl_gui_column_tree=&gt;relat_prev_sibling
      EXCEPTIONS OTHERS = 1 ) .
    IF sy-subrc NE 0 .
      actn_appl_actualize( ) . &quot; --&gt;&gt; hard redraw tree
    ENDIF .
  ENDMETHOD .                    &quot;actn_comp_move_sibling_down
  METHOD actn_appl_save .
    msg_init( ) .

    DATA lv_devclass    TYPE tadir-devclass .
    DATA lv_objid       TYPE wwwdatatab-objid .

    IF r_formtemplate-&gt;v_devclass IS INITIAL .
      lv_objid = r_formtemplate-&gt;conv_formname_ei( r_formtemplate-&gt;v_formname ).
      lv_devclass = popup_devclass( iv_objid = lv_objid ) .
    ELSE .
      lv_devclass = r_formtemplate-&gt;v_devclass .
    ENDIF.
    CHECK lv_devclass IS NOT INITIAL .

    r_formtemplate-&gt;save( iv_devclass = lv_devclass ) .

    IF v_retcode EQ c_retcode-okey .
      MESSAGE s000(lp) WITH v_text-t170 . &quot; test: Form has been saved
    ELSE .
      msg_check_errors_and_show( me ).
    ENDIF .
  ENDMETHOD .                    &quot;actn_appl_save
  METHOD actn_appl_save_as .
    msg_init( ) .

    DATA:
      lv_cancel           TYPE flag ,
      lv_formname_new     TYPE wwwdatatab-objid .

    popup_to_get_value(
        EXPORTING iv_title      = v_text-t166  &quot; text: Save as...
                  iv_tabname    = &apos;MASSD_F4_ATT&apos;
                  iv_fieldname  = &apos;TABNAME&apos;
                  iv_fieldtext  = v_text-t167  &quot; text: New form name
                  iv_obligatory = abap_on
        IMPORTING ev_cancel     = lv_cancel
        CHANGING  cv_value      = lv_formname_new ) .

    CHECK lv_cancel IS INITIAL .

    IF lv_formname_new EQ r_formtemplate-&gt;v_formname .
      MESSAGE i000(lp) WITH v_text-t168 . &quot; text: Specify another form name
      EXIT .
    ENDIF.

    IF r_formtemplate-&gt;get_devclass( iv_formname = lv_formname_new ) IS NOT INITIAL .

      CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t169 ) . &quot;  text: Form with same name already exists. Overwrite it ?
    ENDIF .

    r_formtemplate-&gt;set_formname_new( lv_formname_new ) .
    msg_check_errors_and_show( EXPORTING iv_any = r_formtemplate ) .

    actn_appl_save( ) .

  ENDMETHOD .                    &quot;actn_appl_save_as
  METHOD actn_appl_activate .
    msg_init( ) .

    IF r_formtemplate-&gt;v_devclass IS INITIAL .
      MESSAGE i000(lp) WITH v_text-t038 .  &quot; text: Firstly, save the form
      EXIT .
    ENDIF .

    r_formtemplate-&gt;activate( ) .
    msg_check_errors_and_show( EXPORTING iv_any = r_formtemplate ) .

    IF r_formtemplate-&gt;v_active IS NOT INITIAL .
      MESSAGE s000(lp) WITH v_text-t171 . &quot; text: Form has been activated
    ENDIF .
  ENDMETHOD .                    &quot;actn_appl_activate
  METHOD actn_appl_actualize .
    msg_init( ) .

    r_formtree-&gt;free( ) .
    FREE r_formtree .
    init_formtree( ) .

    r_excelole-&gt;free( ) .
    FREE r_excelole .
    init_excelole( ) .
  ENDMETHOD .                    &quot;actn_appl_actualize
  METHOD actn_appl_viewmode .
    IF r_excelole IS BOUND .
      r_excelole-&gt;free( ) .
      FREE r_excelole .
    ENDIF .
    CASE v_oletempl_viewmode .
      WHEN lcl_wb_ole=&gt;c_viewmode-floating .  v_oletempl_viewmode = lcl_wb_ole=&gt;c_viewmode-inplace .
      WHEN lcl_wb_ole=&gt;c_viewmode-inplace .   v_oletempl_viewmode = lcl_wb_ole=&gt;c_viewmode-floating .
    ENDCASE .
    init_excelole( ) .
  ENDMETHOD .                    &quot;actn_appl_viewmode
  METHOD actn_appl_help .
    DATA lv_url(30000) TYPE c .
    lv_url = iv_url .
    CALL FUNCTION &apos;CALL_BROWSER&apos;
      EXPORTING
        url    = lv_url
      EXCEPTIONS
        OTHERS = 6.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
    ENDIF .
  ENDMETHOD .                    &quot;actn_appl_help
  METHOD actn_appl_presets .
    DATA lv_selected TYPE ty_char1 VALUE &apos;1&apos; .

    popup_to_decide(  EXPORTING iv_title       = v_text-t206     &quot; text: Presets
                                iv_text_rb1    = v_text-t284     &quot; text: Design-time presets
                                iv_text_rb2    = v_text-t285     &quot; text: Run-time presets
                      CHANGING  cv_selected_rb = lv_selected ) .
    CASE lv_selected .
      WHEN &apos;1&apos; .    actn_appl_presets_designtime( ) .
      WHEN &apos;2&apos; .    actn_appl_presets_runtime( ) .
      WHEN OTHERS . RETURN .
    ENDCASE .
  ENDMETHOD .                    &quot;actn_appl_presets
  METHOD actn_appl_presets_designtime .
    TYPES:
      BEGIN OF ty_s_outtab ,
        checkboxtype      TYPE flag ,
        fieldname         TYPE lvc_fname ,
        paramname         TYPE uws_service_parameter_name ,
        paramvalue        TYPE lvc_value ,
      END   OF ty_s_outtab ,
      ty_t_outtab         TYPE STANDARD TABLE OF ty_s_outtab .
    DATA:
      lv_title            TYPE ty_char100 ,
      ls_fct              TYPE lvc_s_fcat ,
      lt_fct              TYPE lvc_t_fcat ,
      ls_excl             TYPE lvc_s_excl ,
      lt_excl             TYPE lvc_t_excl ,
      ls_selfield         TYPE slis_selfield ,
      lv_exit             TYPE flag ,
      ls_outtab           TYPE ty_s_outtab ,
      lt_outtab           TYPE ty_t_outtab .
    FIELD-SYMBOLS:
      &lt;field&gt;             TYPE ANY ,
      &lt;outtab&gt;            TYPE ty_s_outtab .

    ls_excl-func = &apos;%SC&apos;  . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ONT&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;RNT&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;OL0&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ODN&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;OUP&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ILT&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ELP&apos; . APPEND ls_excl TO lt_excl .

    CLEAR ls_fct .
    ls_fct-fieldname    = &apos;PARAMNAME&apos; .
    ls_fct-outputlen    = 58 .
    APPEND ls_fct TO lt_fct .

    CLEAR ls_fct .
    ls_fct-fieldname    = &apos;PARAMVALUE&apos; .
    ls_fct-outputlen    = 10 .
    ls_fct-hotspot      = abap_on .
    ls_fct-just         = &apos;C&apos; .
    APPEND ls_fct TO lt_fct .

    lv_title = v_text-t284 .              &quot; text: Design-time presets

    DEFINE mk_add .
      assign component &amp;2 of structure s_presets_dt to &lt;field&gt; .
      if &lt;field&gt; is assigned .
        clear ls_outtab .
        ls_outtab-fieldname   = &amp;2 .
        ls_outtab-paramname   = &amp;3 .
        if &amp;1 is initial .
          ls_outtab-paramvalue  = &lt;field&gt; .
        else .
          ls_outtab-checkboxtype = abap_on .
          case &lt;field&gt; .
            when space  .   ls_outtab-paramvalue  = icon_wd_iframe .
            when others .   ls_outtab-paramvalue  = icon_checkbox .
          endcase .
        endif .
        append ls_outtab to lt_outtab .
      endif .
    END-OF-DEFINITION .

    DO .
      CLEAR lt_outtab .

      mk_add:
      abap_on  &apos;POPUP_TB&apos;               v_text-t208 , &quot; text: Requesting of user confirmation due template binding change
      abap_on  &apos;POPUP_IM&apos;               v_text-t103 , &quot; text: Allow to upload an initial XLSX-template from frontend
      abap_on  &apos;MESGTAB_WHEN_ERROR&apos;     v_text-t270 , &quot; text: Activate messages tab when error occurs
      abap_on  &apos;DESELECT_CELLS_NO_TB&apos;   v_text-t271 . &quot; text: Losing cell range selection when the component has no template binding

      CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
        EXPORTING
          i_title               = lv_title
          it_fieldcatalog       = lt_fct[]
          it_status_excl        = lt_excl[]
          i_screen_start_column = 10
          i_screen_start_line   = 5
          i_screen_end_column   = 80
          i_screen_end_line     = 10
        IMPORTING
          es_selfield           = ls_selfield
          e_exit                = lv_exit
        TABLES
          t_outtab              = lt_outtab[].

      IF lv_exit IS NOT INITIAL .
        EXIT . &quot; --&gt;&gt; do
      ENDIF .

      CHECK ls_selfield-tabindex NE 0 .
      READ TABLE lt_outtab ASSIGNING &lt;outtab&gt; INDEX ls_selfield-tabindex .
      CHECK sy-subrc EQ 0 .

      ASSIGN COMPONENT &lt;outtab&gt;-fieldname OF STRUCTURE s_presets_dt TO &lt;field&gt; .
      IF &lt;field&gt; IS NOT ASSIGNED .
        EXIT .
      ENDIF.

      CASE ls_outtab-checkboxtype .
        WHEN space .
*         CASE &lt;outtab&gt;-fieldname .
*           WHEN ...  .
*             popup_to_get_value(
*                 EXPORTING iv_title     = &lt;outtab&gt;-paramname
*                           iv_tabname   = &apos;ALPDBUIALV&apos;
*                           iv_fieldname = &apos;INDEX&apos;
*                           iv_fieldtext = v_text-t126  &quot; --&gt;&gt; text: Specify new value
*                 CHANGING  cv_value     = &lt;field&gt; ) .
*           WHEN OTHERS .
*         ENDCASE .

        WHEN OTHERS .
          CASE &lt;outtab&gt;-paramvalue .
            WHEN icon_wd_iframe . &lt;field&gt; = abap_on .
            WHEN icon_checkbox .  &lt;field&gt; = abap_off .
          ENDCASE .
      ENDCASE .
    ENDDO .

    tech_presets_dt_save( ) .

  ENDMETHOD .                    &quot;actn_appl_presets_designtime
  METHOD actn_appl_presets_runtime .
    TYPES:
      BEGIN OF ty_s_outtab ,
        checkboxtype      TYPE flag ,
        fieldname         TYPE lvc_fname ,
        paramname         TYPE uws_service_parameter_name ,
        paramvalue        TYPE lvc_value ,
      END   OF ty_s_outtab ,
      ty_t_outtab         TYPE STANDARD TABLE OF ty_s_outtab .
    DATA:
      lv_title            TYPE ty_char100 ,
      ls_fct              TYPE lvc_s_fcat ,
      lt_fct              TYPE lvc_t_fcat ,
      ls_excl             TYPE lvc_s_excl ,
      lt_excl             TYPE lvc_t_excl ,
      ls_selfield         TYPE slis_selfield ,
      lv_exit             TYPE flag ,
      lv_selected         TYPE ty_char1 ,
      ls_outtab           TYPE ty_s_outtab ,
      lt_outtab           TYPE ty_t_outtab .
    FIELD-SYMBOLS:
      &lt;field&gt;             TYPE ANY ,
      &lt;outtab&gt;            TYPE ty_s_outtab .

    ls_excl-func = &apos;%SC&apos;  . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ONT&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;RNT&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;OL0&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ODN&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;OUP&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ILT&apos; . APPEND ls_excl TO lt_excl .
    ls_excl-func = &apos;&amp;ELP&apos; . APPEND ls_excl TO lt_excl .

    CLEAR ls_fct .
    ls_fct-fieldname    = &apos;PARAMNAME&apos; .
    ls_fct-outputlen    = 30 .
    APPEND ls_fct TO lt_fct .

    CLEAR ls_fct .
    ls_fct-fieldname    = &apos;PARAMVALUE&apos; .
    ls_fct-outputlen    = 30 .
    ls_fct-hotspot      = abap_on .
    ls_fct-just         = &apos;C&apos; .
    APPEND ls_fct TO lt_fct .

    lv_title = v_text-t285 .              &quot; text: Run-time presets

    DEFINE mk_add .
      assign component &amp;2 of structure s_presets_rt to &lt;field&gt; .
      if &lt;field&gt; is assigned .
        clear ls_outtab .
        ls_outtab-fieldname       = &amp;2 .
        ls_outtab-paramname       = &amp;3 .
        if &amp;1 is initial .
          case ls_outtab-fieldname .
            when &apos;POSTPROCESSING_METHOD&apos; .
              case &lt;field&gt; .
                when c_postprocessing_method-vbs . ls_outtab-paramvalue = &apos;VBScript&apos; .
                when c_postprocessing_method-ole . ls_outtab-paramvalue = &apos;OLE&apos; .
              endcase .
            when others .
              ls_outtab-paramvalue  = &lt;field&gt; .
          endcase .
        else .
          ls_outtab-checkboxtype = abap_on .
          case &lt;field&gt; .
            when space  .   ls_outtab-paramvalue  = icon_wd_iframe .
            when others .   ls_outtab-paramvalue  = icon_checkbox .
          endcase .
        endif .
        append ls_outtab to lt_outtab .
      endif .
    END-OF-DEFINITION .

    DO .
      CLEAR lt_outtab .

      mk_add:
      abap_off  &apos;POSTPROCESSING_METHOD&apos;   v_text-t286 . &quot; text: Method for post processing

      CALL FUNCTION &apos;LVC_SINGLE_ITEM_SELECTION&apos;
        EXPORTING
          i_title               = lv_title
          it_fieldcatalog       = lt_fct[]
          it_status_excl        = lt_excl[]
          i_screen_start_column = 10
          i_screen_start_line   = 5
          i_screen_end_column   = 80
          i_screen_end_line     = 10
        IMPORTING
          es_selfield           = ls_selfield
          e_exit                = lv_exit
        TABLES
          t_outtab              = lt_outtab[].

      IF lv_exit IS NOT INITIAL .
        EXIT . &quot; --&gt;&gt; do
      ENDIF .

      CHECK ls_selfield-tabindex NE 0 .
      READ TABLE lt_outtab ASSIGNING &lt;outtab&gt; INDEX ls_selfield-tabindex .
      CHECK sy-subrc EQ 0 .

      ASSIGN COMPONENT &lt;outtab&gt;-fieldname OF STRUCTURE s_presets_rt TO &lt;field&gt; .
      IF &lt;field&gt; IS NOT ASSIGNED .
        EXIT .
      ENDIF.

      CASE ls_outtab-checkboxtype .
        WHEN space .
          CASE &lt;outtab&gt;-fieldname .
            WHEN &apos;POSTPROCESSING_METHOD&apos; .
              CASE &lt;field&gt; .
                WHEN c_postprocessing_method-vbs . lv_selected = &apos;1&apos; .
                WHEN c_postprocessing_method-ole . lv_selected = &apos;2&apos; .
              ENDCASE .
              popup_to_decide(  EXPORTING iv_title       = v_text-t126     &quot; --&gt;&gt; text: Specify new value
                                          iv_text        = v_text-t286     &quot; --&gt;&gt; text: Method for post processing
                                          iv_text_rb1    = &apos;VBScript&apos;
                                          iv_text_rb2    = &apos;OLE&apos;
                                CHANGING  cv_selected_rb = lv_selected ) .
              CASE lv_selected .
                WHEN &apos;1&apos; . &lt;field&gt; = c_postprocessing_method-vbs .
                WHEN &apos;2&apos; . &lt;field&gt; = c_postprocessing_method-ole .
              ENDCASE .
            WHEN OTHERS .
          ENDCASE .

        WHEN OTHERS .
          CASE &lt;outtab&gt;-paramvalue .
            WHEN icon_wd_iframe . &lt;field&gt; = abap_on .
            WHEN icon_checkbox .  &lt;field&gt; = abap_off .
          ENDCASE .
      ENDCASE .
    ENDDO .

    tech_presets_rt_save( ) .

  ENDMETHOD .                    &quot;actn_appl_presets_runtime
  METHOD actn_appl_close_template .
    msg_init( ) .
    actn_appl_viewmode( ) .
    r_formtemplate-&gt;check_subtree( ) .
  ENDMETHOD .                    &quot;actn_appl_close_template
  METHOD actn_appl_mass_processing .
    msg_init( ) .

    CASE v_mass_processing .
      WHEN space .
        v_mass_processing = abap_on .
        r_protab-&gt;redraw_dummy( iv_text = v_text-t214    &quot; --&gt;&gt; text: Mass processing
                                iv_icon = icon_segmented_data_act ) .
      WHEN OTHERS .
        v_mass_processing = abap_off .
        r_protab-&gt;redraw( ir_formtemplate = r_formtemplate
                          iv_form_id      = r_formtemplate-&gt;v_root_id
                          iv_activetab_id = r_protab-&gt;c_tab_id-root ) .
    ENDCASE .

    r_formtree-&gt;free( ) .
    FREE r_formtree .
    init_formtree( ) .

    r_appltoolbar-&gt;free( ) .
    FREE r_appltoolbar .
    init_appltoolbar( ) .

  ENDMETHOD .                    &quot;actn_appl_mass_processing
  METHOD actn_compname_change .
    msg_init( ) .

    DATA:
      lv_retcode          TYPE ty_char1 ,
      ls_form_prop        TYPE lcl_form=&gt;ty_s_properties .

*------ read an actual (parent) node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------ request the new component name/ description
    popup_compname(
        EXPORTING iv_comp_type  = ls_form_prop-comp_type
        CHANGING  cv_retcode    = lv_retcode
                  cv_comp_name  = ls_form_prop-comp_name
                  cv_comp_descr = ls_form_prop-comp_descr ) .
    CHECK lv_retcode IS INITIAL .
    CHECK ls_form_prop-comp_name IS NOT INITIAL .

*------ set properties of the component
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------ redraw controls
    r_protab-&gt;redraw( ir_formtemplate = r_formtemplate
                      iv_form_id      = ls_form_prop-id
                      iv_activetab_id = r_protab-&gt;c_tab_id-common ) .

  ENDMETHOD .                    &quot;actn_compname_change
  METHOD actn_context_change .
    msg_init( ) .

*------ request a context name
    DATA:
      lv_retcode              TYPE ty_char1 ,
      ls_fields               TYPE sval ,
      lt_fields               TYPE STANDARD TABLE OF sval ,
      lv_ok_buttontext        TYPE svalbutton-buttontext ,
      lv_ok_icon              TYPE icon-name ,
      lv_ok_quickinfo         TYPE smp_dyntxt-text .

    ls_fields-tabname   = &apos;MASSD_F4_ATT&apos; .
    ls_fields-fieldname = &apos;TABNAME&apos; .
    CONCATENATE icon_bom_item v_text-t123   &quot; text: context
    INTO ls_fields-fieldtext
    SEPARATED BY space .
    ls_fields-field_obl = abap_on .
    IF r_formtemplate-&gt;r_context IS BOUND .
      ls_fields-value = r_formtemplate-&gt;r_context-&gt;v_contextname .
    ENDIF .
    APPEND ls_fields TO lt_fields .

    lv_ok_icon = icon_checked .
    lv_ok_quickinfo = v_text-t106 .         &quot; text: Continue

    CALL FUNCTION &apos;POPUP_GET_VALUES_USER_BUTTONS&apos;
      EXPORTING
        popup_title       = v_text-t124     &quot; text: Specify a name of the context (data dictionary type)
        programname       = sy-repid
        formname          = &apos;POPUP_CONTEXT_UCOMM&apos;
        f4_programname    = sy-repid
        f4_formname       = &apos;POPUP_CONTEXT_F4&apos;
        ok_pushbuttontext = lv_ok_buttontext
        icon_ok_push      = lv_ok_icon
        quickinfo_ok_push = lv_ok_quickinfo
      IMPORTING
        returncode        = lv_retcode
      TABLES
        fields            = lt_fields
      EXCEPTIONS
        OTHERS            = 4.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE &apos;S&apos; NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      EXIT .
    ENDIF .
    IF lv_retcode EQ space .
      READ TABLE lt_fields INTO ls_fields INDEX 1 .
      CHECK sy-subrc EQ 0 .
    ELSE .
      MESSAGE s000(lp) WITH v_text-t100 .  &quot; text: Operation was terminated by the user
      EXIT .
    ENDIF .

*------ try to send of choosen context into the form
    r_formtemplate-&gt;set_context( ls_fields-value ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------ build the form structure automatically
    IF abap_on EQ popup_to_confirm( iv_text = v_text-t213               &quot; text: Build the form structure automatically ?
                                    iv_icon_button_1 = &apos;ICON_WIZARD&apos;
                                    iv_text_button_1 = v_text-t083      &quot; text: Auto
                                    iv_icon_button_2 = &apos;ICON_OBJECT_LIST&apos;
                                    iv_text_button_2 = v_text-t218 ) .  &quot; text: Don&apos;&apos;t create
      r_formtemplate-&gt;autostructure_create( ) .

      r_formtree-&gt;free( ) .
      FREE r_formtree .
      init_formtree( ) .
    ENDIF .

*------ redraw controls
    r_protab-&gt;redraw( ir_formtemplate = r_formtemplate
                      iv_form_id      = r_formtemplate-&gt;v_root_id
                      iv_activetab_id = r_protab-&gt;c_tab_id-root ) .
  ENDMETHOD .                    &quot;actn_context_change
  METHOD actn_formdescr_change .
    msg_init( ) .

*------ request a context name
    DATA:
      lv_cancel         TYPE flag ,
      lv_formdescr      TYPE wwwdatatab-text .

    lv_formdescr = r_formtemplate-&gt;v_formdescr .

    popup_to_get_value(
        EXPORTING iv_title      = v_text-t126     &quot; text: Specify new value
                  iv_tabname    = &apos;WWWDATATAB&apos;
                  iv_fieldname  = &apos;TEXT&apos;
                  iv_fieldtext  = v_text-t075     &quot; text: Form description
        IMPORTING ev_cancel     = lv_cancel
        CHANGING  cv_value      = lv_formdescr ) .

    CHECK lv_cancel IS INITIAL .

*------ try to set new form name into the buffer
    r_formtemplate-&gt;set_formdescr_new( lv_formdescr ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------ redraw controls
    r_protab-&gt;redraw( ir_formtemplate = r_formtemplate
                      iv_form_id      = r_formtemplate-&gt;v_root_id
                      iv_activetab_id = r_protab-&gt;c_tab_id-root ) .
  ENDMETHOD .                    &quot;actn_formdescr_change
  METHOD actn_format_change .
    msg_init( ) .

*------ request new file fype
    DATA:
      lv_extension        TYPE ty_char10 ,
      lv_selected         TYPE ty_char1  .

    CASE r_formtemplate-&gt;r_exceltemplate-&gt;v_extension .
      WHEN c_extension_xlsx .   lv_selected = &apos;1&apos; .
      WHEN c_extension_xlsm .   lv_selected = &apos;2&apos; .
    ENDCASE .

    popup_to_decide(  EXPORTING iv_title       = v_text-t327                &quot; --&gt;&gt; text: File format
                                iv_text        = v_text-t327                &quot; --&gt;&gt; text: File format
                                iv_text_rb1    = v_text-t328                &quot; --&gt;&gt; text: Without VBA-macro  .XLSX
                                iv_text_rb2    = v_text-t329                &quot; --&gt;&gt; text: VBA-macro-enabled  .XLSM
                      CHANGING  cv_selected_rb = lv_selected ) .
    CASE lv_selected .
      WHEN &apos;1&apos; .  lv_extension = c_extension_xlsx .
      WHEN &apos;2&apos; .  lv_extension = c_extension_xlsm .
      WHEN &apos;A&apos; .  RETURN .
    ENDCASE .

    tech_template_sync( iv_new_extension = lv_extension ) .
    msg_check_errors_and_show( me ) .

*------ redraw controls
    r_protab-&gt;redraw( ir_formtemplate = r_formtemplate
                      iv_form_id      = r_formtemplate-&gt;v_root_id
                      iv_activetab_id = r_protab-&gt;c_tab_id-root ) .
  ENDMETHOD .                    &quot;actn_format_change
  METHOD actn_cb_loop_from_to .
    msg_init( ) .

    DATA:
      ls_form_excp        TYPE lcl_form=&gt;ty_s_exceptions ,
      ls_form_prop        TYPE lcl_form=&gt;ty_s_properties ,
      lv_2fieldtext       TYPE ty_char100 ,
      lv_cancel           TYPE flag .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    CASE ls_form_prop-comp_type .
      WHEN r_formtemplate-&gt;c_comp_type-loopstep .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ update properties
    CONCATENATE v_text-t265      &quot; text: to
                v_text-t266      &quot; text: (0 = no limit)
           INTO lv_2fieldtext SEPARATED BY space .

    popup_to_get_value(
        EXPORTING iv_title       = v_text-t261      &quot; text: Row processing
                  iv_tabname     = &apos;SYST&apos;
                  iv_fieldname   = &apos;INDEX&apos;
                  iv_fieldtext   = v_text-t264      &quot; text: from
                  iv_obligatory  = abap_on
                  iv_2tabname    = &apos;SYST&apos;
                  iv_2fieldname  = &apos;TABIX&apos;
                  iv_2fieldtext  = lv_2fieldtext
        IMPORTING ev_cancel      = lv_cancel
        CHANGING  cv_value       = ls_form_prop-cb_loop_from
                  cv_2value      = ls_form_prop-cb_loop_to ) .

    CHECK lv_cancel IS INITIAL .
    IF  ls_form_prop-cb_loop_to NE 0
    AND ls_form_prop-cb_loop_to LT ls_form_prop-cb_loop_from .
      MESSAGE i000(lp) WITH v_text-t267 .     &quot; text: ÐÐµÐºÐ¾ÑÑÐµÐºÑÐ½ÑÐ¹ Ð¸Ð½ÑÐµÑÐ²Ð°Ð»
      EXIT .
    ENDIF .


    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_cb_loop_from_to
  METHOD actn_cb_relpath_change .
    msg_init( ) .

    DATA:
      ls_form_excp        TYPE lcl_form=&gt;ty_s_exceptions ,
      ls_form_prop        TYPE lcl_form=&gt;ty_s_properties ,
      ls_form_prop_parent TYPE lcl_form=&gt;ty_s_properties ,
      lv_f4_strategy      TYPE i ,
      lv_cancel           TYPE flag ,
      lv_cb_fullpath_parent TYPE ty_comp_path .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    ls_form_excp = r_formtemplate-&gt;node_get_exceptions( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .
    IF ls_form_excp-cb_relpath EQ c_retcode-legacy .
      MESSAGE s000(lp)
      WITH v_text-t127    &quot; text: Firstly, eliminate problems due context binding
           v_text-t021 .  &quot; text: on the upper levels
      EXIT .
    ENDIF .

    CASE ls_form_prop-comp_type .
      WHEN r_formtemplate-&gt;c_comp_type-loopstep .
        lv_f4_strategy = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-loopstep .
      WHEN r_formtemplate-&gt;c_comp_type-folder .
        lv_f4_strategy = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-folder .
      WHEN OTHERS .
        EXIT .
    ENDCASE .

*------------ read a parent node
    ls_form_prop_parent-id = r_formtemplate-&gt;node_get_parent( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    ls_form_prop_parent = r_formtemplate-&gt;node_get_properties( ls_form_prop_parent-id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ get a full path of context binding for a parent node
    r_formtemplate-&gt;node_get_legacy_info(
        EXPORTING iv_id = ls_form_prop_parent-id
        IMPORTING ev_cb_fullpath = lv_cb_fullpath_parent ) .

*------------ popup-dialog to request a new context binding
    popup_ctxtfield(
        EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath_parent
                  iv_f4_strategy  = lv_f4_strategy
                  iv_manual       = iv_relpath_mn
        CHANGING  cv_cb_relpath   = ls_form_prop-cb_relpath
                  cv_cancel       = lv_cancel ) .
    CHECK lv_cancel IS INITIAL .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_cb_relpath_change
  METHOD actn_cb_relpath_delete .
    msg_init( ) .

    DATA ls_form_prop  TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ request a user confirmation
    CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t128 ) .  &quot; text: Removing the binding

*------------ update properties
    ls_form_prop-cb_relpath = space .
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_cb_relpath_delete
  METHOD actn_cb_apr_relpath_change .
    msg_init( ) .

    DATA:
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      ls_form_excp          TYPE lcl_form=&gt;ty_s_exceptions ,
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties ,
      lv_cancel             TYPE flag ,
      lv_cb_fullpath        TYPE ty_comp_path .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    ls_form_excp = r_formtemplate-&gt;node_get_exceptions( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .
    IF ls_form_excp-cb_relpath EQ c_retcode-legacy .
      MESSAGE s000(lp)
      WITH v_text-t127    &quot; text: Firstly, eliminate problems due context binding
           v_text-t021 .  &quot; text: on the upper levels
      EXIT .
    ENDIF .

*------------ get a full path of context binding
    r_formtemplate-&gt;node_get_legacy_info(
        EXPORTING iv_id = iv_form_id
        IMPORTING ev_cb_fullpath = lv_cb_fullpath ) .

    IF iv_relpath_f4 IS NOT INITIAL
    OR iv_relpath_mn IS NOT INITIAL .
*------------ popup-dialog to request a new context binding
      popup_ctxtfield(
          EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                    iv_f4_strategy = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-apr_relpath
                    iv_manual      = iv_relpath_mn
          CHANGING  cv_cb_relpath  = ls_form_prop-cb_apr_relpath
                    cv_cancel      = lv_cancel ) .
    ENDIF .

    CHECK lv_cancel IS INITIAL .

    IF ls_form_prop-cb_apr_relpath IS INITIAL .
      CLEAR: ls_form_prop-cb_apr_offset ,
             ls_form_prop-cb_apr_match .
    ELSE .
      ls_ctxt_prop =
      r_formtemplate-&gt;r_context-&gt;node_get_by_path(
                    iv_relpath  = ls_form_prop-cb_apr_relpath
                    iv_fullpath_parent = lv_cb_fullpath ) .

      IF  ls_ctxt_prop-type_kind   EQ cl_abap_typedescr=&gt;typekind_char
      AND ls_ctxt_prop-type_length GT 1 .
*------------ popup-dialog to request a character position of a value
        popup_charpos(  EXPORTING iv_length = ls_ctxt_prop-type_length
                        CHANGING  cv_offset = ls_form_prop-cb_apr_offset
                                  cv_match  = ls_form_prop-cb_apr_match ) .
      ELSE .
        CLEAR: ls_form_prop-cb_apr_offset ,
               ls_form_prop-cb_apr_match .
      ENDIF .
    ENDIF .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_cb_apr_relpath_change
  METHOD actn_cb_val_vld_change .
    msg_init( ) .

    DATA:
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      ls_form_excp          TYPE lcl_form=&gt;ty_s_exceptions ,
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties ,
      lv_cancel             TYPE flag ,
      lv_cb_fullpath        TYPE ty_comp_path .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    ls_form_excp = r_formtemplate-&gt;node_get_exceptions( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .
    IF ls_form_excp-cb_relpath EQ c_retcode-legacy .
      MESSAGE s000(lp)
      WITH v_text-t127    &quot; text: Firstly, eliminate problems due context binding
           v_text-t021 .  &quot; text: on the upper levels
      EXIT .
    ENDIF .

*------------ get a full path of context binding
    r_formtemplate-&gt;node_get_legacy_info(
        EXPORTING iv_id = iv_form_id
        IMPORTING ev_cb_fullpath = lv_cb_fullpath ) .

    CASE abap_on .
      WHEN iv_attrpath_f4
        OR iv_attrpath_mn .
*------------ popup-dialog to request a new context binding
        popup_ctxtfield(
            EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                      iv_f4_strategy = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-loopstep
                      iv_manual      = iv_attrpath_mn
            CHANGING  cv_cb_relpath  = ls_form_prop-cb_valvld_attr_relpath
                      cv_cancel      = lv_cancel ) .
        CHECK lv_cancel IS INITIAL .

      WHEN iv_attrpath_del .
*------------ request a user confirmation
        CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t128 ) .  &quot; text: Removing the binding
        ls_form_prop-cb_valvld_attr_relpath = space .

      WHEN iv_for1_template .
        CHECK ls_form_prop-cb_valvld_for1_relpath IS NOT INITIAL
           OR ls_form_prop-cb_valvld_for1_dataset_id IS NOT INITIAL .
*------------ request a user confirmation
        CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t128 ) .  &quot; text: Removing the binding
        ls_form_prop-cb_valvld_for1_relpath     = space .
        ls_form_prop-cb_valvld_for1_dataset_id  = space .
        ls_form_prop-cb_valvld_for1_dataset_fld = space .

      WHEN iv_for1_relpath .
*------------ popup-dialog to request a new context binding
        popup_ctxtfield(
            EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                      iv_f4_strategy = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-apr_relpath
                      iv_manual      = space
            CHANGING  cv_cb_relpath  = ls_form_prop-cb_valvld_for1_relpath
                      cv_cancel      = lv_cancel ) .
        CHECK lv_cancel IS INITIAL .
        CHECK ls_form_prop-cb_valvld_for1_relpath IS NOT INITIAL .
        ls_form_prop-cb_valvld_for1_dataset_id  = space .
        ls_form_prop-cb_valvld_for1_dataset_fld = space .

      WHEN iv_for1_dataset_id .
*------------ popup-dialog to request dataset (Grid)
        popup_dataset_id( EXPORTING iv_id         = ls_form_prop-id
                                    iv_same_sheet = abap_on
                          CHANGING  cv_dataset_id = ls_form_prop-cb_valvld_for1_dataset_id ) .
        CHECK ls_form_prop-cb_valvld_for1_dataset_id IS NOT INITIAL .
        ls_form_prop-cb_valvld_for1_relpath = space .

*------------ popup-dialog to request field of dataset (Grid)
        popup_dataset_field( EXPORTING iv_dataset_id = ls_form_prop-cb_valvld_for1_dataset_id
                             CHANGING  cv_fieldname  = ls_form_prop-cb_valvld_for1_dataset_fld ) .

      WHEN iv_for1_dataset_fld .
        CHECK ls_form_prop-cb_valvld_for1_dataset_id IS NOT INITIAL .
*------------ popup-dialog to request field of dataset (Grid)
        popup_dataset_field( EXPORTING iv_dataset_id = ls_form_prop-cb_valvld_for1_dataset_id
                             CHANGING  cv_fieldname  = ls_form_prop-cb_valvld_for1_dataset_fld ) .

      WHEN iv_for2_template .
        CHECK ls_form_prop-cb_valvld_for2_relpath IS NOT INITIAL .
*------------ request a user confirmation
        CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t128 ) .  &quot; text: Removing the binding
        ls_form_prop-cb_valvld_for2_relpath    = space .

      WHEN iv_for2_relpath .
*------------ popup-dialog to request a new context binding
        popup_ctxtfield(
            EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                      iv_f4_strategy = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-apr_relpath
                      iv_manual      = space
            CHANGING  cv_cb_relpath  = ls_form_prop-cb_valvld_for2_relpath
                      cv_cancel      = lv_cancel ) .
        CHECK lv_cancel IS INITIAL .
        CHECK ls_form_prop-cb_valvld_for2_relpath IS NOT INITIAL .

      WHEN OTHERS .
        RETURN .
    ENDCASE .





*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_cb_val_vld_change
  METHOD actn_cb_apr_relpath_delete .
    msg_init( ) .

    DATA ls_form_prop  TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ request a user confirmation
    CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t129 ) .  &quot; text: Delete connection with field ?

*------------ update properties
    CLEAR: ls_form_prop-cb_apr_relpath ,
           ls_form_prop-cb_apr_offset ,
           ls_form_prop-cb_apr_match .
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_cb_apr_relpath_delete
  METHOD actn_cb_cellrng_relpth_change .
    msg_init( ) .

    DATA:
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      ls_form_excp          TYPE lcl_form=&gt;ty_s_exceptions ,
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties ,
      lv_cancel             TYPE flag ,
      lv_cb_fullpath        TYPE ty_comp_path .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    ls_form_excp = r_formtemplate-&gt;node_get_exceptions( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .
    IF ls_form_excp-cb_relpath EQ c_retcode-legacy .
      MESSAGE s000(lp)
      WITH v_text-t127    &quot; text: Firstly, eliminate problems due context binding
           v_text-t021 .  &quot; text: on the upper levels
      EXIT .
    ENDIF .

*------------ get a full path of context binding
    r_formtemplate-&gt;node_get_legacy_info(
        EXPORTING iv_id          = iv_form_id
        IMPORTING ev_cb_fullpath = lv_cb_fullpath ) .

    IF iv_relpath_f4 IS NOT INITIAL
    OR iv_relpath_mn IS NOT INITIAL .
*------------ popup-dialog to request a new context binding
      popup_ctxtfield(
          EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                    iv_f4_strategy = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-apr_relpath
                    iv_manual      = iv_relpath_mn
          CHANGING  cv_cb_relpath  = ls_form_prop-cb_cellrng_relpath
                    cv_cancel      = lv_cancel ) .
    ENDIF .

    CHECK lv_cancel IS INITIAL .

    IF ls_form_prop-cb_cellrng_relpath IS INITIAL .
      CLEAR: ls_form_prop-cb_cellrng_offset ,
             ls_form_prop-cb_cellrng_match .
    ELSE .
      ls_ctxt_prop =
      r_formtemplate-&gt;r_context-&gt;node_get_by_path(
                    iv_relpath          = ls_form_prop-cb_cellrng_relpath
                    iv_fullpath_parent  = lv_cb_fullpath ) .

      IF  ls_ctxt_prop-type_kind   EQ cl_abap_typedescr=&gt;typekind_char
      AND ls_ctxt_prop-type_length GT 1 .
*------------ popup-dialog to request a character position of a value
        popup_charpos(  EXPORTING iv_length = ls_ctxt_prop-type_length
                        CHANGING  cv_offset = ls_form_prop-cb_cellrng_offset
                                  cv_match  = ls_form_prop-cb_cellrng_match ) .
      ELSE .
        CLEAR: ls_form_prop-cb_cellrng_offset ,
               ls_form_prop-cb_cellrng_match .
      ENDIF .
    ENDIF .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_cb_cellrng_relpth_change
  METHOD actn_cb_cellrng_relpth_delete .
    msg_init( ) .

    DATA ls_form_prop  TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ request a user confirmation
    CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t129 ) .  &quot; text: Delete connection with field ?

*------------ update properties
    CLEAR: ls_form_prop-cb_cellrng_relpath ,
           ls_form_prop-cb_cellrng_offset ,
           ls_form_prop-cb_cellrng_match .
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_cb_cellrng_relpth_delete
  METHOD actn_cb_val_relpath_change .
    msg_init( ) .

    DATA:
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      ls_ctxt_prop_sub      TYPE lcl_context=&gt;ty_s_properties ,
      ls_form_excp          TYPE lcl_form=&gt;ty_s_exceptions ,
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties ,
      lv_cancel             TYPE flag ,
      lv_cb_fullpath        TYPE ty_comp_path ,
      lv_cb_comp_type       TYPE ty_comp_type ,
      lv_f4_strategy        TYPE i .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    ls_form_excp = r_formtemplate-&gt;node_get_exceptions( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .
    IF ls_form_excp-cb_relpath EQ c_retcode-legacy .
      MESSAGE s000(lp)
      WITH v_text-t127    &quot; text: Firstly, eliminate problems due context binding
           v_text-t021 .  &quot; text: on the upper levels
      EXIT .
    ENDIF .

*------------ get a full path of context binding
    r_formtemplate-&gt;node_get_legacy_info(
        EXPORTING iv_id = iv_form_id
        IMPORTING ev_cb_fullpath = lv_cb_fullpath ) .

*======================================================================
*   relative path
*======================================================================
    IF iv_relpath_f4 IS NOT INITIAL
    OR iv_relpath_mn IS NOT INITIAL .

      CASE ls_form_prop-comp_type .
        WHEN r_formtemplate-&gt;c_comp_type-tree  .    lv_f4_strategy = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-tree .
        WHEN r_formtemplate-&gt;c_comp_type-grid  .    lv_f4_strategy = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-grid .
        WHEN OTHERS .                               lv_f4_strategy = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-value .
      ENDCASE .

*------------ popup-dialog to request a new context binding
      popup_ctxtfield(
          EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                    iv_f4_strategy        = lv_f4_strategy
                    iv_manual             = iv_relpath_mn
          CHANGING  cv_cb_relpath         = ls_form_prop-cb_val_relpath
                    cv_cb_comp_type       = lv_cb_comp_type
                    cv_cancel             = lv_cancel ) .
      CHECK lv_cancel IS INITIAL .

      IF  lv_cb_comp_type EQ r_formtemplate-&gt;r_context-&gt;c_comp_type-table
      AND ls_form_prop-comp_type NE r_formtemplate-&gt;c_comp_type-tree
      AND ls_form_prop-comp_type NE r_formtemplate-&gt;c_comp_type-grid .
        popup_ctxtfield_sub(
            EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                      iv_cb_relpath         = ls_form_prop-cb_val_relpath
            CHANGING  cv_cb_val_sub_col     = ls_form_prop-cb_val_sub_col
                      cv_cb_val_sub_row     = ls_form_prop-cb_val_sub_row
                      cs_ctxt_prop          = ls_ctxt_prop_sub
                      cv_cancel             = lv_cancel ) .
        CHECK lv_cancel IS INITIAL .
      ENDIF .
    ENDIF .

    DO 1 TIMES .
      CHECK ls_form_prop-comp_type NE r_formtemplate-&gt;c_comp_type-tree .
      CHECK ls_form_prop-comp_type NE r_formtemplate-&gt;c_comp_type-grid .

*======================================================================
*   context properties
*======================================================================
      IF ls_form_prop-cb_val_relpath IS INITIAL .
        CLEAR: ls_form_prop-cb_val_offset  ,
               ls_form_prop-cb_val_match   ,
               ls_form_prop-cb_val_convert ,
               ls_form_prop-cb_val_sub_req ,
               ls_form_prop-cb_val_sub_row ,
               ls_form_prop-cb_val_sub_col .
      ELSE .
        ls_ctxt_prop =
        r_formtemplate-&gt;r_context-&gt;node_get_by_path(
                      iv_relpath  = ls_form_prop-cb_val_relpath
                      iv_fullpath_parent = lv_cb_fullpath ) .
      ENDIF .

*======================================================================
*   sub
*======================================================================
      IF ls_ctxt_prop-comp_type  EQ r_formtemplate-&gt;r_context-&gt;c_comp_type-table .
        ls_ctxt_prop_sub =
        r_formtemplate-&gt;get_sub_ctxt( iv_cb_fullpath    = lv_cb_fullpath
                                      is_form_prop      = ls_form_prop ) .

        IF  iv_sub IS NOT INITIAL .
          popup_ctxtfield_sub(
              EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                        iv_cb_relpath         = ls_form_prop-cb_val_relpath
              CHANGING  cv_cb_val_sub_col     = ls_form_prop-cb_val_sub_col
                        cv_cb_val_sub_row     = ls_form_prop-cb_val_sub_row
                        cs_ctxt_prop          = ls_ctxt_prop_sub
                        cv_cancel             = lv_cancel ) .
          IF lv_cancel IS NOT INITIAL .
            RETURN .
          ENDIF .
        ENDIF .
      ENDIF  .

*======================================================================
*   character position of a value
*======================================================================
      CHECK ls_form_prop-comp_type NE r_formtemplate-&gt;c_comp_type-drawing .

      IF  ls_ctxt_prop-type_kind   EQ cl_abap_typedescr=&gt;typekind_char
      AND ls_ctxt_prop-type_length GT 1 .
        IF iv_charpos IS NOT INITIAL .
*------------ popup-dialog to request a character position of a value
          popup_charpos(  EXPORTING iv_length = ls_ctxt_prop-type_length
                          CHANGING  cv_offset = ls_form_prop-cb_val_offset
                                    cv_match  = ls_form_prop-cb_val_match
                                    cv_cancel = lv_cancel ) .
          IF lv_cancel IS NOT INITIAL .
            RETURN .
          ENDIF .
        ENDIF .

      ELSEIF ls_ctxt_prop_sub-type_kind   EQ cl_abap_typedescr=&gt;typekind_char
         AND ls_ctxt_prop_sub-type_length GT 1 .
        IF iv_charpos IS NOT INITIAL .
*------------ popup-dialog to request a character position of a value
          popup_charpos(  EXPORTING iv_length = ls_ctxt_prop_sub-type_length
                          CHANGING  cv_offset = ls_form_prop-cb_val_offset
                                    cv_match  = ls_form_prop-cb_val_match
                                    cv_cancel = lv_cancel ) .
          IF lv_cancel IS NOT INITIAL .
            RETURN .
          ENDIF .
        ENDIF .
      ELSE .
        CLEAR: ls_form_prop-cb_val_offset ,
               ls_form_prop-cb_val_match .
      ENDIF .

*======================================================================
*   convertion
*======================================================================
      IF iv_convertion IS NOT INITIAL .
        CASE ls_form_prop-comp_type .
          WHEN lcl_form=&gt;c_comp_type-field
            OR lcl_form=&gt;c_comp_type-sheet .
            CASE ls_form_prop-cb_val_convert .
              WHEN space .  ls_form_prop-cb_val_convert = abap_on .
              WHEN OTHERS . ls_form_prop-cb_val_convert = abap_off .
            ENDCASE .

          WHEN OTHERS .
            MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
            EXIT .
        ENDCASE .
      ENDIF .
    ENDDO .


*======================================================================
*   update
*======================================================================
*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_cb_val_relpath_change
  METHOD actn_cb_val_relpath_delete .
    msg_init( ) .

    DATA ls_form_prop  TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ request a user confirmation
    CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t129 ) . &quot; text: Delete connection with field ?

*------------ update properties
    CLEAR: ls_form_prop-cb_val_relpath ,
           ls_form_prop-cb_val_offset ,
           ls_form_prop-cb_val_match .
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_cb_val_relpath_delete
  METHOD actn_tb_val_layout_change .
    msg_init( ) .

    DATA ls_form_prop  TYPE lcl_form=&gt;ty_s_properties .
    DATA lv_cancel     TYPE flag .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ checks
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-field .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ set new property
    CLEAR ls_form_prop-tb_val_formula .
    CLEAR ls_form_prop-tb_val_matrix .
    CLEAR ls_form_prop-tb_val_matr_r .
    CLEAR ls_form_prop-tb_val_matr_c .

    IF iv_valformula IS NOT INITIAL .
      ls_form_prop-tb_val_formula = abap_on  .
    ELSEIF iv_valmatrix IS NOT INITIAL .
      ls_form_prop-tb_val_matrix  = abap_on  .
*------------ popup-dialog to request an interval between rows / columns
      popup_matrix_interval( CHANGING cv_rows   = ls_form_prop-tb_val_matr_r
                                      cv_cols   = ls_form_prop-tb_val_matr_c
                                      cv_cancel = lv_cancel ) .
      CHECK lv_cancel IS INITIAL .
    ENDIF .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .
  ENDMETHOD .                    &quot;actn_tb_val_layout_change
  METHOD actn_tb_sheetname_change .
    msg_init( ) .

    DATA ls_form_prop       TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ checks
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-sheet .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ popup-dialog to request a new binding with sheet
    ls_form_prop-tb_sheetname = popup_tbsheet( ) .
    CHECK ls_form_prop-tb_sheetname IS NOT INITIAL .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .
  ENDMETHOD .                    &quot;actn_tb_sheetname_change
  METHOD actn_tb_sheetname_delete .
    msg_init( ) .

    DATA ls_form_prop  TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ checks
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-sheet .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ request a user confirmation
    CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t131 ) .  &quot; text: Delete connection with a sheet ?

*------------ update properties
    ls_form_prop-tb_sheetname = space .
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .
  ENDMETHOD .                    &quot;actn_tb_sheetname_delete
  METHOD actn_tb_sheetstate .
    msg_init( ) .

    DATA ls_form_prop  TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ checks
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-sheet .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ update properties
    CASE ls_form_prop-tb_sheetstate .
      WHEN space  . ls_form_prop-tb_sheetstate = abap_on .
      WHEN OTHERS . ls_form_prop-tb_sheetstate = space   .
    ENDCASE .

    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .
  ENDMETHOD .                    &quot;actn_tb_sheetstate
  METHOD actn_tb_sheetprotection .
    msg_init( ) .

    DATA:
      ls_form_excp          TYPE lcl_form=&gt;ty_s_exceptions ,
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties ,
      lv_cancel             TYPE flag ,
      lv_selected           TYPE ty_char1 ,
      lv_password           TYPE string ,
      lv_cb_fullpath        TYPE ty_comp_path ,
      ls_sheetprotection    TYPE lcl_form=&gt;ty_s_sheetprotection .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ checks
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-sheet .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ request of approach to sheet protection
    ls_sheetprotection = lcl_form=&gt;conv_sheetprotection_st( ls_form_prop-tb_sheetprotection ) .

    CASE abap_on .
      WHEN iv_change .
        CASE ls_sheetprotection-mode .
          WHEN c_sheetprotection_mode-off .           lv_selected = &apos;3&apos; .
          WHEN c_sheetprotection_mode-from_template . lv_selected = &apos;1&apos; .
          WHEN c_sheetprotection_mode-from_context .  lv_selected = &apos;2&apos; .
          WHEN c_sheetprotection_mode-static .        lv_selected = &apos;3&apos; .
          WHEN OTHERS .                               RETURN .
        ENDCASE .

        popup_to_decide(  EXPORTING iv_title       = v_text-t298                &quot; --&gt;&gt; text: Sheet protection
                                    iv_text        = v_text-t298                &quot; --&gt;&gt; text: Sheet protection
                                    iv_text_rb1    = v_text-t299                &quot; --&gt;&gt; text: From template
                                    iv_text_rb2    = v_text-t300                &quot; --&gt;&gt; text: From context
                                    iv_text_rb3    = v_text-t301                &quot; --&gt;&gt; text: Static
                          IMPORTING ev_cancel      = lv_cancel
                          CHANGING  cv_selected_rb = lv_selected ) .
        CASE lv_selected .
          WHEN &apos;1&apos; . ls_sheetprotection-mode = c_sheetprotection_mode-from_template .
          WHEN &apos;2&apos; . ls_sheetprotection-mode = c_sheetprotection_mode-from_context .
          WHEN &apos;3&apos; . ls_sheetprotection-mode = c_sheetprotection_mode-static .
        ENDCASE .

      WHEN iv_delete .
        ls_sheetprotection-mode = c_sheetprotection_mode-off .
    ENDCASE .

    CHECK lv_cancel IS INITIAL .

*------------ request of password options
    CASE ls_sheetprotection-mode .
      WHEN c_sheetprotection_mode-from_context
        OR c_sheetprotection_mode-static .

        popup_sheetprotection_password(
            IMPORTING ev_cancel   = lv_cancel
            CHANGING  cv_password = ls_sheetprotection-password ) .
    ENDCASE .

    CHECK lv_cancel IS INITIAL .

*------------ request of new options of sheet protection
    CASE ls_sheetprotection-mode .
      WHEN c_sheetprotection_mode-off .
        CLEAR ls_sheetprotection .

      WHEN c_sheetprotection_mode-from_template .
        CLEAR ls_sheetprotection .
        ls_sheetprotection-mode           = c_sheetprotection_mode-from_template.

      WHEN c_sheetprotection_mode-from_context .
        lv_cb_fullpath = ls_sheetprotection-cb_val_relpath .
        lv_password    = ls_sheetprotection-password .
        CLEAR ls_sheetprotection .
        ls_sheetprotection-cb_val_relpath = lv_cb_fullpath .
        ls_sheetprotection-mode           = c_sheetprotection_mode-from_context .
        ls_sheetprotection-password       = lv_password .

        ls_form_excp = r_formtemplate-&gt;node_get_exceptions( iv_form_id ) .
        CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .
        IF ls_form_excp-cb_relpath EQ c_retcode-legacy .
          MESSAGE s000(lp)
          WITH v_text-t127    &quot; text: Firstly, eliminate problems due context binding
               v_text-t021 .  &quot; text: on the upper levels
          RETURN .
        ENDIF .

*------------ get a full path of context binding
        r_formtemplate-&gt;node_get_legacy_info(
            EXPORTING iv_id           = iv_form_id
            IMPORTING ev_cb_fullpath  = lv_cb_fullpath ) .

*------------ popup-dialog to request a new context binding
        popup_ctxtfield(
            EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                      iv_f4_strategy        = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-apr_relpath &quot; value
            CHANGING  cv_cb_relpath         = ls_sheetprotection-cb_val_relpath
                      cv_cancel             = lv_cancel ) .
        CHECK ls_sheetprotection-cb_val_relpath IS NOT INITIAL .

      WHEN c_sheetprotection_mode-static .
        CLEAR ls_sheetprotection-cb_val_relpath .
        ls_sheetprotection-mode = c_sheetprotection_mode-static .

        popup_sheetprotection_static(
            IMPORTING ev_cancel          = lv_cancel
            CHANGING  cs_sheetprotection = ls_sheetprotection ) .

    ENDCASE .

    CHECK lv_cancel IS INITIAL .

*------------ update properties
    ls_form_prop-tb_sheetprotection = lcl_form=&gt;conv_sheetprotection_ts( ls_sheetprotection ) .
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .
  ENDMETHOD .                    &quot;actn_tb_sheetprotection
  METHOD actn_tb_area_setcells .
    msg_init( ) .

    DATA:
      lv_tb_sheetname_legacy    TYPE ty_char31 ,
      lv_tb_sheetname_current   TYPE ty_char31 ,
      ls_form_expt          TYPE lcl_form=&gt;ty_s_exceptions ,
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_expt = r_formtemplate-&gt;node_get_exceptions( iv_form_id ) .

    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    r_formtemplate-&gt;node_get_legacy_info( EXPORTING iv_id = iv_form_id
                                          IMPORTING ev_tb_sheetname = lv_tb_sheetname_legacy ) .
    IF lv_tb_sheetname_legacy IS INITIAL
    OR ls_form_expt-tb_sheetname EQ c_retcode-legacy .
      MESSAGE i000(lp)
      WITH v_text-t026      &quot; text: problem occurs with component
           v_text-t008      &quot; text: Sheet
           v_text-t021 .    &quot; text: on the upper levels
      EXIT .
    ENDIF .

*------------ determine selected area
    r_excelole-&gt;selection_get(
         IMPORTING ev_sheet = lv_tb_sheetname_current
                   ev_area_top      = ls_form_prop-tb_area_top
                   ev_area_left     = ls_form_prop-tb_area_left
                   ev_area_rows     = ls_form_prop-tb_area_rows
                   ev_area_columns  = ls_form_prop-tb_area_columns ) .
    IF lv_tb_sheetname_current IS INITIAL
    OR lv_tb_sheetname_current NE lv_tb_sheetname_legacy
    OR (     ls_form_prop-tb_area_top     IS INITIAL
         AND ls_form_prop-tb_area_left    IS INITIAL
         AND ls_form_prop-tb_area_rows    IS INITIAL
         AND ls_form_prop-tb_area_columns IS INITIAL ) .
      MESSAGE i000(lp)
         WITH v_text-t132   &quot; text: Specify an area on the sheet
              lv_tb_sheetname_legacy .
      EXIT .
    ENDIF .

*------------ clear mark in the text
    CLEAR ls_form_prop-tb_area_textmark .

    IF s_presets_dt-popup_tb IS NOT INITIAL .
*------------ request user confirmation
      CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t133 ) .  &quot; text: Connection with selected area in the template will be created
    ENDIF .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .
  ENDMETHOD .                    &quot;actn_tb_area_setcells
  METHOD actn_tb_area_settextmark .
    msg_init( ) .

    DATA:
      lv_retcode            TYPE flag ,
      ls_form_expt          TYPE lcl_form=&gt;ty_s_exceptions ,
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_expt = r_formtemplate-&gt;node_get_exceptions( iv_form_id ) .

    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ request mark in the text
    IF ls_form_prop-tb_area_textmark IS INITIAL .
      CONCATENATE &apos;[&apos; ls_form_prop-comp_name &apos;]&apos; INTO ls_form_prop-tb_area_textmark .
    ENDIF .

    popup_textmark( CHANGING cv_retcode  = lv_retcode
                             cv_textmark = ls_form_prop-tb_area_textmark ) .
    CHECK lv_retcode IS INITIAL .

*------------ clear area cells
    CLEAR:
      ls_form_prop-tb_area_top ,
      ls_form_prop-tb_area_left ,
      ls_form_prop-tb_area_rows ,
      ls_form_prop-tb_area_columns .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .
  ENDMETHOD .                    &quot;actn_tb_area_settextmark
  METHOD actn_tb_area_delete .
    msg_init( ) .

    DATA ls_form_prop  TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ request a user confirmation
    CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t128 ) .  &quot; text: Removing of the binding

*------------ update properties
    CLEAR ls_form_prop-tb_area_textmark .
    CLEAR ls_form_prop-tb_area_top .
    CLEAR ls_form_prop-tb_area_left .
    CLEAR ls_form_prop-tb_area_rows .
    CLEAR ls_form_prop-tb_area_columns .
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_tb_area_delete
  METHOD actn_tb_direction_change .
    msg_init( ).

    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ determine selected area
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-folder
        OR lcl_form=&gt;c_comp_type-pattern
        OR lcl_form=&gt;c_comp_type-respattern
        OR lcl_form=&gt;c_comp_type-tree
        OR lcl_form=&gt;c_comp_type-grid .

        CASE ls_form_prop-tb_direction .
          WHEN lcl_form=&gt;c_tb_direction-up2down .
            ls_form_prop-tb_direction = lcl_form=&gt;c_tb_direction-left2right .
          WHEN lcl_form=&gt;c_tb_direction-left2right .
            ls_form_prop-tb_direction = lcl_form=&gt;c_tb_direction-up2down .
        ENDCASE .

      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ).
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL.

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ).

  ENDMETHOD .                    &quot;actn_tb_direction_change
  METHOD actn_tb_colrow_prop_change .
    msg_init( ).

    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ checks
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-pattern
        OR lcl_form=&gt;c_comp_type-respattern .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ set new property
    IF iv_rows IS NOT INITIAL .
      CASE ls_form_prop-tb_rowprop .
        WHEN space .  ls_form_prop-tb_rowprop = abap_on .
        WHEN OTHERS . ls_form_prop-tb_rowprop = abap_off .
      ENDCASE .

    ELSEIF iv_columns IS NOT INITIAL .
      CASE ls_form_prop-tb_colprop .
        WHEN space .  ls_form_prop-tb_colprop = abap_on .
        WHEN OTHERS . ls_form_prop-tb_colprop = abap_off .
      ENDCASE .
    ENDIF .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ).
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL.

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ).

  ENDMETHOD .                    &quot;actn_tb_colrow_prop_change
  METHOD actn_tb_colrow_group_change .
    msg_init( ).

    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ checks
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-folder .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ set new property
    IF iv_clp IS INITIAL .
      IF iv_rows IS NOT INITIAL .
        CASE ls_form_prop-tb_rowgroup .
          WHEN space .  ls_form_prop-tb_rowgroup = abap_on .
          WHEN OTHERS . ls_form_prop-tb_rowgroup = abap_off .
        ENDCASE .

      ELSEIF iv_columns IS NOT INITIAL .
        CASE ls_form_prop-tb_colgroup .
          WHEN space .  ls_form_prop-tb_colgroup = abap_on .
          WHEN OTHERS . ls_form_prop-tb_colgroup = abap_off .
        ENDCASE .
      ENDIF .
    ELSE .
      IF iv_rows IS NOT INITIAL .
        CASE ls_form_prop-tb_rowgroup_clp .
          WHEN space .  ls_form_prop-tb_rowgroup_clp = abap_on .
          WHEN OTHERS . ls_form_prop-tb_rowgroup_clp = abap_off .
        ENDCASE .

      ELSEIF iv_columns IS NOT INITIAL .
        CASE ls_form_prop-tb_colgroup_clp .
          WHEN space .  ls_form_prop-tb_colgroup_clp = abap_on .
          WHEN OTHERS . ls_form_prop-tb_colgroup_clp = abap_off .
        ENDCASE .
      ENDIF .
    ENDIF .


*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ).
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL.

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ).

  ENDMETHOD .                    &quot;actn_tb_colrow_group_change
  METHOD actn_tb_drwstatflag_change .
    msg_init( ).

    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ set new property
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-drawing .
        CASE ls_form_prop-tb_drwstat_flag .
          WHEN space .  ls_form_prop-tb_drwstat_flag = abap_on .
          WHEN OTHERS . ls_form_prop-tb_drwstat_flag = abap_off .
        ENDCASE .

      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_tb_drwstatflag_change
  METHOD actn_tb_drwstatname_change .
    msg_init( ) .

    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties ,
      ls_form_excp          TYPE lcl_form=&gt;ty_s_exceptions ,
      lv_tb_sheetname       TYPE ty_char31 .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    IF ls_form_prop-tb_drwstat_flag IS INITIAL .
      MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
      EXIT .
    ENDIF .


*=======================================
    IF iv_change IS NOT INITIAL .
*=======================================

      r_formtemplate-&gt;node_get_legacy_info(
            EXPORTING iv_id           = iv_form_id
            IMPORTING ev_tb_sheetname = lv_tb_sheetname
                      es_exceptions   = ls_form_excp ) .

      IF lv_tb_sheetname IS INITIAL
      OR ls_form_excp-tb_sheetname EQ c_retcode-error
      OR ls_form_excp-tb_sheetname EQ c_retcode-legacy .
        MESSAGE i000(lp)
           WITH v_text-t026                 &quot; text: problem occurs with component
                v_text-t008                 &quot; text: Sheet
                v_text-t021 INTO v_dummy .  &quot; text: on the upper levels
        EXIT .
      ENDIF .

*------------ popup-dialog to request a new binding with Drawing or Chart
      CASE ls_form_prop-comp_type .
        WHEN r_formtemplate-&gt;c_comp_type-drawing .
          ls_form_prop-tb_drwstat_name = popup_tbdrawing( iv_sheetname = lv_tb_sheetname
                                                          iv_vector    = abap_on
                                                          iv_bitmap    = abap_on ) .
        WHEN r_formtemplate-&gt;c_comp_type-chart .
          ls_form_prop-tb_drwstat_name = popup_tbdrawing( iv_sheetname = lv_tb_sheetname
                                                          iv_chart     = abap_on ) .
      ENDCASE .
      CHECK ls_form_prop-tb_drwstat_name IS NOT INITIAL .

*=======================================
    ELSEIF iv_delete IS NOT INITIAL .
*=======================================
      CHECK ls_form_prop-tb_drwstat_name IS NOT INITIAL .
      CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t128 ) .  &quot; text: Removing the binding
      CLEAR ls_form_prop-tb_drwstat_name .

    ENDIF .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .
  ENDMETHOD .                    &quot;actn_tb_drwstatname_change
  METHOD actn_tb_drwsize_change .
    msg_init( ) .

    DATA:
      ls_form_excp          TYPE lcl_form=&gt;ty_s_exceptions ,
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties ,
      lv_cancel             TYPE flag ,
      lv_cb_fullpath        TYPE ty_comp_path .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ checks
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-drawing
        OR lcl_form=&gt;c_comp_type-chart .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

    ls_form_excp = r_formtemplate-&gt;node_get_exceptions( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    CASE abap_on .
      WHEN iv_context
        OR iv_h_f4
        OR iv_h_mn
        OR iv_w_f4
        OR iv_w_mn .

        IF ls_form_excp-cb_relpath EQ c_retcode-legacy .
          MESSAGE s000(lp)
          WITH v_text-t127    &quot; text: Firstly, eliminate problems due context binding
               v_text-t021 .  &quot; text: on the upper levels
          EXIT .
        ENDIF .
    ENDCASE .

*------------ process
    CASE abap_on .
      WHEN iv_fit .
        ls_form_prop-drawing_size = lcl_form=&gt;c_drawing_size-fit_within_area .
        ls_form_prop-drawing_size_h_relpath = space .
        ls_form_prop-drawing_size_w_relpath = space .

      WHEN iv_context .
        ls_form_prop-drawing_size = lcl_form=&gt;c_drawing_size-from_context .

      WHEN iv_h_f4
        OR iv_h_mn .

*------------ get a full path of context binding
        r_formtemplate-&gt;node_get_legacy_info(
            EXPORTING iv_id          = iv_form_id
            IMPORTING ev_cb_fullpath = lv_cb_fullpath ) .

*------------ popup-dialog to request a new context binding
        popup_ctxtfield(
            EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                      iv_f4_strategy = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-apr_relpath
                      iv_manual      = iv_h_mn
            CHANGING  cv_cb_relpath  = ls_form_prop-drawing_size_h_relpath
                      cv_cancel      = lv_cancel ) .

      WHEN iv_w_f4
        OR iv_w_mn .

*------------ get a full path of context binding
        r_formtemplate-&gt;node_get_legacy_info(
            EXPORTING iv_id          = iv_form_id
            IMPORTING ev_cb_fullpath = lv_cb_fullpath ) .

*------------ popup-dialog to request a new context binding
        popup_ctxtfield(
            EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                      iv_f4_strategy = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-apr_relpath
                      iv_manual      = iv_w_mn
            CHANGING  cv_cb_relpath  = ls_form_prop-drawing_size_w_relpath
                      cv_cancel      = lv_cancel ) .
    ENDCASE .

    CHECK lv_cancel IS INITIAL .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_tb_drwsize_change
  METHOD actn_tb_pgbreak .
    msg_init( ) .

    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ checks
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-folder .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ process
    IF iv_nopgbreak IS INITIAL .
*------------ Insert page break (at the beginning)
      IF iv_top IS NOT INITIAL .
        CASE ls_form_prop-tb_pgbrk_top .
          WHEN space .  ls_form_prop-tb_pgbrk_top = abap_on .
          WHEN OTHERS.  ls_form_prop-tb_pgbrk_top = abap_off .
        ENDCASE .

      ELSEIF iv_left IS NOT INITIAL .
        CASE ls_form_prop-tb_pgbrk_left .
          WHEN space .  ls_form_prop-tb_pgbrk_left = abap_on .
          WHEN OTHERS.  ls_form_prop-tb_pgbrk_left = abap_off .
        ENDCASE .
      ELSE .
        EXIT .
      ENDIF .

    ELSE .
*------------ Preventing automatic page breaks (inside)
      IF iv_top IS NOT INITIAL .
        IF ls_form_prop-tb_nopgbrk_top IS INITIAL .
          CALL FUNCTION &apos;POPUP_TO_INFORM&apos;
            EXPORTING
              titel = v_text-t105     &quot; text: Notice!
              txt2  = v_text-t157     &quot; text: This option will be implemented via OLE on FrontEnd
              txt1  = space.

          ls_form_prop-tb_nopgbrk_top = abap_on .

          popup_pgbrk( EXPORTING iv_top   = abap_on
                       CHANGING  cv_shift = ls_form_prop-tb_nopgbrk_top_shift ) .
        ELSE .
          CLEAR: ls_form_prop-tb_nopgbrk_top ,
                 ls_form_prop-tb_nopgbrk_top_shift .
        ENDIF .

      ELSEIF iv_left IS NOT INITIAL .
        IF ls_form_prop-tb_nopgbrk_left IS INITIAL .
          CALL FUNCTION &apos;POPUP_TO_INFORM&apos;
            EXPORTING
              titel = v_text-t105     &quot; text: Notice!
              txt2  = v_text-t157     &quot; text: This option will be implemented via OLE on FrontEnd
              txt1  = space.

          ls_form_prop-tb_nopgbrk_left = abap_on .

          popup_pgbrk( EXPORTING iv_left  = abap_on
                       CHANGING  cv_shift = ls_form_prop-tb_nopgbrk_left_shift ) .
        ELSE .
          CLEAR: ls_form_prop-tb_nopgbrk_left ,
                 ls_form_prop-tb_nopgbrk_left_shift .
        ENDIF .
      ELSE .
        EXIT .
      ENDIF .

      IF ls_form_prop-tb_nopgbrk_top  IS NOT INITIAL
      OR ls_form_prop-tb_nopgbrk_left IS NOT INITIAL .
        popup_postprocessing_info( ) .
      ENDIF .

    ENDIF .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .
  ENDMETHOD .                    &quot;actn_tb_pgbreak
  METHOD actn_tb_printtitles .
    msg_init( ) .

    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties ,
      lv_tb_sheetname       TYPE ty_char31 .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ process
    r_formtemplate-&gt;node_get_legacy_info(
          EXPORTING iv_id           = iv_form_id
          IMPORTING ev_tb_sheetname = lv_tb_sheetname ) .
    CHECK lv_tb_sheetname IS NOT INITIAL .

    IF iv_rows IS NOT INITIAL .
      IF iv_delete IS NOT INITIAL .
        CLEAR ls_form_prop-tb_printtitles_r .
      ELSEIF iv_change IS NOT INITIAL .
        popup_printtitles(
            EXPORTING iv_sheetname = lv_tb_sheetname
                      iv_rows      = abap_on
            CHANGING  cv_comp_id   = ls_form_prop-tb_printtitles_r ) .
      ENDIF .

    ELSEIF iv_cols IS NOT INITIAL .
      IF iv_delete IS NOT INITIAL .
        CLEAR ls_form_prop-tb_printtitles_c .
      ELSEIF iv_change IS NOT INITIAL .
        popup_printtitles(
            EXPORTING iv_sheetname = lv_tb_sheetname
                      iv_cols      = abap_on
            CHANGING  cv_comp_id   = ls_form_prop-tb_printtitles_c ) .
      ENDIF .
    ELSE .
      EXIT .
    ENDIF .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .
  ENDMETHOD .                    &quot;actn_tb_printtitles
  METHOD actn_tb_mergecells_change .
    msg_init( ).

    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ determine selected area
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-respattern .

        CASE ls_form_prop-tb_mergecells .
          WHEN lcl_form=&gt;c_tb_mergecells-rows .
            ls_form_prop-tb_mergecells = lcl_form=&gt;c_tb_mergecells-cols .
          WHEN lcl_form=&gt;c_tb_mergecells-cols .
            ls_form_prop-tb_mergecells = lcl_form=&gt;c_tb_mergecells-rows .
        ENDCASE .

      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_tb_mergecells_change
  METHOD actn_tb_autofitmerged_change .
    msg_init( ).

    DATA ls_form_prop          TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ determine selected area
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-pattern
        OR lcl_form=&gt;c_comp_type-respattern .

        IF  ls_form_prop-tb_autofitmerged_r IS INITIAL
        AND ls_form_prop-tb_autofitmerged_c IS INITIAL
        AND ( iv_rows IS NOT INITIAL OR iv_cols IS NOT INITIAL ) .
          popup_postprocessing_info( ) .
        ENDIF .
        ls_form_prop-tb_autofitmerged_r = iv_rows .
        ls_form_prop-tb_autofitmerged_c = iv_cols .

      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_tb_autofitmerged_change
  METHOD actn_tb_respattern_place .
    msg_init( ).

    DATA ls_form_prop          TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ determine selected area
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-respattern .
        CASE abap_on .
          WHEN iv_before .  ls_form_prop-tb_respattern_place = lcl_form=&gt;c_respattern_place-before_subarea .
          WHEN iv_after .   ls_form_prop-tb_respattern_place = lcl_form=&gt;c_respattern_place-after_subarea .
        ENDCASE .

      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_tb_respattern_place
  METHOD actn_tree_layout_change .
    msg_init( ).

    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties ,
      ls_ctxt_prop          TYPE lcl_context=&gt;ty_s_properties ,
      lv_cb_fullpath        TYPE ty_comp_path ,
      ls_tree_layout        TYPE ty_s_tree_layout .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ read context binding properties
    IF ls_form_prop-cb_val_relpath IS NOT INITIAL .
      r_formtemplate-&gt;node_get_legacy_info(
          EXPORTING iv_id = iv_form_id
          IMPORTING ev_cb_fullpath = lv_cb_fullpath ) .

      ls_ctxt_prop =
      r_formtemplate-&gt;r_context-&gt;node_get_by_path(
                    iv_relpath  = ls_form_prop-cb_val_relpath
                    iv_fullpath_parent = lv_cb_fullpath ) .
    ENDIF .

*------------ checks
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-tree .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ process
    lcl_form=&gt;conv_container_fs(
        EXPORTING iv_field      = ls_form_prop-tree_layout
        IMPORTING es_structure  = ls_tree_layout ) .

    IF     iv_rotate IS NOT INITIAL .
      CASE ls_tree_layout-rotate .
        WHEN space .  ls_tree_layout-rotate = abap_on .
        WHEN OTHERS . ls_tree_layout-rotate = abap_off .
      ENDCASE .

    ELSEIF iv_stru_exp_coll IS NOT INITIAL .
      CASE ls_ctxt_prop-comp_type .
        WHEN lcl_context=&gt;c_comp_type-tree .
          CASE ls_tree_layout-stru_exp_coll .
            WHEN lcl_form=&gt;c_stru_exp_coll-expanded  .  ls_tree_layout-stru_exp_coll = lcl_form=&gt;c_stru_exp_coll-collapsed .
            WHEN lcl_form=&gt;c_stru_exp_coll-collapsed .  ls_tree_layout-stru_exp_coll = lcl_form=&gt;c_stru_exp_coll-dynamic .
            WHEN OTHERS .                               ls_tree_layout-stru_exp_coll = lcl_form=&gt;c_stru_exp_coll-expanded .
          ENDCASE .
        WHEN lcl_context=&gt;c_comp_type-tree_s .
          CASE ls_tree_layout-stru_exp_coll .
            WHEN lcl_form=&gt;c_stru_exp_coll-expanded  .  ls_tree_layout-stru_exp_coll = lcl_form=&gt;c_stru_exp_coll-collapsed .
            WHEN OTHERS .                               ls_tree_layout-stru_exp_coll = lcl_form=&gt;c_stru_exp_coll-expanded .
          ENDCASE .
      ENDCASE .

    ELSEIF iv_stru IS NOT INITIAL .
      CASE ls_tree_layout-stru .
        WHEN space  . ls_tree_layout-stru = abap_on  .
        WHEN OTHERS . ls_tree_layout-stru = abap_off .
      ENDCASE .

    ELSEIF iv_head IS NOT INITIAL .
      CASE ls_tree_layout-head .
        WHEN space .  ls_tree_layout-head = abap_on .
        WHEN OTHERS . ls_tree_layout-head = abap_off .
      ENDCASE .

    ELSEIF iv_col_hier IS NOT INITIAL .
      CASE ls_tree_layout-col_hier .
        WHEN space .
          ls_tree_layout-col_hier = abap_on .
          ls_tree_layout-col_hier_shift = 5 .
        WHEN OTHERS .
          ls_tree_layout-col_hier = abap_off .
          ls_tree_layout-col_hier_shift = 0 .
      ENDCASE .

    ELSEIF iv_col_hier_after IS NOT INITIAL .
      CASE ls_tree_layout-col_hier_after .
        WHEN space .  ls_tree_layout-col_hier_after = abap_on .
        WHEN OTHERS . ls_tree_layout-col_hier_after = abap_off .
      ENDCASE .

    ELSEIF iv_col_hier_shift IS NOT INITIAL .

      popup_to_get_value(
          EXPORTING iv_title     = v_text-t126  &quot; --&gt;&gt; text: Specify new value
                    iv_tabname   = &apos;ALPDBUIALV&apos;
                    iv_fieldname = &apos;INDEX&apos;
                    iv_fieldtext = v_text-t191  &quot; --&gt;&gt; text: shift
          CHANGING  cv_value     = ls_tree_layout-col_hier_shift ) .

    ELSEIF iv_col_othr IS NOT INITIAL .
      CASE ls_tree_layout-col_othr .
        WHEN space .
          ls_tree_layout-col_othr = abap_on .
          ls_tree_layout-col_othr_width = 0 .
        WHEN OTHERS .
          ls_tree_layout-col_othr = abap_off .
          ls_tree_layout-col_othr_width = 0 .
      ENDCASE .

    ELSEIF iv_col_othr_width IS NOT INITIAL .
      IF ls_tree_layout-col_othr_width IS INITIAL
      OR ls_tree_layout-col_othr_width EQ 0 .
        ls_tree_layout-col_othr_width = 1 .

        popup_to_get_value(
            EXPORTING iv_title     = v_text-t126  &quot; --&gt;&gt; text: Specify new value
                      iv_tabname   = &apos;ALPDBUIALV&apos;
                      iv_fieldname = &apos;INDEX&apos;
                      iv_fieldtext = v_text-t202  &quot; --&gt;&gt; text: multiplier
            CHANGING  cv_value     = ls_tree_layout-col_othr_width ) .
        IF ls_tree_layout-col_othr_width IS INITIAL .
          MESSAGE s000(lp) WITH v_text-t100 .	&quot;	text: Operation was terminated by the user
          EXIT .
        ENDIF .
      ELSE .
        ls_tree_layout-col_othr_width = 0 .
      ENDIF .

    ELSEIF iv_col_othr_allowformulas IS NOT INITIAL .
      CASE ls_tree_layout-allow_formulas .
        WHEN space .  ls_tree_layout-allow_formulas = abap_on .
        WHEN OTHERS.  ls_tree_layout-allow_formulas = abap_off .
      ENDCASE .
    ELSE .
      EXIT .
    ENDIF .

    lcl_form=&gt;conv_container_sf(
        EXPORTING is_structure  = ls_tree_layout
        IMPORTING ev_field      = ls_form_prop-tree_layout ) .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .
  ENDMETHOD .                    &quot;actn_tree_layout_change
  METHOD actn_grid_layout_change .
    msg_init( ).

    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties ,
      ls_grid_layout        TYPE ty_s_grid_layout .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ checks
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-grid .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ process
    lcl_form=&gt;conv_container_fs(
        EXPORTING iv_field      = ls_form_prop-grid_layout
        IMPORTING es_structure  = ls_grid_layout ) .

    IF     iv_rotate IS NOT INITIAL .
      CASE ls_grid_layout-rotate .
        WHEN space .  ls_grid_layout-rotate = abap_on .
        WHEN OTHERS . ls_grid_layout-rotate = abap_off .
      ENDCASE .

    ELSEIF iv_head IS NOT INITIAL .
      CASE ls_grid_layout-head .
        WHEN space .  ls_grid_layout-head = abap_on .
        WHEN OTHERS . ls_grid_layout-head = abap_off .
      ENDCASE .

    ELSEIF iv_head_titles IS NOT INITIAL .
      CASE ls_grid_layout-head_titles .
        WHEN lcl_form=&gt;c_head_titles-tech  .  ls_grid_layout-head_titles = lcl_form=&gt;c_head_titles-descr .
        WHEN lcl_form=&gt;c_head_titles-descr .  ls_grid_layout-head_titles = lcl_form=&gt;c_head_titles-tech_descr .
        WHEN OTHERS .                         ls_grid_layout-head_titles = lcl_form=&gt;c_head_titles-tech .
      ENDCASE .

    ELSEIF iv_fldseq IS NOT INITIAL .
      IF ls_form_prop-cb_val_relpath IS INITIAL .
        MESSAGE i000(lp) WITH v_text-t022 .  &quot; text: Context binding is missing
        EXIT .
      ENDIF .

      popup_grid_fldseq( CHANGING cs_form_prop = ls_form_prop ) .

    ELSEIF iv_fldprop IS NOT INITIAL .
      IF ls_form_prop-cb_val_relpath IS INITIAL .
        MESSAGE i000(lp) WITH v_text-t022 .  &quot; text: Context binding is missing
        EXIT .
      ENDIF .
      IF ls_form_prop-grid_fldseq IS INITIAL .
        MESSAGE i000(lp) WITH v_text-t231 .  &quot; text: No column list is specified
        EXIT .
      ENDIF .
      popup_grid_fldprop( CHANGING cs_form_prop = ls_form_prop ) .

    ELSEIF iv_allowformulas IS NOT INITIAL .
      CASE ls_grid_layout-allow_formulas .
        WHEN space .  ls_grid_layout-allow_formulas = abap_on .
        WHEN OTHERS.  ls_grid_layout-allow_formulas = abap_off .
      ENDCASE .
    ELSE .
      EXIT .
    ENDIF .

    lcl_form=&gt;conv_container_sf(
        EXPORTING is_structure  = ls_grid_layout
        IMPORTING ev_field      = ls_form_prop-grid_layout ) .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .
  ENDMETHOD .                    &quot;actn_grid_layout_change
  METHOD actn_chart_change .
    msg_init( ).

    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties ,
      ls_form_excp          TYPE lcl_form=&gt;ty_s_exceptions ,
      lv_cancel             TYPE flag ,
      lv_cb_fullpath        TYPE ty_comp_path .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    ls_form_excp = r_formtemplate-&gt;node_get_exceptions( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ checks
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-chart .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ process
    IF     iv_model_change IS NOT INITIAL .
      actn_tb_drwstatname_change( iv_alvtree_nkey = iv_alvtree_nkey
                                  iv_form_id      = iv_form_id
                                  iv_change       = abap_on ) .
      EXIT .

    ELSEIF iv_model_delete IS NOT INITIAL .
      actn_tb_drwstatname_change( iv_alvtree_nkey = iv_alvtree_nkey
                                  iv_form_id      = iv_form_id
                                  iv_delete       = abap_on ) .
      EXIT .

    ELSEIF iv_title IS NOT INITIAL .
      CASE ls_form_prop-chart_title .
        WHEN space  .
          IF ls_form_excp-cb_relpath EQ c_retcode-legacy .
            MESSAGE s000(lp)
            WITH v_text-t127    &quot; text: Firstly, eliminate problems due context binding
                 v_text-t021 .  &quot; text: on the upper levels
            EXIT .
          ENDIF .
          &quot; get a full path of context binding
          r_formtemplate-&gt;node_get_legacy_info(
              EXPORTING iv_id = iv_form_id
              IMPORTING ev_cb_fullpath = lv_cb_fullpath ) .

          &quot; popup-dialog to request a new context binding
          CLEAR ls_form_prop-chart_title_relpath .

          popup_ctxtfield(
              EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                        iv_f4_strategy        = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-apr_relpath
              CHANGING  cv_cb_relpath         = ls_form_prop-chart_title_relpath
                        cv_cancel             = lv_cancel ) .
          CHECK lv_cancel IS INITIAL .
          CHECK ls_form_prop-chart_title_relpath IS NOT INITIAL .

          ls_form_prop-chart_title = abap_on .

        WHEN OTHERS .
          ls_form_prop-chart_title = abap_off .
      ENDCASE .

    ELSEIF iv_title_catax IS NOT INITIAL .
      CASE ls_form_prop-chart_catax_title .
        WHEN space  .
          ls_form_prop-chart_catax_title = &apos;1&apos; .

        WHEN &apos;1&apos; .
          IF ls_form_excp-cb_relpath EQ c_retcode-legacy .
            MESSAGE s000(lp)
            WITH v_text-t127    &quot; text: Firstly, eliminate problems due context binding
                 v_text-t021 .  &quot; text: on the upper levels
            EXIT .
          ENDIF .
          &quot; get a full path of context binding
          r_formtemplate-&gt;node_get_legacy_info(
              EXPORTING iv_id = iv_form_id
              IMPORTING ev_cb_fullpath = lv_cb_fullpath ) .

          &quot; popup-dialog to request a new context binding
          CLEAR ls_form_prop-chart_catax_title_relpath .

          popup_ctxtfield(
              EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                        iv_f4_strategy        = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-apr_relpath
              CHANGING  cv_cb_relpath         = ls_form_prop-chart_catax_title_relpath
                        cv_cancel             = lv_cancel ) .
          CHECK lv_cancel IS INITIAL .
          CHECK ls_form_prop-chart_catax_title_relpath IS NOT INITIAL .

          ls_form_prop-chart_catax_title = abap_on .

        WHEN OTHERS .
          ls_form_prop-chart_catax_title = abap_off .
      ENDCASE .

    ELSEIF iv_title_valax IS NOT INITIAL .
      CASE ls_form_prop-chart_valax_title .
        WHEN space  .
          IF ls_form_excp-cb_relpath EQ c_retcode-legacy .
            MESSAGE s000(lp)
            WITH v_text-t127    &quot; text: Firstly, eliminate problems due context binding
                 v_text-t021 .  &quot; text: on the upper levels
            EXIT .
          ENDIF .
          &quot; get a full path of context binding
          r_formtemplate-&gt;node_get_legacy_info(
              EXPORTING iv_id = iv_form_id
              IMPORTING ev_cb_fullpath = lv_cb_fullpath ) .

          &quot; popup-dialog to request a new context binding
          CLEAR ls_form_prop-chart_valax_title_relpath .

          popup_ctxtfield(
              EXPORTING iv_cb_fullpath_parent = lv_cb_fullpath
                        iv_f4_strategy        = r_formtemplate-&gt;r_context-&gt;c_f4_strategy-apr_relpath
              CHANGING  cv_cb_relpath         = ls_form_prop-chart_valax_title_relpath
                        cv_cancel             = lv_cancel ) .
          CHECK lv_cancel IS INITIAL .
          CHECK ls_form_prop-chart_valax_title_relpath IS NOT INITIAL .

          ls_form_prop-chart_valax_title = abap_on .

        WHEN OTHERS .
          ls_form_prop-chart_valax_title = abap_off .
      ENDCASE .

    ELSEIF iv_title_series IS NOT INITIAL .
      CASE ls_form_prop-chart_series_title .
        WHEN space  . ls_form_prop-chart_series_title = abap_on .
        WHEN OTHERS . ls_form_prop-chart_series_title = abap_off .
      ENDCASE .

    ELSEIF iv_dtset_change IS NOT INITIAL .
      IF ls_form_excp-cb_relpath EQ c_retcode-legacy .
        MESSAGE s000(lp)
        WITH v_text-t127    &quot; text: Firstly, eliminate problems due context binding
             v_text-t021 .  &quot; text: on the upper levels
        EXIT .
      ENDIF .
      popup_dataset_id( EXPORTING iv_id         = ls_form_prop-id
                        CHANGING  cv_dataset_id = ls_form_prop-dataset_id ) .

    ELSEIF iv_dtset_delete IS NOT INITIAL .
      CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t128 ) .  &quot; text: Removing the binding
      CLEAR ls_form_prop-dataset_id .
      CLEAR ls_form_prop-dataset_series .

    ELSEIF iv_dtset_series IS NOT INITIAL .
      IF ls_form_prop-dataset_id IS INITIAL .
        MESSAGE s000(lp) WITH v_text-t243 .   &quot; text: Dataset is not specified
        EXIT .
      ELSEIF ls_form_excp-dataset EQ c_retcode-error .
        MESSAGE s000(lp) WITH v_text-t244 .   &quot; text: Incorrect Dataset is specified
        EXIT .
      ENDIF .
      popup_dataset_series( CHANGING cs_form_prop = ls_form_prop ) .

    ELSE .
      EXIT .
    ENDIF .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .
  ENDMETHOD .                    &quot;actn_chart_change
  METHOD actn_draft_change .
    msg_init( ) .

    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ determine selected area
    CASE ls_form_prop-comp_type .
      WHEN lcl_form=&gt;c_comp_type-folder .

        CASE ls_form_prop-draft_subtree .
          WHEN space .  ls_form_prop-draft_subtree = abap_on .
          WHEN OTHERS . ls_form_prop-draft_subtree = space .
        ENDCASE .

      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ update properties
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the adjustments tab
    r_protab-&gt;redraw( iv_form_id      = ls_form_prop-id
                      ir_formtemplate = r_formtemplate
                      iv_activetab_id = r_protab-&gt;c_tab_id-adjustments ) .

  ENDMETHOD .                    &quot;actn_draft_change
  METHOD actn_postproccessing .
    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties ,
      lv_cancel             TYPE flag .

*------------ checks
    CASE iv_form_id .
      WHEN r_formtemplate-&gt;v_root_id .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    CASE abap_on .
      WHEN iv_vbs_code .   popup_vbs_code_editor( CHANGING cv_vbs_code = ls_form_prop-postproc_vbs_code  cv_cancel = lv_cancel ) .
      WHEN iv_vbs_tables . popup_vbs_tables( CHANGING cv_vbs_tables = ls_form_prop-postproc_vbs_tables  cv_cancel = lv_cancel ) .
      WHEN OTHERS .        RETURN .
    ENDCASE .
    CHECK lv_cancel IS INITIAL .

*------ set properties of the component
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the tab
    r_protab-&gt;redraw( ir_formtemplate = r_formtemplate
                      iv_form_id      = r_formtemplate-&gt;v_root_id
                      iv_activetab_id = r_protab-&gt;c_tab_id-root ) .

  ENDMETHOD .                    &quot;actn_postproccessing
  METHOD actn_root_others .
    DATA:
      ls_form_prop          TYPE lcl_form=&gt;ty_s_properties .

*------------ checks
    CASE iv_form_id .
      WHEN r_formtemplate-&gt;v_root_id .
      WHEN OTHERS .
        MESSAGE i000(lp) WITH v_text-t130 .   &quot; text: The property is irrelevant for component type
        EXIT .
    ENDCASE .

*------------ read an actual node
    ls_form_prop = r_formtemplate-&gt;node_get_properties( iv_form_id ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

    CASE abap_on .
      WHEN iv_definednames_dont_remove .
        CASE ls_form_prop-definednames_dont_remove .
          WHEN space  .
            CHECK abap_on EQ popup_to_confirm( iv_text = v_text-t345 ) .   &quot; text: Changing of this option can cause file error
            ls_form_prop-definednames_dont_remove = abap_on .
          WHEN OTHERS .
            ls_form_prop-definednames_dont_remove = abap_off .
        ENDCASE .

      WHEN OTHERS .

    ENDCASE .

*------ set properties of the component
    r_formtemplate-&gt;node_set_properties( CHANGING cs_properties = ls_form_prop ) .
    CHECK msg_check_errors_and_show( r_formtemplate ) IS INITIAL .

*------------ redraw the tab
    r_protab-&gt;redraw( ir_formtemplate = r_formtemplate
                      iv_form_id      = r_formtemplate-&gt;v_root_id
                      iv_activetab_id = r_protab-&gt;c_tab_id-root ) .

  ENDMETHOD .                    &quot;actn_root_others
  METHOD tech_presets_dt_save .
*   initialize extract parameters
    DATA ls_disextract TYPE disextract .
    ls_disextract = tech_presets_dt_init( ) .

*   get splitter left column width
    IF r_cont_splitter1 IS BOUND .
      r_cont_splitter1-&gt;get_column_width(
          EXPORTING id = 1
          IMPORTING result = s_presets_dt-leftframe_width ) .
      cl_gui_cfw=&gt;dispatch( EXCEPTIONS OTHERS = 0 ) .
      cl_gui_cfw=&gt;flush( EXCEPTIONS OTHERS = 0 ) .
    ENDIF .

*   convert S_PRESETS_DT structure to the LT_FLDVAL table
    DATA:
      ls_fldval           TYPE ty_s_fldval ,
      lt_fldval           TYPE ty_t_fldval ,
      lr_descr_line       TYPE REF TO cl_abap_structdescr .
    FIELD-SYMBOLS:
      &lt;components&gt;        TYPE abap_compdescr ,
      &lt;value&gt;             TYPE ANY .
    lr_descr_line  ?= cl_abap_structdescr=&gt;describe_by_data( s_presets_dt ) .
    LOOP AT lr_descr_line-&gt;components ASSIGNING &lt;components&gt;.
      ASSIGN COMPONENT &lt;components&gt;-name OF STRUCTURE s_presets_dt TO &lt;value&gt; .
      CHECK &lt;value&gt; IS ASSIGNED .

      ls_fldval-field = &lt;components&gt;-name .
      ls_fldval-value = &lt;value&gt; .
      APPEND ls_fldval TO lt_fldval .
    ENDLOOP .

*   save presets to the extract
    CALL FUNCTION &apos;REUSE_ALV_EXTRACT_SAVE&apos;
      EXPORTING
        is_extract   = ls_disextract
        i_no_message = abap_on
      TABLES
        it_exp01     = lt_fldval[]
      EXCEPTIONS
        OTHERS       = 0.
    COMMIT WORK .
  ENDMETHOD .                    &quot;tech_presets_dt_save
  METHOD tech_presets_rt_save .
*   initialize extract parameters
    DATA ls_disextract TYPE disextract .
    ls_disextract = tech_presets_rt_init( ) .

*   convert S_PRESETS_RT structure to the LT_FLDVAL table
    DATA:
      ls_fldval           TYPE ty_s_fldval ,
      lt_fldval           TYPE ty_t_fldval ,
      lr_descr_line       TYPE REF TO cl_abap_structdescr .
    FIELD-SYMBOLS:
      &lt;components&gt;        TYPE abap_compdescr ,
      &lt;value&gt;             TYPE ANY .
    lr_descr_line  ?= cl_abap_structdescr=&gt;describe_by_data( s_presets_rt ) .
    LOOP AT lr_descr_line-&gt;components ASSIGNING &lt;components&gt;.
      ASSIGN COMPONENT &lt;components&gt;-name OF STRUCTURE s_presets_rt TO &lt;value&gt; .
      CHECK &lt;value&gt; IS ASSIGNED .

      ls_fldval-field = &lt;components&gt;-name .
      ls_fldval-value = &lt;value&gt; .
      APPEND ls_fldval TO lt_fldval .
    ENDLOOP .

*   save presets to the extract
    CALL FUNCTION &apos;REUSE_ALV_EXTRACT_SAVE&apos;
      EXPORTING
        is_extract   = ls_disextract
        i_no_message = abap_on
      TABLES
        it_exp01     = lt_fldval[]
      EXCEPTIONS
        OTHERS       = 0.
    COMMIT WORK .
  ENDMETHOD .                    &quot;tech_presets_rt_save
ENDCLASS .                    &quot;lcl_workbench IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_vr_appltoolbar DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_vr_appltoolbar DEFINITION INHERITING FROM lcl_root .
  PUBLIC SECTION .
    DATA:
      r_container           TYPE REF TO cl_gui_gos_container ,
      r_toolbar             TYPE REF TO cl_gui_toolbar .
    CONSTANTS:
      BEGIN OF c_fcode ,
        appl_sendmail       TYPE ui_func VALUE &apos;APPL_SENDMAIL&apos; ,
        appl_saveas         TYPE ui_func VALUE &apos;APPL_SAVEAS&apos; ,
        appl_print          TYPE ui_func VALUE &apos;APPL_PRINT&apos; ,
        appl_next           TYPE ui_func VALUE &apos;APPL_NEXT&apos; ,
        appl_prev           TYPE ui_func VALUE &apos;APPL_PREV&apos; ,
        appl_first          TYPE ui_func VALUE &apos;APPL_FIRST&apos; ,
        appl_last           TYPE ui_func VALUE &apos;APPL_LAST&apos; ,
      END   OF c_fcode .
    EVENTS:
      evnt_fcode
          EXPORTING value(ev_fcode)       TYPE ui_func .

    METHODS:
      constructor
          IMPORTING iv_navi_keys          TYPE flag DEFAULT abap_on ,
      free ,
      hndl_toolbar_fcode
          FOR EVENT function_selected OF cl_gui_toolbar
          IMPORTING fcode .
ENDCLASS .                    &quot;lcl_vr_appltoolbar DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_vr_appltoolbar IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_vr_appltoolbar IMPLEMENTATION .
  METHOD constructor .
    super-&gt;constructor( ) .

    DATA:
      lv_repid            TYPE syrepid ,
      lv_dynnr            TYPE sydynnr ,
      lv_text             TYPE text100 ,
      ls_events           TYPE cntl_simple_event ,
      lt_events           TYPE cntl_simple_events .

    lv_repid = sy-repid .
    lv_dynnr = sy-dynnr .

    CREATE OBJECT r_container
      EXPORTING
        width                   = 450
        repid                   = lv_repid
        dynnr                   = lv_dynnr
*       no_autodef_progid_dynnr = abap_on
      EXCEPTIONS
        OTHERS                  = 5.
    CHECK sy-subrc = 0 .

    CREATE OBJECT r_toolbar
      EXPORTING
        parent = r_container.

    lv_text = v_text-t047 . &quot; text: Send mail
    r_toolbar-&gt;add_button( fcode     = c_fcode-appl_sendmail
                           icon      = icon_mail
                           butn_type = cntb_btype_button
                           quickinfo = lv_text(30) ) .

    lv_text = v_text-t045 . &quot; text: Save as...
    r_toolbar-&gt;add_button( fcode     = c_fcode-appl_saveas
                           icon      = icon_system_save
                           butn_type = cntb_btype_button
                           quickinfo = lv_text(30) ) .

    lv_text = v_text-t224 . &quot; text: Print out
    r_toolbar-&gt;add_button( fcode     = c_fcode-appl_print
                           icon      = icon_print
                           butn_type = cntb_btype_button
                           quickinfo = lv_text(30) ) .

    r_toolbar-&gt;add_button( fcode     = space
                           icon      = space
                           butn_type = cntb_btype_sep
                           quickinfo = space ) .

    IF iv_navi_keys IS NOT INITIAL .
      r_toolbar-&gt;add_button( fcode     = c_fcode-appl_first
                             icon      = icon_total_left
                             butn_type = cntb_btype_button ) .

      r_toolbar-&gt;add_button( fcode     = c_fcode-appl_prev
                             icon      = icon_column_left
                             butn_type = cntb_btype_button ) .

      r_toolbar-&gt;add_button( fcode     = c_fcode-appl_next
                             icon      = icon_column_right
                             butn_type = cntb_btype_button ) .

      r_toolbar-&gt;add_button( fcode     = c_fcode-appl_last
                             icon      = icon_total_right
                             butn_type = cntb_btype_button ) .

      r_toolbar-&gt;add_button( fcode     = space
                             icon      = space
                             butn_type = cntb_btype_sep
                             quickinfo = space ) .
    ENDIF .

    ls_events-eventid = cl_gui_toolbar=&gt;m_id_function_selected .
    APPEND ls_events TO lt_events .

    r_toolbar-&gt;set_registered_events( events = lt_events ) .
    SET HANDLER hndl_toolbar_fcode FOR r_toolbar .

  ENDMETHOD .                    &quot;constructor
  METHOD free .
    IF r_toolbar IS BOUND .
      r_toolbar-&gt;free( ) .
      FREE r_toolbar .
    ENDIF .
    IF r_container IS BOUND .
      r_container-&gt;free( ) .
      FREE r_container .
    ENDIF .
  ENDMETHOD .                    &quot;free
  METHOD hndl_toolbar_fcode .
    RAISE EVENT evnt_fcode EXPORTING ev_fcode = fcode .
  ENDMETHOD .                    &quot;hndl_toolbar_fcode
ENDCLASS .                    &quot;lcl_vr_appltoolbar IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_vr_ole DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_vr_ole DEFINITION INHERITING FROM lcl_ole .
  PUBLIC SECTION .
    METHODS:
      constructor
          IMPORTING ir_container          TYPE REF TO cl_gui_container
                    iv_document_rawdata   TYPE xstring
                    iv_viewmode           TYPE flag
          EXCEPTIONS process_terminated .
ENDCLASS .                    &quot;lcl_vr_ole DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_vr_ole IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_vr_ole IMPLEMENTATION .
  METHOD constructor .
    super-&gt;constructor(
          EXPORTING  ir_container        = ir_container
                     iv_document_rawdata = iv_document_rawdata
                     iv_viewmode         = iv_viewmode
                     iv_readonly         = abap_on    &quot; --&gt;&gt; abap_off
          EXCEPTIONS OTHERS = 1 ) .
    IF sy-subrc NE 0 .
      RAISE process_terminated .
    ENDIF .

*   some action to redraw view
    DATA:
      BEGIN OF ls_ole ,
        activewindow    TYPE ole2_object ,
      END   OF ls_ole .

    GET PROPERTY OF s_ole-application  &apos;ActiveWindow&apos; = ls_ole-activewindow .
    SET PROPERTY OF ls_ole-activewindow &apos;TabRatio&apos; = &apos;0.6&apos; .
    IF ls_ole-activewindow IS NOT INITIAL .
      FREE OBJECT ls_ole-activewindow .
      CLEAR ls_ole-activewindow .
    ENDIF .
  ENDMETHOD .                    &quot;constructor
ENDCLASS .                    &quot;lcl_vr_ole IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_vr_navipanel DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_vr_navipanel DEFINITION INHERITING FROM lcl_root .
  PUBLIC SECTION .
    TYPES:
      BEGIN OF ty_s_outtab ,
        tabix           TYPE sytabix ,
        title           TYPE sytitle ,
        icon            TYPE icon_d ,
      END   OF ty_s_outtab ,
      ty_t_outtab       TYPE STANDARD TABLE OF ty_s_outtab .
    DATA:
      r_container       TYPE REF TO cl_gui_docking_container ,
      r_grid            TYPE REF TO cl_gui_alv_grid ,
      t_outtab          TYPE ty_t_outtab .
    METHODS:
      constructor
          IMPORTING  it_table             TYPE STANDARD TABLE
          EXCEPTIONS process_terminamed ,
      free ,
      set_selection
          IMPORTING iv_tabix              TYPE any .

    EVENTS:
      evnt_redraw
          EXPORTING value(ev_tabix)       TYPE sytabix .

  PRIVATE SECTION .
    METHODS:
      hndl_grid_hotspot
          FOR EVENT hotspot_click OF cl_gui_alv_grid
          IMPORTING e_row_id e_column_id es_row_no .

ENDCLASS .                    &quot;lcl_vr_navipanel DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_vr_navipanel IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_vr_navipanel IMPLEMENTATION .
  METHOD constructor .
    super-&gt;constructor( ) .

    DATA:
      ls_fieldcat       TYPE lvc_s_fcat ,
      lt_fieldcat       TYPE lvc_t_fcat ,
      ls_layout         TYPE lvc_s_layo .
    FIELD-SYMBOLS:
      &lt;row&gt;             TYPE ANY ,
      &lt;outtab&gt;          TYPE ty_s_outtab .

    CREATE OBJECT r_container
      EXPORTING
        lifetime  = cntl_lifetime_dynpro
        extension = 200
      EXCEPTIONS
        OTHERS    = 4.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
              RAISING process_terminamed .
    ENDIF .

    CREATE OBJECT r_grid
      EXPORTING
        i_parent = r_container
      EXCEPTIONS
        OTHERS   = 4.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
              RAISING process_terminamed .
    ENDIF .

    LOOP AT it_table ASSIGNING &lt;row&gt; .
      APPEND INITIAL LINE TO t_outtab ASSIGNING &lt;outtab&gt; .
      MOVE-CORRESPONDING &lt;row&gt; TO &lt;outtab&gt; .
      &lt;outtab&gt;-icon = icon_xls .
    ENDLOOP .

    ls_layout-sel_mode    = &apos;A&apos; .
    ls_layout-zebra       = abap_on .
    ls_layout-col_opt     = abap_on .
    ls_layout-cwidth_opt  = abap_on .
    ls_layout-no_rowmark  = abap_on .
    ls_layout-no_toolbar  = abap_on .
    ls_layout-no_headers  = abap_on .
    ls_layout-no_hgridln  = abap_on .
    ls_layout-no_vgridln  = abap_on .

    ls_fieldcat-icon      = abap_on .
    ls_fieldcat-fieldname = &apos;ICON&apos; .
    APPEND ls_fieldcat TO lt_fieldcat .
    CLEAR ls_fieldcat .
    ls_fieldcat-fieldname = &apos;TITLE&apos; .
    ls_fieldcat-hotspot   = abap_on .
    APPEND ls_fieldcat TO lt_fieldcat .

    r_grid-&gt;set_table_for_first_display(
        EXPORTING i_default       = abap_on
                  is_layout       = ls_layout
        CHANGING  it_fieldcatalog = lt_fieldcat[]
                  it_outtab       = t_outtab[]
        EXCEPTIONS OTHERS         = 4 ) .
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
              RAISING process_terminamed .
    ENDIF .
    SET HANDLER hndl_grid_hotspot FOR r_grid .
  ENDMETHOD .                    &quot;constructor
  METHOD free .
    IF r_grid IS BOUND .
      r_grid-&gt;free( ) .
      FREE r_grid .
    ENDIF .
  ENDMETHOD .                    &quot;free
  METHOD set_selection .
    DATA:
      ls_rows           TYPE lvc_s_row ,
      lt_rows           TYPE lvc_t_row .

    READ TABLE t_outtab TRANSPORTING NO FIELDS
    WITH KEY tabix = iv_tabix .

    ls_rows-index = sy-tabix .
    INSERT ls_rows INTO TABLE lt_rows .

    r_grid-&gt;set_selected_rows( it_index_rows = lt_rows ) .
  ENDMETHOD .                    &quot;set_selection
  METHOD hndl_grid_hotspot .
    FIELD-SYMBOLS &lt;outtab&gt;  TYPE ty_s_outtab .
    READ TABLE t_outtab ASSIGNING &lt;outtab&gt; INDEX e_row_id-index .
    CHECK sy-subrc EQ 0.

    RAISE EVENT evnt_redraw EXPORTING ev_tabix = &lt;outtab&gt;-tabix .
  ENDMETHOD .                    &quot;hndl_grid_hotspot
ENDCLASS .                    &quot;lcl_vr_navipanel IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_viewer DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_viewer DEFINITION INHERITING FROM lcl_root .

  PUBLIC SECTION .
    TYPES:
      BEGIN OF ty_s_docbuffer ,
        tabix             TYPE sytabix ,
        title             TYPE sytitle ,
        rawdata           TYPE xstring ,
        extension         TYPE ty_char10 ,
        callback_prog     TYPE sycprog ,
        callback_form     TYPE sycprog ,
        inplace           TYPE flag ,
      END   OF ty_s_docbuffer ,
      ty_t_docbuffer      TYPE STANDARD TABLE OF ty_s_docbuffer .
    DATA:
      t_docbuffer         TYPE ty_t_docbuffer ,
      s_docbuffer         TYPE ty_s_docbuffer ,
      r_container         TYPE REF TO cl_gui_container ,
      r_excelole          TYPE REF TO lcl_vr_ole ,
      r_appltoolbar       TYPE REF TO lcl_vr_appltoolbar ,
      r_navipanel         TYPE REF TO lcl_vr_navipanel ,
      v_viewmode          TYPE flag ,
      v_initialized       TYPE flag .
    CONSTANTS:
      BEGIN OF c_event ,
        before_ole_initialization  TYPE ty_char50 VALUE &apos;BEFORE_OLE_INITIALIZATION&apos; ,
        after_ole_initialization   TYPE ty_char50 VALUE &apos;AFTER_OLE_INITIALIZATION&apos; ,
        function_code     TYPE ty_char50 VALUE &apos;FUNCTION_CODE&apos; ,
        controls_init     TYPE ty_char50 VALUE &apos;CONTROLS_INIT&apos; ,
        redraw            TYPE ty_char50 VALUE &apos;REDRAW&apos; ,
      END   OF c_event .

    METHODS:
      constructor
          IMPORTING ir_container          TYPE REF TO cl_gui_container
                    iv_viewmode           TYPE flag
          EXCEPTIONS process_terminated ,
      free ,
      document_add
          IMPORTING iv_document_rawdata   TYPE xstring
                    iv_document_extension TYPE any  DEFAULT   c_extension_xlsx
                    iv_document_title     TYPE any  OPTIONAL
                    iv_callback_prog      TYPE any  OPTIONAL
                    iv_callback_form      TYPE any  OPTIONAL
                    iv_inplace            TYPE flag OPTIONAL ,
      pbo ,
      redraw
          IMPORTING iv_tabix              TYPE any ,
      appl_sendmail ,
      appl_saveas ,
      appl_print ,
      appl_next ,
      appl_prev ,
      appl_first ,
      appl_last ,
      init_appltoolbar ,
      init_excelole ,
      init_navipanel ,
      call_floating ,
      call_floating_form .

  PRIVATE SECTION .
    METHODS:
      hndl_fcode_appl
          FOR EVENT evnt_fcode OF lcl_vr_appltoolbar
          IMPORTING ev_fcode ,
      hndl_redraw
          FOR EVENT evnt_redraw OF lcl_vr_navipanel
          IMPORTING ev_tabix .

ENDCLASS .                    &quot;lcl_viewer DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_viewer IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_viewer IMPLEMENTATION .
  METHOD constructor .
    super-&gt;constructor( ).

    IF v_gui_available IS INITIAL .
      MESSAGE e000(lp) WITH v_text-t125   &quot;  text: Process is flowing in OFF-line mode
      RAISING process_terminated .
    ENDIF .

    v_viewmode  = iv_viewmode .
    r_container = ir_container .
  ENDMETHOD .                    &quot;constructor
  METHOD free .
    IF r_excelole IS BOUND .
      r_excelole-&gt;free( ) .
      FREE r_excelole .
    ENDIF .
    IF r_appltoolbar IS BOUND .
      r_appltoolbar-&gt;free( ) .
      FREE r_appltoolbar .
    ENDIF .
    IF r_navipanel IS BOUND .
      r_navipanel-&gt;free( ) .
      FREE r_navipanel .
    ENDIF .
  ENDMETHOD .                    &quot;free
  METHOD document_add .
    FIELD-SYMBOLS &lt;docbuffer&gt; TYPE ty_s_docbuffer .
    APPEND INITIAL LINE TO t_docbuffer ASSIGNING &lt;docbuffer&gt; .
    &lt;docbuffer&gt;-tabix         = sy-tabix .
    &lt;docbuffer&gt;-title         = iv_document_title .
    &lt;docbuffer&gt;-rawdata       = iv_document_rawdata .
    &lt;docbuffer&gt;-extension     = iv_document_extension .
    &lt;docbuffer&gt;-callback_prog = iv_callback_prog .
    &lt;docbuffer&gt;-callback_form = iv_callback_form .
    &lt;docbuffer&gt;-inplace       = iv_inplace .

    IF &lt;docbuffer&gt;-title IS INITIAL .
      &lt;docbuffer&gt;-title = &lt;docbuffer&gt;-tabix .
      CONCATENATE v_text-t017   &quot; text: Form
                  &lt;docbuffer&gt;-title
             INTO &lt;docbuffer&gt;-title SEPARATED BY space .
    ENDIF .
  ENDMETHOD .                    &quot;document_add
  METHOD pbo .
    CHECK v_initialized IS INITIAL .
    v_initialized = abap_on .

    READ TABLE t_docbuffer INTO s_docbuffer INDEX 1 .
    CHECK sy-subrc EQ 0 .

    v_title = s_docbuffer-title .
    init_appltoolbar( ) .
    init_navipanel( ) .
    init_excelole( ) .
    IF r_navipanel IS BOUND .
      r_navipanel-&gt;set_selection( 1 ) .
    ENDIF .

    IF  s_docbuffer-callback_form IS NOT INITIAL
    AND s_docbuffer-callback_prog IS NOT INITIAL .
      PERFORM (s_docbuffer-callback_form)
      IN PROGRAM (s_docbuffer-callback_prog) IF FOUND
           USING c_event-controls_init
        CHANGING sy-ucomm                   &quot; TYPE ui_func
                 r_appltoolbar-&gt;r_toolbar   &quot; TYPE REF TO cl_gui_toolbar
                 s_docbuffer-rawdata .      &quot; TYPE xstring
    ENDIF .

  ENDMETHOD .                    &quot;pbo
  METHOD call_floating .
    lcl_vr_ole=&gt;temp_directory_set( ) .
    IF lcl_vr_ole=&gt;v_temp_directory IS INITIAL .
      MESSAGE i000(lp) WITH v_text-t050 . &quot; text: The working directory is not determined
      EXIT .
    ENDIF .
    lcl_vr_ole=&gt;temp_directory_clear( ) .

    LOOP AT t_docbuffer INTO s_docbuffer WHERE inplace IS INITIAL .
      call_floating_form( ) .
      DELETE t_docbuffer .
    ENDLOOP .
  ENDMETHOD .                    &quot;call_floating
  METHOD call_floating_form .
    DATA:
      lv_guid               TYPE string ,
      lv_temp_filename      TYPE string ,
      lv_document_size      TYPE i ,
      lt_document_table     TYPE STANDARD TABLE OF w3mime .

    lv_guid = guid_create( ) .

    CONCATENATE lcl_vr_ole=&gt;v_temp_directory
                lcl_vr_ole=&gt;v_file_separator
                lv_guid
                s_docbuffer-extension &quot;lcl_vr_ole=&gt;c_extension_xlsx
           INTO lv_temp_filename .

    CALL FUNCTION &apos;SCMS_XSTRING_TO_BINARY&apos;
      EXPORTING
        buffer        = s_docbuffer-rawdata
      IMPORTING
        output_length = lv_document_size
      TABLES
        binary_tab    = lt_document_table.

    cl_gui_frontend_services=&gt;gui_download(
      EXPORTING bin_filesize = lv_document_size
                filename     = lv_temp_filename
                filetype     = &apos;BIN&apos;
      CHANGING  data_tab     = lt_document_table
      EXCEPTIONS OTHERS      = 24 ).
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      RETURN .
    ENDIF .

    cl_gui_frontend_services=&gt;execute(
      EXPORTING document = lv_temp_filename
      EXCEPTIONS OTHERS  = 1 ) .
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      RETURN .
    ENDIF .
  ENDMETHOD .                    &quot;call_floating_form
  METHOD redraw .
    READ TABLE t_docbuffer INTO s_docbuffer INDEX iv_tabix .
    CHECK sy-subrc EQ 0 .

    IF  s_docbuffer-callback_form IS NOT INITIAL
    AND s_docbuffer-callback_prog IS NOT INITIAL .
      PERFORM (s_docbuffer-callback_form)
      IN PROGRAM (s_docbuffer-callback_prog) IF FOUND
           USING c_event-redraw
        CHANGING sy-ucomm                   &quot; TYPE ui_func
                 r_appltoolbar-&gt;r_toolbar   &quot; TYPE REF TO cl_gui_toolbar
                 s_docbuffer-rawdata .      &quot; TYPE xstring
    ENDIF .

    IF r_navipanel IS BOUND .
      r_navipanel-&gt;set_selection( iv_tabix ) .
    ENDIF .

    IF r_excelole IS BOUND .
      r_excelole-&gt;free( ) .
      FREE r_excelole .
    ENDIF .
    init_excelole( ) .

    v_title = s_docbuffer-title .
    CALL FUNCTION &apos;SAPGUI_SET_FUNCTIONCODE&apos;
      EXPORTING
        functioncode = &apos;DUMMY&apos;.

  ENDMETHOD .                    &quot;redraw
  METHOD hndl_fcode_appl .
    DATA lv_fcode TYPE ui_func .
    lv_fcode = ev_fcode .

    IF  s_docbuffer-callback_form IS NOT INITIAL
    AND s_docbuffer-callback_prog IS NOT INITIAL .
      PERFORM (s_docbuffer-callback_form)
      IN PROGRAM (s_docbuffer-callback_prog) IF FOUND
           USING c_event-function_code
        CHANGING lv_fcode                   &quot; TYPE ui_func
                 r_appltoolbar-&gt;r_toolbar   &quot; TYPE REF TO cl_gui_toolbar
                 s_docbuffer-rawdata .      &quot; TYPE xstring
    ENDIF .

    CASE lv_fcode .
      WHEN lcl_vr_appltoolbar=&gt;c_fcode-appl_sendmail .  appl_sendmail( ) .
      WHEN lcl_vr_appltoolbar=&gt;c_fcode-appl_saveas .    appl_saveas( ) .
      WHEN lcl_vr_appltoolbar=&gt;c_fcode-appl_print .     appl_print( ) .
      WHEN lcl_vr_appltoolbar=&gt;c_fcode-appl_next .      appl_next( ) .
      WHEN lcl_vr_appltoolbar=&gt;c_fcode-appl_prev .      appl_prev( ) .
      WHEN lcl_vr_appltoolbar=&gt;c_fcode-appl_first .     appl_first( ) .
      WHEN lcl_vr_appltoolbar=&gt;c_fcode-appl_last .      appl_last( ) .
    ENDCASE .
  ENDMETHOD .                    &quot;hndl_fcode_appl
  METHOD hndl_redraw .
    redraw( iv_tabix = ev_tabix ) .
  ENDMETHOD .                    &quot;hndl_redraw
  METHOD appl_sendmail .
    DATA:
      lv_attachment_size  TYPE sood-objlen ,
      lv_subject          TYPE so_obj_des ,
      lv_document_size    TYPE i ,
      lt_document_table   TYPE solix_tab .
    DATA:
      lr_send_request     TYPE REF TO cl_bcs ,
      lr_mail_message     TYPE REF TO cl_document_bcs ,
      lv_attachment_type  TYPE soodk-objtp VALUE &apos;XLSX&apos; .

    r_excelole-&gt;r_docproxy-&gt;save_document_to_table(
      CHANGING
        document_size  = lv_document_size
        document_table = lt_document_table ) .
    TRY.
        lr_send_request = cl_bcs=&gt;create_persistent( ) .

        lv_subject = v_title .
        lr_mail_message = cl_document_bcs=&gt;create_document(
            i_type      = &apos;RAW&apos;
            i_subject   = lv_subject ) .

        lv_attachment_size = lv_document_size .
        lr_mail_message-&gt;add_attachment(
            i_attachment_type     = lv_attachment_type
            i_attachment_subject  = lv_subject
            i_attachment_size     = lv_attachment_size
            i_att_content_hex     = lt_document_table ) .

        lr_send_request-&gt;set_document( lr_mail_message ) .
        lr_send_request-&gt;edit( i_starting_at_x = 1
                               i_starting_at_y = 1 ) .
      CATCH cx_bcs .
    ENDTRY .
    COMMIT WORK .
    FREE: lr_mail_message , lr_send_request .
  ENDMETHOD .                    &quot;appl_sendmail
  METHOD appl_saveas .
    r_excelole-&gt;r_docproxy-&gt;save_as(
        EXPORTING prompt_user = abap_on
                  no_flush    = abap_off ) .
  ENDMETHOD .                    &quot;appl_saveas
  METHOD appl_print .
    r_excelole-&gt;r_docproxy-&gt;print_document(
        EXPORTING prompt_user = abap_on
                  no_flush    = abap_off ) .
  ENDMETHOD .                    &quot;appl_print
  METHOD appl_next .
    DATA lv_tabix_next TYPE sytabix .
    lv_tabix_next = s_docbuffer-tabix + 1 .

    IF lv_tabix_next LE LINES( t_docbuffer ) .
      redraw( lv_tabix_next ) .
    ELSE .
      MESSAGE s000(lp) WITH v_text-t134 . &quot; text: END of the list is reached
    ENDIF .
  ENDMETHOD .                    &quot;appl_next
  METHOD appl_prev .
    DATA lv_tabix_prew TYPE sytabix .
    lv_tabix_prew = s_docbuffer-tabix - 1 .

    IF lv_tabix_prew GT 0 .
      redraw( lv_tabix_prew ) .
    ELSE .
      MESSAGE s000(lp) WITH v_text-t135 . &quot; text: TOP of the list is reached
    ENDIF .
  ENDMETHOD .                    &quot;appl_prev
  METHOD appl_first .
    DATA lv_tabix_first TYPE sytabix VALUE 1 .
    CHECK lv_tabix_first NE s_docbuffer-tabix .

    redraw( lv_tabix_first ) .
  ENDMETHOD .                    &quot;appl_first
  METHOD appl_last .
    DATA lv_tabix_last TYPE sytabix .
    lv_tabix_last = LINES( t_docbuffer ) .
    CHECK lv_tabix_last NE s_docbuffer-tabix .

    redraw( lv_tabix_last ) .
  ENDMETHOD .                    &quot;appl_last
  METHOD init_appltoolbar .
    DATA lv_navi_keys TYPE flag .

    IF LINES( t_docbuffer ) GT 1 .
      lv_navi_keys = abap_on .
    ELSE .
      lv_navi_keys = abap_off .
    ENDIF .

    CREATE OBJECT r_appltoolbar
      EXPORTING
        iv_navi_keys = lv_navi_keys
      EXCEPTIONS
        OTHERS       = 1.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      EXIT .
    ENDIF .
    SET HANDLER hndl_fcode_appl FOR r_appltoolbar .
  ENDMETHOD .                    &quot;init_appltoolbar
  METHOD init_excelole .

    IF  s_docbuffer-callback_form IS NOT INITIAL
    AND s_docbuffer-callback_prog IS NOT INITIAL .
      PERFORM (s_docbuffer-callback_form)
      IN PROGRAM (s_docbuffer-callback_prog) IF FOUND
           USING c_event-before_ole_initialization
        CHANGING sy-ucomm                   &quot; TYPE ui_func
                 r_appltoolbar-&gt;r_toolbar   &quot; TYPE REF TO cl_gui_toolbar
                 s_docbuffer-rawdata .      &quot; TYPE xstring
    ENDIF .

    CREATE OBJECT r_excelole
      EXPORTING
        ir_container        = r_container
        iv_document_rawdata = s_docbuffer-rawdata
        iv_viewmode         = v_viewmode
      EXCEPTIONS
        OTHERS              = 4.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      EXIT .
    ENDIF .

    IF  s_docbuffer-callback_form IS NOT INITIAL
    AND s_docbuffer-callback_prog IS NOT INITIAL .
      PERFORM (s_docbuffer-callback_form)
      IN PROGRAM (s_docbuffer-callback_prog) IF FOUND
           USING c_event-after_ole_initialization
        CHANGING sy-ucomm                   &quot; TYPE ui_func
                 r_appltoolbar-&gt;r_toolbar   &quot; TYPE REF TO cl_gui_toolbar
                 s_docbuffer-rawdata .      &quot; TYPE xstring
    ENDIF .

*   SET HANDLER hndl_fcode_tmpl FOR r_excelole .

    CALL FUNCTION &apos;FLUSH&apos;
      EXCEPTIONS
        OTHERS = 0.
    cl_gui_cfw=&gt;dispatch( ) .
  ENDMETHOD .                    &quot;init_excelole
  METHOD init_navipanel .
    CHECK LINES( t_docbuffer ) GT 1 .

    CREATE OBJECT r_navipanel
      EXPORTING
        it_table = t_docbuffer
      EXCEPTIONS
        OTHERS   = 4.
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE &apos;I&apos; NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
      EXIT .
    ENDIF .
    SET HANDLER hndl_redraw FOR r_navipanel .
  ENDMETHOD .                    &quot;init_navipanel
ENDCLASS .                    &quot;lcl_viewer IMPLEMENTATION



*&amp;---------------------------------------------------------------------*
*&amp;      Form  POPUP_CTXTFIELD_CB_GUI_STATUS
*&amp;---------------------------------------------------------------------*
FORM popup_ctxtfield_cb_gui_status .                        &quot;#EC CALLED
  DATA lt_excl  TYPE STANDARD TABLE OF fcode .
  APPEND &apos;TRAD&apos; TO lt_excl .
  APPEND &apos;TRDL&apos; TO lt_excl .
  APPEND &apos;TRRN&apos; TO lt_excl .
  APPEND &apos;TRMV&apos; TO lt_excl .
  APPEND &apos;TRTO&apos; TO lt_excl .
  APPEND &apos;TRZM&apos; TO lt_excl .

  SET PF-STATUS &apos;LD_TREE&apos;
     OF PROGRAM &apos;SAPLSEUT&apos;
      EXCLUDING lt_excl .

ENDFORM .                   &quot;POPUP_CTXTFIELD_CB_GUI_STATUS
*&amp;---------------------------------------------------------------------*
*&amp;      Form  POPUP_CTXTFIELD_UCOMM
*&amp;---------------------------------------------------------------------*
FORM popup_ctxtfield_ucomm TABLES pt_nodetab                &quot;#EC CALLED
                            USING pv_uc           TYPE any
                         CHANGING cv_exit         TYPE flag
                                  cv_list_refresh TYPE any .
  DATA ls_nodetab  TYPE seucomm .
  MOVE-CORRESPONDING pt_nodetab TO ls_nodetab .

  FIELD-SYMBOLS &lt;workbench&gt; TYPE REF TO lcl_workbench .
  ASSIGN (&apos;GR_WORKBENCH&apos;) TO &lt;workbench&gt; .

  CHECK &lt;workbench&gt; IS ASSIGNED .
  CHECK &lt;workbench&gt; IS BOUND .

  &lt;workbench&gt;-&gt;popup_ctxtfield_callback(
          EXPORTING is_nodetab      = ls_nodetab
                    iv_uc           = pv_uc
          CHANGING  cv_exit         = cv_exit
                    cv_list_refresh = cv_list_refresh ) .

ENDFORM .                    &quot;POPUP_CTXTFIELD_UCOMM
*&amp;---------------------------------------------------------------------*
*&amp;      Form  POPUP_CTXTMULTI_CB_GUI_STATUS
*&amp;---------------------------------------------------------------------*
FORM popup_ctxtmulti_cb_gui_status.                         &quot;#EC CALLED

  SET PF-STATUS &apos;LD_ADD&apos;
     OF PROGRAM &apos;SAPLSEUT&apos;.

ENDFORM.                    &quot;POPUP_CTXTMULTI_CB_GUI_STATUS
*&amp;---------------------------------------------------------------------*
*&amp;      Form  POPUP_CTXTMULTI_UCOMM
*&amp;---------------------------------------------------------------------*
FORM popup_ctxtmulti_ucomm TABLES pt_nodetab                &quot;#EC CALLED
                            USING pv_uc           TYPE any
                         CHANGING cv_exit         TYPE flag
                                  cv_list_refresh TYPE any .
  DATA ls_nodetab  TYPE seucomm .
  MOVE-CORRESPONDING pt_nodetab TO ls_nodetab .

  FIELD-SYMBOLS &lt;workbench&gt; TYPE REF TO lcl_workbench .
  ASSIGN (&apos;GR_WORKBENCH&apos;) TO &lt;workbench&gt; .

  CHECK &lt;workbench&gt; IS ASSIGNED .
  CHECK &lt;workbench&gt; IS BOUND .

  &lt;workbench&gt;-&gt;popup_ctxtmulti_callback(
          EXPORTING is_nodetab      = ls_nodetab
                    iv_uc           = pv_uc
          CHANGING  cv_exit         = cv_exit
                    cv_list_refresh = cv_list_refresh ) .

ENDFORM .                    &quot;POPUP_CTXTMULTI_UCOMM
*&amp;---------------------------------------------------------------------*
*&amp;      Form  popup_context_ucomm
*&amp;---------------------------------------------------------------------*
FORM popup_context_ucomm                                    &quot;#EC CALLED
                 TABLES   pt_fields     STRUCTURE sval
                 USING    pv_code       TYPE any
                 CHANGING cv_error      STRUCTURE svale
                          cv_show_popup TYPE any .

ENDFORM .                    &quot;popup_context_ucomm
*&amp;---------------------------------------------------------------------*
*&amp;      Form  popup_context_f4
*&amp;---------------------------------------------------------------------*
FORM popup_context_f4 USING       pv_tabname     TYPE any   &quot;#EC CALLED
                                  pv_fieldname   TYPE any
                                  pv_display     TYPE any
                       CHANGING   cv_returncode  TYPE any
                                  cv_value       TYPE any .

  DATA: lv_objname    TYPE rsrd1-objname .

  CALL FUNCTION &apos;RS_DD_F4_OBJECT&apos;
    EXPORTING
      objname            = lv_objname
      objtype            = &apos;Q&apos;
      suppress_selection = space
    IMPORTING
      selobjname         = lv_objname.

  cv_value = lv_objname .

ENDFORM .                    &quot;popup_context_f4</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="ZXLWB_CALLFORM" STEXT="Render and display form">
    <importing PARAMETER="IV_FORMNAME" REFERENCE="X" TYP="ANY"/>
    <importing PARAMETER="IV_CONTEXT_REF" REFERENCE="X"/>
    <importing PARAMETER="IV_VIEWER_TITLE" DEFAULT="SY-TITLE" OPTIONAL="X" TYP="ANY"/>
    <importing PARAMETER="IV_VIEWER_INPLACE" DEFAULT="&apos;X&apos;" OPTIONAL="X" REFERENCE="X" TYP="FLAG"/>
    <importing PARAMETER="IV_VIEWER_CALLBACK_PROG" DEFAULT="SY-CPROG" OPTIONAL="X" TYP="ANY"/>
    <importing PARAMETER="IV_VIEWER_CALLBACK_FORM" OPTIONAL="X" REFERENCE="X" TYP="ANY"/>
    <importing PARAMETER="IV_VIEWER_SUPPRESS" OPTIONAL="X" REFERENCE="X" TYP="ANY"/>
    <importing PARAMETER="IV_PROTECT" OPTIONAL="X" REFERENCE="X" TYP="FLAG"/>
    <importing PARAMETER="IV_SAVE_AS" OPTIONAL="X" REFERENCE="X" TYP="ANY"/>
    <importing PARAMETER="IV_SAVE_AS_APPSERVER" OPTIONAL="X" REFERENCE="X" TYP="ANY"/>
    <importing PARAMETER="IV_STARTUP_MACRO" OPTIONAL="X" REFERENCE="X" TYP="ANY"/>
    <importing PARAMETER="IT_DOCPROPERTIES" OPTIONAL="X" REFERENCE="X" TYP="CKF_FIELD_VALUE_TABLE"/>
    <exporting PARAMETER="EV_DOCUMENT_RAWDATA" REFERENCE="X" TYP="MIME_DATA"/>
    <exporting PARAMETER="EV_DOCUMENT_EXTENSION" REFERENCE="X" TYP="ANY"/>
    <exceptions EXCEPTION="PROCESS_TERMINATED"/>
    <documentation PARAMETER="IV_FORMNAME" KIND="P" INDEX=" 001"/>
    <documentation PARAMETER="IV_CONTEXT_REF" KIND="P" INDEX=" 002"/>
    <documentation PARAMETER="IV_VIEWER_TITLE" KIND="P" INDEX=" 003"/>
    <documentation PARAMETER="IV_VIEWER_INPLACE" KIND="P" INDEX=" 004"/>
    <documentation PARAMETER="IV_VIEWER_CALLBACK_PROG" KIND="P" INDEX=" 005"/>
    <documentation PARAMETER="IV_VIEWER_CALLBACK_FORM" KIND="P" INDEX=" 006"/>
    <documentation PARAMETER="IV_VIEWER_SUPPRESS" KIND="P" INDEX=" 007"/>
    <documentation PARAMETER="IV_PROTECT" KIND="P" INDEX=" 008"/>
    <documentation PARAMETER="IV_SAVE_AS" KIND="P" INDEX=" 009"/>
    <documentation PARAMETER="IV_SAVE_AS_APPSERVER" KIND="P" INDEX=" 010"/>
    <documentation PARAMETER="IV_STARTUP_MACRO" KIND="P" INDEX=" 011"/>
    <documentation PARAMETER="IT_DOCPROPERTIES" KIND="P" INDEX=" 012"/>
    <documentation PARAMETER="EV_DOCUMENT_RAWDATA" KIND="P" INDEX=" 013"/>
    <documentation PARAMETER="EV_DOCUMENT_EXTENSION" KIND="P" INDEX=" 014"/>
    <documentation PARAMETER="PROCESS_TERMINATED" KIND="X" INDEX=" 015"/>
    <fm_source_new>*=======================================================================
*=======================================================================
* Copyright 2016 Igor Borodin
* Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*     http://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*=======================================================================
*=======================================================================
*
* XLSX-Workbench(XLWB) components                         [Version 4.06]
* Documentation is available at:
*                             https://sites.google.com/site/sapxlwb/home
*=======================================================================
* Render and display form
*=======================================================================
*
* Parameters:
*     IV_FORMNAME         --&gt;&gt; name of the form
*     IV_CONTEXT_REF      --&gt;&gt; data for the form building
*     IV_VIEWER_TITLE     --&gt;&gt; text, which displayed in the title bar of the Viewer
*     IV_VIEWER_INPLACE   --&gt;&gt; set &apos;X&apos; to show Excel in modal SAP-screen,
*                              or set SPACE for floating mode
*     IV_VIEWER_CALLBACK_PROG, IV_VIEWER_CALLBACK_FORM --&gt;&gt;
*                         --&gt;&gt; subroutine to customizing Viewer (see Docum.)
*     IV_VIEWER_SUPPRESS  --&gt;&gt; set &apos;X&apos; to do not call the Viewer
*     IV_PROTECT          --&gt;&gt; set &apos;X&apos;, if tamper protection of workbook is required
*     IV_SAVE_AS          --&gt;&gt; full path (including file extention),
*                              if you want to save file on the Frontend
*     IV_SAVE_AS_APPSERVER--&gt;&gt; full path (including file extention),
*                              if you want to save file on the Application server
*     IV_STARTUP_MACRO    --&gt;&gt; Only for .XLSM (not for .XLSX)
*                              macro name, which should be run directly after file creation
*                              For example: Module1.Macro1
*     IT_DOCPROPERTIES    --&gt;&gt; Document properties (ie Author, Company etc.)
*
*
*=======================================================================

  DATA:
    lr_formruntime        TYPE REF TO lcl_formruntime ,
    lv_fullpath           TYPE string ,
    lv_message            TYPE string ,
    lv_document_size      TYPE i ,
    lt_document_table     TYPE STANDARD TABLE OF w3mime ,
    lv_document_extension TYPE lcl_formruntime=&gt;ty_char10 .

* compose document
  CREATE OBJECT lr_formruntime
    EXPORTING
      iv_formname        = iv_formname
      iv_context_ref     = iv_context_ref
      iv_protect         = iv_protect
      iv_startup_macro   = iv_startup_macro
      it_docproperties   = it_docproperties
    EXCEPTIONS
      process_terminated = 1.
  IF sy-subrc NE 0 .
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
       RAISING process_terminated .
  ENDIF .

  ev_document_rawdata   = lr_formruntime-&gt;get_rawdata( ) .
  lv_document_extension = lr_formruntime-&gt;get_extension( ) .
  ev_document_extension = lv_document_extension .

  lr_formruntime-&gt;free( ) .
  FREE lr_formruntime .

* call viewer (if required)
  IF  iv_viewer_suppress IS INITIAL
  AND lcl_root=&gt;is_gui_available( ) IS NOT INITIAL .

    IF gv_viewer_bundle_collect IS INITIAL .
      PERFORM viewer_bundle_refresh .
    ENDIF .

    IF gr_viewer IS BOUND .
      gr_viewer-&gt;document_add(
          iv_document_rawdata   = ev_document_rawdata
          iv_document_extension = lv_document_extension
          iv_document_title     = iv_viewer_title
          iv_callback_prog      = iv_viewer_callback_prog
          iv_callback_form      = iv_viewer_callback_form
          iv_inplace            = iv_viewer_inplace ) .
    ENDIF .

    IF gv_viewer_bundle_collect IS INITIAL .
      PERFORM viewer_bundle_close .
    ENDIF .
  ENDIF .

* download on frontend (if required)
  IF iv_save_as IS NOT INITIAL .
    lv_fullpath = iv_save_as .

    CALL FUNCTION &apos;SCMS_XSTRING_TO_BINARY&apos;
      EXPORTING
        buffer        = ev_document_rawdata
      IMPORTING
        output_length = lv_document_size
      TABLES
        binary_tab    = lt_document_table.

    cl_gui_frontend_services=&gt;gui_download(
      EXPORTING bin_filesize = lv_document_size
                filename     = lv_fullpath
                filetype     = &apos;BIN&apos;
      CHANGING  data_tab     = lt_document_table
      EXCEPTIONS OTHERS      = 24 ).
    IF sy-subrc NE 0 .
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
         RAISING process_terminated .
    ENDIF .
  ENDIF .

* download on application server (if required)
  IF iv_save_as_appserver IS NOT INITIAL .
    lv_fullpath = iv_save_as_appserver .

    DELETE DATASET lv_fullpath .
    OPEN DATASET lv_fullpath FOR OUTPUT IN BINARY MODE MESSAGE lv_message .
    IF sy-subrc NE 0 .
      MESSAGE e000(lp) WITH `OPEN DATASET ERROR:` lv_message
      RAISING process_terminated .
    ENDIF .
    TRANSFER ev_document_rawdata TO lv_fullpath .
    CLOSE DATASET lv_fullpath .
  ENDIF .</fm_source_new>
    <functionModuleDocumentation/>
   </functionmodule>
   <functionmodule NAME="ZXLWB_WORKBENCH" STEXT="Forms design tool">
    <importing PARAMETER="IV_FORMNAME" OPTIONAL="X" REFERENCE="X" TYP="ANY"/>
    <importing PARAMETER="IV_ACTION" REFERENCE="X" TYP="ANY"/>
    <exceptions EXCEPTION="PROCESS_TERMINATED"/>
    <documentation PARAMETER="IV_FORMNAME" KIND="P" INDEX=" 001"/>
    <documentation PARAMETER="IV_ACTION" KIND="P" INDEX=" 002"/>
    <documentation PARAMETER="PROCESS_TERMINATED" KIND="X" INDEX=" 003"/>
    <fm_source_new>*=======================================================================
*=======================================================================
* Copyright 2016 Igor Borodin
* Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*     http://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*=======================================================================
*=======================================================================
*
* XLSX-Workbench(XLWB) components                         [Version 3.03]
* Documentation is available at:
*                             https://sites.google.com/site/sapxlwb/home
*=======================================================================
* Forms design tool starter
*=======================================================================


  IF gr_workbench IS BOUND .
    gr_workbench-&gt;free( ) .
    FREE gr_workbench .
  ENDIF .
  CLEAR gv_mode .

  CREATE OBJECT gr_workbench
    EXPORTING
      iv_formname        = iv_formname
      iv_action          = iv_action
    EXCEPTIONS
      process_terminated = 1.
  IF sy-subrc NE 0 .
    RAISE process_terminated .
  ENDIF .

  CASE iv_action .
    WHEN lcl_workbench=&gt;c_action-edit
      OR lcl_workbench=&gt;c_action-create
      OR lcl_workbench=&gt;c_action-crea_t .

      gv_mode = c_mode-workbench .
      CALL SCREEN 0100 .
  ENDCASE .

  IF gr_workbench IS BOUND .
    gr_workbench-&gt;free( ) .
    FREE gr_workbench .
  ENDIF .
  CLEAR gv_mode .</fm_source_new>
    <functionModuleDocumentation/>
   </functionmodule>
  </functionmodules>
 </FUGR>
 <PROG NAME="ZXLWB" VARCL="X" SUBC="1" RSTAT="K" RMAND="001" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="114" ENTRY="Edit" LENGTH="132 "/>
    <textElement ID="I" KEY="115" ENTRY="Create" LENGTH="132 "/>
    <textElement ID="I" KEY="116" ENTRY="Tmpl." LENGTH="132 "/>
    <textElement ID="I" KEY="117" ENTRY="Copy" LENGTH="132 "/>
    <textElement ID="I" KEY="118" ENTRY="Delete" LENGTH="132 "/>
    <textElement ID="I" KEY="206" ENTRY="Presets" LENGTH="132 "/>
    <textElement ID="I" KEY="210" ENTRY="Import" LENGTH="132 "/>
    <textElement ID="I" KEY="211" ENTRY="Export" LENGTH="132 "/>
    <textElement ID="I" KEY="212" ENTRY="Help" LENGTH="132 "/>
    <textElement ID="I" KEY="219" ENTRY="Form name" LENGTH="132 "/>
    <textElement ID="I" KEY="348" ENTRY="Data validation" LENGTH="15 "/>
    <textElement ID="R" ENTRY="XLSX Workbench initial screen" LENGTH="29 "/>
   </language>
   <language SPRAS="R">
    <textElement ID="I" KEY="114" ENTRY="ÐÐ·Ð¼ÐµÐ½Ð¸ÑÑ" LENGTH="132 "/>
    <textElement ID="I" KEY="115" ENTRY="Ð¡Ð¾Ð·Ð´Ð°ÑÑ" LENGTH="132 "/>
    <textElement ID="I" KEY="116" ENTRY="Ð¨Ð°Ð±Ð»." LENGTH="132 "/>
    <textElement ID="I" KEY="117" ENTRY="Ð¡ÐºÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°ÑÑ" LENGTH="132 "/>
    <textElement ID="I" KEY="118" ENTRY="Ð£Ð´Ð°Ð»Ð¸ÑÑ" LENGTH="132 "/>
    <textElement ID="I" KEY="206" ENTRY="ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸" LENGTH="132 "/>
    <textElement ID="I" KEY="210" ENTRY="ÐÐ¼Ð¿Ð¾ÑÑ" LENGTH="132 "/>
    <textElement ID="I" KEY="211" ENTRY="Ð­ÐºÑÐ¿Ð¾ÑÑ" LENGTH="132 "/>
    <textElement ID="I" KEY="212" ENTRY="Ð¡Ð¿ÑÐ°Ð²ÐºÐ°" LENGTH="132 "/>
    <textElement ID="I" KEY="219" ENTRY="ÐÐ°Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ðµ ÑÐ¾ÑÐ¼ÑÐ»ÑÑÐ°" LENGTH="132 "/>
    <textElement ID="R" ENTRY="XLSX Workbench Ð½Ð°ÑÐ°Ð»ÑÐ½ÑÐ¹ ÑÐºÑÐ°Ð½" LENGTH="70 "/>
   </language>
  </textPool>
  <programDocumentation/>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZXLWB
*&amp;
*=======================================================================
*=======================================================================
* Copyright 2016 Igor Borodin
* Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*     http://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*=======================================================================
*=======================================================================
*
* XLSX-Workbench(XLWB) components                         [Version 4.00]
* Documentation is available at:
*                             https://sites.google.com/site/sapxlwb/home
*=======================================================================
* Forms design tool starter
*=======================================================================

REPORT  zxlwb .

*======================================================================
*======================================================================
* D A T A    D E C L A R A T I O N
*======================================================================
*======================================================================
TYPE-POOLS:
  icon ,
  abap .
TABLES:
  sscrfields .
DATA:
  gv_action         TYPE sy-ucomm ,
  gs_dynpread       TYPE dynpread ,
  gt_dynpread       TYPE STANDARD TABLE OF dynpread ,
  gv_repid          TYPE syrepid VALUE sy-repid .

INCLUDE zxlwb_include .


*======================================================================
*======================================================================
* S E L E C T I O N   S C R E E N
*======================================================================
*======================================================================
SELECTION-SCREEN BEGIN OF BLOCK bl1 WITH FRAME TITLE cm_ttl  .

SELECTION-SCREEN BEGIN OF LINE .
SELECTION-SCREEN COMMENT 1(23) cm_form FOR FIELD pv_form .
PARAMETERS pv_form TYPE lvc_fname MEMORY ID zxlwb_formname .
SELECTION-SCREEN END   OF LINE .

SELECTION-SCREEN SKIP .

SELECTION-SCREEN BEGIN OF LINE .
SELECTION-SCREEN PUSHBUTTON  1(13) import USER-COMMAND import .
SELECTION-SCREEN PUSHBUTTON 25(20) edit   USER-COMMAND edit .
SELECTION-SCREEN END   OF LINE .

SELECTION-SCREEN BEGIN OF LINE .
SELECTION-SCREEN PUSHBUTTON  1(13) export USER-COMMAND export .
SELECTION-SCREEN PUSHBUTTON 25(20) create USER-COMMAND create .
SELECTION-SCREEN PUSHBUTTON 47(8)  crea_t USER-COMMAND crea_t .
SELECTION-SCREEN END   OF LINE .

SELECTION-SCREEN BEGIN OF LINE .
SELECTION-SCREEN PUSHBUTTON  1(13) preset USER-COMMAND preset .
SELECTION-SCREEN PUSHBUTTON 25(20) copy   USER-COMMAND copy .
SELECTION-SCREEN END   OF LINE .

SELECTION-SCREEN BEGIN OF LINE .
SELECTION-SCREEN PUSHBUTTON  1(13) help   USER-COMMAND help .
SELECTION-SCREEN PUSHBUTTON 25(20) delete USER-COMMAND delete .
SELECTION-SCREEN END   OF LINE .

SELECTION-SCREEN END   OF BLOCK bl1 .



*======================================================================
*======================================================================
* E V E N T S
*======================================================================
*======================================================================

*======================================================================
INITIALIZATION .
*======================================================================
  cm_ttl  = lcl_workbench=&gt;v_title .
  cm_form = lcl_workbench=&gt;v_text-t219 .                              &quot; text: Form name
  CONCATENATE:
  icon_change               lcl_workbench=&gt;v_text-t114  INTO edit   , &quot; text: Edit
  icon_create               lcl_workbench=&gt;v_text-t115  INTO create , &quot; text: Create
  icon_linked_document      lcl_workbench=&gt;v_text-t116  INTO crea_t , &quot; text: Tmpl.
  icon_copy_object          lcl_workbench=&gt;v_text-t117  INTO copy   , &quot; text: Copy
  icon_delete               lcl_workbench=&gt;v_text-t118  INTO delete , &quot; text: Delete
  icon_import               lcl_workbench=&gt;v_text-t210  INTO import , &quot; text: Import
  icon_export               lcl_workbench=&gt;v_text-t211  INTO export , &quot; text: Export
  icon_system_extended_help lcl_workbench=&gt;v_text-t212  INTO help   , &quot; text: Help
  icon_tools                lcl_workbench=&gt;v_text-t206  INTO preset . &quot; text: Presets

  DATA  gt_exclude TYPE TABLE OF sy-ucomm.
  CLEAR gt_exclude[] .
  APPEND  &apos;ONLI&apos; TO gt_exclude.
  APPEND  &apos;PRIN&apos; TO gt_exclude.
  APPEND  &apos;SPOS&apos; TO gt_exclude.
  APPEND  &apos;NONE&apos; TO gt_exclude.
  CALL FUNCTION &apos;RS_SET_SELSCREEN_STATUS&apos;
    EXPORTING
      p_status  = space
    TABLES
      p_exclude = gt_exclude.

  CALL FUNCTION &apos;SAPGUI_SET_FUNCTIONCODE&apos;
    EXCEPTIONS
      OTHERS = 0.


*======================================================================
AT SELECTION-SCREEN OUTPUT .
*======================================================================
  LOOP AT SCREEN .
    IF  screen-name EQ &apos;CREA_T&apos;
    AND lcl_workbench=&gt;s_presets_dt-popup_im IS INITIAL .
      screen-active = 0 .
      MODIFY SCREEN .
    ENDIF .
  ENDLOOP .


*======================================================================
AT SELECTION-SCREEN .
*======================================================================
  CHECK sy-ucomm IS NOT INITIAL .

  CASE sy-ucomm .
    WHEN &apos;EDIT&apos;   . gv_action = lcl_workbench=&gt;c_action-edit .
    WHEN &apos;CREA&apos;   . gv_action = lcl_workbench=&gt;c_action-create .
    WHEN &apos;CREATE&apos; . gv_action = lcl_workbench=&gt;c_action-create .
    WHEN &apos;CREA_T&apos; . gv_action = lcl_workbench=&gt;c_action-crea_t .
    WHEN &apos;COPY&apos;   . gv_action = lcl_workbench=&gt;c_action-copy .
    WHEN &apos;DELETE&apos; . gv_action = lcl_workbench=&gt;c_action-delete .
    WHEN &apos;IMPORT&apos; . gv_action = lcl_workbench=&gt;c_action-import .
    WHEN &apos;EXPORT&apos; . gv_action = lcl_workbench=&gt;c_action-export .
    WHEN &apos;HELP&apos;   . gv_action = lcl_workbench=&gt;c_action-help .
    WHEN &apos;PRESET&apos; . gv_action = lcl_workbench=&gt;c_action-preset .
    WHEN &apos;PRESE2&apos; . gv_action = lcl_workbench=&gt;c_action-prese2 .
    WHEN OTHERS   . EXIT .
  ENDCASE .

  CALL FUNCTION &apos;ZXLWB_WORKBENCH&apos;
    EXPORTING
      iv_formname        = pv_form
      iv_action          = gv_action
    EXCEPTIONS
      process_terminated = 1
      OTHERS             = 2.
  IF sy-subrc NE 0 .
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
  ENDIF .


*======================================================================
AT SELECTION-SCREEN ON VALUE-REQUEST FOR pv_form .
*======================================================================
  CLEAR gt_dynpread .
  CLEAR gs_dynpread .
  gs_dynpread-fieldname = &apos;PV_FORM&apos; .
  APPEND gs_dynpread TO gt_dynpread .

  CALL FUNCTION &apos;DYNP_VALUES_READ&apos;
    EXPORTING
      dyname     = sy-repid
      dynumb     = sy-dynnr
    TABLES
      dynpfields = gt_dynpread
    EXCEPTIONS
      OTHERS     = 8.
  CHECK sy-subrc EQ 0.
  READ TABLE gt_dynpread INTO gs_dynpread INDEX 1 .
  CHECK sy-subrc EQ 0 .
  CATCH SYSTEM-EXCEPTIONS OTHERS = 0 .
    pv_form = gs_dynpread-fieldvalue .
  ENDCATCH .

  lcl_workbench=&gt;popup_formname_f4( CHANGING cv_formname = pv_form ) .</source>
 </PROG>
</nugget>